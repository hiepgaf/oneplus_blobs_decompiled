package com.android.server.am;

import android.app.ActivityManager;
import android.app.ActivityManager.AppBootMode;
import android.app.ActivityManager.AppControlMode;
import android.app.ActivityManager.HighPowerApp;
import android.app.ActivityManager.MemoryInfo;
import android.app.ActivityManager.ProcessErrorStateInfo;
import android.app.ActivityManager.RecentTaskInfo;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.ActivityManager.RunningServiceInfo;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.ActivityManager.StackId;
import android.app.ActivityManager.TaskDescription;
import android.app.ActivityManager.TaskThumbnail;
import android.app.ActivityManager.TaskThumbnailInfo;
import android.app.ActivityManagerInternal;
import android.app.ActivityManagerInternal.SleepToken;
import android.app.ActivityManagerNative;
import android.app.ActivityOptions;
import android.app.ActivityThread;
import android.app.AlertDialog;
import android.app.AppGlobals;
import android.app.ApplicationErrorReport.CrashInfo;
import android.app.ApplicationThreadNative;
import android.app.BroadcastOptions;
import android.app.Dialog;
import android.app.IActivityContainer;
import android.app.IActivityContainerCallback;
import android.app.IActivityController;
import android.app.IActivityManager.ContentProviderHolder;
import android.app.IActivityManager.WaitResult;
import android.app.IAppTask;
import android.app.IAppTask.Stub;
import android.app.IApplicationThread;
import android.app.IInstrumentationWatcher;
import android.app.INotificationManager;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidObserver;
import android.app.IUserSwitchObserver;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProfilerInfo;
import android.app.admin.DevicePolicyManager;
import android.app.assist.AssistContent;
import android.app.assist.AssistStructure;
import android.app.backup.IBackupManager;
import android.app.backup.IBackupManager.Stub;
import android.app.usage.UsageStatsManagerInternal;
import android.content.BroadcastReceiver;
import android.content.ClipData;
import android.content.ClipData.Item;
import android.content.ComponentName;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IContentProvider;
import android.content.IIntentReceiver;
import android.content.IIntentReceiver.Stub;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentSender;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.ConfigurationInfo;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageDataObserver.Stub;
import android.content.pm.IPackageManager;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.PackageManagerInternal;
import android.content.pm.ParceledListSlice;
import android.content.pm.PathPermission;
import android.content.pm.PermissionInfo;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.UserInfo;
import android.content.res.AssetManager;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.ProxyInfo;
import android.net.Uri;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.Debug.MemoryInfo;
import android.os.DropBoxManager;
import android.os.Environment;
import android.os.FactoryTest;
import android.os.FileObserver;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.IBinder.DeathRecipient;
import android.os.IDeviceIdleController;
import android.os.IPermissionController.Stub;
import android.os.IProcessInfoService.Stub;
import android.os.IProgressListener;
import android.os.LocaleList;
import android.os.Looper;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.os.PatternMatcher;
import android.os.PersistableBundle;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.PowerManagerInternal;
import android.os.Process;
import android.os.Process.ProcessStartResult;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.StrictMode.ViolationInfo;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.TransactionTooLargeException;
import android.os.UpdateLock;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.WorkSource;
import android.os.storage.MountServiceInternal;
import android.os.storage.StorageManager;
import android.provider.Settings;
import android.provider.Settings.Global;
import android.provider.Settings.Secure;
import android.provider.Settings.SettingNotFoundException;
import android.provider.Settings.System;
import android.service.voice.IVoiceInteractionSession;
import android.service.voice.VoiceInteractionManagerInternal;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.AtomicFile;
import android.util.BoostFramework;
import android.util.DebugUtils;
import android.util.DisplayMetrics;
import android.util.EventLog;
import android.util.Log;
import android.util.OpFeatures;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.TimeUtils;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.view.WindowManagerPolicy.PointerEventListener;
import android.widget.TextView;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.app.ActivityTrigger;
import com.android.internal.app.DumpHeapActivity;
import com.android.internal.app.IAppOpsCallback.Stub;
import com.android.internal.app.IAppOpsService;
import com.android.internal.app.IVoiceInteractor;
import com.android.internal.app.ProcessMap;
import com.android.internal.app.procstats.ProcessState;
import com.android.internal.app.procstats.ProcessStats;
import com.android.internal.app.procstats.ProcessStats.PackageState;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BatteryStatsImpl;
import com.android.internal.os.BatteryStatsImpl.BatteryCallback;
import com.android.internal.os.BatteryStatsImpl.Uid.Pkg;
import com.android.internal.os.BatteryStatsImpl.Uid.Proc;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.ProcessCpuTracker.FilterStats;
import com.android.internal.os.ProcessCpuTracker.Stats;
import com.android.internal.os.TransferPipe;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.FastXmlSerializer;
import com.android.internal.util.MemInfoReader;
import com.android.internal.util.Preconditions;
import com.android.internal.util.XmlUtils;
import com.android.server.AppOpsService;
import com.android.server.AttributeCache;
import com.android.server.DeviceIdleController.LocalService;
import com.android.server.IntentResolver;
import com.android.server.LocalServices;
import com.android.server.ServiceThread;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.UiThread;
import com.android.server.Watchdog;
import com.android.server.Watchdog.Monitor;
import com.android.server.firewall.IntentFirewall;
import com.android.server.firewall.IntentFirewall.AMSInterface;
import com.android.server.pm.Installer;
import com.android.server.statusbar.StatusBarManagerInternal;
import com.android.server.vr.VrManagerInternal;
import com.android.server.wm.WindowManagerService;
import com.google.android.collect.Lists;
import com.google.android.collect.Maps;
import com.oem.os.IOemExService;
import com.oneplus.config.ConfigGrabber;
import com.oneplus.config.ConfigObserver;
import com.oneplus.config.ConfigObserver.ConfigUpdater;
import com.qualcomm.qcnvitems.QcNvItems;
import dalvik.system.VMRuntime;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.ref.WeakReference;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import libcore.util.EmptyArray;
import org.json.JSONArray;
import org.xmlpull.v1.XmlSerializer;

public final class ActivityManagerService
  extends ActivityManagerNative
  implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback
{
  private static final String ACTION_POWER_OFF_ALARM = "org.codeaurora.alarm.action.POWER_OFF_ALARM";
  public static final String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
  static final int ALLOW_FULL_ONLY = 2;
  static final int ALLOW_NON_FULL = 0;
  static final int ALLOW_NON_FULL_IN_PROFILE = 1;
  static final boolean ANIMATE = true;
  static final int ANIMATION_SCALE = 3;
  private static final int APPCONTROL_PKG_BLACKLIST = 0;
  private static final int APPCONTROL_PKG_WHITELIST = 1;
  static final int APP_BOOST_DEACTIVATE_MSG = 58;
  static final int APP_BOOST_MESSAGE_DELAY = 3000;
  static final int APP_BOOST_TIMEOUT = 2500;
  static final long APP_SWITCH_DELAY_TIME = 5000L;
  private static final String ATTR_CREATED_TIME = "createdTime";
  private static final String ATTR_MODE_FLAGS = "modeFlags";
  private static final String ATTR_PREFIX = "prefix";
  private static final String ATTR_SOURCE_PKG = "sourcePkg";
  private static final String ATTR_SOURCE_USER_ID = "sourceUserId";
  private static final String ATTR_TARGET_PKG = "targetPkg";
  private static final String ATTR_TARGET_USER_ID = "targetUserId";
  private static final String ATTR_URI = "uri";
  private static final String ATTR_USER_HANDLE = "userHandle";
  static final int BACKGROUND_SETTLE_TIME = 60000;
  static final long BATTERY_STATS_TIME = 1800000L;
  static final int BROADCAST_BG_TIMEOUT = 60000;
  static final int BROADCAST_FG_TIMEOUT = 10000;
  static final int CANCEL_HEAVY_NOTIFICATION_MSG = 25;
  static final int CHECK_EXCESSIVE_WAKE_LOCKS_MSG = 27;
  static final int CLEAR_DNS_CACHE_MSG = 28;
  static final int COLLECT_PSS_BG_MSG = 1;
  static final String CONFIRM_CLASS_NAME = "com.oneplus.applocker.ConfirmDeviceCredentialActivity";
  static final String CONFIRM_PACKAGE_NAME = "com.oneplus.applocker";
  static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT = 10000;
  static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 59;
  static final int CONTENT_PROVIDER_RETAIN_TIME = 20000;
  static final int CONTENT_PROVIDER_WAIT_TIMEOUT = 20000;
  static final int CONTINUE_USER_SWITCH_MSG = 35;
  static int CPU_MIN_CHECK_DURATION = 0;
  public static boolean DEBUG_ONEPLUS = false;
  static final int DELETE_DUMPHEAP_MSG = 52;
  static final int DISMISS_DIALOG_UI_MSG = 48;
  static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
  static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
  static final int DISPATCH_UIDS_CHANGED_UI_MSG = 54;
  static final int DO_PENDING_ACTIVITY_LAUNCHES_MSG = 21;
  static final int DROPBOX_MAX_SIZE = 196608;
  static final long[] DUMP_MEM_BUCKETS;
  static final int[] DUMP_MEM_OOM_ADJ;
  static final String[] DUMP_MEM_OOM_COMPACT_LABEL;
  static final String[] DUMP_MEM_OOM_LABEL;
  private static String EMBRYO_CONFIG_NAME;
  static final String[] EMPTY_STRING_ARRAY;
  static final int ENTER_ANIMATION_COMPLETE_MSG = 44;
  static final int FINALIZE_PENDING_INTENT_MSG = 23;
  static final int FINISH_BOOTING_MSG = 45;
  static final int FIRST_ACTIVITY_STACK_MSG = 100;
  static final int FIRST_BROADCAST_QUEUE_MSG = 200;
  static final int FIRST_COMPAT_MODE_MSG = 300;
  static final int FIRST_SUPERVISOR_STACK_MSG = 100;
  static final int FOREGROUND_PROFILE_CHANGED_MSG = 53;
  public static final float FULLSCREEN_SCREENSHOT_SCALE = 0.6F;
  static final int FULL_PSS_LOWERED_INTERVAL = 120000;
  static final int FULL_PSS_MIN_INTERVAL = 600000;
  static final int GC_BACKGROUND_PROCESSES_MSG = 5;
  static final int GC_MIN_INTERVAL = 60000;
  static final int GC_TIMEOUT = 5000;
  static final int GET_ONLINECONFIG = 2;
  static final int HANDLE_UNTRACKED_PROCESS_DIE = 1118;
  static final int IDLE_UIDS_MSG = 60;
  static final int IMMERSIVE_MODE_LOCK_MSG = 37;
  static final int INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT = 60000;
  private static final String INTENT_REMOTE_BUGREPORT_FINISHED = "android.intent.action.REMOTE_BUGREPORT_FINISHED";
  static final boolean IS_APP_LOCKER_ENABLED;
  private static final boolean IS_SCENE_MODES_FEATURED;
  static final boolean IS_USER_BUILD;
  static final int KEY_DISPATCHING_TIMEOUT = 5000;
  static final int KILL_APPLICATION_MSG = 22;
  private static final int KSM_SHARED = 0;
  private static final int KSM_SHARING = 1;
  private static final int KSM_UNSHARED = 2;
  private static final int KSM_VOLATILE = 3;
  static final int LOCK_SCREEN_HIDDEN = 0;
  static final int LOCK_SCREEN_LEAVING = 1;
  static final int LOCK_SCREEN_SHOWN = 2;
  static final int LOG_STACK_STATE = 62;
  private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
  static final int MAX_PERSISTED_URI_GRANTS = 128;
  private static final int MEMINFO_COMPACT_VERSION = 1;
  static final long MONITOR_CPU_MAX_TIME = 268435455L;
  static final long MONITOR_CPU_MIN_TIME = 5000L;
  static final boolean MONITOR_CPU_USAGE = true;
  static final boolean MONITOR_THREAD_CPU_USAGE = false;
  static final int MY_PID;
  static final int NETWORK_OPTS = 2;
  static final int NETWORK_OPTS_CHECK_MSG = 71;
  static final int NOTIFY_ACTIVITY_DISMISSING_DOCKED_STACK_MSG = 68;
  static final int NOTIFY_ACTIVITY_PINNED_LISTENERS_MSG = 64;
  static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 50;
  static final int NOTIFY_FORCED_RESIZABLE_MSG = 67;
  static final int NOTIFY_PINNED_ACTIVITY_RESTART_ATTEMPT_LISTENERS_MSG = 65;
  static final int NOTIFY_PINNED_STACK_ANIMATION_ENDED_LISTENERS_MSG = 66;
  static final int NOTIFY_TASK_STACK_CHANGE_LISTENERS_DELAY = 100;
  static final int NOTIFY_TASK_STACK_CHANGE_LISTENERS_MSG = 49;
  private static int NUMBER_RESTART_PROCESS = 0;
  private static final int OEM_DOZE_CLOSE = 0;
  private static final String OEM_DOZE_MODE_POLICY_KEY = "doze_mode_policy";
  private static final int OEM_DOZE_OPEN = 1;
  static final String OP_APP_LOCKER = "OP_APP_LOCKER";
  static final String OP_APP_LOCKER_BLOCKING_UID = "OP_APP_LOCKER_BLOCKING_UID";
  static final String OP_APP_LOCKER_COMPONENT = "OP_APP_LOCKER_COMPONENT";
  static final String OP_APP_LOCKER_PACKAGE = "OP_APP_LOCKER_PACKAGE";
  static final int PENDING_ASSIST_EXTRAS_LONG_TIMEOUT = 2000;
  static final int PENDING_ASSIST_EXTRAS_TIMEOUT = 500;
  private static final int PERSISTENT_MASK = 9;
  static final int PERSIST_CPU_TRACKER = 3;
  static final int PERSIST_URI_GRANTS_MSG = 38;
  static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 51;
  static final int POST_HEAVY_NOTIFICATION_MSG = 24;
  static final int POWER_CHECK_DELAY;
  private static final int[] PROCESS_STATE_STATS_FORMAT;
  static final int PROC_START_TIMEOUT = 10000;
  static final int PROC_START_TIMEOUT_MSG = 20;
  static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
  private static final boolean REMOVE_FROM_RECENTS = true;
  static final int REPORT_MEM_USAGE_MSG = 33;
  static final int REPORT_TIME_TRACKER_MSG = 55;
  static final int REPORT_USER_SWITCH_COMPLETE_MSG = 56;
  static final int REPORT_USER_SWITCH_MSG = 34;
  static final int REQUEST_ALL_PSS_MSG = 39;
  static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
  static final int RESET_IGNORED_ANR_MSG = 54088;
  static final int RESET_IGNORED_ANR_TIMEOUT = 20000;
  static final int SEND_LOCALE_TO_MOUNT_DAEMON_MSG = 47;
  static final int SERVICE_TIMEOUT_MSG = 12;
  static final int SERVICE_USAGE_INTERACTION_TIME = 1800000;
  static final int SHOW_COMPAT_MODE_DIALOG_UI_MSG = 30;
  static final int SHOW_ERROR_UI_MSG = 1;
  static final int SHOW_FACTORY_ERROR_UI_MSG = 3;
  static final int SHOW_FINGERPRINT_ERROR_UI_MSG = 15;
  static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
  static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
  static final int SHOW_UID_ERROR_UI_MSG = 14;
  static final int SHOW_UNSUPPORTED_DISPLAY_SIZE_DIALOG_MSG = 70;
  static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 57;
  static final int START_PROCESS = 1;
  static final int START_PROFILES_MSG = 40;
  static final int START_USER_SWITCH_UI_MSG = 46;
  static final int STOCK_PM_FLAGS = 1024;
  static final String SYSTEM_DEBUGGABLE = "ro.debuggable";
  static final int SYSTEM_USER_CURRENT_MSG = 43;
  static final int SYSTEM_USER_START_MSG = 42;
  static final int SYSTEM_USER_UNLOCK_MSG = 61;
  private static final String TAG = "ActivityManager";
  private static final String TAG_BACKUP = TAG + ActivityManagerDebugConfig.POSTFIX_BACKUP;
  private static final String TAG_BROADCAST = TAG + ActivityManagerDebugConfig.POSTFIX_BROADCAST;
  private static final String TAG_CLEANUP = TAG + ActivityManagerDebugConfig.POSTFIX_CLEANUP;
  private static final String TAG_CONFIGURATION = TAG + ActivityManagerDebugConfig.POSTFIX_CONFIGURATION;
  private static final String TAG_FOCUS = TAG + ActivityManagerDebugConfig.POSTFIX_FOCUS;
  private static final String TAG_IMMERSIVE = TAG + ActivityManagerDebugConfig.POSTFIX_IMMERSIVE;
  private static final String TAG_LOCKSCREEN = TAG + ActivityManagerDebugConfig.POSTFIX_LOCKSCREEN;
  private static final String TAG_LOCKTASK = TAG + ActivityManagerDebugConfig.POSTFIX_LOCKTASK;
  private static final String TAG_LRU = TAG + ActivityManagerDebugConfig.POSTFIX_LRU;
  private static final String TAG_MU = TAG + "_MU";
  private static final String TAG_OOM_ADJ = TAG + ActivityManagerDebugConfig.POSTFIX_OOM_ADJ;
  private static final String TAG_POWER = TAG + ActivityManagerDebugConfig.POSTFIX_POWER;
  private static final String TAG_PROCESSES;
  private static final String TAG_PROCESS_OBSERVERS = TAG + ActivityManagerDebugConfig.POSTFIX_PROCESS_OBSERVERS;
  private static final String TAG_PROVIDER;
  private static final String TAG_PSS;
  private static final String TAG_RECENTS;
  private static final String TAG_SERVICE;
  private static final String TAG_STACK;
  private static final String TAG_SWITCH;
  private static final String TAG_UID_OBSERVERS;
  private static final String TAG_URI_GRANT = "uri-grant";
  private static final String TAG_URI_GRANTS = "uri-grants";
  private static final String TAG_URI_PERMISSION;
  private static final String TAG_VISIBILITY;
  private static final String TAG_VISIBLE_BEHIND;
  static final boolean TAKE_FULLSCREEN_SCREENSHOTS = true;
  public static final long THRESHOLD_LOW_MEMORY = 1048576L;
  private static final int TURN_OFF_DEVICE_CHECK_TIME = 180000;
  private static final int TURN_OFF_DEVICE_TIMEOUT = 1800000;
  static final int UPDATE_CONFIGURATION_MSG = 4;
  static final int UPDATE_HTTP_PROXY_MSG = 29;
  static final int UPDATE_TIME = 41;
  static final int UPDATE_TIME_ZONE = 13;
  static final long USAGE_STATS_INTERACTION_INTERVAL = 86400000L;
  static final int USER_SWITCH_TIMEOUT_MSG = 36;
  static final boolean VALIDATE_UID_STATES = true;
  static final int VR_MODE_APPLY_IF_NEEDED_MSG = 69;
  static final int VR_MODE_CHANGE_MSG = 63;
  static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;
  static final int WAKE_LOCK_MIN_CHECK_DURATION;
  static final ActivityTrigger mActivityTrigger;
  static final boolean mEnableNetOpts;
  static String mIgnoredAnrProcess;
  private static boolean mWalFlag;
  private static final ThreadLocal<Identity> sCallerIdentity;
  public static BoostFramework sFreqAggr;
  public static BoostFramework sFreqAggr_init;
  public static boolean sIsFreqAggrBoostSet;
  public static boolean sIsLaunchBoostv2_set;
  static KillHandler sKillHandler;
  static ServiceThread sKillThread;
  public static BoostFramework sPerfBoost_v2;
  private static final ArrayList<String> sRestartWhiteList;
  static ThreadLocal<PriorityState> sThreadPriorityState;
  final int GL_ES_VERSION;
  private long KILL_HIGH_CONSUMPT_TIMEOUT = 120000L;
  private QcNvItems items = null;
  private int[] lBoost_v2_ParamVal;
  private int lBoost_v2_TimeOut = 0;
  private int[] lFreqAggr_Init_ParamVal;
  private int[] lFreqAggr_ParamVal;
  private int lFreqAggr_TimeOut = 0;
  ProcessChangeItem[] mActiveProcessChanges = new ProcessChangeItem[5];
  int mActiveType = -1;
  UidRecord.ChangeItem[] mActiveUidChanges = new UidRecord.ChangeItem[5];
  final SparseArray<UidRecord> mActiveUids = new SparseArray();
  final ActivityStarter mActivityStarter;
  int mAdjSeq = 0;
  boolean mAllowLowerMemLevel = false;
  private final HashSet<Integer> mAlreadyLoggedViolatedStacks = new HashSet();
  boolean mAlwaysFinishActivities = false;
  HashMap<String, IBinder> mAppBindArgs;
  final AppErrors mAppErrors;
  ArrayList<String> mAppLockerWhiteList;
  final AppOpsService mAppOpsService;
  long mAppSwitchesAllowedTime;
  final SparseArray<ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>>> mAssociations = new SparseArray();
  private PowerManager.WakeLock mAutoShutdownWakelock = null;
  boolean mAutoStopProfiler = false;
  final ArrayList<ProcessChangeItem> mAvailProcessChanges = new ArrayList();
  final ArrayList<UidRecord.ChangeItem> mAvailUidChanges = new ArrayList();
  int mBServiceAppThreshold = SystemProperties.getInt("ro.sys.fw.bservice_limit", 5);
  String mBackupAppName = null;
  BackupRecord mBackupTarget = null;
  final BatteryStatsService mBatteryStatsService;
  BroadcastQueue mBgBroadcastQueue;
  final Handler mBgHandler = new Handler(BackgroundThread.getHandler().getLooper())
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      int i1 = 0;
      if (paramAnonymousMessage.obj != null)
      {
        boolean bool = ((Boolean)paramAnonymousMessage.obj).booleanValue();
        i1 = bool;
        if (ActivityManagerDebugConfig.DEBUG_PSS)
        {
          Slog.d(ActivityManagerService.-get3(), "COLLECT_PSS_BG_MSG  isDelay message");
          i1 = bool;
        }
      }
      switch (paramAnonymousMessage.what)
      {
      default: 
        return;
      case 1: 
        long l2 = SystemClock.uptimeMillis();
        long l1;
        int j;
        int i;
        int k;
        if (i1 == 0)
        {
          paramAnonymousMessage = null;
          for (;;)
          {
            synchronized (ActivityManagerService.this)
            {
              ActivityManagerService.boostPriorityForLockedSection();
              if (ActivityManagerService.this.mFullPssPending)
              {
                ActivityManagerService.this.mFullPssPending = false;
                paramAnonymousMessage = new MemInfoReader();
              }
              ActivityManagerService.resetPriorityAfterLockedSection();
              if (paramAnonymousMessage == null) {
                break;
              }
              ActivityManagerService.this.updateCpuStatsNow();
              l1 = 0L;
              synchronized (ActivityManagerService.this.mProcessCpuTracker)
              {
                ??? = ActivityManagerService.this.mProcessCpuTracker.getStats(new -void_handleMessage_android_os_Message_msg_LambdaImpl0());
                j = ((List)???).size();
                i = 0;
                if (i >= j) {}
              }
            }
            synchronized (ActivityManagerService.this.mPidsSelfLocked)
            {
              k = ActivityManagerService.this.mPidsSelfLocked.indexOfKey(((ProcessCpuTracker.Stats)((List)???).get(i)).pid);
              if (k >= 0)
              {
                i += 1;
                continue;
                paramAnonymousMessage = finally;
                ActivityManagerService.resetPriorityAfterLockedSection();
                throw paramAnonymousMessage;
                paramAnonymousMessage = finally;
                throw paramAnonymousMessage;
              }
              else
              {
                l1 += Debug.getPss(((ProcessCpuTracker.Stats)((List)???).get(i)).pid, null, null);
              }
            }
          }
        }
        for (;;)
        {
          long l3;
          synchronized (ActivityManagerService.this)
          {
            ActivityManagerService.boostPriorityForLockedSection();
            if (ActivityManagerDebugConfig.DEBUG_PSS) {
              Slog.d(ActivityManagerService.-get3(), "Collected native and kernel memory in " + (SystemClock.uptimeMillis() - l2) + "ms");
            }
            l3 = paramAnonymousMessage.getCachedSizeKb();
            long l4 = paramAnonymousMessage.getFreeSizeKb();
            long l5 = paramAnonymousMessage.getZramTotalSizeKb();
            long l6 = paramAnonymousMessage.getKernelUsedSizeKb();
            EventLogTags.writeAmMeminfo(1024L * l3, 1024L * l4, 1024L * l5, 1024L * l6, 1024L * l1);
            ActivityManagerService.this.mProcessStats.addSysMemUsageLocked(l3, l4, l5, l6, l1);
            ActivityManagerService.resetPriorityAfterLockedSection();
            i = 0;
            j = 0;
            ??? = new long[2];
            if (j >= 15)
            {
              paramAnonymousMessage = Message.obtain();
              paramAnonymousMessage.what = 1;
              paramAnonymousMessage.obj = Boolean.valueOf(true);
              ActivityManagerService.this.mBgHandler.sendMessageDelayed(paramAnonymousMessage, 15000L);
              if (ActivityManagerDebugConfig.DEBUG_PSS) {
                Slog.d(ActivityManagerService.-get3(), "COLLECT_PSS_BG_MSG delay getpss");
              }
              return;
            }
          }
          int n;
          synchronized (ActivityManagerService.this)
          {
            ActivityManagerService.boostPriorityForLockedSection();
            if (ActivityManagerService.this.mPendingPssProcesses.size() <= 0)
            {
              if ((ActivityManagerService.this.mTestPssMode) || (ActivityManagerDebugConfig.DEBUG_PSS)) {
                Slog.d(ActivityManagerService.-get3(), "Collected PSS of " + i + " processes in " + (SystemClock.uptimeMillis() - l2) + "ms");
              }
              ActivityManagerService.this.mPendingPssProcesses.clear();
              ActivityManagerService.resetPriorityAfterLockedSection();
              return;
            }
            paramAnonymousMessage = (ProcessRecord)ActivityManagerService.this.mPendingPssProcesses.remove(0);
            n = paramAnonymousMessage.pssProcState;
            l1 = paramAnonymousMessage.lastPssTime;
            if ((paramAnonymousMessage.thread != null) && (n == paramAnonymousMessage.setProcState) && (1000L + l1 < SystemClock.uptimeMillis()))
            {
              k = paramAnonymousMessage.pid;
              ActivityManagerService.resetPriorityAfterLockedSection();
              if (paramAnonymousMessage == null) {
                continue;
              }
              j += 1;
              l3 = Debug.getPss(k, (long[])???, null);
            }
          }
          synchronized (ActivityManagerService.this)
          {
            ActivityManagerService.boostPriorityForLockedSection();
            int m = i;
            if (l3 != 0L)
            {
              m = i;
              if (paramAnonymousMessage.thread != null)
              {
                m = i;
                if (paramAnonymousMessage.setProcState == n)
                {
                  m = i;
                  if (paramAnonymousMessage.pid == k)
                  {
                    m = i;
                    if (paramAnonymousMessage.lastPssTime == l1)
                    {
                      m = i + 1;
                      ActivityManagerService.this.recordPssSampleLocked(paramAnonymousMessage, n, l3, ???[0], ???[1], SystemClock.uptimeMillis());
                    }
                  }
                }
              }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            i = m;
            continue;
            paramAnonymousMessage = null;
            k = 0;
            break label678;
            paramAnonymousMessage = finally;
            ActivityManagerService.resetPriorityAfterLockedSection();
            throw paramAnonymousMessage;
          }
        }
      case 2: 
        label678:
        ActivityManagerService.this.mOHPD.forceUpdateOnlineConfigImmediately();
        paramAnonymousMessage = new ConfigGrabber(ActivityManagerService.this.mContext, ActivityManagerService.-get0());
        ActivityManagerService.-get7(ActivityManagerService.this).resolveConfig(paramAnonymousMessage.grabConfig());
        return;
      }
      Slog.d(ActivityManagerService.-get1(), "PERSIST_CPU_TRACKER");
      ProcessCpuTracker.tryPersistToDisk();
    }
  };
  private boolean mBinderTransactionTrackingEnabled = false;
  private long mBoostStartTime = 0L;
  @GuardedBy("this")
  boolean mBootAnimationComplete = false;
  boolean mBooted = false;
  @GuardedBy("this")
  boolean mBooting = false;
  final BroadcastQueue[] mBroadcastQueues = new BroadcastQueue[2];
  @GuardedBy("this")
  boolean mCallFinishBooting = false;
  @GuardedBy("this")
  boolean mCheckedForSetup = false;
  CompatModeDialog mCompatModeDialog;
  final CompatModePackages mCompatModePackages;
  Configuration mConfiguration = new Configuration();
  int mConfigurationSeq = 0;
  Intent mConfirmIntent;
  ResolveInfo mConfirmResolveInfo;
  ConnectivityManager mConnectivityManager = null;
  Context mContext;
  IActivityController mController = null;
  boolean mControllerIsAMonkey = false;
  CoreSettingsObserver mCoreSettingsObserver;
  private AppTimeTracker mCurAppTimeTracker;
  BroadcastStats mCurBroadcastStats;
  private String mCurResumedPackage = null;
  private int mCurResumedUid = -1;
  String mDebugApp = null;
  boolean mDebugTransient = false;
  Rect mDefaultPinnedStackBounds;
  private IDeviceIdleController mDeviceIdleService = null;
  String mDeviceOwnerName;
  boolean mDidAppSwitch;
  boolean mDidDexOpt;
  boolean mDoingSetFocusedActivity;
  private ConfigObserver mEmbryoConfigObserver;
  private IEmbryoManager mEmbryoManager = EmbryoManager.getInstance(this);
  boolean mEnableBServicePropagation = SystemProperties.getBoolean("ro.sys.fw.bservice_enable", false);
  volatile int mFactoryTest;
  BroadcastQueue mFgBroadcastQueue;
  ActivityRecord mFocusedActivity = null;
  FontScaleSettingObserver mFontScaleSettingObserver;
  boolean mForceResizableActivities;
  final ProcessMap<ArrayList<ProcessRecord>> mForegroundPackages = new ProcessMap();
  final SparseArray<ForegroundToken> mForegroundProcesses = new SparseArray();
  boolean mFullPssPending = false;
  float mFullscreenThumbnailScale;
  private final AtomicFile mGrantFile;
  @GuardedBy("this")
  private final SparseArray<ArrayMap<GrantUri, UriPermission>> mGrantedUriPermissions = new SparseArray();
  final MainHandler mHandler;
  final ServiceThread mHandlerThread;
  boolean mHasRecents;
  ProcessRecord mHeavyWeightProcess = null;
  private int mHighConsumptionAppPid = 0;
  private long mHighConsumptionTime = 0L;
  private boolean mHomeKilled = false;
  ProcessRecord mHomeProcess;
  private String mHomeProcessName = null;
  HashSet<Integer> mImportantUids = new HashSet();
  private boolean mInVrMode = false;
  private Installer mInstaller;
  final InstrumentationReporter mInstrumentationReporter = new InstrumentationReporter();
  public IntentFirewall mIntentFirewall;
  final HashMap<PendingIntentRecord.Key, WeakReference<PendingIntentRecord>> mIntentSenderRecords = new HashMap();
  private boolean mIsBoosted = false;
  private boolean mIsFreqAggrEnabled = false;
  private boolean mIsLaunchBoostv2_enabled = false;
  HashMap<String, IBinder> mIsolatedAppBindArgs;
  final SparseArray<ProcessRecord> mIsolatedProcesses = new SparseArray();
  boolean mKeyguardDone = true;
  ActivityInfo mLastAddedTaskActivity;
  ComponentName mLastAddedTaskComponent;
  int mLastAddedTaskUid;
  BroadcastStats mLastBroadcastStats;
  final AtomicLong mLastCpuTime = new AtomicLong(0L);
  private int mLastFocusedUserId;
  long mLastFullPssTime = SystemClock.uptimeMillis();
  long mLastIdleTime = SystemClock.uptimeMillis();
  HashSet<Integer> mLastImportantUids = new HashSet();
  private long mLastInputEvent = 0L;
  long mLastMemUsageReportTime = 0L;
  int mLastMemoryLevel = 0;
  int mLastNumProcesses;
  long mLastPowerCheckRealtime;
  long mLastPowerCheckUptime;
  long mLastWriteTime = 0L;
  @GuardedBy("this")
  boolean mLaunchWarningShown = false;
  final ArrayList<ContentProviderRecord> mLaunchingProviders = new ArrayList();
  boolean mLenientBackgroundCheck = false;
  DeviceIdleController.LocalService mLocalDeviceIdleController;
  PowerManagerInternal mLocalPowerManager;
  int mLockScreenShown = 0;
  SparseArray<String[]> mLockTaskPackages = new SparseArray();
  long mLowRamStartTime = 0L;
  long mLowRamTimeSinceLastIdle = 0L;
  int mLruProcessActivityStart = 0;
  int mLruProcessServiceStart = 0;
  final ArrayList<ProcessRecord> mLruProcesses = new ArrayList();
  int mLruSeq = 0;
  String mMemWatchDumpFile;
  int mMemWatchDumpPid;
  String mMemWatchDumpProcName;
  int mMemWatchDumpUid;
  final ProcessMap<Pair<Long, String>> mMemWatchProcesses = new ProcessMap();
  int mMinBServiceAgingTime = SystemProperties.getInt("ro.sys.fw.bservice_age", 5000);
  String mNativeDebuggingApp = null;
  Object mNetLock = new Object();
  int mNewNumAServiceProcs = 0;
  int mNewNumServiceProcs = 0;
  int mNextIsolatedProcessUid = 0;
  int mNumCachedHiddenProcs = 0;
  int mNumNonCachedProcs = 0;
  int mNumServiceProcs = 0;
  OnePlusHighPowerDetector mOHPD = null;
  private List<String> mOemBoostAppLaunchList;
  private IOemExService mOemExSvc;
  private List<String> mOemImportantProcessList;
  volatile boolean mOnBattery = false;
  OnePlusProcessManager mOnePlusProcessManager;
  String mOrigDebugApp = null;
  boolean mOrigWaitForDebugger = false;
  PackageManagerInternal mPackageManagerInt;
  ArrayList<String> mPassedPackageList;
  final ArrayList<PendingAssistExtras> mPendingAssistExtras = new ArrayList();
  final ArrayList<ProcessChangeItem> mPendingProcessChanges = new ArrayList();
  final ArrayList<ProcessRecord> mPendingPssProcesses = new ArrayList();
  final ArrayList<UidRecord.ChangeItem> mPendingUidChanges = new ArrayList();
  private IBinder mPermissionControlServiceBinderProxy;
  private IBinder mPermissionRequestServiceBinderProxy;
  final ArrayList<ProcessRecord> mPersistentStartingProcesses = new ArrayList();
  final SparseArray<ProcessRecord> mPidsSelfLocked = new SparseArray();
  private WindowManagerPolicy.PointerEventListener mPointerEventListener = new WindowManagerPolicy.PointerEventListener()
  {
    public void onPointerEvent(MotionEvent paramAnonymousMotionEvent)
    {
      if (ActivityManagerService.-get12(ActivityManagerService.this))
      {
        ActivityManagerService.this.mWindowManager.unregisterPointerEventListener(ActivityManagerService.-get11(ActivityManagerService.this));
        ActivityManagerService.-set3(ActivityManagerService.this, false);
      }
      if (ActivityManagerService.-get5(ActivityManagerService.this) != null) {
        ActivityManagerService.-get5(ActivityManagerService.this).release();
      }
      ActivityManagerService.this.mHandler.removeCallbacks(ActivityManagerService.-get17(ActivityManagerService.this));
    }
  };
  private boolean mPointerEventListenerRegistered = false;
  ProcessRecord mPreviousProcess;
  long mPreviousProcessVisibleTime;
  final AtomicBoolean mProcessCpuMutexFree = new AtomicBoolean(true);
  final Thread mProcessCpuThread;
  final ProcessCpuTracker mProcessCpuTracker = new ProcessCpuTracker(false);
  int mProcessLimit = ProcessList.MAX_CACHED_APPS;
  int mProcessLimitOverride = -1;
  final ProcessList mProcessList = new ProcessList();
  final ProcessMap<ProcessRecord> mProcessNames = new ProcessMap();
  final RemoteCallbackList<IProcessObserver> mProcessObservers = new RemoteCallbackList();
  private final long[] mProcessStateStatsLongs = new long[1];
  final ProcessStatsService mProcessStats;
  final ArrayList<ProcessRecord> mProcessesOnHold = new ArrayList();
  volatile boolean mProcessesReady = false;
  final ArrayList<ProcessRecord> mProcessesToGc = new ArrayList();
  String mProfileApp = null;
  ParcelFileDescriptor mProfileFd;
  String mProfileFile;
  ProcessRecord mProfileProc = null;
  int mProfileType = 0;
  final ProviderMap mProviderMap;
  final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver = new IntentResolver()
  {
    protected boolean allowFilterResult(BroadcastFilter paramAnonymousBroadcastFilter, List<BroadcastFilter> paramAnonymousList)
    {
      paramAnonymousBroadcastFilter = paramAnonymousBroadcastFilter.receiverList.receiver.asBinder();
      int i = paramAnonymousList.size() - 1;
      while (i >= 0)
      {
        if (((BroadcastFilter)paramAnonymousList.get(i)).receiverList.receiver.asBinder() == paramAnonymousBroadcastFilter) {
          return false;
        }
        i -= 1;
      }
      return true;
    }
    
    protected boolean isPackageForFilter(String paramAnonymousString, BroadcastFilter paramAnonymousBroadcastFilter)
    {
      return paramAnonymousString.equals(paramAnonymousBroadcastFilter.packageName);
    }
    
    protected BroadcastFilter[] newArray(int paramAnonymousInt)
    {
      return new BroadcastFilter[paramAnonymousInt];
    }
    
    protected BroadcastFilter newResult(BroadcastFilter paramAnonymousBroadcastFilter, int paramAnonymousInt1, int paramAnonymousInt2)
    {
      if ((paramAnonymousInt2 == -1) || (paramAnonymousBroadcastFilter.owningUserId == -1)) {}
      while (paramAnonymousInt2 == paramAnonymousBroadcastFilter.owningUserId) {
        return (BroadcastFilter)super.newResult(paramAnonymousBroadcastFilter, paramAnonymousInt1, paramAnonymousInt2);
      }
      return null;
    }
  };
  final RecentTasks mRecentTasks;
  final HashMap<IBinder, ReceiverList> mRegisteredReceivers = new HashMap();
  final ArrayList<ProcessRecord> mRemovedProcesses = new ArrayList();
  int mRequestHashCode;
  private RestartProcessManager mRestartProcessManager = new RestartProcessManager();
  private IVoiceInteractionSession mRunningVoice;
  boolean mSafeMode;
  int mSamplingInterval = 0;
  final ActiveServices mServices;
  private boolean mShowDialogs = true;
  boolean mShuttingDown = false;
  final ArrayList<ActivityManagerInternal.SleepToken> mSleepTokens = new ArrayList();
  private boolean mSleeping = false;
  final ActivityStackSupervisor mStackSupervisor;
  final SparseArray<ArrayMap<String, ArrayList<Intent>>> mStickyBroadcasts = new SparseArray();
  private final StringBuilder mStrictModeBuffer = new StringBuilder();
  final StringBuilder mStringBuilder = new StringBuilder(256);
  private String[] mSupportedSystemLocales = null;
  boolean mSupportsFreeformWindowManagement;
  boolean mSupportsLeanbackOnly;
  boolean mSupportsMultiWindow;
  boolean mSupportsPictureInPicture;
  boolean mSuppressResizeConfigChanges = false;
  volatile boolean mSystemReady = false;
  SystemServiceManager mSystemServiceManager;
  final ActivityThread mSystemThread;
  private final RemoteCallbackList<ITaskStackListener> mTaskStackListeners = new RemoteCallbackList();
  boolean mTestPssMode = false;
  int mThumbnailHeight;
  int mThumbnailWidth;
  final long[] mTmpLong = new long[2];
  String mTopAction = "android.intent.action.MAIN";
  ComponentName mTopComponent;
  String mTopData;
  int mTopProcessState = 2;
  String mTrackAllocationApp = null;
  boolean mTrackingAssociations;
  private Runnable mTurnOffScreenIfSetupIdle = new Runnable()
  {
    public void run()
    {
      int m = 0;
      int n = 0;
      int k = 0;
      i = m;
      j = n;
      for (;;)
      {
        try
        {
          if (ActivityManagerService.-wrap1(ActivityManagerService.this))
          {
            i = m;
            j = n;
            if (ActivityManagerService.-get12(ActivityManagerService.this))
            {
              i = m;
              j = n;
              ActivityManagerService.this.mWindowManager.unregisterPointerEventListener(ActivityManagerService.-get11(ActivityManagerService.this));
              i = m;
              j = n;
              ActivityManagerService.-set3(ActivityManagerService.this, false);
            }
            i = m;
            j = n;
            if (ActivityManagerService.-get5(ActivityManagerService.this) != null)
            {
              i = m;
              j = n;
              ActivityManagerService.-get5(ActivityManagerService.this).release();
            }
            if (0 != 0) {
              ActivityManagerService.this.mWindowManager.shutdown(false);
            }
            return;
          }
          i = m;
          j = n;
          if (SystemClock.elapsedRealtime() - ActivityManagerService.-get10(ActivityManagerService.this) >= 1800000L)
          {
            n = 1;
            int i1 = 1;
            m = 1;
            k = m;
            i = n;
            j = i1;
            if (ActivityManagerService.-get5(ActivityManagerService.this) != null)
            {
              i = n;
              j = i1;
              ActivityManagerService.-get5(ActivityManagerService.this).release();
              k = m;
            }
            return;
          }
        }
        catch (Exception localException)
        {
          j = i;
          Slog.w(ActivityManagerService.-get1(), "Error in pointer handler. " + localException);
          return;
        }
        finally
        {
          if (j == 0) {
            continue;
          }
          ActivityManagerService.this.mWindowManager.shutdown(false);
        }
        i = m;
        j = n;
        ActivityManagerService.this.mHandler.postDelayed(ActivityManagerService.-get17(ActivityManagerService.this), 180000L);
      }
    }
  };
  final UiHandler mUiHandler;
  final RemoteCallbackList<IUidObserver> mUidObservers = new RemoteCallbackList();
  UnsupportedDisplaySizeDialog mUnsupportedDisplaySizeDialog;
  final UpdateLock mUpdateLock = new UpdateLock("immersive");
  UsageStatsManagerInternal mUsageStatsService;
  private boolean mUseFifoUiScheduling = false;
  final UserController mUserController;
  private boolean mUserIsMonkey;
  final SparseArray<UidRecord> mValidateUids = new SparseArray();
  private int mViSessionId = 1000;
  PowerManager.WakeLock mVoiceWakeLock;
  boolean mWaitForDebugger = false;
  private int mWakefulness = 1;
  WindowManagerService mWindowManager;
  private volatile int mWtfClusterCount;
  private volatile long mWtfClusterStart;
  Handler qc_handler = new Handler()
  {
    /* Error */
    public void handleMessage(Message paramAnonymousMessage)
    {
      // Byte code:
      //   0: aload_1
      //   1: getfield 26	android/os/Message:what	I
      //   4: iconst_1
      //   5: if_icmpne +51 -> 56
      //   8: aload_0
      //   9: getfield 12	com/android/server/am/ActivityManagerService$6:this$0	Lcom/android/server/am/ActivityManagerService;
      //   12: invokestatic 30	com/android/server/am/ActivityManagerService:-get4	(Lcom/android/server/am/ActivityManagerService;)Lcom/qualcomm/qcnvitems/QcNvItems;
      //   15: invokevirtual 36	com/qualcomm/qcnvitems/QcNvItems:getPcbNumber	()Ljava/lang/String;
      //   18: astore_3
      //   19: aload_3
      //   20: invokestatic 42	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
      //   23: ifne +91 -> 114
      //   26: aload_3
      //   27: astore_2
      //   28: iconst_m1
      //   29: aload_3
      //   30: iconst_0
      //   31: invokevirtual 48	java/lang/String:indexOf	(I)I
      //   34: if_icmpeq +14 -> 48
      //   37: aload_3
      //   38: iconst_0
      //   39: aload_3
      //   40: iconst_0
      //   41: invokevirtual 48	java/lang/String:indexOf	(I)I
      //   44: invokevirtual 52	java/lang/String:substring	(II)Ljava/lang/String;
      //   47: astore_2
      //   48: aload_0
      //   49: getfield 12	com/android/server/am/ActivityManagerService$6:this$0	Lcom/android/server/am/ActivityManagerService;
      //   52: aload_2
      //   53: invokestatic 56	com/android/server/am/ActivityManagerService:-wrap16	(Lcom/android/server/am/ActivityManagerService;Ljava/lang/String;)V
      //   56: aload_1
      //   57: getfield 26	android/os/Message:what	I
      //   60: iconst_2
      //   61: if_icmpne +52 -> 113
      //   64: aload_0
      //   65: getfield 12	com/android/server/am/ActivityManagerService$6:this$0	Lcom/android/server/am/ActivityManagerService;
      //   68: invokestatic 30	com/android/server/am/ActivityManagerService:-get4	(Lcom/android/server/am/ActivityManagerService;)Lcom/qualcomm/qcnvitems/QcNvItems;
      //   71: iconst_0
      //   72: invokevirtual 60	com/qualcomm/qcnvitems/QcNvItems:getEncryptImei	(B)Ljava/lang/String;
      //   75: astore_2
      //   76: aload_2
      //   77: invokestatic 42	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
      //   80: ifne +63 -> 143
      //   83: aload_2
      //   84: astore_1
      //   85: iconst_m1
      //   86: aload_2
      //   87: iconst_0
      //   88: invokevirtual 48	java/lang/String:indexOf	(I)I
      //   91: if_icmpeq +14 -> 105
      //   94: aload_2
      //   95: iconst_0
      //   96: aload_2
      //   97: iconst_0
      //   98: invokevirtual 48	java/lang/String:indexOf	(I)I
      //   101: invokevirtual 52	java/lang/String:substring	(II)Ljava/lang/String;
      //   104: astore_1
      //   105: aload_0
      //   106: getfield 12	com/android/server/am/ActivityManagerService$6:this$0	Lcom/android/server/am/ActivityManagerService;
      //   109: aload_1
      //   110: invokestatic 56	com/android/server/am/ActivityManagerService:-wrap16	(Lcom/android/server/am/ActivityManagerService;Ljava/lang/String;)V
      //   113: return
      //   114: invokestatic 63	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   117: ldc 65
      //   119: invokestatic 71	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   122: pop
      //   123: goto -67 -> 56
      //   126: astore_2
      //   127: invokestatic 63	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   130: ldc 73
      //   132: invokestatic 71	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   135: pop
      //   136: aload_2
      //   137: invokevirtual 76	java/io/IOException:printStackTrace	()V
      //   140: goto -84 -> 56
      //   143: invokestatic 63	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   146: ldc 78
      //   148: invokestatic 71	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   151: pop
      //   152: return
      //   153: astore_1
      //   154: invokestatic 63	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   157: ldc 80
      //   159: invokestatic 71	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   162: pop
      //   163: aload_1
      //   164: invokevirtual 76	java/io/IOException:printStackTrace	()V
      //   167: return
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	168	0	this	6
      //   0	168	1	paramAnonymousMessage	Message
      //   27	70	2	str1	String
      //   126	11	2	localIOException	IOException
      //   18	22	3	str2	String
      // Exception table:
      //   from	to	target	type
      //   8	26	126	java/io/IOException
      //   28	48	126	java/io/IOException
      //   48	56	126	java/io/IOException
      //   114	123	126	java/io/IOException
      //   64	83	153	java/io/IOException
      //   85	105	153	java/io/IOException
      //   105	113	153	java/io/IOException
      //   143	152	153	java/io/IOException
    }
  };
  
  static
  {
    TAG_PROCESSES = TAG + ActivityManagerDebugConfig.POSTFIX_PROCESSES;
    TAG_PROVIDER = TAG + ActivityManagerDebugConfig.POSTFIX_PROVIDER;
    TAG_PSS = TAG + ActivityManagerDebugConfig.POSTFIX_PSS;
    TAG_RECENTS = TAG + ActivityManagerDebugConfig.POSTFIX_RECENTS;
    TAG_SERVICE = TAG + ActivityManagerDebugConfig.POSTFIX_SERVICE;
    TAG_STACK = TAG + ActivityManagerDebugConfig.POSTFIX_STACK;
    TAG_SWITCH = TAG + ActivityManagerDebugConfig.POSTFIX_SWITCH;
    TAG_UID_OBSERVERS = TAG + ActivityManagerDebugConfig.POSTFIX_UID_OBSERVERS;
    TAG_URI_PERMISSION = TAG + ActivityManagerDebugConfig.POSTFIX_URI_PERMISSION;
    TAG_VISIBILITY = TAG + ActivityManagerDebugConfig.POSTFIX_VISIBILITY;
    TAG_VISIBLE_BEHIND = TAG + ActivityManagerDebugConfig.POSTFIX_VISIBLE_BEHIND;
    DEBUG_ONEPLUS = Build.DEBUG_ONEPLUS;
    IS_USER_BUILD = "user".equals(Build.TYPE);
    if (ActivityManagerDebugConfig.DEBUG_POWER_QUICK)
    {
      i = 2;
      POWER_CHECK_DELAY = i * 60 * 1000;
      if (!ActivityManagerDebugConfig.DEBUG_POWER_QUICK) {
        break label1307;
      }
      i = 1;
      label651:
      WAKE_LOCK_MIN_CHECK_DURATION = i * 60 * 1000;
      if (!OnePlusHighPowerDetector.DEBUG_BG_USAGE_QUICK) {
        break label1312;
      }
    }
    label1307:
    label1312:
    for (int i = 60;; i = 180)
    {
      CPU_MIN_CHECK_DURATION = i * 1000;
      MY_PID = Process.myPid();
      EMPTY_STRING_ARRAY = new String[0];
      mWalFlag = false;
      EMBRYO_CONFIG_NAME = "EmbryoConfig";
      NUMBER_RESTART_PROCESS = 10;
      sRestartWhiteList = new ArrayList();
      sFreqAggr_init = null;
      sFreqAggr = null;
      sIsFreqAggrBoostSet = false;
      sPerfBoost_v2 = null;
      sIsLaunchBoostv2_set = false;
      IS_APP_LOCKER_ENABLED = OpFeatures.isSupport(new int[] { 23 });
      IS_SCENE_MODES_FEATURED = OpFeatures.isSupport(new int[] { 25 });
      sThreadPriorityState = new ThreadLocal()
      {
        protected ActivityManagerService.PriorityState initialValue()
        {
          return new ActivityManagerService.PriorityState(null);
        }
      };
      mIgnoredAnrProcess = "";
      sCallerIdentity = new ThreadLocal();
      sKillThread = null;
      sKillHandler = null;
      mActivityTrigger = new ActivityTrigger();
      mEnableNetOpts = SystemProperties.getBoolean("persist.netopts.enable", false);
      PROCESS_STATE_STATS_FORMAT = new int[] { 32, 544, 10272 };
      DUMP_MEM_BUCKETS = new long[] { 5120L, 7168L, 10240L, 15360L, 20480L, 30720L, 40960L, 81920L, 122880L, 163840L, 204800L, 256000L, 307200L, 358400L, 409600L, 512000L, 614400L, 819200L, 1048576L, 2097152L, 5242880L, 10485760L, 20971520L };
      DUMP_MEM_OOM_ADJ = new int[] { 64536, 64636, 64736, 64836, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900 };
      DUMP_MEM_OOM_LABEL = new String[] { "Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Heavy Weight", "Backup", "A Services", "Home", "Previous", "B Services", "Cached" };
      DUMP_MEM_OOM_COMPACT_LABEL = new String[] { "native", "sys", "pers", "persvc", "fore", "vis", "percept", "heavy", "backup", "servicea", "home", "prev", "serviceb", "cached" };
      return;
      i = 15;
      break;
      i = 5;
      break label651;
    }
  }
  
  public ActivityManagerService(Context paramContext)
  {
    this.mContext = paramContext;
    this.mFactoryTest = FactoryTest.getMode();
    this.mSystemThread = ActivityThread.currentActivityThread();
    Slog.i(TAG, "Memory class: " + ActivityManager.staticGetMemoryClass());
    this.mHandlerThread = new ServiceThread(TAG, -2, false);
    this.mHandlerThread.start();
    this.mHandler = new MainHandler(this.mHandlerThread.getLooper());
    this.mUiHandler = new UiHandler();
    if (sKillHandler == null)
    {
      sKillThread = new ServiceThread(TAG + ":kill", 10, true);
      sKillThread.start();
      sKillHandler = new KillHandler(sKillThread.getLooper());
    }
    this.mFgBroadcastQueue = new BroadcastQueue(this, this.mHandler, "foreground", 10000L, false);
    this.mBgBroadcastQueue = new BroadcastQueue(this, this.mHandler, "background", 60000L, true);
    this.mBroadcastQueues[0] = this.mFgBroadcastQueue;
    this.mBroadcastQueues[1] = this.mBgBroadcastQueue;
    this.mServices = new ActiveServices(this);
    this.mProviderMap = new ProviderMap(this);
    this.mAppErrors = new AppErrors(this.mContext, this);
    paramContext = new File(Environment.getDataDirectory(), "system");
    paramContext.mkdirs();
    this.mBatteryStatsService = new BatteryStatsService(paramContext, this.mHandler);
    this.mBatteryStatsService.getActiveStatistics().readLocked();
    this.mBatteryStatsService.scheduleWriteToDisk();
    if (ActivityManagerDebugConfig.DEBUG_POWER) {}
    String str;
    for (boolean bool = true;; bool = this.mBatteryStatsService.getActiveStatistics().getIsOnBattery())
    {
      this.mOnBattery = bool;
      this.mBatteryStatsService.getActiveStatistics().setCallback(this);
      this.mProcessStats = new ProcessStatsService(this, new File(paramContext, "procstats"));
      this.mAppOpsService = new AppOpsService(new File(paramContext, "appops.xml"), this.mHandler);
      this.mAppOpsService.startWatchingMode(64, null, new IAppOpsCallback.Stub()
      {
        public void opChanged(int paramAnonymousInt1, int paramAnonymousInt2, String paramAnonymousString)
        {
          if ((paramAnonymousInt1 == 64) && (paramAnonymousString != null) && (ActivityManagerService.this.mAppOpsService.checkOperation(paramAnonymousInt1, paramAnonymousInt2, paramAnonymousString) != 0)) {
            ActivityManagerService.this.runInBackgroundDisabled(paramAnonymousInt2);
          }
        }
      });
      this.mGrantFile = new AtomicFile(new File(paramContext, "urigrants.xml"));
      this.mUserController = new UserController(this);
      this.GL_ES_VERSION = SystemProperties.getInt("ro.opengles.version", 0);
      if (SystemProperties.getInt("sys.use_fifo_ui", 0) != 0) {
        this.mUseFifoUiScheduling = true;
      }
      this.mTrackingAssociations = "1".equals(SystemProperties.get("debug.track-associations"));
      this.mConfiguration.setToDefaults();
      this.mConfiguration.setLocales(LocaleList.getDefault());
      this.mConfiguration.seq = 1;
      this.mConfigurationSeq = 1;
      this.mProcessCpuTracker.init();
      this.mCompatModePackages = new CompatModePackages(this, paramContext, this.mHandler);
      this.mIntentFirewall = new IntentFirewall(new IntentFirewallInterface(), this.mHandler);
      this.mStackSupervisor = new ActivityStackSupervisor(this);
      this.mActivityStarter = new ActivityStarter(this, this.mStackSupervisor);
      this.mRecentTasks = new RecentTasks(this, this.mStackSupervisor);
      this.mProcessCpuThread = new Thread("CpuTracker")
      {
        public void run()
        {
          try {}catch (Exception localException)
          {
            for (;;)
            {
              try
              {
                long l1 = SystemClock.uptimeMillis();
                long l2 = ActivityManagerService.this.mLastCpuTime.get() + 268435455L - l1;
                long l3 = ActivityManagerService.this.mLastWriteTime + 1800000L - l1;
                l1 = l2;
                if (l3 < l2) {
                  l1 = l3;
                }
                if (l1 > 0L)
                {
                  ActivityManagerService.this.mProcessCpuMutexFree.set(true);
                  wait(l1);
                }
                ActivityManagerService.this.updateCpuStatsNow();
                continue;
              }
              finally {}
              localException = localException;
              Slog.e(ActivityManagerService.-get1(), "Unexpected exception collecting process stats", localException);
            }
          }
          catch (InterruptedException localInterruptedException)
          {
            for (;;) {}
          }
        }
      };
      this.mEmbryoManager.setBlackList(Arrays.asList(this.mContext.getResources().getStringArray(84344845)));
      this.mOemImportantProcessList = Arrays.asList(this.mContext.getResources().getStringArray(84344840));
      paramContext = this.mOemImportantProcessList.iterator();
      while (paramContext.hasNext())
      {
        str = (String)paramContext.next();
        Log.d("TAG", "OEM important process: " + str);
      }
    }
    addRestartWhitelist();
    this.mOemBoostAppLaunchList = Arrays.asList(this.mContext.getResources().getStringArray(84344838));
    paramContext = this.mOemBoostAppLaunchList.iterator();
    while (paramContext.hasNext())
    {
      str = (String)paramContext.next();
      Log.d("TAG", "OEM boost launch process: " + str);
    }
    if (IS_APP_LOCKER_ENABLED)
    {
      this.mConfirmIntent = new Intent();
      this.mConfirmIntent.setClassName("com.oneplus.applocker", "com.oneplus.applocker.ConfirmDeviceCredentialActivity");
      this.mConfirmIntent.putExtra("OP_APP_LOCKER", true);
      this.mConfirmIntent.addFlags(545390592);
      this.mRequestHashCode = (this.mConfirmIntent.toString().hashCode() & 0xFFFFFFF);
      this.mPassedPackageList = new ArrayList();
      this.mAppLockerWhiteList = new ArrayList(Arrays.asList(this.mContext.getResources().getStringArray(84344833)));
    }
    Watchdog.getInstance().addMonitor(this);
    Watchdog.getInstance().addThread(this.mHandler);
    this.mIsFreqAggrEnabled = this.mContext.getResources().getBoolean(17957048);
    if (this.mIsFreqAggrEnabled)
    {
      this.lFreqAggr_TimeOut = this.mContext.getResources().getInteger(17694892);
      this.lFreqAggr_Init_ParamVal = this.mContext.getResources().getIntArray(17236045);
      this.lFreqAggr_ParamVal = this.mContext.getResources().getIntArray(17236046);
    }
    this.mIsLaunchBoostv2_enabled = this.mContext.getResources().getBoolean(17957047);
    if (this.mIsLaunchBoostv2_enabled)
    {
      this.lBoost_v2_TimeOut = this.mContext.getResources().getInteger(17694891);
      this.lBoost_v2_ParamVal = this.mContext.getResources().getIntArray(17236044);
    }
  }
  
  private final void addProcessNameLocked(ProcessRecord paramProcessRecord)
  {
    Object localObject = removeProcessNameLocked(paramProcessRecord.processName, paramProcessRecord.uid);
    if ((localObject == paramProcessRecord) && (paramProcessRecord.persistent)) {
      Slog.w(TAG, "Re-adding persistent process " + paramProcessRecord);
    }
    for (;;)
    {
      UidRecord localUidRecord = (UidRecord)this.mActiveUids.get(paramProcessRecord.uid);
      localObject = localUidRecord;
      if (localUidRecord == null)
      {
        localObject = new UidRecord(paramProcessRecord.uid);
        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
          Slog.i(TAG_UID_OBSERVERS, "Creating new process uid: " + localObject);
        }
        this.mActiveUids.put(paramProcessRecord.uid, localObject);
        noteUidProcessState(((UidRecord)localObject).uid, ((UidRecord)localObject).curProcState);
        enqueueUidChangeLocked((UidRecord)localObject, -1, 4);
      }
      paramProcessRecord.uidRecord = ((UidRecord)localObject);
      paramProcessRecord.renderThreadTid = 0;
      ((UidRecord)localObject).numProcs += 1;
      this.mProcessNames.put(paramProcessRecord.processName, paramProcessRecord.uid, paramProcessRecord);
      if (paramProcessRecord.isolated) {
        this.mIsolatedProcesses.put(paramProcessRecord.uid, paramProcessRecord);
      }
      return;
      if (localObject != null) {
        Slog.wtf(TAG, "Already have existing proc " + localObject + " when adding " + paramProcessRecord);
      }
    }
  }
  
  private void addRestartWhitelist()
  {
    addRestartWhitelist("com.oppo.qetest");
    addRestartWhitelist("com.oppo.qemonitor");
  }
  
  private void appendBasicMemEntry(StringBuilder paramStringBuilder, int paramInt1, int paramInt2, long paramLong1, long paramLong2, String paramString)
  {
    paramStringBuilder.append("  ");
    paramStringBuilder.append(ProcessList.makeOomAdjString(paramInt1));
    paramStringBuilder.append(' ');
    paramStringBuilder.append(ProcessList.makeProcStateString(paramInt2));
    paramStringBuilder.append(' ');
    ProcessList.appendRamKb(paramStringBuilder, paramLong1);
    paramStringBuilder.append(": ");
    paramStringBuilder.append(paramString);
    if (paramLong2 > 0L)
    {
      paramStringBuilder.append(" (");
      paramStringBuilder.append(stringifyKBSize(paramLong2));
      paramStringBuilder.append(" memtrack)");
    }
  }
  
  private void appendDropBoxProcessHeaders(ProcessRecord paramProcessRecord, String paramString, StringBuilder paramStringBuilder)
  {
    if (paramProcessRecord == null)
    {
      paramStringBuilder.append("Process: ").append(paramString).append("\n");
      return;
    }
    try
    {
      boostPriorityForLockedSection();
      paramStringBuilder.append("Process: ").append(paramString).append("\n");
      int i = paramProcessRecord.info.flags;
      paramString = AppGlobals.getPackageManager();
      paramStringBuilder.append("Flags: 0x").append(Integer.toHexString(i)).append("\n");
      i = 0;
      while (i < paramProcessRecord.pkgList.size())
      {
        str = (String)paramProcessRecord.pkgList.keyAt(i);
        paramStringBuilder.append("Package: ").append(str);
        try
        {
          PackageInfo localPackageInfo = paramString.getPackageInfo(str, 0, UserHandle.getCallingUserId());
          if (localPackageInfo != null)
          {
            paramStringBuilder.append(" v").append(localPackageInfo.versionCode);
            if (localPackageInfo.versionName != null) {
              paramStringBuilder.append(" (").append(localPackageInfo.versionName).append(")");
            }
          }
        }
        catch (RemoteException localRemoteException)
        {
          for (;;)
          {
            Slog.e(TAG, "Error getting package info: " + str, localRemoteException);
          }
        }
        paramStringBuilder.append("\n");
        i += 1;
      }
    }
    finally
    {
      String str;
      resetPriorityAfterLockedSection();
    }
    resetPriorityAfterLockedSection();
  }
  
  static final void appendMemBucket(StringBuilder paramStringBuilder, long paramLong, String paramString, boolean paramBoolean)
  {
    int i = paramString.lastIndexOf('.');
    int k;
    int j;
    if (i >= 0)
    {
      i += 1;
      k = paramString.length();
      j = 0;
    }
    for (;;)
    {
      if (j >= DUMP_MEM_BUCKETS.length) {
        break label114;
      }
      if (DUMP_MEM_BUCKETS[j] >= paramLong)
      {
        paramStringBuilder.append(DUMP_MEM_BUCKETS[j] / 1024L);
        if (paramBoolean) {}
        for (str = "MB.";; str = "MB ")
        {
          paramStringBuilder.append(str);
          paramStringBuilder.append(paramString, i, k);
          return;
          i = 0;
          break;
        }
      }
      j += 1;
    }
    label114:
    paramStringBuilder.append(paramLong / 1024L);
    if (paramBoolean) {}
    for (String str = "MB.";; str = "MB ")
    {
      paramStringBuilder.append(str);
      paramStringBuilder.append(paramString, i, k);
      return;
    }
  }
  
  private void appendMemInfo(StringBuilder paramStringBuilder, ProcessMemInfo paramProcessMemInfo)
  {
    appendBasicMemEntry(paramStringBuilder, paramProcessMemInfo.oomAdj, paramProcessMemInfo.procState, paramProcessMemInfo.pss, paramProcessMemInfo.memtrack, paramProcessMemInfo.name);
    paramStringBuilder.append(" (pid ");
    paramStringBuilder.append(paramProcessMemInfo.pid);
    paramStringBuilder.append(") ");
    paramStringBuilder.append(paramProcessMemInfo.adjType);
    paramStringBuilder.append('\n');
    if (paramProcessMemInfo.adjReason != null)
    {
      paramStringBuilder.append("                      ");
      paramStringBuilder.append(paramProcessMemInfo.adjReason);
      paramStringBuilder.append('\n');
    }
  }
  
  /* Error */
  private final boolean applyOomAdjLocked(ProcessRecord paramProcessRecord, boolean paramBoolean, long paramLong1, long paramLong2)
  {
    // Byte code:
    //   0: iconst_1
    //   1: istore 11
    //   3: aload_1
    //   4: getfield 2389	com/android/server/am/ProcessRecord:curRawAdj	I
    //   7: aload_1
    //   8: getfield 2392	com/android/server/am/ProcessRecord:setRawAdj	I
    //   11: if_icmpeq +319 -> 330
    //   14: new 1066	java/lang/StringBuilder
    //   17: dup
    //   18: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   21: ldc_w 2394
    //   24: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   27: aload_1
    //   28: getfield 2147	com/android/server/am/ProcessRecord:uid	I
    //   31: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   34: ldc_w 2396
    //   37: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   40: aload_1
    //   41: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   44: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   47: ldc_w 2399
    //   50: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   53: aload_1
    //   54: getfield 2402	com/android/server/am/ProcessRecord:curAdj	I
    //   57: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   60: ldc_w 2404
    //   63: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   66: aload_1
    //   67: getfield 2407	com/android/server/am/ProcessRecord:setAdj	I
    //   70: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   73: ldc_w 2409
    //   76: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   79: astore 14
    //   81: aload_1
    //   82: getfield 2412	com/android/server/am/ProcessRecord:hasShownUi	Z
    //   85: ifeq +1387 -> 1472
    //   88: iconst_1
    //   89: istore 7
    //   91: aload 14
    //   93: iload 7
    //   95: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   98: ldc_w 2414
    //   101: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   104: astore 14
    //   106: aload_1
    //   107: getfield 2416	com/android/server/am/ProcessRecord:cached	Z
    //   110: ifeq +1368 -> 1478
    //   113: iconst_1
    //   114: istore 7
    //   116: aload 14
    //   118: iload 7
    //   120: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   123: ldc_w 2418
    //   126: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   129: astore 14
    //   131: aload_1
    //   132: getfield 2421	com/android/server/am/ProcessRecord:foregroundActivities	Z
    //   135: ifeq +1349 -> 1484
    //   138: iconst_1
    //   139: istore 7
    //   141: aload 14
    //   143: iload 7
    //   145: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   148: ldc_w 2423
    //   151: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   154: astore 14
    //   156: aload_1
    //   157: getfield 2426	com/android/server/am/ProcessRecord:foregroundServices	Z
    //   160: ifeq +1330 -> 1490
    //   163: iconst_1
    //   164: istore 7
    //   166: aload 14
    //   168: iload 7
    //   170: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   173: ldc_w 2428
    //   176: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   179: astore 14
    //   181: aload_1
    //   182: getfield 2431	com/android/server/am/ProcessRecord:systemNoUi	Z
    //   185: ifeq +1311 -> 1496
    //   188: iconst_1
    //   189: istore 7
    //   191: aload 14
    //   193: iload 7
    //   195: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   198: ldc_w 2433
    //   201: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   204: aload_1
    //   205: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   208: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   211: ldc_w 2438
    //   214: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   217: aload_1
    //   218: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   221: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   224: ldc_w 2441
    //   227: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   230: aload_1
    //   231: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   234: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   237: ldc_w 2446
    //   240: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   243: astore 14
    //   245: aload_1
    //   246: getfield 2449	com/android/server/am/ProcessRecord:killed	Z
    //   249: ifeq +1253 -> 1502
    //   252: iconst_1
    //   253: istore 7
    //   255: aload 14
    //   257: iload 7
    //   259: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   262: ldc_w 2451
    //   265: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   268: astore 14
    //   270: aload_1
    //   271: getfield 2454	com/android/server/am/ProcessRecord:killedByAm	Z
    //   274: ifeq +1234 -> 1508
    //   277: iconst_1
    //   278: istore 7
    //   280: aload 14
    //   282: iload 7
    //   284: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   287: ldc_w 2456
    //   290: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   293: astore 14
    //   295: aload_1
    //   296: getfield 2459	com/android/server/am/ProcessRecord:debugging	Z
    //   299: ifeq +1215 -> 1514
    //   302: iconst_1
    //   303: istore 7
    //   305: sipush 385
    //   308: aload 14
    //   310: iload 7
    //   312: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   315: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   318: invokestatic 2465	android/util/SeempLog:record_str	(ILjava/lang/String;)I
    //   321: pop
    //   322: aload_1
    //   323: aload_1
    //   324: getfield 2389	com/android/server/am/ProcessRecord:curRawAdj	I
    //   327: putfield 2392	com/android/server/am/ProcessRecord:setRawAdj	I
    //   330: iconst_0
    //   331: istore 8
    //   333: aload_1
    //   334: getfield 2402	com/android/server/am/ProcessRecord:curAdj	I
    //   337: aload_1
    //   338: getfield 2407	com/android/server/am/ProcessRecord:setAdj	I
    //   341: if_icmpeq +161 -> 502
    //   344: aload_0
    //   345: getfield 2034	com/android/server/am/ActivityManagerService:mOemImportantProcessList	Ljava/util/List;
    //   348: aload_1
    //   349: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   352: invokeinterface 2470 2 0
    //   357: ifeq +20 -> 377
    //   360: aload_1
    //   361: getfield 2402	com/android/server/am/ProcessRecord:curAdj	I
    //   364: sipush 400
    //   367: if_icmple +10 -> 377
    //   370: aload_1
    //   371: sipush 400
    //   374: putfield 2402	com/android/server/am/ProcessRecord:curAdj	I
    //   377: aload_0
    //   378: aload_1
    //   379: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   382: invokespecial 2473	com/android/server/am/ActivityManagerService:checkProcessExist	(I)Z
    //   385: ifeq +1135 -> 1520
    //   388: aload_1
    //   389: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   392: aload_1
    //   393: getfield 2260	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
    //   396: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   399: aload_1
    //   400: getfield 2402	com/android/server/am/ProcessRecord:curAdj	I
    //   403: invokestatic 2478	com/android/server/am/ProcessList:setOomAdj	(III)V
    //   406: getstatic 2481	com/android/server/am/ActivityManagerDebugConfig:DEBUG_SWITCH	Z
    //   409: ifne +9 -> 418
    //   412: getstatic 2484	com/android/server/am/ActivityManagerDebugConfig:DEBUG_OOM_ADJ	Z
    //   415: ifeq +72 -> 487
    //   418: getstatic 1130	com/android/server/am/ActivityManagerService:TAG_OOM_ADJ	Ljava/lang/String;
    //   421: new 1066	java/lang/StringBuilder
    //   424: dup
    //   425: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   428: ldc_w 2486
    //   431: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   434: aload_1
    //   435: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   438: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   441: ldc_w 2488
    //   444: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   447: aload_1
    //   448: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   451: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   454: ldc_w 2490
    //   457: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   460: aload_1
    //   461: getfield 2402	com/android/server/am/ProcessRecord:curAdj	I
    //   464: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   467: ldc_w 2237
    //   470: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   473: aload_1
    //   474: getfield 2491	com/android/server/am/ProcessRecord:adjType	Ljava/lang/String;
    //   477: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   480: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   483: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   486: pop
    //   487: aload_1
    //   488: aload_1
    //   489: getfield 2402	com/android/server/am/ProcessRecord:curAdj	I
    //   492: putfield 2407	com/android/server/am/ProcessRecord:setAdj	I
    //   495: aload_1
    //   496: sipush 55536
    //   499: putfield 2497	com/android/server/am/ProcessRecord:verifiedAdj	I
    //   502: iload 11
    //   504: istore 10
    //   506: aload_1
    //   507: getfield 2500	com/android/server/am/ProcessRecord:setSchedGroup	I
    //   510: aload_1
    //   511: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   514: if_icmpeq +105 -> 619
    //   517: aload_1
    //   518: getfield 2500	com/android/server/am/ProcessRecord:setSchedGroup	I
    //   521: istore 9
    //   523: aload_1
    //   524: aload_1
    //   525: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   528: putfield 2500	com/android/server/am/ProcessRecord:setSchedGroup	I
    //   531: getstatic 2481	com/android/server/am/ActivityManagerDebugConfig:DEBUG_SWITCH	Z
    //   534: ifne +9 -> 543
    //   537: getstatic 2484	com/android/server/am/ActivityManagerDebugConfig:DEBUG_OOM_ADJ	Z
    //   540: ifeq +46 -> 586
    //   543: getstatic 1130	com/android/server/am/ActivityManagerService:TAG_OOM_ADJ	Ljava/lang/String;
    //   546: new 1066	java/lang/StringBuilder
    //   549: dup
    //   550: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   553: ldc_w 2502
    //   556: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   559: aload_1
    //   560: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   563: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   566: ldc_w 2504
    //   569: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   572: aload_1
    //   573: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   576: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   579: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   582: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   585: pop
    //   586: aload_1
    //   587: getfield 2507	com/android/server/am/ProcessRecord:waitingToKill	Ljava/lang/String;
    //   590: ifnull +932 -> 1522
    //   593: aload_1
    //   594: getfield 2511	com/android/server/am/ProcessRecord:curReceiver	Lcom/android/server/am/BroadcastRecord;
    //   597: ifnonnull +925 -> 1522
    //   600: aload_1
    //   601: getfield 2500	com/android/server/am/ProcessRecord:setSchedGroup	I
    //   604: ifne +918 -> 1522
    //   607: aload_1
    //   608: aload_1
    //   609: getfield 2507	com/android/server/am/ProcessRecord:waitingToKill	Ljava/lang/String;
    //   612: iconst_1
    //   613: invokevirtual 2515	com/android/server/am/ProcessRecord:kill	(Ljava/lang/String;Z)V
    //   616: iconst_0
    //   617: istore 10
    //   619: iload 8
    //   621: istore 7
    //   623: aload_1
    //   624: getfield 2518	com/android/server/am/ProcessRecord:repForegroundActivities	Z
    //   627: aload_1
    //   628: getfield 2421	com/android/server/am/ProcessRecord:foregroundActivities	Z
    //   631: if_icmpeq +14 -> 645
    //   634: aload_1
    //   635: aload_1
    //   636: getfield 2421	com/android/server/am/ProcessRecord:foregroundActivities	Z
    //   639: putfield 2518	com/android/server/am/ProcessRecord:repForegroundActivities	Z
    //   642: iconst_1
    //   643: istore 7
    //   645: iload 7
    //   647: istore 8
    //   649: aload_1
    //   650: getfield 2521	com/android/server/am/ProcessRecord:repProcState	I
    //   653: aload_1
    //   654: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   657: if_icmpeq +45 -> 702
    //   660: aload_1
    //   661: aload_1
    //   662: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   665: putfield 2521	com/android/server/am/ProcessRecord:repProcState	I
    //   668: iload 7
    //   670: iconst_2
    //   671: ior
    //   672: istore 7
    //   674: iload 7
    //   676: istore 8
    //   678: aload_1
    //   679: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   682: ifnull +20 -> 702
    //   685: aload_1
    //   686: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   689: aload_1
    //   690: getfield 2521	com/android/server/am/ProcessRecord:repProcState	I
    //   693: invokeinterface 2530 2 0
    //   698: iload 7
    //   700: istore 8
    //   702: aload_1
    //   703: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   706: iconst_m1
    //   707: if_icmpeq +17 -> 724
    //   710: aload_1
    //   711: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   714: aload_1
    //   715: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   718: invokestatic 2534	com/android/server/am/ProcessList:procStatesDifferForMem	(II)Z
    //   721: ifeq +1249 -> 1970
    //   724: aload_1
    //   725: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   728: iconst_2
    //   729: if_icmplt +35 -> 764
    //   732: aload_1
    //   733: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   736: bipush 7
    //   738: if_icmpgt +26 -> 764
    //   741: aload_1
    //   742: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   745: bipush 12
    //   747: if_icmpge +12 -> 759
    //   750: aload_1
    //   751: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   754: bipush 10
    //   756: if_icmpne +8 -> 764
    //   759: aload_1
    //   760: lload_3
    //   761: putfield 2537	com/android/server/am/ProcessRecord:lastFgTime	J
    //   764: aload_1
    //   765: lload_3
    //   766: putfield 2540	com/android/server/am/ProcessRecord:lastStateTime	J
    //   769: aload_1
    //   770: aload_1
    //   771: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   774: iconst_1
    //   775: aload_0
    //   776: getfield 1619	com/android/server/am/ActivityManagerService:mTestPssMode	Z
    //   779: aload_0
    //   780: invokevirtual 2543	com/android/server/am/ActivityManagerService:isSleepingLocked	()Z
    //   783: lload_3
    //   784: invokestatic 2547	com/android/server/am/ProcessList:computeNextPssTime	(IZZZJ)J
    //   787: putfield 2550	com/android/server/am/ProcessRecord:nextPssTime	J
    //   790: getstatic 2553	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PSS	Z
    //   793: ifeq +77 -> 870
    //   796: getstatic 921	com/android/server/am/ActivityManagerService:TAG_PSS	Ljava/lang/String;
    //   799: new 1066	java/lang/StringBuilder
    //   802: dup
    //   803: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   806: ldc_w 2555
    //   809: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   812: aload_1
    //   813: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   816: invokestatic 2231	com/android/server/am/ProcessList:makeProcStateString	(I)Ljava/lang/String;
    //   819: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   822: ldc_w 2504
    //   825: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   828: aload_1
    //   829: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   832: invokestatic 2231	com/android/server/am/ProcessList:makeProcStateString	(I)Ljava/lang/String;
    //   835: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   838: ldc_w 2557
    //   841: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   844: aload_1
    //   845: getfield 2550	com/android/server/am/ProcessRecord:nextPssTime	J
    //   848: lload_3
    //   849: lsub
    //   850: invokevirtual 2337	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   853: ldc_w 2237
    //   856: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   859: aload_1
    //   860: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   863: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   866: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   869: pop
    //   870: aload_1
    //   871: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   874: aload_1
    //   875: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   878: if_icmpeq +1264 -> 2142
    //   881: getstatic 2481	com/android/server/am/ActivityManagerDebugConfig:DEBUG_SWITCH	Z
    //   884: ifne +9 -> 893
    //   887: getstatic 2484	com/android/server/am/ActivityManagerDebugConfig:DEBUG_OOM_ADJ	Z
    //   890: ifeq +46 -> 936
    //   893: getstatic 1130	com/android/server/am/ActivityManagerService:TAG_OOM_ADJ	Ljava/lang/String;
    //   896: new 1066	java/lang/StringBuilder
    //   899: dup
    //   900: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   903: ldc_w 2560
    //   906: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   909: aload_1
    //   910: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   913: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   916: ldc_w 2504
    //   919: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   922: aload_1
    //   923: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   926: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   929: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   932: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   935: pop
    //   936: aload_1
    //   937: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   940: bipush 10
    //   942: if_icmpge +1100 -> 2042
    //   945: iconst_1
    //   946: istore 7
    //   948: aload_1
    //   949: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   952: bipush 10
    //   954: if_icmpge +1094 -> 2048
    //   957: iconst_1
    //   958: istore 9
    //   960: iload 7
    //   962: ifeq +8 -> 970
    //   965: iload 9
    //   967: ifeq +1087 -> 2054
    //   970: aload_0
    //   971: aload_1
    //   972: lload 5
    //   974: invokespecial 2564	com/android/server/am/ActivityManagerService:maybeUpdateUsageStatsLocked	(Lcom/android/server/am/ProcessRecord;J)V
    //   977: aload_1
    //   978: aload_1
    //   979: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   982: putfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   985: aload_1
    //   986: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   989: bipush 12
    //   991: if_icmplt +8 -> 999
    //   994: aload_1
    //   995: iconst_0
    //   996: putfield 2567	com/android/server/am/ProcessRecord:notCachedSinceIdle	Z
    //   999: iload_2
    //   1000: ifne +1134 -> 2134
    //   1003: aload_0
    //   1004: aload_1
    //   1005: aload_0
    //   1006: getfield 1907	com/android/server/am/ActivityManagerService:mProcessStats	Lcom/android/server/am/ProcessStatsService;
    //   1009: invokevirtual 2570	com/android/server/am/ProcessStatsService:getMemFactorLocked	()I
    //   1012: lload_3
    //   1013: invokespecial 2574	com/android/server/am/ActivityManagerService:setProcessTrackerStateLocked	(Lcom/android/server/am/ProcessRecord;IJ)V
    //   1016: iload 8
    //   1018: ifeq +451 -> 1469
    //   1021: getstatic 2577	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROCESS_OBSERVERS	Z
    //   1024: ifeq +41 -> 1065
    //   1027: getstatic 1140	com/android/server/am/ActivityManagerService:TAG_PROCESS_OBSERVERS	Ljava/lang/String;
    //   1030: new 1066	java/lang/StringBuilder
    //   1033: dup
    //   1034: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1037: ldc_w 2579
    //   1040: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1043: aload_1
    //   1044: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1047: ldc_w 2237
    //   1050: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1053: iload 8
    //   1055: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1058: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1061: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   1064: pop
    //   1065: aload_0
    //   1066: getfield 1661	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
    //   1069: invokevirtual 2580	java/util/ArrayList:size	()I
    //   1072: iconst_1
    //   1073: isub
    //   1074: istore 7
    //   1076: aconst_null
    //   1077: astore 14
    //   1079: iload 7
    //   1081: iflt +71 -> 1152
    //   1084: aload_0
    //   1085: getfield 1661	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
    //   1088: iload 7
    //   1090: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   1093: checkcast 156	com/android/server/am/ActivityManagerService$ProcessChangeItem
    //   1096: astore 15
    //   1098: aload 15
    //   1100: getfield 2582	com/android/server/am/ActivityManagerService$ProcessChangeItem:pid	I
    //   1103: aload_1
    //   1104: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1107: if_icmpne +1066 -> 2173
    //   1110: aload 15
    //   1112: astore 14
    //   1114: getstatic 2577	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROCESS_OBSERVERS	Z
    //   1117: ifeq +35 -> 1152
    //   1120: getstatic 1140	com/android/server/am/ActivityManagerService:TAG_PROCESS_OBSERVERS	Ljava/lang/String;
    //   1123: new 1066	java/lang/StringBuilder
    //   1126: dup
    //   1127: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1130: ldc_w 2584
    //   1133: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1136: aload 15
    //   1138: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1141: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1144: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   1147: pop
    //   1148: aload 15
    //   1150: astore 14
    //   1152: iload 7
    //   1154: ifge +150 -> 1304
    //   1157: aload_0
    //   1158: getfield 1663	com/android/server/am/ActivityManagerService:mAvailProcessChanges	Ljava/util/ArrayList;
    //   1161: invokevirtual 2580	java/util/ArrayList:size	()I
    //   1164: istore 7
    //   1166: iload 7
    //   1168: ifle +1018 -> 2186
    //   1171: aload_0
    //   1172: getfield 1663	com/android/server/am/ActivityManagerService:mAvailProcessChanges	Ljava/util/ArrayList;
    //   1175: iload 7
    //   1177: iconst_1
    //   1178: isub
    //   1179: invokevirtual 2587	java/util/ArrayList:remove	(I)Ljava/lang/Object;
    //   1182: checkcast 156	com/android/server/am/ActivityManagerService$ProcessChangeItem
    //   1185: astore 15
    //   1187: aload 15
    //   1189: astore 14
    //   1191: getstatic 2577	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROCESS_OBSERVERS	Z
    //   1194: ifeq +35 -> 1229
    //   1197: getstatic 1140	com/android/server/am/ActivityManagerService:TAG_PROCESS_OBSERVERS	Ljava/lang/String;
    //   1200: new 1066	java/lang/StringBuilder
    //   1203: dup
    //   1204: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1207: ldc_w 2589
    //   1210: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1213: aload 15
    //   1215: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1218: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1221: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   1224: pop
    //   1225: aload 15
    //   1227: astore 14
    //   1229: aload 14
    //   1231: iconst_0
    //   1232: putfield 2592	com/android/server/am/ActivityManagerService$ProcessChangeItem:changes	I
    //   1235: aload 14
    //   1237: aload_1
    //   1238: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1241: putfield 2582	com/android/server/am/ActivityManagerService$ProcessChangeItem:pid	I
    //   1244: aload 14
    //   1246: aload_1
    //   1247: getfield 2260	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
    //   1250: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   1253: putfield 2593	com/android/server/am/ActivityManagerService$ProcessChangeItem:uid	I
    //   1256: aload_0
    //   1257: getfield 1661	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
    //   1260: invokevirtual 2580	java/util/ArrayList:size	()I
    //   1263: ifne +31 -> 1294
    //   1266: getstatic 2577	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROCESS_OBSERVERS	Z
    //   1269: ifeq +13 -> 1282
    //   1272: getstatic 1140	com/android/server/am/ActivityManagerService:TAG_PROCESS_OBSERVERS	Ljava/lang/String;
    //   1275: ldc_w 2595
    //   1278: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   1281: pop
    //   1282: aload_0
    //   1283: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   1286: bipush 31
    //   1288: invokevirtual 2599	com/android/server/am/ActivityManagerService$UiHandler:obtainMessage	(I)Landroid/os/Message;
    //   1291: invokevirtual 2604	android/os/Message:sendToTarget	()V
    //   1294: aload_0
    //   1295: getfield 1661	com/android/server/am/ActivityManagerService:mPendingProcessChanges	Ljava/util/ArrayList;
    //   1298: aload 14
    //   1300: invokevirtual 2607	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   1303: pop
    //   1304: aload 14
    //   1306: aload 14
    //   1308: getfield 2592	com/android/server/am/ActivityManagerService$ProcessChangeItem:changes	I
    //   1311: iload 8
    //   1313: ior
    //   1314: putfield 2592	com/android/server/am/ActivityManagerService$ProcessChangeItem:changes	I
    //   1317: aload 14
    //   1319: aload_1
    //   1320: getfield 2521	com/android/server/am/ProcessRecord:repProcState	I
    //   1323: putfield 2610	com/android/server/am/ActivityManagerService$ProcessChangeItem:processState	I
    //   1326: aload 14
    //   1328: aload_1
    //   1329: getfield 2518	com/android/server/am/ProcessRecord:repForegroundActivities	Z
    //   1332: putfield 2611	com/android/server/am/ActivityManagerService$ProcessChangeItem:foregroundActivities	Z
    //   1335: getstatic 2577	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROCESS_OBSERVERS	Z
    //   1338: ifeq +131 -> 1469
    //   1341: getstatic 1140	com/android/server/am/ActivityManagerService:TAG_PROCESS_OBSERVERS	Ljava/lang/String;
    //   1344: new 1066	java/lang/StringBuilder
    //   1347: dup
    //   1348: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1351: ldc_w 2613
    //   1354: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1357: aload 14
    //   1359: invokestatic 2619	java/lang/System:identityHashCode	(Ljava/lang/Object;)I
    //   1362: invokestatic 2278	java/lang/Integer:toHexString	(I)Ljava/lang/String;
    //   1365: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1368: ldc_w 2488
    //   1371: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1374: aload_1
    //   1375: invokevirtual 2622	com/android/server/am/ProcessRecord:toShortString	()Ljava/lang/String;
    //   1378: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1381: ldc_w 2624
    //   1384: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1387: aload 14
    //   1389: getfield 2592	com/android/server/am/ActivityManagerService$ProcessChangeItem:changes	I
    //   1392: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1395: ldc_w 2626
    //   1398: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1401: aload 14
    //   1403: getfield 2610	com/android/server/am/ActivityManagerService$ProcessChangeItem:processState	I
    //   1406: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1409: ldc_w 2628
    //   1412: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1415: aload 14
    //   1417: getfield 2611	com/android/server/am/ActivityManagerService$ProcessChangeItem:foregroundActivities	Z
    //   1420: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   1423: ldc_w 2633
    //   1426: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1429: aload_1
    //   1430: getfield 2491	com/android/server/am/ProcessRecord:adjType	Ljava/lang/String;
    //   1433: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1436: ldc_w 2635
    //   1439: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1442: aload_1
    //   1443: getfield 2638	com/android/server/am/ProcessRecord:adjSource	Ljava/lang/Object;
    //   1446: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1449: ldc_w 2640
    //   1452: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1455: aload_1
    //   1456: getfield 2643	com/android/server/am/ProcessRecord:adjTarget	Ljava/lang/Object;
    //   1459: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1462: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1465: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   1468: pop
    //   1469: iload 10
    //   1471: ireturn
    //   1472: iconst_0
    //   1473: istore 7
    //   1475: goto -1384 -> 91
    //   1478: iconst_0
    //   1479: istore 7
    //   1481: goto -1365 -> 116
    //   1484: iconst_0
    //   1485: istore 7
    //   1487: goto -1346 -> 141
    //   1490: iconst_0
    //   1491: istore 7
    //   1493: goto -1327 -> 166
    //   1496: iconst_0
    //   1497: istore 7
    //   1499: goto -1308 -> 191
    //   1502: iconst_0
    //   1503: istore 7
    //   1505: goto -1250 -> 255
    //   1508: iconst_0
    //   1509: istore 7
    //   1511: goto -1231 -> 280
    //   1514: iconst_0
    //   1515: istore 7
    //   1517: goto -1212 -> 305
    //   1520: iconst_0
    //   1521: ireturn
    //   1522: aload_1
    //   1523: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   1526: tableswitch	default:+30->1556, 0:+195->1721, 1:+30->1556, 2:+201->1727, 3:+201->1727
    //   1556: iconst_m1
    //   1557: istore 7
    //   1559: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   1562: lstore 12
    //   1564: aload_1
    //   1565: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1568: iload 7
    //   1570: invokestatic 2651	android/os/Process:setProcessGroup	(II)V
    //   1573: aload_1
    //   1574: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   1577: iconst_2
    //   1578: if_icmpne +273 -> 1851
    //   1581: iload 9
    //   1583: iconst_2
    //   1584: if_icmpeq +125 -> 1709
    //   1587: aload_0
    //   1588: getfield 939	com/android/server/am/ActivityManagerService:mInVrMode	Z
    //   1591: ifeq +25 -> 1616
    //   1594: aload_1
    //   1595: getfield 2654	com/android/server/am/ProcessRecord:vrThreadTid	I
    //   1598: istore 7
    //   1600: iload 7
    //   1602: ifeq +14 -> 1616
    //   1605: aload_1
    //   1606: getfield 2654	com/android/server/am/ProcessRecord:vrThreadTid	I
    //   1609: ldc_w 2655
    //   1612: iconst_1
    //   1613: invokestatic 2658	android/os/Process:setThreadScheduler	(III)V
    //   1616: aload_0
    //   1617: getfield 1445	com/android/server/am/ActivityManagerService:mUseFifoUiScheduling	Z
    //   1620: ifeq +194 -> 1814
    //   1623: aload_1
    //   1624: aload_1
    //   1625: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1628: invokestatic 2661	android/os/Process:getThreadPriority	(I)I
    //   1631: putfield 2664	com/android/server/am/ProcessRecord:savedPriority	I
    //   1634: aload_1
    //   1635: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1638: ldc_w 2655
    //   1641: iconst_1
    //   1642: invokestatic 2658	android/os/Process:setThreadScheduler	(III)V
    //   1645: aload_1
    //   1646: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1649: istore 7
    //   1651: iload 7
    //   1653: ifeq +80 -> 1733
    //   1656: aload_1
    //   1657: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1660: ldc_w 2655
    //   1663: iconst_1
    //   1664: invokestatic 2658	android/os/Process:setThreadScheduler	(III)V
    //   1667: getstatic 2484	com/android/server/am/ActivityManagerDebugConfig:DEBUG_OOM_ADJ	Z
    //   1670: ifeq +39 -> 1709
    //   1673: ldc_w 2666
    //   1676: new 1066	java/lang/StringBuilder
    //   1679: dup
    //   1680: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1683: ldc_w 2668
    //   1686: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1689: aload_1
    //   1690: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1693: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1696: ldc_w 2670
    //   1699: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1702: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1705: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   1708: pop
    //   1709: lload 12
    //   1711: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1714: iload 11
    //   1716: istore 10
    //   1718: goto -1099 -> 619
    //   1721: iconst_0
    //   1722: istore 7
    //   1724: goto -165 -> 1559
    //   1727: iconst_5
    //   1728: istore 7
    //   1730: goto -171 -> 1559
    //   1733: getstatic 2484	com/android/server/am/ActivityManagerDebugConfig:DEBUG_OOM_ADJ	Z
    //   1736: ifeq -27 -> 1709
    //   1739: ldc_w 2666
    //   1742: ldc_w 2675
    //   1745: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   1748: pop
    //   1749: goto -40 -> 1709
    //   1752: astore 14
    //   1754: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   1757: new 1066	java/lang/StringBuilder
    //   1760: dup
    //   1761: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1764: ldc_w 2677
    //   1767: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1770: aload_1
    //   1771: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1774: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1777: ldc_w 2504
    //   1780: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1783: aload_1
    //   1784: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   1787: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1790: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1793: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   1796: pop
    //   1797: aload 14
    //   1799: invokevirtual 2680	java/lang/Exception:printStackTrace	()V
    //   1802: lload 12
    //   1804: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1807: iload 11
    //   1809: istore 10
    //   1811: goto -1192 -> 619
    //   1814: aload_1
    //   1815: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1818: bipush -10
    //   1820: invokestatic 2683	android/os/Process:setThreadPriority	(II)V
    //   1823: aload_1
    //   1824: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1827: istore 7
    //   1829: iload 7
    //   1831: ifeq -122 -> 1709
    //   1834: aload_1
    //   1835: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1838: bipush -10
    //   1840: invokestatic 2683	android/os/Process:setThreadPriority	(II)V
    //   1843: goto -134 -> 1709
    //   1846: astore 14
    //   1848: goto -139 -> 1709
    //   1851: iload 9
    //   1853: iconst_2
    //   1854: if_icmpne -145 -> 1709
    //   1857: aload_1
    //   1858: getfield 2436	com/android/server/am/ProcessRecord:curSchedGroup	I
    //   1861: iconst_2
    //   1862: if_icmpeq -153 -> 1709
    //   1865: aload_1
    //   1866: getfield 2654	com/android/server/am/ProcessRecord:vrThreadTid	I
    //   1869: ifeq +12 -> 1881
    //   1872: aload_1
    //   1873: getfield 2654	com/android/server/am/ProcessRecord:vrThreadTid	I
    //   1876: iconst_0
    //   1877: iconst_0
    //   1878: invokestatic 2658	android/os/Process:setThreadScheduler	(III)V
    //   1881: aload_0
    //   1882: getfield 1445	com/android/server/am/ActivityManagerService:mUseFifoUiScheduling	Z
    //   1885: ifeq +59 -> 1944
    //   1888: aload_1
    //   1889: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1892: iconst_0
    //   1893: iconst_0
    //   1894: invokestatic 2658	android/os/Process:setThreadScheduler	(III)V
    //   1897: aload_1
    //   1898: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1901: aload_1
    //   1902: getfield 2664	com/android/server/am/ProcessRecord:savedPriority	I
    //   1905: invokestatic 2683	android/os/Process:setThreadPriority	(II)V
    //   1908: aload_1
    //   1909: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1912: ifeq -203 -> 1709
    //   1915: aload_1
    //   1916: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1919: iconst_0
    //   1920: iconst_0
    //   1921: invokestatic 2658	android/os/Process:setThreadScheduler	(III)V
    //   1924: aload_1
    //   1925: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1928: bipush -4
    //   1930: invokestatic 2683	android/os/Process:setThreadPriority	(II)V
    //   1933: goto -224 -> 1709
    //   1936: astore_1
    //   1937: lload 12
    //   1939: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1942: aload_1
    //   1943: athrow
    //   1944: aload_1
    //   1945: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   1948: iconst_0
    //   1949: invokestatic 2683	android/os/Process:setThreadPriority	(II)V
    //   1952: aload_1
    //   1953: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1956: ifeq -247 -> 1709
    //   1959: aload_1
    //   1960: getfield 2195	com/android/server/am/ProcessRecord:renderThreadTid	I
    //   1963: iconst_0
    //   1964: invokestatic 2683	android/os/Process:setThreadPriority	(II)V
    //   1967: goto -258 -> 1709
    //   1970: lload_3
    //   1971: aload_1
    //   1972: getfield 2550	com/android/server/am/ProcessRecord:nextPssTime	J
    //   1975: lcmp
    //   1976: ifgt +33 -> 2009
    //   1979: lload_3
    //   1980: aload_1
    //   1981: getfield 2686	com/android/server/am/ProcessRecord:lastPssTime	J
    //   1984: ldc2_w 227
    //   1987: ladd
    //   1988: lcmp
    //   1989: ifle -1119 -> 870
    //   1992: lload_3
    //   1993: aload_1
    //   1994: getfield 2540	com/android/server/am/ProcessRecord:lastStateTime	J
    //   1997: aload_0
    //   1998: getfield 1619	com/android/server/am/ActivityManagerService:mTestPssMode	Z
    //   2001: invokestatic 2690	com/android/server/am/ProcessList:minTimeFromStateChange	(Z)J
    //   2004: ladd
    //   2005: lcmp
    //   2006: ifle -1136 -> 870
    //   2009: aload_0
    //   2010: aload_1
    //   2011: aload_1
    //   2012: getfield 2444	com/android/server/am/ProcessRecord:setProcState	I
    //   2015: invokevirtual 2694	com/android/server/am/ActivityManagerService:requestPssLocked	(Lcom/android/server/am/ProcessRecord;I)V
    //   2018: aload_1
    //   2019: aload_1
    //   2020: getfield 2439	com/android/server/am/ProcessRecord:curProcState	I
    //   2023: iconst_0
    //   2024: aload_0
    //   2025: getfield 1619	com/android/server/am/ActivityManagerService:mTestPssMode	Z
    //   2028: aload_0
    //   2029: invokevirtual 2543	com/android/server/am/ActivityManagerService:isSleepingLocked	()Z
    //   2032: lload_3
    //   2033: invokestatic 2547	com/android/server/am/ProcessList:computeNextPssTime	(IZZZJ)J
    //   2036: putfield 2550	com/android/server/am/ProcessRecord:nextPssTime	J
    //   2039: goto -1169 -> 870
    //   2042: iconst_0
    //   2043: istore 7
    //   2045: goto -1097 -> 948
    //   2048: iconst_0
    //   2049: istore 9
    //   2051: goto -1091 -> 960
    //   2054: aload_0
    //   2055: getfield 1879	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
    //   2058: invokevirtual 1883	com/android/server/am/BatteryStatsService:getActiveStatistics	()Lcom/android/internal/os/BatteryStatsImpl;
    //   2061: astore 14
    //   2063: aload 14
    //   2065: monitorenter
    //   2066: aload_1
    //   2067: aload 14
    //   2069: aload_1
    //   2070: getfield 2260	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
    //   2073: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   2076: aload_1
    //   2077: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   2080: lload 5
    //   2082: invokevirtual 2698	com/android/internal/os/BatteryStatsImpl:getProcessWakeTime	(IIJ)J
    //   2085: putfield 2701	com/android/server/am/ProcessRecord:lastWakeTime	J
    //   2088: aload 14
    //   2090: monitorexit
    //   2091: aload_1
    //   2092: aload_1
    //   2093: getfield 2704	com/android/server/am/ProcessRecord:curCpuTime	J
    //   2096: putfield 2707	com/android/server/am/ProcessRecord:lastCpuTime	J
    //   2099: iconst_0
    //   2100: istore 7
    //   2102: iload 7
    //   2104: iconst_4
    //   2105: if_icmpge -1135 -> 970
    //   2108: aload_1
    //   2109: getfield 2710	com/android/server/am/ProcessRecord:lastCpuTimeBgMonitor	[J
    //   2112: iload 7
    //   2114: aload_1
    //   2115: getfield 2713	com/android/server/am/ProcessRecord:curCpuTimeBgMonitor	J
    //   2118: lastore
    //   2119: iload 7
    //   2121: iconst_1
    //   2122: iadd
    //   2123: istore 7
    //   2125: goto -23 -> 2102
    //   2128: astore_1
    //   2129: aload 14
    //   2131: monitorexit
    //   2132: aload_1
    //   2133: athrow
    //   2134: aload_1
    //   2135: iconst_1
    //   2136: putfield 2716	com/android/server/am/ProcessRecord:procStateChanged	Z
    //   2139: goto -1123 -> 1016
    //   2142: aload_1
    //   2143: getfield 2719	com/android/server/am/ProcessRecord:reportedInteraction	Z
    //   2146: ifeq -1130 -> 1016
    //   2149: lload 5
    //   2151: aload_1
    //   2152: getfield 2722	com/android/server/am/ProcessRecord:interactionEventTime	J
    //   2155: lsub
    //   2156: ldc2_w 493
    //   2159: lcmp
    //   2160: ifle -1144 -> 1016
    //   2163: aload_0
    //   2164: aload_1
    //   2165: lload 5
    //   2167: invokespecial 2564	com/android/server/am/ActivityManagerService:maybeUpdateUsageStatsLocked	(Lcom/android/server/am/ProcessRecord;J)V
    //   2170: goto -1154 -> 1016
    //   2173: iload 7
    //   2175: iconst_1
    //   2176: isub
    //   2177: istore 7
    //   2179: aload 15
    //   2181: astore 14
    //   2183: goto -1104 -> 1079
    //   2186: new 156	com/android/server/am/ActivityManagerService$ProcessChangeItem
    //   2189: dup
    //   2190: invokespecial 2723	com/android/server/am/ActivityManagerService$ProcessChangeItem:<init>	()V
    //   2193: astore 15
    //   2195: aload 15
    //   2197: astore 14
    //   2199: getstatic 2577	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROCESS_OBSERVERS	Z
    //   2202: ifeq -973 -> 1229
    //   2205: getstatic 1140	com/android/server/am/ActivityManagerService:TAG_PROCESS_OBSERVERS	Ljava/lang/String;
    //   2208: new 1066	java/lang/StringBuilder
    //   2211: dup
    //   2212: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2215: ldc_w 2725
    //   2218: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2221: aload 15
    //   2223: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2226: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2229: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   2232: pop
    //   2233: aload 15
    //   2235: astore 14
    //   2237: goto -1008 -> 1229
    //   2240: astore 14
    //   2242: iload 7
    //   2244: istore 8
    //   2246: goto -1544 -> 702
    //   2249: astore 14
    //   2251: goto -584 -> 1667
    //   2254: astore 14
    //   2256: goto -611 -> 1645
    //   2259: astore 14
    //   2261: goto -645 -> 1616
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	2264	0	this	ActivityManagerService
    //   0	2264	1	paramProcessRecord	ProcessRecord
    //   0	2264	2	paramBoolean	boolean
    //   0	2264	3	paramLong1	long
    //   0	2264	5	paramLong2	long
    //   89	2154	7	i	int
    //   331	1914	8	j	int
    //   521	1529	9	k	int
    //   504	1306	10	bool1	boolean
    //   1	1807	11	bool2	boolean
    //   1562	376	12	l	long
    //   79	1337	14	localObject1	Object
    //   1752	46	14	localException	Exception
    //   1846	1	14	localIllegalArgumentException1	IllegalArgumentException
    //   2240	1	14	localRemoteException	RemoteException
    //   2249	1	14	localIllegalArgumentException2	IllegalArgumentException
    //   2254	1	14	localIllegalArgumentException3	IllegalArgumentException
    //   2259	1	14	localIllegalArgumentException4	IllegalArgumentException
    //   1096	1138	15	localProcessChangeItem	ProcessChangeItem
    // Exception table:
    //   from	to	target	type
    //   1564	1581	1752	java/lang/Exception
    //   1587	1600	1752	java/lang/Exception
    //   1605	1616	1752	java/lang/Exception
    //   1616	1634	1752	java/lang/Exception
    //   1634	1645	1752	java/lang/Exception
    //   1645	1651	1752	java/lang/Exception
    //   1656	1667	1752	java/lang/Exception
    //   1667	1709	1752	java/lang/Exception
    //   1733	1749	1752	java/lang/Exception
    //   1814	1829	1752	java/lang/Exception
    //   1834	1843	1752	java/lang/Exception
    //   1857	1881	1752	java/lang/Exception
    //   1881	1933	1752	java/lang/Exception
    //   1944	1967	1752	java/lang/Exception
    //   1834	1843	1846	java/lang/IllegalArgumentException
    //   1564	1581	1936	finally
    //   1587	1600	1936	finally
    //   1605	1616	1936	finally
    //   1616	1634	1936	finally
    //   1634	1645	1936	finally
    //   1645	1651	1936	finally
    //   1656	1667	1936	finally
    //   1667	1709	1936	finally
    //   1733	1749	1936	finally
    //   1754	1802	1936	finally
    //   1814	1829	1936	finally
    //   1834	1843	1936	finally
    //   1857	1881	1936	finally
    //   1881	1933	1936	finally
    //   1944	1967	1936	finally
    //   2066	2088	2128	finally
    //   685	698	2240	android/os/RemoteException
    //   1656	1667	2249	java/lang/IllegalArgumentException
    //   1634	1645	2254	java/lang/IllegalArgumentException
    //   1605	1616	2259	java/lang/IllegalArgumentException
  }
  
  private void applyVrMode(boolean paramBoolean1, ComponentName paramComponentName1, int paramInt, ComponentName paramComponentName2, boolean paramBoolean2)
  {
    VrManagerInternal localVrManagerInternal = (VrManagerInternal)LocalServices.getService(VrManagerInternal.class);
    if (paramBoolean2)
    {
      localVrManagerInternal.setVrModeImmediate(paramBoolean1, paramComponentName1, paramInt, paramComponentName2);
      return;
    }
    localVrManagerInternal.setVrMode(paramBoolean1, paramComponentName1, paramInt, paramComponentName2);
  }
  
  private void applyVrModeIfNeededLocked(ActivityRecord paramActivityRecord, boolean paramBoolean)
  {
    MainHandler localMainHandler1 = this.mHandler;
    MainHandler localMainHandler2 = this.mHandler;
    if (paramBoolean) {}
    for (int i = 1;; i = 0)
    {
      localMainHandler1.sendMessage(localMainHandler2.obtainMessage(69, i, 0, paramActivityRecord));
      return;
    }
  }
  
  private final boolean attachApplicationLocked(IApplicationThread paramIApplicationThread, int paramInt)
  {
    if ((paramInt != MY_PID) && (paramInt >= 0)) {}
    ProcessRecord localProcessRecord;
    for (;;)
    {
      synchronized (this.mPidsSelfLocked)
      {
        localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramInt);
        Trace.traceBegin(64L, "attach");
        if ((localProcessRecord != null) || (!this.mEmbryoManager.attach(paramIApplicationThread, paramInt))) {
          break;
        }
        Trace.traceEnd(64L);
        return true;
      }
      localProcessRecord = null;
    }
    Trace.traceEnd(64L);
    if (localProcessRecord == null)
    {
      Slog.w(TAG, "No pending application record for pid " + paramInt + " (IApplicationThread " + paramIApplicationThread + "); dropping process");
      EventLog.writeEvent(30033, paramInt);
      if ((paramInt > 0) && (paramInt != MY_PID)) {
        Process.killProcessQuiet(paramInt);
      }
      for (;;)
      {
        return false;
        try
        {
          paramIApplicationThread.scheduleExit();
        }
        catch (Exception paramIApplicationThread) {}
      }
    }
    if (localProcessRecord.thread != null) {
      handleAppDiedLocked(localProcessRecord, true, true);
    }
    if (ActivityManagerDebugConfig.DEBUG_ALL) {
      Slog.v(TAG, "Binding process pid " + paramInt + " to record " + localProcessRecord);
    }
    String str = localProcessRecord.processName;
    for (;;)
    {
      int n;
      List localList;
      Object localObject3;
      Object localObject5;
      boolean bool2;
      Object localObject4;
      try
      {
        ??? = new AppDeathRecipient(localProcessRecord, paramInt, paramIApplicationThread);
        paramIApplicationThread.asBinder().linkToDeath((IBinder.DeathRecipient)???, 0);
        localProcessRecord.deathRecipient = ((IBinder.DeathRecipient)???);
        EventLog.writeEvent(30010, new Object[] { Integer.valueOf(localProcessRecord.userId), Integer.valueOf(localProcessRecord.pid), localProcessRecord.processName });
        localProcessRecord.makeActive(paramIApplicationThread, this.mProcessStats);
        localProcessRecord.verifiedAdj = 55536;
        localProcessRecord.setAdj = 55536;
        localProcessRecord.curAdj = 55536;
        localProcessRecord.setSchedGroup = 1;
        localProcessRecord.curSchedGroup = 1;
        localProcessRecord.forcingToForeground = null;
        updateProcessForegroundLocked(localProcessRecord, false, false);
        localProcessRecord.hasShownUi = false;
        localProcessRecord.debugging = false;
        localProcessRecord.cached = false;
        localProcessRecord.killedByAm = false;
        localProcessRecord.unlocked = StorageManager.isUserKeyUnlocked(localProcessRecord.userId);
        this.mHandler.removeMessages(20, localProcessRecord);
        if (!this.mProcessesReady)
        {
          n = isAllowedWhileBooting(localProcessRecord.info);
          if (n == 0) {
            break label1498;
          }
          localList = generateApplicationProvidersLocked(localProcessRecord);
          if ((localList != null) && (checkAppInLaunchingProvidersLocked(localProcessRecord)))
          {
            ??? = this.mHandler.obtainMessage(59);
            ((Message)???).obj = localProcessRecord;
            this.mHandler.sendMessageDelayed((Message)???, 10000L);
          }
          if (n == 0) {
            Slog.i(TAG, "Launching preboot mode app: " + localProcessRecord);
          }
          if (ActivityManagerDebugConfig.DEBUG_ALL) {
            Slog.v(TAG, "New app record " + localProcessRecord + " thread=" + paramIApplicationThread.asBinder() + " pid=" + paramInt);
          }
          i = 0;
          j = i;
        }
      }
      catch (RemoteException paramIApplicationThread)
      {
        boolean bool1;
        boolean bool3;
        label981:
        label1043:
        localProcessRecord.resetPackageList(this.mProcessStats);
        startProcessLocked(localProcessRecord, "link fail", str);
        return false;
      }
      try
      {
        if (this.mDebugApp != null)
        {
          j = i;
          if (this.mDebugApp.equals(str))
          {
            if (!this.mWaitForDebugger) {
              break label1504;
            }
            i = 2;
            localProcessRecord.debugging = true;
            j = i;
            if (this.mDebugTransient)
            {
              this.mDebugApp = this.mOrigDebugApp;
              this.mWaitForDebugger = this.mOrigWaitForDebugger;
              j = i;
            }
          }
        }
        localObject3 = localProcessRecord.instrumentationProfileFile;
        localObject5 = null;
        i = 0;
        bool1 = false;
        bool2 = bool1;
        ??? = localObject5;
        localObject4 = localObject3;
        k = i;
        if (this.mProfileApp != null)
        {
          bool2 = bool1;
          ??? = localObject5;
          localObject4 = localObject3;
          k = i;
          if (this.mProfileApp.equals(str))
          {
            this.mProfileProc = localProcessRecord;
            localObject4 = this.mProfileFile;
            ??? = this.mProfileFd;
            k = this.mSamplingInterval;
            bool2 = this.mAutoStopProfiler;
          }
        }
        bool3 = false;
        bool1 = bool3;
        if (this.mTrackAllocationApp != null)
        {
          bool1 = bool3;
          if (this.mTrackAllocationApp.equals(str))
          {
            bool1 = true;
            this.mTrackAllocationApp = null;
          }
        }
        m = 0;
        i = m;
        if (this.mBackupTarget != null)
        {
          i = m;
          if (this.mBackupAppName.equals(str))
          {
            if (this.mBackupTarget.appInfo.uid < 10000) {
              break label1809;
            }
            if (this.mBackupTarget.backupMode == 2) {
              break label1788;
            }
            if (this.mBackupTarget.backupMode != 3) {
              break label1509;
            }
            break label1788;
          }
        }
        if (localProcessRecord.instrumentationClass != null) {
          notifyPackageUse(localProcessRecord.instrumentationClass.getPackageName(), 7);
        }
        if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
          Slog.v(TAG_CONFIGURATION, "Binding proc " + str + " with config " + this.mConfiguration);
        }
        if (localProcessRecord.instrumentationInfo != null)
        {
          localObject3 = localProcessRecord.instrumentationInfo;
          localProcessRecord.compat = compatibilityInfoForPackageLocked((ApplicationInfo)localObject3);
          localObject5 = ???;
          if (??? == null) {
            break label1793;
          }
          localObject5 = ((ParcelFileDescriptor)???).dup();
          break label1793;
          if (localObject3 != null) {
            OnePlusProcessManager.resumeProcessByUID_out(((ApplicationInfo)localObject3).uid, "bindApplication");
          }
          localObject4 = localProcessRecord.instrumentationClass;
          localObject5 = localProcessRecord.instrumentationArguments;
          IInstrumentationWatcher localIInstrumentationWatcher = localProcessRecord.instrumentationWatcher;
          IUiAutomationConnection localIUiAutomationConnection = localProcessRecord.instrumentationUiAutomationConnection;
          bool3 = this.mBinderTransactionTrackingEnabled;
          if ((i != 0) || (n == 0)) {
            break label1555;
          }
          bool2 = false;
          paramIApplicationThread.bindApplication(str, (ApplicationInfo)localObject3, localList, (ComponentName)localObject4, (ProfilerInfo)???, (Bundle)localObject5, localIInstrumentationWatcher, localIUiAutomationConnection, j, bool3, bool1, bool2, localProcessRecord.persistent, new Configuration(this.mConfiguration), localProcessRecord.compat, getCommonServicesLocked(localProcessRecord.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked());
          updateLruProcessLocked(localProcessRecord, false, null);
          long l = SystemClock.uptimeMillis();
          localProcessRecord.lastLowMemory = l;
          localProcessRecord.lastRequestedGc = l;
          this.mPersistentStartingProcesses.remove(localProcessRecord);
          if ((ActivityManagerDebugConfig.DEBUG_PROCESSES) && (this.mProcessesOnHold.contains(localProcessRecord))) {
            Slog.v(TAG_PROCESSES, "Attach application locked removing on hold: " + localProcessRecord);
          }
          this.mProcessesOnHold.remove(localProcessRecord);
          k = 0;
          m = 0;
          i = k;
          j = m;
          if (n == 0) {}
        }
      }
      catch (Exception paramIApplicationThread)
      {
        Slog.wtf(TAG, "Exception thrown during bind of " + localProcessRecord, paramIApplicationThread);
        localProcessRecord.resetPackageList(this.mProcessStats);
        localProcessRecord.unlinkDeathRecipient();
        startProcessLocked(localProcessRecord, "bind fail", str);
        return false;
      }
      try
      {
        n = this.mStackSupervisor.attachApplicationLocked(localProcessRecord);
        i = k;
        j = m;
        if (n != 0)
        {
          j = 1;
          i = k;
        }
      }
      catch (Exception localException1)
      {
        Slog.wtf(TAG, "Exception thrown launching activities in " + localProcessRecord, localException1);
        i = 1;
        j = m;
        continue;
      }
      int k = i;
      int m = j;
      if (i == 0) {}
      try
      {
        n = this.mServices.attachApplicationLocked(localProcessRecord, str);
        m = j | n;
        k = i;
      }
      catch (Exception localException2)
      {
        Slog.wtf(TAG, "Exception thrown starting services in " + localProcessRecord, localException2);
        k = 1;
        m = j;
        continue;
      }
      int i = k;
      int j = m;
      if (k == 0)
      {
        i = k;
        j = m;
        if (!isPendingBroadcastProcessLocked(paramInt)) {}
      }
      try
      {
        n = sendPendingBroadcastsLocked(localProcessRecord);
        j = m | n;
        i = k;
      }
      catch (Exception localException3)
      {
        Slog.wtf(TAG, "Exception thrown dispatching broadcasts in " + localProcessRecord, localException3);
        i = 1;
        j = m;
        continue;
      }
      paramInt = i;
      if (i == 0)
      {
        paramInt = i;
        if (this.mBackupTarget != null)
        {
          paramInt = i;
          if (this.mBackupTarget.appInfo.uid == localProcessRecord.uid)
          {
            if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
              Slog.v(TAG_BACKUP, "New app is backup target, launching agent for " + localProcessRecord);
            }
            notifyPackageUse(this.mBackupTarget.appInfo.packageName, 5);
          }
        }
      }
      try
      {
        paramIApplicationThread.scheduleCreateBackupAgent(this.mBackupTarget.appInfo, compatibilityInfoForPackageLocked(this.mBackupTarget.appInfo), this.mBackupTarget.backupMode);
        paramInt = i;
      }
      catch (Exception paramIApplicationThread)
      {
        label1498:
        label1504:
        label1509:
        label1555:
        Slog.wtf(TAG, "Exception thrown creating backup agent in " + localProcessRecord, paramIApplicationThread);
        paramInt = 1;
        continue;
        if (j != 0) {
          break label1786;
        }
        updateOomAdjLocked();
        label1786:
        return true;
      }
      if (paramInt != 0)
      {
        localProcessRecord.kill("error during init", true);
        handleAppDiedLocked(localProcessRecord, false, true);
        return false;
        n = 1;
        continue;
        localList = null;
        continue;
        i = 1;
        continue;
        if (this.mBackupTarget.backupMode == 1)
        {
          i = 1;
          continue;
          localObject3 = localProcessRecord.info;
          continue;
        }
      }
      else
      {
        label1788:
        label1793:
        do
        {
          ??? = new ProfilerInfo((String)localObject4, (ParcelFileDescriptor)localObject5, k, bool2);
          break label981;
          bool2 = true;
          break label1043;
          i = 1;
          break;
        } while (localObject4 != null);
        Object localObject2 = null;
        continue;
      }
      i = 0;
      continue;
      label1809:
      i = 0;
    }
  }
  
  static void boostPriorityForLockedSection()
  {
    int i = Process.myTid();
    int j = Process.getThreadPriority(i);
    PriorityState localPriorityState = (PriorityState)sThreadPriorityState.get();
    if ((PriorityState.-get1(localPriorityState) == 0) && (j > -2))
    {
      PriorityState.-set0(localPriorityState, j);
      Process.setThreadPriority(i, -2);
    }
    PriorityState.-set1(localPriorityState, PriorityState.-get1(localPriorityState) + 1);
  }
  
  private void buildAssistBundleLocked(PendingAssistExtras paramPendingAssistExtras, Bundle paramBundle)
  {
    if (paramBundle != null) {
      paramPendingAssistExtras.extras.putBundle("android.intent.extra.ASSIST_CONTEXT", paramBundle);
    }
    if (paramPendingAssistExtras.hint != null) {
      paramPendingAssistExtras.extras.putBoolean(paramPendingAssistExtras.hint, true);
    }
  }
  
  private boolean canClearIdentity(int paramInt1, int paramInt2, int paramInt3)
  {
    if (UserHandle.getUserId(paramInt2) == paramInt3) {
      return true;
    }
    return (checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", paramInt1, paramInt2, -1, true) == 0) || (checkComponentPermission("android.permission.INTERACT_ACROSS_USERS_FULL", paramInt1, paramInt2, -1, true) == 0);
  }
  
  private final boolean canGcNowLocked()
  {
    boolean bool = false;
    int j = 0;
    BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
    int k = arrayOfBroadcastQueue.length;
    int i = 0;
    while (i < k)
    {
      BroadcastQueue localBroadcastQueue = arrayOfBroadcastQueue[i];
      if ((localBroadcastQueue.mParallelBroadcasts.size() != 0) || (localBroadcastQueue.mOrderedBroadcasts.size() != 0)) {
        j = 1;
      }
      i += 1;
    }
    if (j == 0)
    {
      if (!isSleepingLocked()) {
        bool = this.mStackSupervisor.allResumedActivitiesIdle();
      }
    }
    else {
      return bool;
    }
    return true;
  }
  
  private void checkBroadcastFromSystem(Intent paramIntent, ProcessRecord paramProcessRecord, String paramString, int paramInt, boolean paramBoolean, List paramList)
  {
    String str = paramIntent.getAction();
    if ((paramBoolean) || ("android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(str)) || ("android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(str)) || ("android.intent.action.MEDIA_BUTTON".equals(str)) || ("android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(str)) || ("android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(str)) || ("android.intent.action.MASTER_CLEAR".equals(str)) || ("android.appwidget.action.APPWIDGET_CONFIGURE".equals(str)) || ("android.appwidget.action.APPWIDGET_UPDATE".equals(str)) || ("android.location.HIGH_POWER_REQUEST_CHANGE".equals(str)) || ("com.android.omadm.service.CONFIGURATION_UPDATE".equals(str)) || ("android.text.style.SUGGESTION_PICKED".equals(str))) {
      return;
    }
    if ((paramList != null) && (paramList.size() > 0) && ((paramIntent.getPackage() != null) || (paramIntent.getComponent() != null)))
    {
      int k = 1;
      int j = paramList.size() - 1;
      for (;;)
      {
        int i = k;
        if (j >= 0)
        {
          paramIntent = paramList.get(j);
          if (!(paramIntent instanceof ResolveInfo)) {
            break label236;
          }
          paramIntent = (ResolveInfo)paramIntent;
          if ((!paramIntent.activityInfo.exported) || (paramIntent.activityInfo.permission != null)) {
            break label252;
          }
        }
        for (i = 0;; i = 0)
        {
          if (i == 0) {
            break label261;
          }
          return;
          label236:
          if (((BroadcastFilter)paramIntent).requiredPermission != null) {
            break;
          }
        }
        label252:
        j -= 1;
      }
    }
    label261:
    if (paramProcessRecord != null)
    {
      Log.d(TAG, "Sending non-protected broadcast " + str + " from system " + paramProcessRecord.toShortString() + " pkg " + paramString, new Throwable());
      return;
    }
    Log.d(TAG, "Sending non-protected broadcast " + str + " from system uid " + UserHandle.formatUid(paramInt) + " pkg " + paramString, new Throwable());
  }
  
  private final String checkContentProviderPermissionLocked(ProviderInfo paramProviderInfo, ProcessRecord paramProcessRecord, int paramInt, boolean paramBoolean)
  {
    int j;
    if (paramProcessRecord != null)
    {
      j = paramProcessRecord.pid;
      if (paramProcessRecord == null) {
        break label82;
      }
    }
    int n;
    int i1;
    label82:
    for (int k = paramProcessRecord.uid;; k = Binder.getCallingUid())
    {
      i = 0;
      n = 0;
      m = paramInt;
      if (!paramBoolean) {
        break label147;
      }
      i1 = this.mUserController.unsafeConvertIncomingUserLocked(paramInt);
      i = n;
      if (i1 == UserHandle.getUserId(k)) {
        break label93;
      }
      if (!checkAuthorityGrants(k, paramProviderInfo, i1, paramBoolean)) {
        break label90;
      }
      return null;
      j = Binder.getCallingPid();
      break;
    }
    label90:
    int i = 1;
    label93:
    paramInt = this.mUserController.handleIncomingUser(j, k, paramInt, false, 0, "checkContentProviderPermissionLocked " + paramProviderInfo.authority, null);
    int m = paramInt;
    if (paramInt != i1)
    {
      i = 0;
      m = paramInt;
    }
    label147:
    if (checkComponentPermission(paramProviderInfo.readPermission, j, k, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) == 0) {
      return null;
    }
    if (checkComponentPermission(paramProviderInfo.writePermission, j, k, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) == 0) {
      return null;
    }
    Object localObject = paramProviderInfo.pathPermissions;
    if (localObject != null)
    {
      paramInt = localObject.length;
      while (paramInt > 0)
      {
        n = paramInt - 1;
        String str1 = localObject[n];
        String str2 = str1.getReadPermission();
        if ((str2 != null) && (checkComponentPermission(str2, j, k, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) == 0)) {
          return null;
        }
        str1 = str1.getWritePermission();
        paramInt = n;
        if (str1 != null)
        {
          paramInt = n;
          if (checkComponentPermission(str1, j, k, paramProviderInfo.applicationInfo.uid, paramProviderInfo.exported) == 0) {
            return null;
          }
        }
      }
    }
    if ((i == 0) && (checkAuthorityGrants(k, paramProviderInfo, m, paramBoolean))) {
      return null;
    }
    if (!paramProviderInfo.exported)
    {
      localObject = new StringBuilder().append("Permission Denial: opening provider ").append(paramProviderInfo.name).append(" from ");
      if (paramProcessRecord != null) {}
      for (;;)
      {
        paramProviderInfo = paramProcessRecord + " (pid=" + j + ", uid=" + k + ") that is not exported from uid " + paramProviderInfo.applicationInfo.uid;
        Slog.w(TAG, paramProviderInfo);
        return paramProviderInfo;
        paramProcessRecord = "(null)";
      }
    }
    localObject = new StringBuilder().append("Permission Denial: opening provider ").append(paramProviderInfo.name).append(" from ");
    if (paramProcessRecord != null) {}
    for (;;)
    {
      paramProviderInfo = paramProcessRecord + " (pid=" + j + ", uid=" + k + ") requires " + paramProviderInfo.readPermission + " or " + paramProviderInfo.writePermission;
      break;
      paramProcessRecord = "(null)";
    }
  }
  
  private final boolean checkHoldingPermissionsInternalLocked(IPackageManager paramIPackageManager, ProviderInfo paramProviderInfo, GrantUri paramGrantUri, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (paramProviderInfo.applicationInfo.uid == paramInt1) {
      return true;
    }
    if (!paramProviderInfo.exported) {
      return false;
    }
    int i;
    boolean bool2;
    if ((paramInt2 & 0x1) == 0)
    {
      i = 1;
      if ((paramInt2 & 0x2) != 0) {
        break label643;
      }
      bool2 = true;
      label43:
      paramInt2 = i;
      if (i == 0) {
        paramInt2 = i;
      }
    }
    for (;;)
    {
      boolean bool1;
      int m;
      int k;
      try
      {
        if (paramProviderInfo.readPermission != null)
        {
          paramInt2 = i;
          if (paramBoolean)
          {
            paramInt2 = i;
            if (paramIPackageManager.checkUidPermission(paramProviderInfo.readPermission, paramInt1) == 0) {
              paramInt2 = 1;
            }
          }
        }
        bool1 = bool2;
        if (!bool2)
        {
          bool1 = bool2;
          if (paramProviderInfo.writePermission != null)
          {
            bool1 = bool2;
            if (paramBoolean)
            {
              bool1 = bool2;
              if (paramIPackageManager.checkUidPermission(paramProviderInfo.writePermission, paramInt1) == 0) {
                bool1 = true;
              }
            }
          }
        }
        if (paramProviderInfo.readPermission != null) {
          break label649;
        }
        i = 1;
        if (paramProviderInfo.writePermission != null) {
          break label655;
        }
        j = 1;
        paramProviderInfo = paramProviderInfo.pathPermissions;
        i1 = i;
        m = j;
        k = paramInt2;
        bool2 = bool1;
        if (paramProviderInfo == null) {
          break label613;
        }
        paramGrantUri = paramGrantUri.uri.getPath();
        n = paramProviderInfo.length;
      }
      catch (RemoteException paramIPackageManager)
      {
        Object localObject;
        String str;
        return false;
      }
      int i1 = n - 1;
      localObject = paramProviderInfo[i1];
      int n = i1;
      if (((PathPermission)localObject).match(paramGrantUri))
      {
        k = i;
        m = paramInt2;
        if (paramInt2 == 0)
        {
          str = ((PathPermission)localObject).getReadPermission();
          if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG_URI_PERMISSION, "Checking read perm for " + str + " for " + ((PathPermission)localObject).getPath() + ": match=" + ((PathPermission)localObject).match(paramGrantUri) + " check=" + paramIPackageManager.checkUidPermission(str, paramInt1));
          }
          k = i;
          m = paramInt2;
          if (str != null)
          {
            if ((!paramBoolean) || (paramIPackageManager.checkUidPermission(str, paramInt1) != 0)) {
              continue;
            }
            m = 1;
            k = i;
          }
        }
        i = k;
        n = i1;
        paramInt2 = m;
        if (!bool1)
        {
          str = ((PathPermission)localObject).getWritePermission();
          if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG_URI_PERMISSION, "Checking write perm " + str + " for " + ((PathPermission)localObject).getPath() + ": match=" + ((PathPermission)localObject).match(paramGrantUri) + " check=" + paramIPackageManager.checkUidPermission(str, paramInt1));
          }
          i = k;
          n = i1;
          paramInt2 = m;
          if (str != null)
          {
            if (paramBoolean)
            {
              paramInt2 = paramIPackageManager.checkUidPermission(str, paramInt1);
              if (paramInt2 == 0)
              {
                bool1 = true;
                i = k;
                n = i1;
                paramInt2 = m;
                break label566;
                k = 0;
                m = paramInt2;
                continue;
              }
            }
            j = 0;
            i = k;
            n = i1;
            paramInt2 = m;
          }
        }
      }
      label566:
      label613:
      do
      {
        return false;
        i1 = i;
        m = j;
        k = paramInt2;
        bool2 = bool1;
        if (n > 0)
        {
          if ((paramInt2 == 0) || (!bool1)) {
            break;
          }
          bool2 = bool1;
          k = paramInt2;
          m = j;
          i1 = i;
        }
        if (i1 != 0) {
          k = 1;
        }
        if (m != 0) {
          bool2 = true;
        }
      } while (k == 0);
      return bool2;
      i = 0;
      break;
      label643:
      bool2 = false;
      break label43;
      label649:
      i = 0;
      continue;
      label655:
      int j = 0;
    }
  }
  
  private final boolean checkHoldingPermissionsLocked(IPackageManager paramIPackageManager, ProviderInfo paramProviderInfo, GrantUri paramGrantUri, int paramInt1, int paramInt2)
  {
    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
      Slog.v(TAG_URI_PERMISSION, "checkHoldingPermissionsLocked: uri=" + paramGrantUri + " uid=" + paramInt1);
    }
    if ((UserHandle.getUserId(paramInt1) != paramGrantUri.sourceUserId) && (ActivityManager.checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", paramInt1, -1, true) != 0)) {
      return false;
    }
    return checkHoldingPermissionsInternalLocked(paramIPackageManager, paramProviderInfo, paramGrantUri, paramInt1, paramInt2, true);
  }
  
  private boolean checkIsImportant(ProcessRecord paramProcessRecord)
  {
    return this.mRestartProcessManager.canRestart(paramProcessRecord.info.packageName);
  }
  
  private boolean checkProcessExist(int paramInt)
  {
    if (!new File("/proc/" + paramInt + "/oom_score_adj").exists())
    {
      Message localMessage = this.mHandler.obtainMessage();
      localMessage.what = 1118;
      localMessage.obj = Integer.valueOf(paramInt);
      localMessage.sendToTarget();
      return false;
    }
    return true;
  }
  
  private final boolean checkRestart(ProcessRecord paramProcessRecord)
  {
    if (isExcludedAPP(paramProcessRecord.info.packageName)) {
      return true;
    }
    if ((!this.mAllowLowerMemLevel) || (this.mLastMemoryLevel < 2) || ((paramProcessRecord.info.flags & 0x1) != 0) || (checkIsImportant(paramProcessRecord))) {
      return true;
    }
    Slog.w(TAG, "AMS will block " + paramProcessRecord.processName + "(" + paramProcessRecord.info.packageName + ")" + " autostart due to process is killed by lmk in low memory");
    return false;
  }
  
  private void checkTime(long paramLong, String paramString)
  {
    long l = SystemClock.uptimeMillis();
    if (l - paramLong > 50L) {
      Slog.w(TAG, "Slow operation: " + (l - paramLong) + "ms so far, now at " + paramString);
    }
  }
  
  private final boolean checkUriPermissionLocked(GrantUri paramGrantUri, int paramInt1, int paramInt2)
  {
    if ((paramInt2 & 0x40) != 0)
    {
      i = 1;
      if (i == 0) {
        break label30;
      }
    }
    label30:
    for (int i = 3;; i = 1)
    {
      if (paramInt1 != 0) {
        break label36;
      }
      return true;
      i = 0;
      break;
    }
    label36:
    ArrayMap localArrayMap = (ArrayMap)this.mGrantedUriPermissions.get(paramInt1);
    if (localArrayMap == null) {
      return false;
    }
    UriPermission localUriPermission = (UriPermission)localArrayMap.get(paramGrantUri);
    if ((localUriPermission != null) && (localUriPermission.getStrength(paramInt2) >= i)) {
      return true;
    }
    int j = localArrayMap.size();
    paramInt1 = 0;
    while (paramInt1 < j)
    {
      localUriPermission = (UriPermission)localArrayMap.valueAt(paramInt1);
      if ((localUriPermission.uri.prefix) && (paramGrantUri.uri.isPathPrefixMatch(localUriPermission.uri.uri)) && (localUriPermission.getStrength(paramInt2) >= i)) {
        return true;
      }
      paramInt1 += 1;
    }
    return false;
  }
  
  private final boolean cleanUpApplicationRecordLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2, int paramInt, boolean paramBoolean3)
  {
    Slog.d(TAG, "cleanUpApplicationRecord -- " + paramProcessRecord.pid);
    if (paramInt >= 0)
    {
      removeLruProcessLocked(paramProcessRecord);
      ProcessList.remove(paramProcessRecord.pid);
    }
    this.mProcessesToGc.remove(paramProcessRecord);
    this.mPendingPssProcesses.remove(paramProcessRecord);
    boolean bool;
    int i;
    if ((paramProcessRecord.crashDialog == null) || (paramProcessRecord.forceCrashReport))
    {
      if (paramProcessRecord.anrDialog != null)
      {
        paramProcessRecord.anrDialog.dismiss();
        paramProcessRecord.anrDialog = null;
      }
      if (paramProcessRecord.waitDialog != null)
      {
        paramProcessRecord.waitDialog.dismiss();
        paramProcessRecord.waitDialog = null;
      }
      paramProcessRecord.crashing = false;
      paramProcessRecord.notResponding = false;
      paramProcessRecord.resetPackageList(this.mProcessStats);
      paramProcessRecord.unlinkDeathRecipient();
      paramProcessRecord.makeInactive(this.mProcessStats);
      paramProcessRecord.waitingToKill = null;
      paramProcessRecord.forcingToForeground = null;
      updateProcessForegroundLocked(paramProcessRecord, false, false);
      paramProcessRecord.foregroundActivities = false;
      paramProcessRecord.hasShownUi = false;
      paramProcessRecord.treatLikeActivity = false;
      paramProcessRecord.hasAboveClient = false;
      paramProcessRecord.hasClientActivities = false;
      bool = OnePlusProcessManager.checkProcessCanRestart(paramProcessRecord);
      if (!bool) {
        paramBoolean2 = bool;
      }
      this.mServices.killServicesLocked(paramProcessRecord, paramBoolean2);
      i = 0;
      j = 0;
      if (bool) {
        break label337;
      }
      OnePlusProcessManager.checkAppInLaunchingProviders(paramProcessRecord);
      i = j;
    }
    for (;;)
    {
      label231:
      if (!paramProcessRecord.conProviders.isEmpty())
      {
        j = paramProcessRecord.conProviders.size() - 1;
        for (;;)
        {
          if (j >= 0)
          {
            ??? = (ContentProviderConnection)paramProcessRecord.conProviders.get(j);
            ((ContentProviderConnection)???).provider.connections.remove(???);
            stopAssociationLocked(paramProcessRecord.uid, paramProcessRecord.processName, ((ContentProviderConnection)???).provider.uid, ((ContentProviderConnection)???).provider.name);
            j -= 1;
            continue;
            paramProcessRecord.crashDialog.dismiss();
            paramProcessRecord.crashDialog = null;
            break;
            label337:
            j = paramProcessRecord.pubProviders.size() - 1;
            if (j >= 0)
            {
              ??? = (ContentProviderRecord)paramProcessRecord.pubProviders.valueAt(j);
              if ((!paramProcessRecord.bad) && (paramBoolean2)) {}
              for (bool = false;; bool = true)
              {
                int k;
                if (!removeDyingProviderLocked(paramProcessRecord, (ContentProviderRecord)???, bool))
                {
                  k = i;
                  if (!bool) {}
                }
                else
                {
                  k = i;
                  if (((ContentProviderRecord)???).hasConnectionOrHandle()) {
                    k = 1;
                  }
                }
                ((ContentProviderRecord)???).provider = null;
                ((ContentProviderRecord)???).proc = null;
                j -= 1;
                i = k;
                break;
              }
            }
            paramProcessRecord.pubProviders.clear();
            if (!cleanupAppInLaunchingProvidersLocked(paramProcessRecord, false)) {
              break label231;
            }
            i = 1;
            break label231;
          }
        }
        paramProcessRecord.conProviders.clear();
      }
    }
    skipCurrentReceiverLocked(paramProcessRecord);
    int j = paramProcessRecord.receivers.size() - 1;
    while (j >= 0)
    {
      removeReceiverLocked((ReceiverList)paramProcessRecord.receivers.valueAt(j));
      j -= 1;
    }
    paramProcessRecord.receivers.clear();
    if ((this.mBackupTarget != null) && (paramProcessRecord.pid == this.mBackupTarget.app.pid)) {
      if ((ActivityManagerDebugConfig.DEBUG_BACKUP) || (ActivityManagerDebugConfig.DEBUG_CLEANUP)) {
        Slog.d(TAG_CLEANUP, "App " + this.mBackupTarget.appInfo + " died during backup");
      }
    }
    try
    {
      IBackupManager.Stub.asInterface(ServiceManager.getService("backup")).agentDisconnected(paramProcessRecord.info.packageName);
      j = this.mPendingProcessChanges.size() - 1;
      while (j >= 0)
      {
        ??? = (ProcessChangeItem)this.mPendingProcessChanges.get(j);
        if (((ProcessChangeItem)???).pid == paramProcessRecord.pid)
        {
          this.mPendingProcessChanges.remove(j);
          this.mAvailProcessChanges.add(???);
        }
        j -= 1;
      }
      this.mUiHandler.obtainMessage(32, paramProcessRecord.pid, paramProcessRecord.info.uid, null).sendToTarget();
      if (paramBoolean1) {
        return false;
      }
      if ((!paramProcessRecord.persistent) || (paramProcessRecord.isolated))
      {
        if ((ActivityManagerDebugConfig.DEBUG_PROCESSES) || (ActivityManagerDebugConfig.DEBUG_CLEANUP)) {
          Slog.v(TAG_CLEANUP, "Removing non-persistent process during cleanup: " + paramProcessRecord);
        }
        if (!paramBoolean3) {
          removeProcessNameLocked(paramProcessRecord.processName, paramProcessRecord.uid);
        }
        j = i;
        if (this.mHeavyWeightProcess == paramProcessRecord)
        {
          this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
          this.mHeavyWeightProcess = null;
          j = i;
        }
      }
      for (;;)
      {
        if (((ActivityManagerDebugConfig.DEBUG_PROCESSES) || (ActivityManagerDebugConfig.DEBUG_CLEANUP)) && (this.mProcessesOnHold.contains(paramProcessRecord))) {
          Slog.v(TAG_CLEANUP, "Clean-up removing on hold: " + paramProcessRecord);
        }
        this.mProcessesOnHold.remove(paramProcessRecord);
        if (paramProcessRecord == this.mHomeProcess)
        {
          this.mHomeProcessName = this.mHomeProcess.processName;
          this.mHomeProcess = null;
        }
        if (paramProcessRecord == this.mPreviousProcess) {
          this.mPreviousProcess = null;
        }
        if (((j != 0) && (!paramProcessRecord.isolated)) || ((paramProcessRecord.pid > 0) && (paramProcessRecord.pid != MY_PID))) {}
        synchronized (this.mPidsSelfLocked)
        {
          this.mPidsSelfLocked.remove(paramProcessRecord.pid);
          this.mHandler.removeMessages(20, paramProcessRecord);
          this.mBatteryStatsService.noteProcessFinish(paramProcessRecord.processName, paramProcessRecord.info.uid);
          if (paramProcessRecord.isolated) {
            this.mBatteryStatsService.removeIsolatedUid(paramProcessRecord.uid, paramProcessRecord.info.uid);
          }
          paramProcessRecord.setPid(0);
          return false;
          j = i;
          if (paramProcessRecord.removed) {
            continue;
          }
          j = i;
          if (this.mPersistentStartingProcesses.indexOf(paramProcessRecord) >= 0) {
            continue;
          }
          this.mPersistentStartingProcesses.add(paramProcessRecord);
          j = 1;
          continue;
          if (paramInt < 0) {
            ProcessList.remove(paramProcessRecord.pid);
          }
          addProcessNameLocked(paramProcessRecord);
          startProcessLocked(paramProcessRecord, "restart", paramProcessRecord.processName);
          return true;
        }
      }
    }
    catch (RemoteException localRemoteException)
    {
      for (;;) {}
    }
  }
  
  private void cleanUpRemovedTaskLocked(TaskRecord paramTaskRecord, boolean paramBoolean1, boolean paramBoolean2)
  {
    if (paramBoolean2)
    {
      this.mRecentTasks.remove(paramTaskRecord);
      paramTaskRecord.removedFromRecents();
    }
    Object localObject = paramTaskRecord.getBaseIntent().getComponent();
    if (localObject == null)
    {
      Slog.w(TAG, "No component for base intent of task: " + paramTaskRecord);
      return;
    }
    this.mServices.cleanUpRemovedTaskLocked(paramTaskRecord, (ComponentName)localObject, new Intent(paramTaskRecord.getBaseIntent()));
    if (!paramBoolean1) {
      return;
    }
    String str = ((ComponentName)localObject).getPackageName();
    localObject = new ArrayList();
    ArrayMap localArrayMap = this.mProcessNames.getMap();
    int i = 0;
    while (i < localArrayMap.size())
    {
      SparseArray localSparseArray = (SparseArray)localArrayMap.valueAt(i);
      int j = 0;
      if (j < localSparseArray.size())
      {
        ProcessRecord localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
        if (localProcessRecord.userId != paramTaskRecord.userId) {}
        for (;;)
        {
          j += 1;
          break;
          if ((localProcessRecord != this.mHomeProcess) && (localProcessRecord.pkgList.containsKey(str)))
          {
            int k = 0;
            while (k < localProcessRecord.activities.size())
            {
              TaskRecord localTaskRecord = ((ActivityRecord)localProcessRecord.activities.get(k)).task;
              if ((paramTaskRecord.taskId != localTaskRecord.taskId) && (localTaskRecord.inRecents)) {
                return;
              }
              k += 1;
            }
            if (localProcessRecord.foregroundServices) {
              return;
            }
            ((ArrayList)localObject).add(localProcessRecord);
          }
        }
      }
      i += 1;
    }
    i = 0;
    if (i < ((ArrayList)localObject).size())
    {
      paramTaskRecord = (ProcessRecord)((ArrayList)localObject).get(i);
      if ((paramTaskRecord.setSchedGroup == 0) && (paramTaskRecord.curReceiver == null)) {
        paramTaskRecord.kill("remove task", true);
      }
      for (;;)
      {
        i += 1;
        break;
        paramTaskRecord.waitingToKill = "remove task";
      }
    }
  }
  
  private void cleanupDisabledPackageComponentsLocked(String paramString, int paramInt, boolean paramBoolean, String[] paramArrayOfString)
  {
    Object localObject1 = null;
    int i = 0;
    IPackageManager localIPackageManager = AppGlobals.getPackageManager();
    if (paramArrayOfString == null) {
      return;
    }
    int j = paramArrayOfString.length - 1;
    Object localObject2;
    for (;;)
    {
      localObject2 = localObject1;
      int k = i;
      String str;
      if (j >= 0)
      {
        str = paramArrayOfString[j];
        if (!str.equals(paramString)) {
          break label138;
        }
        if (paramInt == -1) {
          break label118;
        }
        i = paramInt;
      }
      for (;;)
      {
        try
        {
          i = localIPackageManager.getApplicationEnabledSetting(paramString, i);
          if (i == 1) {
            break label132;
          }
          if (i == 0) {
            break label126;
          }
          i = 1;
          localObject2 = localObject1;
          k = i;
          if (i == 0) {
            break;
          }
          localObject2 = null;
          k = i;
          if ((k != 0) || (localObject2 != null)) {
            break label258;
          }
          return;
        }
        catch (Exception paramString)
        {
          label118:
          return;
        }
        i = 0;
        continue;
        label126:
        i = 0;
        continue;
        label132:
        i = 0;
      }
      try
      {
        label138:
        localObject2 = new ComponentName(paramString, str);
        if (paramInt != -1) {}
        for (k = paramInt;; k = 0)
        {
          int m = localIPackageManager.getComponentEnabledSetting((ComponentName)localObject2, k);
          localObject2 = localObject1;
          k = i;
          if (m != 1)
          {
            localObject2 = localObject1;
            k = i;
            if (m != 0)
            {
              localObject2 = localObject1;
              if (localObject1 == null) {
                localObject2 = new ArraySet(paramArrayOfString.length);
              }
              ((Set)localObject2).add(str);
              k = i;
            }
          }
          j -= 1;
          localObject1 = localObject2;
          i = k;
          break;
        }
        if (!this.mStackSupervisor.finishDisabledPackageActivitiesLocked(paramString, (Set)localObject2, true, false, paramInt)) {
          break label296;
        }
      }
      catch (Exception paramString)
      {
        return;
      }
    }
    label258:
    if (this.mBooted)
    {
      this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
      this.mStackSupervisor.scheduleIdleLocked();
    }
    label296:
    cleanupDisabledPackageTasksLocked(paramString, (Set)localObject2, paramInt);
    this.mServices.bringDownDisabledPackageServicesLocked(paramString, (Set)localObject2, paramInt, false, paramBoolean, true);
    paramArrayOfString = new ArrayList();
    this.mProviderMap.collectPackageProvidersLocked(paramString, (Set)localObject2, true, false, paramInt, paramArrayOfString);
    i = paramArrayOfString.size() - 1;
    while (i >= 0)
    {
      removeDyingProviderLocked(null, (ContentProviderRecord)paramArrayOfString.get(i), true);
      i -= 1;
    }
    i = this.mBroadcastQueues.length - 1;
    while (i >= 0)
    {
      this.mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(paramString, (Set)localObject2, paramInt, true);
      i -= 1;
    }
  }
  
  private void cleanupDisabledPackageTasksLocked(String paramString, Set<String> paramSet, int paramInt)
  {
    int i = this.mRecentTasks.size() - 1;
    if (i >= 0)
    {
      TaskRecord localTaskRecord = (TaskRecord)this.mRecentTasks.get(i);
      if ((paramInt != -1) && (localTaskRecord.userId != paramInt)) {}
      label127:
      for (;;)
      {
        i -= 1;
        break;
        ComponentName localComponentName = localTaskRecord.intent.getComponent();
        boolean bool;
        if ((localComponentName != null) && (localComponentName.getPackageName().equals(paramString))) {
          if (paramSet != null) {
            bool = paramSet.contains(localComponentName.getClassName());
          }
        }
        for (;;)
        {
          if (!bool) {
            break label127;
          }
          removeTaskByIdLocked(localTaskRecord.taskId, false, true);
          break;
          bool = true;
          continue;
          bool = false;
        }
      }
    }
  }
  
  private void clearProfilerLocked()
  {
    if (this.mProfileFd != null) {}
    try
    {
      this.mProfileFd.close();
      this.mProfileApp = null;
      this.mProfileProc = null;
      this.mProfileFile = null;
      this.mProfileType = 0;
      this.mAutoStopProfiler = false;
      this.mSamplingInterval = 0;
      return;
    }
    catch (IOException localIOException)
    {
      for (;;) {}
    }
  }
  
  /* Error */
  private List<ResolveInfo> collectReceiverComponents(Intent paramIntent, String paramString, int paramInt, int[] paramArrayOfInt)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 13
    //   3: aconst_null
    //   4: astore 11
    //   6: aconst_null
    //   7: astore 10
    //   9: iconst_0
    //   10: istore 5
    //   12: iconst_0
    //   13: istore 7
    //   15: aload 4
    //   17: arraylength
    //   18: istore 9
    //   20: aload 11
    //   22: astore 13
    //   24: iload 7
    //   26: iload 9
    //   28: if_icmpge +592 -> 620
    //   31: aload 4
    //   33: iload 7
    //   35: iaload
    //   36: istore 8
    //   38: iload_3
    //   39: sipush 2000
    //   42: if_icmpne +46 -> 88
    //   45: aload 11
    //   47: astore 13
    //   49: aload_0
    //   50: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   53: ldc_w 3621
    //   56: iload 8
    //   58: invokevirtual 3625	com/android/server/am/UserController:hasUserRestriction	(Ljava/lang/String;I)Z
    //   61: ifeq +27 -> 88
    //   64: aload 11
    //   66: astore 14
    //   68: iload 5
    //   70: istore 6
    //   72: aload 10
    //   74: astore 15
    //   76: aload 11
    //   78: astore 13
    //   80: aload_0
    //   81: aload_1
    //   82: invokespecial 3629	com/android/server/am/ActivityManagerService:isPermittedShellBroadcast	(Landroid/content/Intent;)Z
    //   85: ifeq +163 -> 248
    //   88: aload 11
    //   90: astore 13
    //   92: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   95: aload_1
    //   96: aload_2
    //   97: ldc_w 3630
    //   100: iload 8
    //   102: invokeinterface 3634 5 0
    //   107: invokevirtual 3640	android/content/pm/ParceledListSlice:getList	()Ljava/util/List;
    //   110: astore 14
    //   112: iload 8
    //   114: ifeq +83 -> 197
    //   117: aload 14
    //   119: ifnull +78 -> 197
    //   122: iconst_0
    //   123: istore 6
    //   125: aload 11
    //   127: astore 13
    //   129: iload 6
    //   131: aload 14
    //   133: invokeinterface 3119 1 0
    //   138: if_icmpge +59 -> 197
    //   141: aload 11
    //   143: astore 13
    //   145: iload 6
    //   147: istore 8
    //   149: aload 14
    //   151: iload 6
    //   153: invokeinterface 3127 2 0
    //   158: checkcast 3129	android/content/pm/ResolveInfo
    //   161: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   164: getfield 3641	android/content/pm/ActivityInfo:flags	I
    //   167: ldc_w 3642
    //   170: iand
    //   171: ifeq +476 -> 647
    //   174: aload 11
    //   176: astore 13
    //   178: aload 14
    //   180: iload 6
    //   182: invokeinterface 3643 2 0
    //   187: pop
    //   188: iload 6
    //   190: iconst_1
    //   191: isub
    //   192: istore 8
    //   194: goto +453 -> 647
    //   197: aload 14
    //   199: astore 12
    //   201: aload 14
    //   203: ifnull +28 -> 231
    //   206: aload 11
    //   208: astore 13
    //   210: aload 14
    //   212: invokeinterface 3119 1 0
    //   217: istore 6
    //   219: aload 14
    //   221: astore 12
    //   223: iload 6
    //   225: ifne +6 -> 231
    //   228: aconst_null
    //   229: astore 12
    //   231: aload 11
    //   233: ifnonnull +36 -> 269
    //   236: aload 10
    //   238: astore 15
    //   240: iload 5
    //   242: istore 6
    //   244: aload 12
    //   246: astore 14
    //   248: iload 7
    //   250: iconst_1
    //   251: iadd
    //   252: istore 7
    //   254: aload 14
    //   256: astore 11
    //   258: iload 6
    //   260: istore 5
    //   262: aload 15
    //   264: astore 10
    //   266: goto -246 -> 20
    //   269: aload 11
    //   271: astore 14
    //   273: iload 5
    //   275: istore 6
    //   277: aload 10
    //   279: astore 15
    //   281: aload 12
    //   283: ifnull -35 -> 248
    //   286: iload 5
    //   288: istore 6
    //   290: aload 10
    //   292: astore 13
    //   294: iload 5
    //   296: ifne +134 -> 430
    //   299: iconst_1
    //   300: istore 6
    //   302: iconst_0
    //   303: istore 5
    //   305: aload 10
    //   307: astore 13
    //   309: iload 5
    //   311: aload 11
    //   313: invokeinterface 3119 1 0
    //   318: if_icmpge +108 -> 426
    //   321: aload 10
    //   323: astore 13
    //   325: aload 11
    //   327: iload 5
    //   329: invokeinterface 3127 2 0
    //   334: checkcast 3129	android/content/pm/ResolveInfo
    //   337: astore 14
    //   339: aload 10
    //   341: astore 13
    //   343: aload 14
    //   345: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   348: getfield 3641	android/content/pm/ActivityInfo:flags	I
    //   351: ldc_w 3644
    //   354: iand
    //   355: ifeq +289 -> 644
    //   358: aload 10
    //   360: astore 13
    //   362: new 2891	android/content/ComponentName
    //   365: dup
    //   366: aload 14
    //   368: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   371: getfield 3645	android/content/pm/ActivityInfo:packageName	Ljava/lang/String;
    //   374: aload 14
    //   376: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   379: getfield 3646	android/content/pm/ActivityInfo:name	Ljava/lang/String;
    //   382: invokespecial 3566	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   385: astore 14
    //   387: aload 10
    //   389: ifnonnull +252 -> 641
    //   392: aload 10
    //   394: astore 13
    //   396: new 1512	java/util/HashSet
    //   399: dup
    //   400: invokespecial 1513	java/util/HashSet:<init>	()V
    //   403: astore 10
    //   405: aload 11
    //   407: astore 13
    //   409: aload 10
    //   411: aload 14
    //   413: invokevirtual 3647	java/util/HashSet:add	(Ljava/lang/Object;)Z
    //   416: pop
    //   417: iload 5
    //   419: iconst_1
    //   420: iadd
    //   421: istore 5
    //   423: goto -118 -> 305
    //   426: aload 10
    //   428: astore 13
    //   430: iconst_0
    //   431: istore 5
    //   433: aload 13
    //   435: astore 10
    //   437: aload 10
    //   439: astore 13
    //   441: iload 5
    //   443: aload 12
    //   445: invokeinterface 3119 1 0
    //   450: if_icmpge +180 -> 630
    //   453: aload 10
    //   455: astore 13
    //   457: aload 12
    //   459: iload 5
    //   461: invokeinterface 3127 2 0
    //   466: checkcast 3129	android/content/pm/ResolveInfo
    //   469: astore 15
    //   471: aload 10
    //   473: astore 13
    //   475: aload 15
    //   477: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   480: getfield 3641	android/content/pm/ActivityInfo:flags	I
    //   483: ldc_w 3644
    //   486: iand
    //   487: ifeq +111 -> 598
    //   490: aload 10
    //   492: astore 13
    //   494: new 2891	android/content/ComponentName
    //   497: dup
    //   498: aload 15
    //   500: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   503: getfield 3645	android/content/pm/ActivityInfo:packageName	Ljava/lang/String;
    //   506: aload 15
    //   508: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   511: getfield 3646	android/content/pm/ActivityInfo:name	Ljava/lang/String;
    //   514: invokespecial 3566	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   517: astore 16
    //   519: aload 10
    //   521: ifnonnull +106 -> 627
    //   524: aload 10
    //   526: astore 13
    //   528: new 1512	java/util/HashSet
    //   531: dup
    //   532: invokespecial 1513	java/util/HashSet:<init>	()V
    //   535: astore 10
    //   537: aload 10
    //   539: astore 14
    //   541: aload 11
    //   543: astore 13
    //   545: aload 10
    //   547: aload 16
    //   549: invokevirtual 3648	java/util/HashSet:contains	(Ljava/lang/Object;)Z
    //   552: ifne +33 -> 585
    //   555: aload 11
    //   557: astore 13
    //   559: aload 10
    //   561: aload 16
    //   563: invokevirtual 3647	java/util/HashSet:add	(Ljava/lang/Object;)Z
    //   566: pop
    //   567: aload 11
    //   569: astore 13
    //   571: aload 11
    //   573: aload 15
    //   575: invokeinterface 3649 2 0
    //   580: pop
    //   581: aload 10
    //   583: astore 14
    //   585: iload 5
    //   587: iconst_1
    //   588: iadd
    //   589: istore 5
    //   591: aload 14
    //   593: astore 10
    //   595: goto -158 -> 437
    //   598: aload 10
    //   600: astore 13
    //   602: aload 11
    //   604: aload 15
    //   606: invokeinterface 3649 2 0
    //   611: pop
    //   612: aload 10
    //   614: astore 14
    //   616: goto -31 -> 585
    //   619: astore_1
    //   620: aload 13
    //   622: areturn
    //   623: astore_1
    //   624: aload 11
    //   626: areturn
    //   627: goto -90 -> 537
    //   630: aload 11
    //   632: astore 14
    //   634: aload 10
    //   636: astore 15
    //   638: goto -390 -> 248
    //   641: goto -236 -> 405
    //   644: goto -227 -> 417
    //   647: iload 8
    //   649: iconst_1
    //   650: iadd
    //   651: istore 6
    //   653: goto -528 -> 125
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	656	0	this	ActivityManagerService
    //   0	656	1	paramIntent	Intent
    //   0	656	2	paramString	String
    //   0	656	3	paramInt	int
    //   0	656	4	paramArrayOfInt	int[]
    //   10	580	5	i	int
    //   70	582	6	j	int
    //   13	240	7	k	int
    //   36	615	8	m	int
    //   18	11	9	n	int
    //   7	628	10	localObject1	Object
    //   4	627	11	localObject2	Object
    //   199	259	12	localObject3	Object
    //   1	620	13	localObject4	Object
    //   66	567	14	localObject5	Object
    //   74	563	15	localObject6	Object
    //   517	45	16	localComponentName	ComponentName
    // Exception table:
    //   from	to	target	type
    //   15	20	619	android/os/RemoteException
    //   49	64	619	android/os/RemoteException
    //   80	88	619	android/os/RemoteException
    //   92	112	619	android/os/RemoteException
    //   129	141	619	android/os/RemoteException
    //   149	174	619	android/os/RemoteException
    //   178	188	619	android/os/RemoteException
    //   210	219	619	android/os/RemoteException
    //   409	417	619	android/os/RemoteException
    //   545	555	619	android/os/RemoteException
    //   559	567	619	android/os/RemoteException
    //   571	581	619	android/os/RemoteException
    //   309	321	623	android/os/RemoteException
    //   325	339	623	android/os/RemoteException
    //   343	358	623	android/os/RemoteException
    //   362	387	623	android/os/RemoteException
    //   396	405	623	android/os/RemoteException
    //   441	453	623	android/os/RemoteException
    //   457	471	623	android/os/RemoteException
    //   475	490	623	android/os/RemoteException
    //   494	519	623	android/os/RemoteException
    //   528	537	623	android/os/RemoteException
    //   602	612	623	android/os/RemoteException
  }
  
  private final int computeOomAdjLocked(ProcessRecord paramProcessRecord1, int paramInt, ProcessRecord paramProcessRecord2, boolean paramBoolean, long paramLong)
  {
    if (this.mAdjSeq == paramProcessRecord1.adjSeq) {
      return paramProcessRecord1.curRawAdj;
    }
    if (paramProcessRecord1.thread == null)
    {
      paramProcessRecord1.adjSeq = this.mAdjSeq;
      paramProcessRecord1.curSchedGroup = 0;
      paramProcessRecord1.curProcState = 16;
      paramProcessRecord1.curRawAdj = 906;
      paramProcessRecord1.curAdj = 906;
      return 906;
    }
    paramProcessRecord1.adjTypeCode = 0;
    paramProcessRecord1.adjSource = null;
    paramProcessRecord1.adjTarget = null;
    paramProcessRecord1.empty = false;
    paramProcessRecord1.cached = false;
    int i6 = paramProcessRecord1.activities.size();
    if (paramProcessRecord1.maxAdj <= 0)
    {
      paramProcessRecord1.adjType = "fixed";
      paramProcessRecord1.adjSeq = this.mAdjSeq;
      paramProcessRecord1.curRawAdj = paramProcessRecord1.maxAdj;
      paramProcessRecord1.foregroundActivities = false;
      paramProcessRecord1.curSchedGroup = 1;
      paramProcessRecord1.curProcState = 0;
      paramProcessRecord1.systemNoUi = true;
      if (paramProcessRecord1 == paramProcessRecord2)
      {
        paramProcessRecord1.systemNoUi = false;
        paramProcessRecord1.curSchedGroup = 2;
        paramProcessRecord1.adjType = "pers-top-activity";
      }
      for (;;)
      {
        if (!paramProcessRecord1.systemNoUi) {
          paramProcessRecord1.curProcState = 1;
        }
        paramInt = paramProcessRecord1.maxAdj;
        paramProcessRecord1.curAdj = paramInt;
        return paramInt;
        if (paramProcessRecord1.hasTopUi)
        {
          paramProcessRecord1.systemNoUi = false;
          paramProcessRecord1.curSchedGroup = 2;
          paramProcessRecord1.adjType = "pers-top-ui";
        }
        else if (i6 > 0)
        {
          paramInt = 0;
          while (paramInt < i6)
          {
            if (((ActivityRecord)paramProcessRecord1.activities.get(paramInt)).visible) {
              paramProcessRecord1.systemNoUi = false;
            }
            paramInt += 1;
          }
        }
      }
    }
    paramProcessRecord1.systemNoUi = false;
    int n = this.mTopProcessState;
    boolean bool2 = false;
    int i;
    boolean bool1;
    int k;
    int j;
    int i3;
    int i5;
    Object localObject1;
    label827:
    int i7;
    if (paramProcessRecord1 == paramProcessRecord2)
    {
      i1 = 0;
      i2 = 2;
      paramProcessRecord1.adjType = "top-activity";
      bool2 = true;
      m = n;
      i = i1;
      bool1 = bool2;
      k = m;
      j = i2;
      if (paramProcessRecord1 == this.mHomeProcess)
      {
        this.mHomeKilled = false;
        this.mHomeProcessName = this.mHomeProcess.processName;
        j = i2;
        k = m;
        bool1 = bool2;
        i = i1;
      }
      m = i;
      bool2 = bool1;
      i3 = k;
      i4 = j;
      if (!bool1)
      {
        m = i;
        bool2 = bool1;
        i3 = k;
        i4 = j;
        if (i6 > 0)
        {
          i4 = 99;
          i3 = 0;
          m = j;
          bool2 = bool1;
          i2 = i;
          bool1 = bool2;
          i5 = i4;
          j = k;
          i1 = m;
          if (i3 < i6)
          {
            localObject1 = (ActivityRecord)paramProcessRecord1.activities.get(i3);
            if (((ActivityRecord)localObject1).app != paramProcessRecord1)
            {
              Log.e(TAG, "Found activity " + localObject1 + " in proc activity list using " + ((ActivityRecord)localObject1).app + " instead of expected " + paramProcessRecord1);
              if (((ActivityRecord)localObject1).app != null)
              {
                i1 = i;
                bool1 = bool2;
                j = k;
                i2 = m;
                if (((ActivityRecord)localObject1).app.uid != paramProcessRecord1.uid) {
                  break label1827;
                }
              }
              ((ActivityRecord)localObject1).app = paramProcessRecord1;
            }
            if (!((ActivityRecord)localObject1).visible) {
              break label1750;
            }
            m = i;
            if (i > 100)
            {
              m = 100;
              paramProcessRecord1.adjType = "visible";
            }
            i = k;
            if (k > n) {
              i = n;
            }
            k = 1;
            paramProcessRecord1.cached = false;
            paramProcessRecord1.empty = false;
            bool2 = true;
            i2 = m;
            bool1 = bool2;
            i5 = i4;
            j = i;
            i1 = k;
            if (((ActivityRecord)localObject1).task != null)
            {
              n = ((ActivityRecord)localObject1).task.mLayerRank;
              i2 = m;
              bool1 = bool2;
              i5 = i4;
              j = i;
              i1 = k;
              if (n >= 0)
              {
                i2 = m;
                bool1 = bool2;
                i5 = i4;
                j = i;
                i1 = k;
                if (99 > n)
                {
                  i5 = n;
                  i1 = k;
                  j = i;
                  bool1 = bool2;
                  i2 = m;
                }
              }
            }
          }
          m = i2;
          bool2 = bool1;
          i3 = j;
          i4 = i1;
          if (i2 == 100)
          {
            m = i2 + i5;
            i4 = i1;
            i3 = j;
            bool2 = bool1;
          }
        }
      }
      if (m <= 200)
      {
        i = m;
        k = i3;
        j = i4;
        if (i3 <= 4) {}
      }
      else
      {
        if (!paramProcessRecord1.foregroundServices) {
          break label1983;
        }
        i = 200;
        k = 4;
        paramProcessRecord1.cached = false;
        paramProcessRecord1.adjType = "fg-service";
        j = 1;
      }
      m = i;
      i1 = k;
      n = j;
      if (paramProcessRecord1 == this.mHeavyWeightProcess)
      {
        i2 = i;
        if (i > 400)
        {
          i2 = 400;
          j = 0;
          paramProcessRecord1.cached = false;
          paramProcessRecord1.adjType = "heavy";
        }
        m = i2;
        i1 = k;
        n = j;
        if (k > 9)
        {
          i1 = 9;
          n = j;
          m = i2;
        }
      }
      j = m;
      i2 = i1;
      k = n;
      if (paramProcessRecord1 == this.mHomeProcess)
      {
        i = m;
        if (m > 600)
        {
          i = 600;
          n = 0;
          paramProcessRecord1.cached = false;
          paramProcessRecord1.adjType = "home";
        }
        j = i;
        i2 = i1;
        k = n;
        if (i1 > 12)
        {
          i2 = 12;
          k = n;
          j = i;
        }
      }
      m = j;
      i = i2;
      n = k;
      if (paramProcessRecord1 == this.mPreviousProcess)
      {
        m = j;
        i = i2;
        n = k;
        if (paramProcessRecord1.activities.size() > 0)
        {
          i1 = j;
          if (j > 700)
          {
            i1 = 700;
            k = 0;
            paramProcessRecord1.cached = false;
            paramProcessRecord1.adjType = "previous";
          }
          m = i1;
          i = i2;
          n = k;
          if (i2 > 13)
          {
            i = 13;
            n = k;
            m = i1;
          }
        }
      }
      paramProcessRecord1.adjSeq = this.mAdjSeq;
      paramProcessRecord1.curRawAdj = m;
      paramProcessRecord1.hasStartedServices = false;
      i1 = m;
      j = i;
      if (this.mBackupTarget != null)
      {
        i1 = m;
        j = i;
        if (paramProcessRecord1 == this.mBackupTarget.app)
        {
          k = m;
          i2 = i;
          if (m > 300)
          {
            if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
              Slog.v(TAG_BACKUP, "oom BACKUP_APP_ADJ for " + paramProcessRecord1);
            }
            k = 300;
            i2 = i;
            if (i > 7) {
              i2 = 7;
            }
            paramProcessRecord1.adjType = "backup";
            paramProcessRecord1.cached = false;
          }
          i1 = k;
          j = i2;
          if (i2 > 8)
          {
            j = 8;
            i1 = k;
          }
        }
      }
      m = 0;
      i7 = paramProcessRecord1.services.size() - 1;
      k = n;
      i = i1;
      if (i7 < 0) {
        break label2043;
      }
      if ((i <= 0) && (k != 0)) {
        break label2037;
      }
    }
    ServiceRecord localServiceRecord;
    label1388:
    int i8;
    label1412:
    label1427:
    label1473:
    ConnectionRecord localConnectionRecord;
    label1497:
    label1750:
    label1827:
    label1983:
    label2037:
    while (j > 2)
    {
      localServiceRecord = (ServiceRecord)paramProcessRecord1.services.valueAt(i7);
      n = i;
      i1 = j;
      if (localServiceRecord.startRequested)
      {
        paramProcessRecord1.hasStartedServices = true;
        i2 = j;
        if (j > 10) {
          i2 = 10;
        }
        if ((!paramProcessRecord1.hasShownUi) || (paramProcessRecord1 == this.mHomeProcess)) {
          break label2167;
        }
        n = i;
        i1 = i2;
        if (i > 500)
        {
          paramProcessRecord1.adjType = "cch-started-ui-services";
          i1 = i2;
          n = i;
        }
      }
      i8 = localServiceRecord.connections.size() - 1;
      j = i1;
      i1 = m;
      i = n;
      if (i8 < 0) {
        break label2255;
      }
      if ((i <= 0) && (k != 0)) {
        break label2249;
      }
      ArrayList localArrayList = (ArrayList)localServiceRecord.connections.valueAt(i8);
      int i9 = 0;
      m = k;
      k = j;
      for (;;)
      {
        if (i9 >= localArrayList.size()) {
          break label2274;
        }
        if ((i <= 0) && (m != 0)) {
          break;
        }
        localConnectionRecord = (ConnectionRecord)localArrayList.get(i9);
        if (localConnectionRecord.binding.client != paramProcessRecord1) {
          break label2291;
        }
        i9 += 1;
      }
      if (paramProcessRecord1.instrumentationClass != null)
      {
        i = 0;
        j = 1;
        paramProcessRecord1.adjType = "instrumentation";
        k = 4;
        bool1 = bool2;
        break;
      }
      localObject1 = isReceivingBroadcast(paramProcessRecord1);
      if (localObject1 != null)
      {
        i = 0;
        if (localObject1 == this.mFgBroadcastQueue) {}
        for (j = 1;; j = 0)
        {
          paramProcessRecord1.adjType = "broadcast";
          k = 11;
          bool1 = bool2;
          break;
        }
      }
      if (paramProcessRecord1.executingServices.size() > 0)
      {
        i = 0;
        if (paramProcessRecord1.execServicesFg) {}
        for (j = 1;; j = 0)
        {
          paramProcessRecord1.adjType = "exec-service";
          k = 10;
          bool1 = bool2;
          break;
        }
      }
      i2 = 0;
      m = paramInt;
      i1 = 16;
      paramProcessRecord1.cached = true;
      paramProcessRecord1.empty = true;
      paramProcessRecord1.adjType = "cch-empty";
      i = m;
      bool1 = bool2;
      k = i1;
      j = i2;
      if (!this.mHomeKilled) {
        break;
      }
      i = m;
      bool1 = bool2;
      k = i1;
      j = i2;
      if (!paramProcessRecord1.processName.equals(this.mHomeProcessName)) {
        break;
      }
      i = 64736;
      j = -1;
      paramProcessRecord1.cached = false;
      paramProcessRecord1.empty = false;
      paramProcessRecord1.adjType = "top-activity";
      bool1 = bool2;
      k = i1;
      break;
      if ((((ActivityRecord)localObject1).state == ActivityStack.ActivityState.PAUSING) || (((ActivityRecord)localObject1).state == ActivityStack.ActivityState.PAUSED))
      {
        i1 = i;
        if (i > 200)
        {
          i1 = 200;
          paramProcessRecord1.adjType = "pausing";
        }
        j = k;
        if (k > n) {
          j = n;
        }
        i2 = 1;
        paramProcessRecord1.cached = false;
        paramProcessRecord1.empty = false;
        bool1 = true;
      }
      for (;;)
      {
        i3 += 1;
        i = i1;
        bool2 = bool1;
        k = j;
        m = i2;
        break;
        if (((ActivityRecord)localObject1).state == ActivityStack.ActivityState.STOPPING)
        {
          i1 = i;
          if (i > 200)
          {
            i1 = 200;
            paramProcessRecord1.adjType = "stopping";
          }
          j = k;
          if (!((ActivityRecord)localObject1).finishing)
          {
            j = k;
            if (k > 13) {
              j = 13;
            }
          }
          paramProcessRecord1.cached = false;
          paramProcessRecord1.empty = false;
          bool1 = true;
          i2 = m;
        }
        else
        {
          i1 = i;
          bool1 = bool2;
          j = k;
          i2 = m;
          if (k > 14)
          {
            j = 14;
            paramProcessRecord1.adjType = "cch-act";
            i1 = i;
            bool1 = bool2;
            i2 = m;
          }
        }
      }
      i = m;
      k = i3;
      j = i4;
      if (paramProcessRecord1.forcingToForeground == null) {
        break label827;
      }
      i = 200;
      k = 6;
      paramProcessRecord1.cached = false;
      paramProcessRecord1.adjType = "force-fg";
      paramProcessRecord1.adjSource = paramProcessRecord1.forcingToForeground;
      j = 1;
      break label827;
    }
    label2043:
    int i4 = paramProcessRecord1.pubProviders.size() - 1;
    int i2 = m;
    label2118:
    ProcessRecord localProcessRecord1;
    if (i4 >= 0)
    {
      if ((i > 0) || (k == 0)) {}
      label2167:
      label2249:
      label2255:
      label2274:
      label2291:
      label2559:
      label2644:
      label2679:
      label2906:
      label2986:
      label3040:
      label3170:
      label3176:
      label3251:
      label3315:
      while (j > 2)
      {
        localObject1 = (ContentProviderRecord)paramProcessRecord1.pubProviders.valueAt(i4);
        i3 = ((ContentProviderRecord)localObject1).connections.size() - 1;
        m = i2;
        for (;;)
        {
          if (i3 < 0) {
            break label3705;
          }
          if ((i <= 0) && (k != 0)) {
            break;
          }
          localProcessRecord1 = ((ContentProviderConnection)((ContentProviderRecord)localObject1).connections.get(i3)).client;
          if (localProcessRecord1 != paramProcessRecord1) {
            break label3817;
          }
          i2 = k;
          i5 = m;
          i3 -= 1;
          m = i5;
          k = i2;
        }
        j = i;
        if (paramLong < localServiceRecord.lastActivity + 1800000L)
        {
          j = i;
          if (i > 500)
          {
            j = 500;
            paramProcessRecord1.adjType = "started-services";
            paramProcessRecord1.cached = false;
          }
        }
        n = j;
        i1 = i2;
        if (j <= 500) {
          break label1388;
        }
        paramProcessRecord1.adjType = "cch-started-services";
        n = j;
        i1 = i2;
        break label1388;
        if (j > 2) {
          break label1427;
        }
        i7 -= 1;
        m = i1;
        break;
        if (k > 2) {
          break label1473;
        }
        i8 -= 1;
        j = k;
        k = m;
        break label1412;
        if ((OnePlusProcessManager.isSupportFrozenApp()) && ((localConnectionRecord.binding.client.curProcState == 2) || (localConnectionRecord.binding.client.processName.equals("system"))) && (paramProcessRecord1.uid != localConnectionRecord.binding.client.uid) && (paramProcessRecord1.uid >= 10000) && ((paramProcessRecord1.info.flags & 0x1) == 0) && (localConnectionRecord.stringName != null))
        {
          this.mImportantUids.remove(Integer.valueOf(paramProcessRecord1.uid));
          this.mImportantUids.add(Integer.valueOf(paramProcessRecord1.uid));
        }
        i5 = i;
        n = i1;
        i3 = k;
        j = m;
        ProcessRecord localProcessRecord2;
        Object localObject2;
        Object localObject3;
        if ((localConnectionRecord.flags & 0x20) == 0)
        {
          localProcessRecord2 = localConnectionRecord.binding.client;
          i2 = computeOomAdjLocked(localProcessRecord2, paramInt, paramProcessRecord2, paramBoolean, paramLong);
          n = localProcessRecord2.curProcState;
          j = n;
          if (n >= 14) {
            j = 16;
          }
          localObject2 = null;
          localObject3 = null;
          localProcessRecord1 = null;
          localObject1 = localObject2;
          n = i2;
          i3 = j;
          if ((localConnectionRecord.flags & 0x10) != 0)
          {
            if ((!paramProcessRecord1.hasShownUi) || (paramProcessRecord1 == this.mHomeProcess)) {
              break label2986;
            }
            localObject1 = localProcessRecord1;
            if (i > i2) {
              localObject1 = "cch-bound-ui-services";
            }
            paramProcessRecord1.cached = false;
            n = i;
            i3 = k;
          }
          i2 = i;
          if (i > n)
          {
            if ((!paramProcessRecord1.hasShownUi) || (paramProcessRecord1 == this.mHomeProcess) || (n <= 200)) {
              break label3040;
            }
            localObject1 = "cch-bound-ui-services";
            i2 = i;
          }
          if ((localConnectionRecord.flags & 0x4) != 0) {
            break label3251;
          }
          j = m;
          if (localProcessRecord2.curSchedGroup > m)
          {
            if ((localConnectionRecord.flags & 0x40) == 0) {
              break label3170;
            }
            j = localProcessRecord2.curSchedGroup;
          }
          i = i3;
          i6 = i1;
          i4 = j;
          if (i3 <= 2)
          {
            if (i3 != 2) {
              break label3176;
            }
            i6 = 1;
            i = 16;
            i4 = j;
          }
          m = k;
          if (k > i) {
            m = i;
          }
          if ((m < 7) && ((localConnectionRecord.flags & 0x20000000) != 0)) {
            paramProcessRecord1.pendingUiClean = true;
          }
          i5 = i2;
          n = i6;
          i3 = m;
          j = i4;
          if (localObject1 != null)
          {
            paramProcessRecord1.adjType = ((String)localObject1);
            paramProcessRecord1.adjTypeCode = 2;
            paramProcessRecord1.adjSource = localConnectionRecord.binding.client;
            paramProcessRecord1.adjSourceProcState = i;
            paramProcessRecord1.adjTarget = localServiceRecord.name;
            j = i4;
            i3 = m;
            n = i6;
            i5 = i2;
          }
        }
        if ((localConnectionRecord.flags & 0x8000000) != 0) {
          paramProcessRecord1.treatLikeActivity = true;
        }
        localObject1 = localConnectionRecord.activity;
        i = i5;
        i1 = n;
        k = i3;
        m = j;
        if ((localConnectionRecord.flags & 0x80) == 0) {
          break label1497;
        }
        i = i5;
        i1 = n;
        k = i3;
        m = j;
        if (localObject1 == null) {
          break label1497;
        }
        i = i5;
        i1 = n;
        k = i3;
        m = j;
        if (i5 <= 0) {
          break label1497;
        }
        if ((((ActivityRecord)localObject1).visible) || (((ActivityRecord)localObject1).state == ActivityStack.ActivityState.RESUMED))
        {
          i = 0;
          if ((localConnectionRecord.flags & 0x4) == 0) {
            if ((localConnectionRecord.flags & 0x40) == 0) {
              break label3315;
            }
          }
        }
        for (j = 3;; j = 1)
        {
          paramProcessRecord1.cached = false;
          paramProcessRecord1.adjType = "service";
          paramProcessRecord1.adjTypeCode = 2;
          paramProcessRecord1.adjSource = localObject1;
          paramProcessRecord1.adjSourceProcState = i3;
          paramProcessRecord1.adjTarget = localServiceRecord.name;
          i1 = n;
          k = i3;
          m = j;
          break;
          localObject1 = localObject2;
          n = i2;
          i3 = j;
          if (paramLong < localServiceRecord.lastActivity + 1800000L) {
            break label2559;
          }
          localObject1 = localObject3;
          if (i > i2) {
            localObject1 = "cch-bound-services";
          }
          n = i;
          i3 = j;
          break label2559;
          if ((localConnectionRecord.flags & 0x48) != 0) {
            if (n >= 64836) {
              j = n;
            }
          }
          for (;;)
          {
            if (!localProcessRecord2.cached) {
              paramProcessRecord1.cached = false;
            }
            localObject1 = "service";
            i2 = j;
            break;
            j = 64836;
            continue;
            if (((localConnectionRecord.flags & 0x40000000) != 0) && (n < 200) && (i > 200))
            {
              j = 200;
            }
            else if (n >= 200)
            {
              j = n;
            }
            else
            {
              j = i;
              if (i > 100) {
                j = Math.max(n, 100);
              }
            }
          }
          j = 1;
          break label2644;
          if ((localConnectionRecord.flags & 0x4000000) != 0)
          {
            i = 3;
            i6 = i1;
            i4 = j;
            break label2679;
          }
          if ((this.mWakefulness == 1) && ((localConnectionRecord.flags & 0x2000000) != 0))
          {
            i = 3;
            i6 = i1;
            i4 = j;
            break label2679;
          }
          i = 6;
          i6 = i1;
          i4 = j;
          break label2679;
          i = i3;
          i6 = i1;
          i4 = m;
          if (i3 >= 7) {
            break label2679;
          }
          i = 7;
          i6 = i1;
          i4 = m;
          break label2679;
          i = i5;
          i1 = n;
          k = i3;
          m = j;
          if (((ActivityRecord)localObject1).state != ActivityStack.ActivityState.PAUSING) {
            break;
          }
          break label2906;
        }
      }
    }
    n = i;
    int i1 = j;
    int m = k;
    if (paramProcessRecord1.lastProviderTime > 0L)
    {
      n = i;
      i1 = j;
      m = k;
      if (paramProcessRecord1.lastProviderTime + 20000L > paramLong)
      {
        paramInt = i;
        if (i > 700)
        {
          paramInt = 700;
          k = 0;
          paramProcessRecord1.cached = false;
          paramProcessRecord1.adjType = "provider";
        }
        n = paramInt;
        i1 = j;
        m = k;
        if (j > 13)
        {
          i1 = 13;
          m = k;
          n = paramInt;
        }
      }
    }
    paramInt = i1;
    if (i2 != 0)
    {
      paramInt = i1;
      if (i1 <= 2) {}
    }
    switch (i1)
    {
    case 8: 
    case 9: 
    default: 
      paramInt = 2;
      label3490:
      i = paramInt;
      if (paramInt >= 16)
      {
        if (paramProcessRecord1.hasClientActivities)
        {
          i = 15;
          paramProcessRecord1.adjType = "cch-client-act";
        }
      }
      else
      {
        label3517:
        paramInt = n;
        if (n == 500) {
          if (paramBoolean)
          {
            if (this.mNewNumAServiceProcs <= this.mNumServiceProcs / 3) {
              break label4181;
            }
            paramBoolean = true;
            label3549:
            paramProcessRecord1.serviceb = paramBoolean;
            this.mNewNumServiceProcs += 1;
            if (paramProcessRecord1.serviceb) {
              break label4200;
            }
            if ((this.mLastMemoryLevel <= 0) || (paramProcessRecord1.lastPss < this.mProcessList.getCachedRestoreThresholdKb())) {
              break label4187;
            }
            paramProcessRecord1.serviceHighRam = true;
            paramProcessRecord1.serviceb = true;
          }
        }
      }
      break;
    }
    for (;;)
    {
      paramInt = n;
      if (paramProcessRecord1.serviceb) {
        paramInt = 800;
      }
      paramProcessRecord1.curRawAdj = paramInt;
      j = paramInt;
      k = m;
      if (paramInt > paramProcessRecord1.maxAdj)
      {
        paramInt = paramProcessRecord1.maxAdj;
        j = paramInt;
        k = m;
        if (paramProcessRecord1.maxAdj <= 200)
        {
          k = 1;
          j = paramInt;
        }
      }
      paramProcessRecord1.curAdj = paramProcessRecord1.modifyRawOomAdj(j);
      paramProcessRecord1.curSchedGroup = k;
      paramProcessRecord1.curProcState = i;
      paramProcessRecord1.foregroundActivities = bool2;
      return paramProcessRecord1.curRawAdj;
      if (j > 2) {
        break label2118;
      }
      label3705:
      i3 = i;
      i1 = j;
      n = k;
      if (((ContentProviderRecord)localObject1).hasExternalProcessHandles())
      {
        i2 = i;
        if (i > 0)
        {
          i2 = 0;
          k = 1;
          paramProcessRecord1.cached = false;
          paramProcessRecord1.adjType = "provider";
          paramProcessRecord1.adjTarget = ((ContentProviderRecord)localObject1).name;
        }
        i3 = i2;
        i1 = j;
        n = k;
        if (j > 6)
        {
          i1 = 6;
          n = k;
          i3 = i2;
        }
      }
      i4 -= 1;
      i = i3;
      i2 = m;
      j = i1;
      k = n;
      break;
      label3817:
      if ((OnePlusProcessManager.isSupportFrozenApp()) && ((localProcessRecord1.curProcState == 2) || (localProcessRecord1.processName.equals("system"))) && (paramProcessRecord1.uid != localProcessRecord1.uid) && (paramProcessRecord1.uid >= 10000) && ((paramProcessRecord1.info.flags & 0x1) == 0))
      {
        this.mImportantUids.remove(Integer.valueOf(paramProcessRecord1.uid));
        this.mImportantUids.add(Integer.valueOf(paramProcessRecord1.uid));
      }
      i1 = computeOomAdjLocked(localProcessRecord1, paramInt, paramProcessRecord2, paramBoolean, paramLong);
      n = localProcessRecord1.curProcState;
      i2 = n;
      if (n >= 14) {
        i2 = 16;
      }
      n = i;
      if (i > i1)
      {
        if ((paramProcessRecord1.hasShownUi) && (paramProcessRecord1 != this.mHomeProcess) && (i1 > 200))
        {
          paramProcessRecord1.adjType = "cch-ui-provider";
          paramProcessRecord1.cached &= localProcessRecord1.cached;
          paramProcessRecord1.adjTypeCode = 1;
          paramProcessRecord1.adjSource = localProcessRecord1;
          paramProcessRecord1.adjSourceProcState = i2;
          paramProcessRecord1.adjTarget = ((ContentProviderRecord)localObject1).name;
          n = i;
        }
      }
      else
      {
        i = i2;
        i1 = m;
        if (i2 <= 2)
        {
          if (i2 != 2) {
            break label4142;
          }
          i1 = 1;
          i = 16;
        }
      }
      for (;;)
      {
        m = j;
        if (j > i) {
          m = i;
        }
        i = n;
        i5 = i1;
        j = m;
        i2 = k;
        if (localProcessRecord1.curSchedGroup <= k) {
          break;
        }
        i2 = 1;
        i = n;
        i5 = i1;
        j = m;
        break;
        if (i1 > 0) {}
        for (i = i1;; i = 0)
        {
          paramProcessRecord1.adjType = "provider";
          break;
        }
        label4142:
        i = 3;
        i1 = m;
      }
      paramInt = 3;
      break label3490;
      i = paramInt;
      if (!paramProcessRecord1.treatLikeActivity) {
        break label3517;
      }
      i = 14;
      paramProcessRecord1.adjType = "cch-as-act";
      break label3517;
      label4181:
      paramBoolean = false;
      break label3549;
      label4187:
      this.mNewNumAServiceProcs += 1;
      continue;
      label4200:
      paramProcessRecord1.serviceHighRam = false;
    }
  }
  
  private ActivityManager.RecentTaskInfo createRecentTaskInfoFromTaskRecord(TaskRecord paramTaskRecord)
  {
    paramTaskRecord.updateTaskDescription();
    ActivityManager.RecentTaskInfo localRecentTaskInfo = new ActivityManager.RecentTaskInfo();
    if (paramTaskRecord.getTopActivity() == null)
    {
      i = -1;
      localRecentTaskInfo.id = i;
      localRecentTaskInfo.persistentId = paramTaskRecord.taskId;
      localRecentTaskInfo.baseIntent = new Intent(paramTaskRecord.getBaseIntent());
      localRecentTaskInfo.origActivity = paramTaskRecord.origActivity;
      localRecentTaskInfo.realActivity = paramTaskRecord.realActivity;
      localRecentTaskInfo.description = paramTaskRecord.lastDescription;
      if (paramTaskRecord.stack == null) {
        break label292;
      }
    }
    Object localObject4;
    Object localObject1;
    Object localObject3;
    label292:
    for (int i = paramTaskRecord.stack.mStackId;; i = -1)
    {
      localRecentTaskInfo.stackId = i;
      localRecentTaskInfo.userId = paramTaskRecord.userId;
      localRecentTaskInfo.taskDescription = new ActivityManager.TaskDescription(paramTaskRecord.lastTaskDescription);
      localRecentTaskInfo.firstActiveTime = paramTaskRecord.firstActiveTime;
      localRecentTaskInfo.lastActiveTime = paramTaskRecord.lastActiveTime;
      localRecentTaskInfo.affiliatedTaskId = paramTaskRecord.mAffiliatedTaskId;
      localRecentTaskInfo.affiliatedTaskColor = paramTaskRecord.mAffiliatedTaskColor;
      localRecentTaskInfo.numActivities = 0;
      if (paramTaskRecord.mBounds != null) {
        localRecentTaskInfo.bounds = new Rect(paramTaskRecord.mBounds);
      }
      localRecentTaskInfo.isDockable = paramTaskRecord.canGoInDockedStack();
      localRecentTaskInfo.resizeMode = paramTaskRecord.mResizeMode;
      localObject4 = null;
      localObject2 = null;
      localObject1 = null;
      i = paramTaskRecord.mActivities.size() - 1;
      for (;;)
      {
        if (i < 0) {
          break label393;
        }
        localObject3 = (ActivityRecord)paramTaskRecord.mActivities.get(i);
        if (!((ActivityRecord)localObject3).finishing) {
          break;
        }
        localObject3 = localObject1;
        localObject1 = localObject2;
        localObject5 = localObject4;
        i -= 1;
        localObject4 = localObject5;
        localObject2 = localObject1;
        localObject1 = localObject3;
      }
      i = paramTaskRecord.taskId;
      break;
    }
    Object localObject5 = localObject3;
    if (localObject2 != null)
    {
      localObject4 = localObject2;
      if (((ActivityRecord)localObject2).state != ActivityStack.ActivityState.INITIALIZING) {}
    }
    else
    {
      localObject4 = localObject3;
    }
    Object localObject2 = localObject1;
    if (localObject1 == null)
    {
      localObject2 = localObject1;
      if (((ActivityRecord)localObject3).fullscreen) {
        if (!"com.oneplus.applocker".equals(((ActivityRecord)localObject3).packageName)) {
          break label386;
        }
      }
    }
    label386:
    for (localObject2 = localObject1;; localObject2 = localObject3)
    {
      localRecentTaskInfo.numActivities += 1;
      localObject1 = localObject4;
      localObject3 = localObject2;
      break;
    }
    label393:
    label430:
    label489:
    long l;
    if (localObject4 != null)
    {
      localObject3 = ((ActivityRecord)localObject4).intent.getComponent();
      localRecentTaskInfo.baseActivity = ((ComponentName)localObject3);
      if (localObject2 == null) {
        break label638;
      }
      localObject2 = ((ActivityRecord)localObject2).intent.getComponent();
      localRecentTaskInfo.topActivity = ((ComponentName)localObject2);
      localRecentTaskInfo.isTopAppLocked = false;
      if ((IS_APP_LOCKER_ENABLED) && (this.mWindowManager.isKeyguardSecure()))
      {
        localObject2 = "";
        i = 0;
        if (localObject1 == null) {
          break label644;
        }
        paramTaskRecord = ((ActivityRecord)localObject1).packageName;
        i = ((ActivityRecord)localObject1).appInfo.uid;
        localObject1 = paramTaskRecord;
        l = Binder.clearCallingIdentity();
      }
    }
    label638:
    label644:
    label703:
    for (;;)
    {
      try
      {
        if (!"com.oneplus.applocker".equals(localObject1))
        {
          if (this.mAppOpsService.checkOperation(63, i, (String)localObject1) != 0) {
            continue;
          }
          if (!this.mPassedPackageList.contains(localObject1)) {
            continue;
          }
          bool = false;
          localRecentTaskInfo.isTopAppLocked = bool;
          Binder.restoreCallingIdentity(l);
          if (DEBUG_ONEPLUS)
          {
            localObject2 = TAG;
            localObject3 = new StringBuilder().append("AppLocker: ").append(localRecentTaskInfo.baseIntent.getComponent());
            if (!localRecentTaskInfo.isTopAppLocked) {
              break label703;
            }
            paramTaskRecord = " locked";
            Slog.i((String)localObject2, paramTaskRecord + " top=" + (String)localObject1 + " uid=" + i);
          }
          return localRecentTaskInfo;
          localObject3 = null;
          break;
          localObject2 = null;
          break label430;
          localObject3 = localRecentTaskInfo.baseIntent.getComponent();
          localObject1 = localObject2;
          if (localObject3 == null) {
            break label489;
          }
          localObject1 = ((ComponentName)localObject3).getPackageName();
          i = paramTaskRecord.effectiveUid;
          break label489;
        }
        boolean bool = true;
        continue;
        bool = true;
        continue;
        bool = false;
        continue;
        paramTaskRecord = " unlocked";
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
    }
  }
  
  private void dispatchProcessDied(int paramInt1, int paramInt2)
  {
    int i = this.mProcessObservers.beginBroadcast();
    while (i > 0)
    {
      int j = i - 1;
      IProcessObserver localIProcessObserver = (IProcessObserver)this.mProcessObservers.getBroadcastItem(j);
      i = j;
      if (localIProcessObserver != null) {
        try
        {
          localIProcessObserver.onProcessDied(paramInt1, paramInt2);
          i = j;
        }
        catch (RemoteException localRemoteException)
        {
          i = j;
        }
      }
    }
    this.mProcessObservers.finishBroadcast();
  }
  
  private void dispatchProcessesChanged()
  {
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        m = this.mPendingProcessChanges.size();
        if (this.mActiveProcessChanges.length < m) {
          this.mActiveProcessChanges = new ProcessChangeItem[m];
        }
        this.mPendingProcessChanges.toArray(this.mActiveProcessChanges);
        this.mPendingProcessChanges.clear();
        if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
          Slog.i(TAG_PROCESS_OBSERVERS, "*** Delivering " + m + " process changes");
        }
        resetPriorityAfterLockedSection();
        i = this.mProcessObservers.beginBroadcast();
        if (i <= 0) {
          break label362;
        }
        k = i - 1;
        localIProcessObserver = (IProcessObserver)this.mProcessObservers.getBroadcastItem(k);
        i = k;
        if (localIProcessObserver == null) {
          continue;
        }
        j = 0;
      }
      finally
      {
        try
        {
          IProcessObserver localIProcessObserver;
          int j;
          ProcessChangeItem localProcessChangeItem = this.mActiveProcessChanges[j];
          if ((localProcessChangeItem.changes & 0x1) != 0)
          {
            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
              Slog.i(TAG_PROCESS_OBSERVERS, "ACTIVITIES CHANGED pid=" + localProcessChangeItem.pid + " uid=" + localProcessChangeItem.uid + ": " + localProcessChangeItem.foregroundActivities);
            }
            localIProcessObserver.onForegroundActivitiesChanged(localProcessChangeItem.pid, localProcessChangeItem.uid, localProcessChangeItem.foregroundActivities);
          }
          if ((localProcessChangeItem.changes & 0x2) != 0)
          {
            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
              Slog.i(TAG_PROCESS_OBSERVERS, "PROCSTATE CHANGED pid=" + localProcessChangeItem.pid + " uid=" + localProcessChangeItem.uid + ": " + localProcessChangeItem.processState);
            }
            localIProcessObserver.onProcessStateChanged(localProcessChangeItem.pid, localProcessChangeItem.uid, localProcessChangeItem.processState);
          }
          j += 1;
        }
        catch (RemoteException localRemoteException)
        {
          int m;
          int k;
          int i = k;
        }
        localObject1 = finally;
        resetPriorityAfterLockedSection();
      }
      i = k;
      if (j < m)
      {
        label362:
        this.mProcessObservers.finishBroadcast();
        try
        {
          boostPriorityForLockedSection();
          i = 0;
          while (i < m)
          {
            this.mAvailProcessChanges.add(this.mActiveProcessChanges[i]);
            i += 1;
          }
          return;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
      }
    }
  }
  
  private void dispatchUidsChanged()
  {
    int m;
    int i;
    try
    {
      boostPriorityForLockedSection();
      m = this.mPendingUidChanges.size();
      if (this.mActiveUidChanges.length >= m) {
        break label775;
      }
      this.mActiveUidChanges = new UidRecord.ChangeItem[m];
    }
    finally
    {
      UidRecord.ChangeItem localChangeItem1;
      resetPriorityAfterLockedSection();
    }
    int j;
    if (i < m)
    {
      localChangeItem1 = (UidRecord.ChangeItem)this.mPendingUidChanges.get(i);
      this.mActiveUidChanges[i] = localChangeItem1;
      if (localChangeItem1.uidRecord != null)
      {
        localChangeItem1.uidRecord.pendingChange = null;
        localChangeItem1.uidRecord = null;
      }
    }
    else
    {
      this.mPendingUidChanges.clear();
      if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
        Slog.i(TAG_UID_OBSERVERS, "*** Delivering " + m + " uid changes");
      }
      resetPriorityAfterLockedSection();
      if (this.mLocalPowerManager != null)
      {
        i = 0;
        if (i < m)
        {
          localChangeItem1 = this.mActiveUidChanges[i];
          if ((localChangeItem1.change == 1) || (localChangeItem1.change == 2)) {
            this.mLocalPowerManager.uidGone(localChangeItem1.uid);
          }
          for (;;)
          {
            i += 1;
            break;
            this.mLocalPowerManager.updateUidProcState(((UidRecord.ChangeItem)localObject1).uid, ((UidRecord.ChangeItem)localObject1).processState);
          }
        }
      }
      j = this.mUidObservers.beginBroadcast();
    }
    for (;;)
    {
      int k;
      IUidObserver localIUidObserver;
      int n;
      if (j > 0)
      {
        k = j - 1;
        localIUidObserver = (IUidObserver)this.mUidObservers.getBroadcastItem(k);
        n = ((Integer)this.mUidObservers.getBroadcastCookie(k)).intValue();
        j = k;
        if (localIUidObserver != null)
        {
          i = 0;
          j = k;
          if (i >= m) {}
        }
      }
      else
      {
        try
        {
          UidRecord.ChangeItem localChangeItem2 = this.mActiveUidChanges[i];
          j = localChangeItem2.change;
          Object localObject2 = null;
          if (k == 0)
          {
            UidRecord localUidRecord = (UidRecord)this.mValidateUids.get(localChangeItem2.uid);
            localObject2 = localUidRecord;
            if (localUidRecord == null)
            {
              localObject2 = localUidRecord;
              if (j != 1)
              {
                localObject2 = localUidRecord;
                if (j != 2)
                {
                  localObject2 = new UidRecord(localChangeItem2.uid);
                  this.mValidateUids.put(localChangeItem2.uid, localObject2);
                  break label787;
                  label389:
                  if ((n & 0x4) != 0)
                  {
                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                      Slog.i(TAG_UID_OBSERVERS, "UID idle uid=" + localChangeItem2.uid);
                    }
                    localIUidObserver.onUidIdle(localChangeItem2.uid);
                  }
                  if ((k != 0) || (localObject2 == null)) {
                    break label800;
                  }
                  ((UidRecord)localObject2).idle = true;
                  break label800;
                }
              }
            }
          }
          for (;;)
          {
            label463:
            if ((n & 0x2) != 0)
            {
              if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                Slog.i(TAG_UID_OBSERVERS, "UID gone uid=" + localChangeItem2.uid);
              }
              localIUidObserver.onUidGone(localChangeItem2.uid);
            }
            if ((k != 0) || (localObject2 == null)) {
              break label813;
            }
            this.mValidateUids.remove(localChangeItem2.uid);
            break label813;
            label543:
            if (j == 4)
            {
              if ((n & 0x8) != 0)
              {
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                  Slog.i(TAG_UID_OBSERVERS, "UID active uid=" + localChangeItem2.uid);
                }
                localIUidObserver.onUidActive(localChangeItem2.uid);
              }
              if (k == 0) {
                ((UidRecord)localObject2).idle = false;
              }
            }
            label775:
            label787:
            label800:
            do
            {
              if ((n & 0x1) != 0)
              {
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                  Slog.i(TAG_UID_OBSERVERS, "UID CHANGED uid=" + localChangeItem2.uid + ": " + localChangeItem2.processState);
                }
                localIUidObserver.onUidStateChanged(localChangeItem2.uid, localChangeItem2.processState);
              }
              if (k != 0) {
                break label813;
              }
              j = localChangeItem2.processState;
              ((UidRecord)localObject2).setProcState = j;
              ((UidRecord)localObject2).curProcState = j;
              break label813;
              this.mUidObservers.finishBroadcast();
              try
              {
                boostPriorityForLockedSection();
                i = 0;
                while (i < m)
                {
                  this.mAvailUidChanges.add(this.mActiveUidChanges[i]);
                  i += 1;
                }
                return;
              }
              finally
              {
                resetPriorityAfterLockedSection();
              }
              i = 0;
              break;
              i += 1;
              break;
              if (j == 3) {
                break label389;
              }
              if (j != 2) {
                break label543;
              }
              break label389;
              if (j == 1) {
                break label463;
              }
            } while (j != 2);
          }
          label813:
          i += 1;
        }
        catch (RemoteException localRemoteException)
        {
          j = k;
        }
      }
    }
  }
  
  private void dumpActivity(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, ActivityRecord paramActivityRecord, String[] paramArrayOfString, boolean paramBoolean)
  {
    String str = paramString + "  ";
    try
    {
      boostPriorityForLockedSection();
      paramPrintWriter.print(paramString);
      paramPrintWriter.print("ACTIVITY ");
      paramPrintWriter.print(paramActivityRecord.shortComponentName);
      paramPrintWriter.print(" ");
      paramPrintWriter.print(Integer.toHexString(System.identityHashCode(paramActivityRecord)));
      paramPrintWriter.print(" pid=");
      if (paramActivityRecord.app != null)
      {
        paramPrintWriter.println(paramActivityRecord.app.pid);
        if (paramBoolean) {
          paramActivityRecord.dump(paramPrintWriter, str);
        }
        resetPriorityAfterLockedSection();
        if ((paramActivityRecord.app != null) && (paramActivityRecord.app.thread != null)) {
          paramPrintWriter.flush();
        }
      }
    }
    finally
    {
      try
      {
        paramString = new TransferPipe();
        try
        {
          paramActivityRecord.app.thread.dumpActivity(paramString.getWriteFd().getFileDescriptor(), paramActivityRecord.appToken, str, paramArrayOfString);
          paramString.go(paramFileDescriptor);
          paramString.kill();
          return;
        }
        finally
        {
          paramString.kill();
        }
        paramPrintWriter.println("(not running)");
      }
      catch (IOException paramString)
      {
        paramPrintWriter.println(str + "Failure while dumping the activity: " + paramString);
        return;
      }
      catch (RemoteException paramString)
      {
        paramPrintWriter.println(str + "Got a RemoteException while dumping the activity");
      }
      paramString = finally;
      resetPriorityAfterLockedSection();
    }
  }
  
  private final void dumpApplicationMemoryUsageHeader(PrintWriter paramPrintWriter, long paramLong1, long paramLong2, boolean paramBoolean1, boolean paramBoolean2)
  {
    if (paramBoolean2)
    {
      paramPrintWriter.print("version,");
      paramPrintWriter.println(1);
    }
    if ((paramBoolean1) || (paramBoolean2))
    {
      paramPrintWriter.print("time,");
      paramPrintWriter.print(paramLong1);
      paramPrintWriter.print(",");
      paramPrintWriter.println(paramLong2);
      return;
    }
    paramPrintWriter.println("Applications Memory Usage (in Kilobytes):");
    paramPrintWriter.println("Uptime: " + paramLong1 + " Realtime: " + paramLong2);
  }
  
  static final void dumpMemItems(PrintWriter paramPrintWriter, String paramString1, String paramString2, ArrayList<MemItem> paramArrayList, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    int i;
    label13:
    MemItem localMemItem;
    if ((!paramBoolean1) || (paramBoolean2))
    {
      i = 0;
      if (i >= paramArrayList.size()) {
        return;
      }
      localMemItem = (MemItem)paramArrayList.get(i);
      if (paramBoolean2) {
        break label197;
      }
      if (!paramBoolean3) {
        break label159;
      }
      paramPrintWriter.printf("%s%s: %-60s (%s in swap)\n", new Object[] { paramString1, stringifyKBSize(localMemItem.pss), localMemItem.label, stringifyKBSize(localMemItem.swapPss) });
    }
    for (;;)
    {
      if (localMemItem.subitems != null) {
        dumpMemItems(paramPrintWriter, paramString1 + "    ", localMemItem.shortLabel, localMemItem.subitems, true, paramBoolean2, paramBoolean3);
      }
      i += 1;
      break label13;
      Collections.sort(paramArrayList, new Comparator()
      {
        public int compare(ActivityManagerService.MemItem paramAnonymousMemItem1, ActivityManagerService.MemItem paramAnonymousMemItem2)
        {
          if (paramAnonymousMemItem1.pss < paramAnonymousMemItem2.pss) {
            return 1;
          }
          if (paramAnonymousMemItem1.pss > paramAnonymousMemItem2.pss) {
            return -1;
          }
          return 0;
        }
      });
      break;
      label159:
      paramPrintWriter.printf("%s%s: %s\n", new Object[] { paramString1, stringifyKBSize(localMemItem.pss), localMemItem.label });
    }
    label197:
    if (localMemItem.isProc)
    {
      paramPrintWriter.print("proc,");
      paramPrintWriter.print(paramString2);
      paramPrintWriter.print(",");
      paramPrintWriter.print(localMemItem.shortLabel);
      paramPrintWriter.print(",");
      paramPrintWriter.print(localMemItem.id);
      paramPrintWriter.print(",");
      paramPrintWriter.print(localMemItem.pss);
      paramPrintWriter.print(",");
      if (paramBoolean3)
      {
        localObject = Long.valueOf(localMemItem.swapPss);
        label287:
        paramPrintWriter.print(localObject);
        if (!localMemItem.hasActivities) {
          break label323;
        }
      }
      label323:
      for (localObject = ",a";; localObject = ",e")
      {
        paramPrintWriter.println((String)localObject);
        break;
        localObject = "N/A";
        break label287;
      }
    }
    paramPrintWriter.print(paramString2);
    paramPrintWriter.print(",");
    paramPrintWriter.print(localMemItem.shortLabel);
    paramPrintWriter.print(",");
    paramPrintWriter.print(localMemItem.pss);
    paramPrintWriter.print(",");
    if (paramBoolean3) {}
    for (Object localObject = Long.valueOf(localMemItem.swapPss);; localObject = "N/A")
    {
      paramPrintWriter.println(localObject);
      break;
    }
  }
  
  private static final int dumpProcessList(PrintWriter paramPrintWriter, ActivityManagerService paramActivityManagerService, List paramList, String paramString1, String paramString2, String paramString3, String paramString4)
  {
    int j = 0;
    int i = paramList.size() - 1;
    if (i >= 0)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)paramList.get(i);
      int k;
      if (paramString4 != null)
      {
        k = j;
        if (!paramString4.equals(localProcessRecord.info.packageName)) {}
      }
      else
      {
        if (!localProcessRecord.persistent) {
          break label136;
        }
      }
      label136:
      for (paramActivityManagerService = paramString3;; paramActivityManagerService = paramString2)
      {
        paramPrintWriter.println(String.format("%s%s #%2d: %s", new Object[] { paramString1, paramActivityManagerService, Integer.valueOf(i), localProcessRecord.toString() }));
        k = j;
        if (localProcessRecord.persistent) {
          k = j + 1;
        }
        i -= 1;
        j = k;
        break;
      }
    }
    return j;
  }
  
  private static final boolean dumpProcessOomList(PrintWriter paramPrintWriter, ActivityManagerService paramActivityManagerService, List<ProcessRecord> paramList, String paramString1, String paramString2, String paramString3, boolean paramBoolean, String arg7)
  {
    ArrayList localArrayList = new ArrayList(paramList.size());
    int i = 0;
    ProcessRecord localProcessRecord;
    while (i < paramList.size())
    {
      localProcessRecord = (ProcessRecord)paramList.get(i);
      if ((??? == null) || (localProcessRecord.pkgList.containsKey(???))) {
        localArrayList.add(new Pair((ProcessRecord)paramList.get(i), Integer.valueOf(i)));
      }
      i += 1;
    }
    if (localArrayList.size() <= 0) {
      return false;
    }
    Collections.sort(localArrayList, new Comparator()
    {
      public int compare(Pair<ProcessRecord, Integer> paramAnonymousPair1, Pair<ProcessRecord, Integer> paramAnonymousPair2)
      {
        if (((ProcessRecord)paramAnonymousPair1.first).setAdj != ((ProcessRecord)paramAnonymousPair2.first).setAdj)
        {
          if (((ProcessRecord)paramAnonymousPair1.first).setAdj > ((ProcessRecord)paramAnonymousPair2.first).setAdj) {
            return -1;
          }
          return 1;
        }
        if (((ProcessRecord)paramAnonymousPair1.first).setProcState != ((ProcessRecord)paramAnonymousPair2.first).setProcState)
        {
          if (((ProcessRecord)paramAnonymousPair1.first).setProcState > ((ProcessRecord)paramAnonymousPair2.first).setProcState) {
            return -1;
          }
          return 1;
        }
        if (((Integer)paramAnonymousPair1.second).intValue() != ((Integer)paramAnonymousPair2.second).intValue())
        {
          if (((Integer)paramAnonymousPair1.second).intValue() > ((Integer)paramAnonymousPair2.second).intValue()) {
            return -1;
          }
          return 1;
        }
        return 0;
      }
    });
    long l1 = SystemClock.elapsedRealtime();
    long l2 = l1 - paramActivityManagerService.mLastPowerCheckRealtime;
    long l3 = SystemClock.uptimeMillis() - paramActivityManagerService.mLastPowerCheckUptime;
    i = localArrayList.size() - 1;
    while (i >= 0)
    {
      localProcessRecord = (ProcessRecord)((Pair)localArrayList.get(i)).first;
      String str1 = ProcessList.makeOomAdjString(localProcessRecord.setAdj);
      char c1;
      label220:
      char c2;
      switch (localProcessRecord.setSchedGroup)
      {
      default: 
        c1 = '?';
        if (localProcessRecord.foregroundActivities)
        {
          c2 = 'A';
          label232:
          String str2 = ProcessList.makeProcStateString(localProcessRecord.curProcState);
          paramPrintWriter.print(paramString1);
          if (!localProcessRecord.persistent) {
            break label1083;
          }
          ??? = paramString3;
          label259:
          paramPrintWriter.print(???);
          paramPrintWriter.print(" #");
          int j = paramList.size() - 1 - ((Integer)((Pair)localArrayList.get(i)).second).intValue();
          if (j < 10) {
            paramPrintWriter.print(' ');
          }
          paramPrintWriter.print(j);
          paramPrintWriter.print(": ");
          paramPrintWriter.print(str1);
          paramPrintWriter.print(' ');
          paramPrintWriter.print(c1);
          paramPrintWriter.print('/');
          paramPrintWriter.print(c2);
          paramPrintWriter.print('/');
          paramPrintWriter.print(str2);
          paramPrintWriter.print(" trm:");
          if (localProcessRecord.trimMemoryLevel < 10) {
            paramPrintWriter.print(' ');
          }
          paramPrintWriter.print(localProcessRecord.trimMemoryLevel);
          paramPrintWriter.print(' ');
          paramPrintWriter.print(localProcessRecord.toShortString());
          paramPrintWriter.print(" (");
          paramPrintWriter.print(localProcessRecord.adjType);
          paramPrintWriter.println(')');
          if ((localProcessRecord.adjSource != null) || (localProcessRecord.adjTarget != null))
          {
            paramPrintWriter.print(paramString1);
            paramPrintWriter.print("    ");
            if (!(localProcessRecord.adjTarget instanceof ComponentName)) {
              break label1090;
            }
            paramPrintWriter.print(((ComponentName)localProcessRecord.adjTarget).flattenToShortString());
            label493:
            paramPrintWriter.print("<=");
            if (!(localProcessRecord.adjSource instanceof ProcessRecord)) {
              break label1123;
            }
            paramPrintWriter.print("Proc{");
            paramPrintWriter.print(((ProcessRecord)localProcessRecord.adjSource).toShortString());
            paramPrintWriter.println("}");
          }
          label540:
          if (paramBoolean)
          {
            paramPrintWriter.print(paramString1);
            paramPrintWriter.print("    ");
            paramPrintWriter.print("oom: max=");
            paramPrintWriter.print(localProcessRecord.maxAdj);
            paramPrintWriter.print(" curRaw=");
            paramPrintWriter.print(localProcessRecord.curRawAdj);
            paramPrintWriter.print(" setRaw=");
            paramPrintWriter.print(localProcessRecord.setRawAdj);
            paramPrintWriter.print(" cur=");
            paramPrintWriter.print(localProcessRecord.curAdj);
            paramPrintWriter.print(" set=");
            paramPrintWriter.println(localProcessRecord.setAdj);
            paramPrintWriter.print(paramString1);
            paramPrintWriter.print("    ");
            paramPrintWriter.print("state: cur=");
            paramPrintWriter.print(ProcessList.makeProcStateString(localProcessRecord.curProcState));
            paramPrintWriter.print(" set=");
            paramPrintWriter.print(ProcessList.makeProcStateString(localProcessRecord.setProcState));
            paramPrintWriter.print(" lastPss=");
            DebugUtils.printSizeValue(paramPrintWriter, localProcessRecord.lastPss * 1024L);
            paramPrintWriter.print(" lastSwapPss=");
            DebugUtils.printSizeValue(paramPrintWriter, localProcessRecord.lastSwapPss * 1024L);
            paramPrintWriter.print(" lastCachedPss=");
            DebugUtils.printSizeValue(paramPrintWriter, localProcessRecord.lastCachedPss * 1024L);
            paramPrintWriter.println();
            paramPrintWriter.print(paramString1);
            paramPrintWriter.print("    ");
            paramPrintWriter.print("cached=");
            paramPrintWriter.print(localProcessRecord.cached);
            paramPrintWriter.print(" empty=");
            paramPrintWriter.print(localProcessRecord.empty);
            paramPrintWriter.print(" hasAboveClient=");
            paramPrintWriter.println(localProcessRecord.hasAboveClient);
            if ((localProcessRecord.setProcState >= 10) && (localProcessRecord.lastWakeTime == 0L)) {
              break;
            }
          }
        }
        break;
      }
      synchronized (paramActivityManagerService.mBatteryStatsService.getActiveStatistics())
      {
        long l4 = ???.getProcessWakeTime(localProcessRecord.info.uid, localProcessRecord.pid, l1);
        l4 -= localProcessRecord.lastWakeTime;
        paramPrintWriter.print(paramString1);
        paramPrintWriter.print("    ");
        paramPrintWriter.print("keep awake over ");
        TimeUtils.formatDuration(l2, paramPrintWriter);
        paramPrintWriter.print(" used ");
        TimeUtils.formatDuration(l4, paramPrintWriter);
        paramPrintWriter.print(" (");
        paramPrintWriter.print(100L * l4 / l2);
        paramPrintWriter.println("%)");
        if (localProcessRecord.lastCpuTime != 0L)
        {
          l4 = localProcessRecord.curCpuTime - localProcessRecord.lastCpuTime;
          paramPrintWriter.print(paramString1);
          paramPrintWriter.print("    ");
          paramPrintWriter.print("run cpu over ");
          TimeUtils.formatDuration(l3, paramPrintWriter);
          paramPrintWriter.print(" used ");
          TimeUtils.formatDuration(l4, paramPrintWriter);
          paramPrintWriter.print(" (");
          paramPrintWriter.print(100L * l4 / l3);
          paramPrintWriter.println("%)");
        }
        i -= 1;
        continue;
        c1 = 'B';
        break label220;
        c1 = 'F';
        break label220;
        c1 = 'T';
        break label220;
        if (localProcessRecord.foregroundServices)
        {
          c2 = 'S';
          break label232;
        }
        c2 = ' ';
        break label232;
        label1083:
        ??? = paramString2;
        break label259;
        label1090:
        if (localProcessRecord.adjTarget != null)
        {
          paramPrintWriter.print(localProcessRecord.adjTarget.toString());
          break label493;
        }
        paramPrintWriter.print("{null}");
        break label493;
        label1123:
        if (localProcessRecord.adjSource != null)
        {
          paramPrintWriter.println(localProcessRecord.adjSource.toString());
          break label540;
        }
        paramPrintWriter.println("{null}");
      }
    }
    return true;
  }
  
  public static File dumpStackTraces(boolean paramBoolean, ArrayList<Integer> paramArrayList, ProcessCpuTracker paramProcessCpuTracker, SparseArray<Boolean> paramSparseArray, String[] paramArrayOfString)
  {
    String str = SystemProperties.get("dalvik.vm.stack-trace-file", null);
    if ((str == null) || (str.length() == 0)) {
      return null;
    }
    File localFile = new File(str);
    if (paramBoolean) {}
    try
    {
      if (localFile.exists()) {
        localFile.delete();
      }
      localFile.createNewFile();
      FileUtils.setPermissions(localFile.getPath(), 438, -1, -1);
      dumpStackTraces(str, paramArrayList, paramProcessCpuTracker, paramSparseArray, paramArrayOfString);
      return localFile;
    }
    catch (IOException paramArrayList)
    {
      Slog.w(TAG, "Unable to prepare ANR traces file: " + str, paramArrayList);
    }
    return null;
  }
  
  /* Error */
  private static void dumpStackTraces(String paramString, ArrayList<Integer> paramArrayList, ProcessCpuTracker paramProcessCpuTracker, SparseArray<Boolean> paramSparseArray, String[] paramArrayOfString)
  {
    // Byte code:
    //   0: new 97	com/android/server/am/ActivityManagerService$DumpStackFileObserver
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 4355	com/android/server/am/ActivityManagerService$DumpStackFileObserver:<init>	(Ljava/lang/String;)V
    //   8: astore 11
    //   10: aload 11
    //   12: invokevirtual 4358	com/android/server/am/ActivityManagerService$DumpStackFileObserver:startWatching	()V
    //   15: aload_1
    //   16: ifnull +141 -> 157
    //   19: aload_1
    //   20: invokevirtual 2580	java/util/ArrayList:size	()I
    //   23: istore 6
    //   25: iconst_0
    //   26: istore 5
    //   28: iload 5
    //   30: iload 6
    //   32: if_icmpge +125 -> 157
    //   35: getstatic 4361	com/android/server/am/ActivityManagerDebugConfig:DEBUG_ANR	Z
    //   38: ifeq +35 -> 73
    //   41: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   44: new 1066	java/lang/StringBuilder
    //   47: dup
    //   48: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   51: ldc_w 4363
    //   54: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   57: aload_1
    //   58: iload 5
    //   60: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   63: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   66: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   69: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   72: pop
    //   73: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   76: lstore 9
    //   78: aload 11
    //   80: aload_1
    //   81: iload 5
    //   83: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   86: checkcast 2275	java/lang/Integer
    //   89: invokevirtual 4053	java/lang/Integer:intValue	()I
    //   92: invokevirtual 4366	com/android/server/am/ActivityManagerService$DumpStackFileObserver:dumpWithTimeout	(I)V
    //   95: getstatic 4361	com/android/server/am/ActivityManagerDebugConfig:DEBUG_ANR	Z
    //   98: ifeq +476 -> 574
    //   101: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   104: new 1066	java/lang/StringBuilder
    //   107: dup
    //   108: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   111: ldc_w 4368
    //   114: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   117: aload_1
    //   118: iload 5
    //   120: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   123: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   126: ldc_w 4370
    //   129: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   132: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   135: lload 9
    //   137: lsub
    //   138: invokevirtual 2337	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   141: ldc_w 4372
    //   144: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   147: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   150: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   153: pop
    //   154: goto +420 -> 574
    //   157: aload 4
    //   159: ifnull +138 -> 297
    //   162: aload 4
    //   164: invokestatic 4376	android/os/Process:getPidsForCommands	([Ljava/lang/String;)[I
    //   167: astore_1
    //   168: aload_1
    //   169: ifnull +128 -> 297
    //   172: iconst_0
    //   173: istore 5
    //   175: aload_1
    //   176: arraylength
    //   177: istore 6
    //   179: iload 5
    //   181: iload 6
    //   183: if_icmpge +114 -> 297
    //   186: aload_1
    //   187: iload 5
    //   189: iaload
    //   190: istore 7
    //   192: getstatic 4361	com/android/server/am/ActivityManagerDebugConfig:DEBUG_ANR	Z
    //   195: ifeq +31 -> 226
    //   198: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   201: new 1066	java/lang/StringBuilder
    //   204: dup
    //   205: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   208: ldc_w 4378
    //   211: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   214: iload 7
    //   216: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   219: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   222: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   225: pop
    //   226: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   229: lstore 9
    //   231: iload 7
    //   233: aload_0
    //   234: bipush 10
    //   236: invokestatic 4384	android/os/Debug:dumpNativeBacktraceToFileTimeout	(ILjava/lang/String;I)V
    //   239: getstatic 4361	com/android/server/am/ActivityManagerDebugConfig:DEBUG_ANR	Z
    //   242: ifeq +341 -> 583
    //   245: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   248: new 1066	java/lang/StringBuilder
    //   251: dup
    //   252: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   255: ldc_w 4386
    //   258: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   261: iload 7
    //   263: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   266: ldc_w 4370
    //   269: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   272: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   275: lload 9
    //   277: lsub
    //   278: invokevirtual 2337	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   281: ldc_w 4372
    //   284: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   287: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   290: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   293: pop
    //   294: goto +289 -> 583
    //   297: aload_2
    //   298: ifnull +270 -> 568
    //   301: aload_2
    //   302: invokevirtual 1968	com/android/internal/os/ProcessCpuTracker:init	()V
    //   305: invokestatic 4389	java/lang/System:gc	()V
    //   308: aload_2
    //   309: invokevirtual 4392	com/android/internal/os/ProcessCpuTracker:update	()V
    //   312: aload_2
    //   313: monitorenter
    //   314: aload_2
    //   315: ldc2_w 4393
    //   318: invokevirtual 4397	com/android/internal/os/ProcessCpuTracker:wait	(J)V
    //   321: aload_2
    //   322: monitorexit
    //   323: aload_2
    //   324: invokevirtual 4392	com/android/internal/os/ProcessCpuTracker:update	()V
    //   327: aload_2
    //   328: invokevirtual 4400	com/android/internal/os/ProcessCpuTracker:countWorkingStats	()I
    //   331: istore 8
    //   333: iconst_0
    //   334: istore 7
    //   336: iconst_0
    //   337: istore 6
    //   339: iload 6
    //   341: iload 8
    //   343: if_icmpge +225 -> 568
    //   346: iload 7
    //   348: iconst_5
    //   349: if_icmpge +219 -> 568
    //   352: aload_2
    //   353: iload 6
    //   355: invokevirtual 4404	com/android/internal/os/ProcessCpuTracker:getWorkingStats	(I)Lcom/android/internal/os/ProcessCpuTracker$Stats;
    //   358: astore_0
    //   359: aload_3
    //   360: aload_0
    //   361: getfield 4405	com/android/internal/os/ProcessCpuTracker$Stats:pid	I
    //   364: invokevirtual 4408	android/util/SparseArray:indexOfKey	(I)I
    //   367: iflt +146 -> 513
    //   370: iload 7
    //   372: iconst_1
    //   373: iadd
    //   374: istore 7
    //   376: getstatic 4361	com/android/server/am/ActivityManagerDebugConfig:DEBUG_ANR	Z
    //   379: ifeq +33 -> 412
    //   382: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   385: new 1066	java/lang/StringBuilder
    //   388: dup
    //   389: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   392: ldc_w 4410
    //   395: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   398: aload_0
    //   399: getfield 4405	com/android/internal/os/ProcessCpuTracker$Stats:pid	I
    //   402: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   405: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   408: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   411: pop
    //   412: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   415: lstore 9
    //   417: aload 11
    //   419: aload_0
    //   420: getfield 4405	com/android/internal/os/ProcessCpuTracker$Stats:pid	I
    //   423: invokevirtual 4366	com/android/server/am/ActivityManagerService$DumpStackFileObserver:dumpWithTimeout	(I)V
    //   426: iload 7
    //   428: istore 5
    //   430: getstatic 4361	com/android/server/am/ActivityManagerDebugConfig:DEBUG_ANR	Z
    //   433: ifeq +58 -> 491
    //   436: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   439: new 1066	java/lang/StringBuilder
    //   442: dup
    //   443: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   446: ldc_w 4412
    //   449: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   452: aload_0
    //   453: getfield 4405	com/android/internal/os/ProcessCpuTracker$Stats:pid	I
    //   456: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   459: ldc_w 4370
    //   462: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   465: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   468: lload 9
    //   470: lsub
    //   471: invokevirtual 2337	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   474: ldc_w 4372
    //   477: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   480: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   483: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   486: pop
    //   487: iload 7
    //   489: istore 5
    //   491: iload 6
    //   493: iconst_1
    //   494: iadd
    //   495: istore 6
    //   497: iload 5
    //   499: istore 7
    //   501: goto -162 -> 339
    //   504: astore_0
    //   505: aload_2
    //   506: monitorexit
    //   507: aload_0
    //   508: athrow
    //   509: astore_0
    //   510: goto -187 -> 323
    //   513: iload 7
    //   515: istore 5
    //   517: getstatic 4361	com/android/server/am/ActivityManagerDebugConfig:DEBUG_ANR	Z
    //   520: ifeq -29 -> 491
    //   523: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   526: new 1066	java/lang/StringBuilder
    //   529: dup
    //   530: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   533: ldc_w 4414
    //   536: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   539: aload_0
    //   540: getfield 4405	com/android/internal/os/ProcessCpuTracker$Stats:pid	I
    //   543: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   546: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   549: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   552: pop
    //   553: iload 7
    //   555: istore 5
    //   557: goto -66 -> 491
    //   560: astore_0
    //   561: aload 11
    //   563: invokevirtual 4417	com/android/server/am/ActivityManagerService$DumpStackFileObserver:stopWatching	()V
    //   566: aload_0
    //   567: athrow
    //   568: aload 11
    //   570: invokevirtual 4417	com/android/server/am/ActivityManagerService$DumpStackFileObserver:stopWatching	()V
    //   573: return
    //   574: iload 5
    //   576: iconst_1
    //   577: iadd
    //   578: istore 5
    //   580: goto -552 -> 28
    //   583: iload 5
    //   585: iconst_1
    //   586: iadd
    //   587: istore 5
    //   589: goto -410 -> 179
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	592	0	paramString	String
    //   0	592	1	paramArrayList	ArrayList<Integer>
    //   0	592	2	paramProcessCpuTracker	ProcessCpuTracker
    //   0	592	3	paramSparseArray	SparseArray<Boolean>
    //   0	592	4	paramArrayOfString	String[]
    //   26	562	5	i	int
    //   23	473	6	j	int
    //   190	364	7	k	int
    //   331	13	8	m	int
    //   76	393	9	l	long
    //   8	561	11	localDumpStackFileObserver	DumpStackFileObserver
    // Exception table:
    //   from	to	target	type
    //   314	321	504	finally
    //   312	314	509	java/lang/InterruptedException
    //   321	323	509	java/lang/InterruptedException
    //   505	509	509	java/lang/InterruptedException
    //   10	15	560	finally
    //   19	25	560	finally
    //   35	73	560	finally
    //   73	154	560	finally
    //   162	168	560	finally
    //   175	179	560	finally
    //   192	226	560	finally
    //   226	294	560	finally
    //   301	312	560	finally
    //   312	314	560	finally
    //   321	323	560	finally
    //   323	333	560	finally
    //   352	370	560	finally
    //   376	412	560	finally
    //   412	426	560	finally
    //   430	487	560	finally
    //   505	509	560	finally
    //   517	553	560	finally
  }
  
  private void enforceWriteSettingsPermission(String paramString)
  {
    int i = Binder.getCallingUid();
    if (i == 0) {
      return;
    }
    if (Settings.checkAndNoteWriteSettingsOperation(this.mContext, i, Settings.getPackageNameForUid(this.mContext, i), false)) {
      return;
    }
    paramString = "Permission Denial: " + paramString + " from pid=" + Binder.getCallingPid() + ", uid=" + i + " requires " + "android.permission.WRITE_SETTINGS";
    Slog.w(TAG, paramString);
    throw new SecurityException(paramString);
  }
  
  /* Error */
  private PendingAssistExtras enqueueAssistContext(int paramInt1, Intent paramIntent, String paramString, IResultReceiver paramIResultReceiver, Bundle paramBundle1, IBinder paramIBinder, boolean paramBoolean1, boolean paramBoolean2, int paramInt2, Bundle paramBundle2, long paramLong)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 4444
    //   4: ldc_w 4446
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_0
    //   11: monitorenter
    //   12: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   15: aload_0
    //   16: invokevirtual 4453	com/android/server/am/ActivityManagerService:getFocusedStack	()Lcom/android/server/am/ActivityStack;
    //   19: invokevirtual 4455	com/android/server/am/ActivityStack:topActivity	()Lcom/android/server/am/ActivityRecord;
    //   22: astore 14
    //   24: aload 14
    //   26: ifnonnull +20 -> 46
    //   29: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   32: ldc_w 4457
    //   35: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   38: pop
    //   39: aload_0
    //   40: monitorexit
    //   41: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   44: aconst_null
    //   45: areturn
    //   46: aload 14
    //   48: getfield 3679	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
    //   51: ifnull +14 -> 65
    //   54: aload 14
    //   56: getfield 3679	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
    //   59: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   62: ifnonnull +38 -> 100
    //   65: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   68: new 1066	java/lang/StringBuilder
    //   71: dup
    //   72: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   75: ldc_w 4459
    //   78: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   81: aload 14
    //   83: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   86: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   89: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   92: pop
    //   93: aload_0
    //   94: monitorexit
    //   95: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   98: aconst_null
    //   99: areturn
    //   100: iload 7
    //   102: ifeq +76 -> 178
    //   105: aload 14
    //   107: astore 13
    //   109: aload 6
    //   111: ifnull +124 -> 235
    //   114: aload 6
    //   116: invokestatic 4463	com/android/server/am/ActivityRecord:forTokenLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   119: astore 6
    //   121: aload 14
    //   123: astore 13
    //   125: aload 14
    //   127: aload 6
    //   129: if_acmpeq +106 -> 235
    //   132: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   135: new 1066	java/lang/StringBuilder
    //   138: dup
    //   139: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   142: ldc_w 4465
    //   145: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   148: aload 6
    //   150: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   153: ldc_w 4467
    //   156: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   159: aload 14
    //   161: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   164: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   167: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   170: pop
    //   171: aload_0
    //   172: monitorexit
    //   173: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   176: aconst_null
    //   177: areturn
    //   178: aload 6
    //   180: invokestatic 4463	com/android/server/am/ActivityRecord:forTokenLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   183: astore 14
    //   185: aload 14
    //   187: astore 13
    //   189: aload 14
    //   191: ifnonnull +44 -> 235
    //   194: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   197: new 1066	java/lang/StringBuilder
    //   200: dup
    //   201: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   204: ldc_w 4469
    //   207: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   210: aload 6
    //   212: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   215: ldc_w 4471
    //   218: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   221: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   224: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   227: pop
    //   228: aload_0
    //   229: monitorexit
    //   230: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   233: aconst_null
    //   234: areturn
    //   235: new 3058	android/os/Bundle
    //   238: dup
    //   239: invokespecial 4472	android/os/Bundle:<init>	()V
    //   242: astore 6
    //   244: aload 10
    //   246: ifnull +10 -> 256
    //   249: aload 6
    //   251: aload 10
    //   253: invokevirtual 4476	android/os/Bundle:putAll	(Landroid/os/Bundle;)V
    //   256: aload 6
    //   258: ldc_w 4478
    //   261: aload 13
    //   263: getfield 3956	com/android/server/am/ActivityRecord:packageName	Ljava/lang/String;
    //   266: invokevirtual 4481	android/os/Bundle:putString	(Ljava/lang/String;Ljava/lang/String;)V
    //   269: aload 6
    //   271: ldc_w 4483
    //   274: aload 13
    //   276: getfield 3679	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
    //   279: getfield 2147	com/android/server/am/ProcessRecord:uid	I
    //   282: invokevirtual 4486	android/os/Bundle:putInt	(Ljava/lang/String;I)V
    //   285: new 147	com/android/server/am/ActivityManagerService$PendingAssistExtras
    //   288: dup
    //   289: aload_0
    //   290: aload 13
    //   292: aload 6
    //   294: aload_2
    //   295: aload_3
    //   296: aload 4
    //   298: aload 5
    //   300: iload 9
    //   302: invokespecial 4489	com/android/server/am/ActivityManagerService$PendingAssistExtras:<init>	(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ActivityRecord;Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/String;Lcom/android/internal/os/IResultReceiver;Landroid/os/Bundle;I)V
    //   305: astore_2
    //   306: iload 8
    //   308: ifeq +13 -> 321
    //   311: aload_0
    //   312: aload_0
    //   313: getfield 1742	com/android/server/am/ActivityManagerService:mViSessionId	I
    //   316: iconst_1
    //   317: iadd
    //   318: putfield 1742	com/android/server/am/ActivityManagerService:mViSessionId	I
    //   321: aload 13
    //   323: getfield 3679	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
    //   326: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   329: aload 13
    //   331: getfield 4113	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
    //   334: aload_2
    //   335: iload_1
    //   336: aload_0
    //   337: getfield 1742	com/android/server/am/ActivityManagerService:mViSessionId	I
    //   340: invokeinterface 4493 5 0
    //   345: aload_0
    //   346: getfield 1460	com/android/server/am/ActivityManagerService:mPendingAssistExtras	Ljava/util/ArrayList;
    //   349: aload_2
    //   350: invokevirtual 2607	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   353: pop
    //   354: aload_0
    //   355: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   358: aload_2
    //   359: lload 11
    //   361: invokevirtual 4497	com/android/server/am/ActivityManagerService$UiHandler:postDelayed	(Ljava/lang/Runnable;J)Z
    //   364: pop
    //   365: aload_0
    //   366: monitorexit
    //   367: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   370: aload_2
    //   371: areturn
    //   372: astore_2
    //   373: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   376: new 1066	java/lang/StringBuilder
    //   379: dup
    //   380: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   383: ldc_w 4499
    //   386: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   389: aload 13
    //   391: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   394: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   397: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   400: pop
    //   401: aload_0
    //   402: monitorexit
    //   403: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   406: aconst_null
    //   407: areturn
    //   408: astore_2
    //   409: aload_0
    //   410: monitorexit
    //   411: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   414: aload_2
    //   415: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	416	0	this	ActivityManagerService
    //   0	416	1	paramInt1	int
    //   0	416	2	paramIntent	Intent
    //   0	416	3	paramString	String
    //   0	416	4	paramIResultReceiver	IResultReceiver
    //   0	416	5	paramBundle1	Bundle
    //   0	416	6	paramIBinder	IBinder
    //   0	416	7	paramBoolean1	boolean
    //   0	416	8	paramBoolean2	boolean
    //   0	416	9	paramInt2	int
    //   0	416	10	paramBundle2	Bundle
    //   0	416	11	paramLong	long
    //   107	283	13	localActivityRecord1	ActivityRecord
    //   22	168	14	localActivityRecord2	ActivityRecord
    // Exception table:
    //   from	to	target	type
    //   321	365	372	android/os/RemoteException
    //   12	24	408	finally
    //   29	39	408	finally
    //   46	65	408	finally
    //   65	93	408	finally
    //   114	121	408	finally
    //   132	171	408	finally
    //   178	185	408	finally
    //   194	228	408	finally
    //   235	244	408	finally
    //   249	256	408	finally
    //   256	306	408	finally
    //   311	321	408	finally
    //   321	365	408	finally
    //   373	401	408	finally
  }
  
  private final void enqueueUidChangeLocked(UidRecord paramUidRecord, int paramInt1, int paramInt2)
  {
    int i;
    UidRecord.ChangeItem localChangeItem2;
    UidRecord.ChangeItem localChangeItem1;
    if ((paramUidRecord == null) || (paramUidRecord.pendingChange == null))
    {
      if (this.mPendingUidChanges.size() == 0)
      {
        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
          Slog.i(TAG_UID_OBSERVERS, "*** Enqueueing dispatch uid changed!");
        }
        this.mUiHandler.obtainMessage(54).sendToTarget();
      }
      i = this.mAvailUidChanges.size();
      if (i > 0)
      {
        localChangeItem2 = (UidRecord.ChangeItem)this.mAvailUidChanges.remove(i - 1);
        localChangeItem1 = localChangeItem2;
        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS)
        {
          Slog.i(TAG_UID_OBSERVERS, "Retrieving available item: " + localChangeItem2);
          localChangeItem1 = localChangeItem2;
        }
        if (paramUidRecord == null) {
          break label263;
        }
        paramUidRecord.pendingChange = localChangeItem1;
        i = paramInt2;
        if (paramInt2 == 1)
        {
          if (!paramUidRecord.idle) {
            break label257;
          }
          i = paramInt2;
        }
        label149:
        localChangeItem1.uidRecord = paramUidRecord;
        if (paramUidRecord != null) {
          paramInt1 = paramUidRecord.uid;
        }
        localChangeItem1.uid = paramInt1;
        this.mPendingUidChanges.add(localChangeItem1);
        label180:
        localChangeItem1.change = i;
        if (paramUidRecord == null) {
          break label325;
        }
      }
    }
    label257:
    label263:
    label325:
    for (paramInt1 = paramUidRecord.setProcState;; paramInt1 = -1)
    {
      localChangeItem1.processState = paramInt1;
      return;
      localChangeItem2 = new UidRecord.ChangeItem();
      localChangeItem1 = localChangeItem2;
      if (!ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
        break;
      }
      Slog.i(TAG_UID_OBSERVERS, "Allocating new item: " + localChangeItem2);
      localChangeItem1 = localChangeItem2;
      break;
      i = 2;
      break label149;
      i = paramInt2;
      if (paramInt1 >= 0) {
        break label149;
      }
      throw new IllegalArgumentException("No UidRecord or uid");
      localChangeItem2 = paramUidRecord.pendingChange;
      localChangeItem1 = localChangeItem2;
      i = paramInt2;
      if (paramInt2 != 1) {
        break label180;
      }
      localChangeItem1 = localChangeItem2;
      i = paramInt2;
      if (localChangeItem2.change != 3) {
        break label180;
      }
      i = 2;
      localChangeItem1 = localChangeItem2;
      break label180;
    }
  }
  
  private void fillInProcMemInfo(ProcessRecord paramProcessRecord, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo)
  {
    paramRunningAppProcessInfo.pid = paramProcessRecord.pid;
    paramRunningAppProcessInfo.uid = paramProcessRecord.info.uid;
    if (this.mHeavyWeightProcess == paramProcessRecord) {
      paramRunningAppProcessInfo.flags |= 0x1;
    }
    if (paramProcessRecord.persistent) {
      paramRunningAppProcessInfo.flags |= 0x2;
    }
    if (paramProcessRecord.activities.size() > 0) {
      paramRunningAppProcessInfo.flags |= 0x4;
    }
    paramRunningAppProcessInfo.lastTrimLevel = paramProcessRecord.trimMemoryLevel;
    int i = paramProcessRecord.curAdj;
    paramRunningAppProcessInfo.importance = procStateToImportance(paramProcessRecord.curProcState, i, paramRunningAppProcessInfo);
    paramRunningAppProcessInfo.importanceReasonCode = paramProcessRecord.adjTypeCode;
    paramRunningAppProcessInfo.processState = paramProcessRecord.curProcState;
  }
  
  private ProcessRecord findAppProcess(IBinder paramIBinder, String paramString)
  {
    if (paramIBinder == null) {
      return null;
    }
    try
    {
      boostPriorityForLockedSection();
      int k = this.mProcessNames.getMap().size();
      int i = 0;
      while (i < k)
      {
        SparseArray localSparseArray = (SparseArray)this.mProcessNames.getMap().valueAt(i);
        int m = localSparseArray.size();
        int j = 0;
        while (j < m)
        {
          ProcessRecord localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
          if (localProcessRecord.thread != null)
          {
            IBinder localIBinder = localProcessRecord.thread.asBinder();
            if (localIBinder == paramIBinder) {
              return localProcessRecord;
            }
          }
          j += 1;
        }
        i += 1;
      }
      Slog.w(TAG, "Can't find mystery application for " + paramString + " from pid=" + Binder.getCallingPid() + " uid=" + Binder.getCallingUid() + ": " + paramIBinder);
      return null;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  private final boolean findEmbryoLocked(ProcessRecord paramProcessRecord, String arg2)
  {
    IApplicationThread localIApplicationThread = this.mEmbryoManager.obtain(paramProcessRecord, ???);
    if (localIApplicationThread == null) {
      return false;
    }
    for (;;)
    {
      synchronized (this.mPidsSelfLocked)
      {
        this.mPidsSelfLocked.append(paramProcessRecord.pid, paramProcessRecord);
        paramProcessRecord.removed = false;
        paramProcessRecord.killed = false;
        paramProcessRecord.killedByAm = false;
        OnePlusProcessManager.addPidToCgroupTasksWithJudge(paramProcessRecord, paramProcessRecord.pid);
        if (???.equals("activity"))
        {
          ??? = new BoostFramework();
          if (??? != null) {
            ((BoostFramework)???).perfIOPrefetchStart(paramProcessRecord.pid, paramProcessRecord.processName);
          }
          if ((this.mIsFreqAggrEnabled) && (sFreqAggr_init == null) && (sFreqAggr == null))
          {
            sFreqAggr_init = new BoostFramework();
            sFreqAggr = new BoostFramework();
          }
          if ((sFreqAggr_init != null) && (sFreqAggr != null))
          {
            sFreqAggr_init.perfLockAcquire(this.lFreqAggr_TimeOut, this.lFreqAggr_Init_ParamVal);
            sIsFreqAggrBoostSet = true;
            if (this.lFreqAggr_ParamVal.length != 2) {
              break label368;
            }
            this.lFreqAggr_ParamVal[1] = paramProcessRecord.pid;
            sFreqAggr.perfLockAcquire(this.lFreqAggr_TimeOut, this.lFreqAggr_ParamVal);
          }
          if ((this.mIsLaunchBoostv2_enabled) && (sPerfBoost_v2 == null)) {
            sPerfBoost_v2 = new BoostFramework();
          }
          if (sPerfBoost_v2 != null)
          {
            sPerfBoost_v2.perfLockAcquire(this.lBoost_v2_TimeOut, this.lBoost_v2_ParamVal);
            sIsLaunchBoostv2_set = true;
          }
        }
        if (("activity".equals(???)) || ("service".equals(???))) {
          mActivityTrigger.activityMiscTrigger(1, paramProcessRecord.processName, paramProcessRecord.pid, 0);
        }
      }
      synchronized (this.mProcessCpuTracker)
      {
        int j = this.mProcessCpuTracker.countStats();
        int i = 0;
        if (i < j)
        {
          ??? = this.mProcessCpuTracker.getStats(i);
          if (((ProcessCpuTracker.Stats)???).pid == paramProcessRecord.pid) {
            ((ProcessCpuTracker.Stats)???).name = paramProcessRecord.processName;
          }
        }
        else
        {
          return attachApplicationLocked(localIApplicationThread, paramProcessRecord.pid);
          paramProcessRecord = finally;
          throw paramProcessRecord;
          label368:
          sFreqAggr = null;
          sFreqAggr_init.perfLockRelease();
          sIsFreqAggrBoostSet = false;
          continue;
        }
        i += 1;
      }
    }
  }
  
  private UriPermission findOrCreateUriPermissionLocked(String paramString1, String paramString2, int paramInt, GrantUri paramGrantUri)
  {
    Object localObject2 = (ArrayMap)this.mGrantedUriPermissions.get(paramInt);
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = Maps.newArrayMap();
      this.mGrantedUriPermissions.put(paramInt, localObject1);
    }
    UriPermission localUriPermission = (UriPermission)((ArrayMap)localObject1).get(paramGrantUri);
    localObject2 = localUriPermission;
    if (localUriPermission == null)
    {
      localObject2 = new UriPermission(paramString1, paramString2, paramInt, paramGrantUri);
      ((ArrayMap)localObject1).put(paramGrantUri, localObject2);
    }
    return (UriPermission)localObject2;
  }
  
  private ProcessRecord findProcessLocked(String paramString1, int paramInt, String paramString2)
  {
    int i = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt, true, 2, paramString2, null);
    SparseArray localSparseArray1 = null;
    paramString2 = localSparseArray1;
    for (;;)
    {
      try
      {
        paramInt = Integer.parseInt(paramString1);
        paramString2 = localSparseArray1;
        localSparseArray2 = this.mPidsSelfLocked;
        paramString2 = localSparseArray1;
      }
      catch (NumberFormatException localNumberFormatException)
      {
        SparseArray localSparseArray2;
        ProcessRecord localProcessRecord;
        String str = paramString2;
        continue;
        paramInt += 1;
        continue;
      }
      try
      {
        localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramInt);
        paramString2 = localProcessRecord;
        paramString2 = localProcessRecord;
        if (localProcessRecord == null)
        {
          localSparseArray1 = (SparseArray)this.mProcessNames.getMap().get(paramString1);
          paramString2 = localProcessRecord;
          if (localSparseArray1 != null)
          {
            paramString2 = localProcessRecord;
            if (localSparseArray1.size() > 0)
            {
              paramString1 = (ProcessRecord)localSparseArray1.valueAt(0);
              paramString2 = paramString1;
              if (i != -1)
              {
                paramString2 = paramString1;
                if (paramString1.userId != i)
                {
                  paramInt = 1;
                  paramString2 = paramString1;
                  if (paramInt < localSparseArray1.size())
                  {
                    paramString2 = (ProcessRecord)localSparseArray1.valueAt(paramInt);
                    if (paramString2.userId != i) {
                      continue;
                    }
                  }
                }
              }
            }
          }
        }
        return paramString2;
      }
      finally
      {
        paramString2 = localSparseArray1;
        paramString2 = localSparseArray1;
      }
    }
  }
  
  private UriPermission findUriPermissionLocked(int paramInt, GrantUri paramGrantUri)
  {
    ArrayMap localArrayMap = (ArrayMap)this.mGrantedUriPermissions.get(paramInt);
    if (localArrayMap != null) {
      return (UriPermission)localArrayMap.get(paramGrantUri);
    }
    return null;
  }
  
  private void finishForceStopPackageLocked(String paramString, int paramInt)
  {
    paramString = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", paramString, null));
    if (!this.mProcessesReady) {
      paramString.addFlags(1342177280);
    }
    paramString.putExtra("android.intent.extra.UID", paramInt);
    paramString.putExtra("android.intent.extra.user_handle", UserHandle.getUserId(paramInt));
    broadcastIntentLocked(null, null, paramString, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, UserHandle.getUserId(paramInt));
  }
  
  private void forceStopPackageLocked(String paramString1, int paramInt, String paramString2)
  {
    if (("com.oppo.qetest".equals(paramString1)) || ("com.oppo.qemonitor".equals(paramString1)) || ("com.oppo.qetest.remote".equals(paramString1)) || ("com.oppo.qemonitor.remote".equals(paramString1)))
    {
      Slog.d(TAG, "forceStopPackage " + paramString1 + "don't kill ");
      return;
    }
    forceStopPackageLocked(paramString1, UserHandle.getAppId(paramInt), false, false, true, false, false, UserHandle.getUserId(paramInt), paramString2);
  }
  
  private final List<ProviderInfo> generateApplicationProvidersLocked(ProcessRecord paramProcessRecord)
  {
    Object localObject1 = null;
    try
    {
      localObject2 = AppGlobals.getPackageManager().queryContentProviders(paramProcessRecord.processName, paramProcessRecord.uid, 268438528).getList();
      localObject1 = localObject2;
    }
    catch (RemoteException localRemoteException)
    {
      Object localObject2;
      int k;
      int j;
      int i;
      for (;;) {}
    }
    if (ActivityManagerDebugConfig.DEBUG_MU) {
      Slog.v(TAG_MU, "generateApplicationProvidersLocked, app.info.uid = " + paramProcessRecord.uid);
    }
    k = paramProcessRecord.userId;
    if (localObject1 != null)
    {
      j = ((List)localObject1).size();
      paramProcessRecord.pubProviders.ensureCapacity(paramProcessRecord.pubProviders.size() + j);
      i = 0;
      while (i < j)
      {
        ProviderInfo localProviderInfo = (ProviderInfo)((List)localObject1).get(i);
        boolean bool = isSingleton(localProviderInfo.processName, localProviderInfo.applicationInfo, localProviderInfo.name, localProviderInfo.flags);
        if ((bool) && (UserHandle.getUserId(paramProcessRecord.uid) != 0))
        {
          ((List)localObject1).remove(i);
          j -= 1;
          i -= 1;
          i += 1;
        }
        else
        {
          ComponentName localComponentName = new ComponentName(localProviderInfo.packageName, localProviderInfo.name);
          ContentProviderRecord localContentProviderRecord = this.mProviderMap.getProviderByClass(localComponentName, k);
          localObject2 = localContentProviderRecord;
          if (localContentProviderRecord == null)
          {
            localObject2 = new ContentProviderRecord(this, localProviderInfo, paramProcessRecord.info, localComponentName, bool);
            this.mProviderMap.putProviderByClass(localComponentName, (ContentProviderRecord)localObject2);
          }
          if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "generateApplicationProvidersLocked, cpi.uid = " + ((ContentProviderRecord)localObject2).uid);
          }
          paramProcessRecord.pubProviders.put(localProviderInfo.name, localObject2);
          if ((localProviderInfo.multiprocess) && ("android".equals(localProviderInfo.packageName))) {}
          for (;;)
          {
            notifyPackageUse(localProviderInfo.applicationInfo.packageName, 4);
            break;
            paramProcessRecord.addPackage(localProviderInfo.applicationInfo.packageName, localProviderInfo.applicationInfo.versionCode, this.mProcessStats);
          }
        }
      }
    }
    return (List<ProviderInfo>)localObject1;
  }
  
  private boolean getAppControlListMergedBlack(String paramString, boolean paramBoolean1, boolean paramBoolean2)
  {
    boolean bool2 = true;
    boolean bool1 = bool2;
    if (paramBoolean1)
    {
      bool1 = bool2;
      if (paramBoolean2) {
        bool1 = false;
      }
    }
    if (DEBUG_ONEPLUS) {
      Slog.i(TAG, "AppControl#getAppControlListMergedBlack # packageName=" + paramString + ", appBootValue=" + paramBoolean1 + ", deviceIdleValue=" + paramBoolean2 + ",finalBlack=" + bool1);
    }
    return bool1;
  }
  
  private ActivityRecord getCallingRecordLocked(IBinder paramIBinder)
  {
    paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
    if (paramIBinder == null) {
      return null;
    }
    return paramIBinder.resultTo;
  }
  
  private HashMap<String, IBinder> getCommonServicesLocked(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      if (this.mIsolatedAppBindArgs == null)
      {
        this.mIsolatedAppBindArgs = new HashMap();
        this.mIsolatedAppBindArgs.put("package", ServiceManager.getService("package"));
      }
      return this.mIsolatedAppBindArgs;
    }
    if (this.mAppBindArgs == null)
    {
      this.mAppBindArgs = new HashMap();
      this.mAppBindArgs.put("package", ServiceManager.getService("package"));
      this.mAppBindArgs.put("window", ServiceManager.getService("window"));
      this.mAppBindArgs.put("alarm", ServiceManager.getService("alarm"));
    }
    return this.mAppBindArgs;
  }
  
  private IActivityManager.ContentProviderHolder getContentProviderExternalUnchecked(String paramString, IBinder paramIBinder, int paramInt)
  {
    return getContentProviderImpl(null, paramString, paramIBinder, true, paramInt);
  }
  
  /* Error */
  private IActivityManager.ContentProviderHolder getContentProviderImpl(IApplicationThread paramIApplicationThread, String paramString, IBinder paramIBinder, boolean paramBoolean, int paramInt)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 16
    //   3: aconst_null
    //   4: astore 18
    //   6: aload_0
    //   7: monitorenter
    //   8: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   11: invokestatic 1504	android/os/SystemClock:uptimeMillis	()J
    //   14: lstore 11
    //   16: aconst_null
    //   17: astore 17
    //   19: aload_1
    //   20: ifnull +77 -> 97
    //   23: aload_0
    //   24: aload_1
    //   25: invokevirtual 4710	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
    //   28: astore 15
    //   30: aload 15
    //   32: astore 17
    //   34: aload 15
    //   36: ifnonnull +61 -> 97
    //   39: new 4439	java/lang/SecurityException
    //   42: dup
    //   43: new 1066	java/lang/StringBuilder
    //   46: dup
    //   47: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   50: ldc_w 4712
    //   53: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   56: aload_1
    //   57: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   60: ldc_w 3216
    //   63: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   66: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   69: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   72: ldc_w 4714
    //   75: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   78: aload_2
    //   79: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   82: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   85: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   88: athrow
    //   89: astore_1
    //   90: aload_0
    //   91: monitorexit
    //   92: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   95: aload_1
    //   96: athrow
    //   97: iconst_1
    //   98: istore 10
    //   100: aload_0
    //   101: lload 11
    //   103: ldc_w 4716
    //   106: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   109: aload_0
    //   110: getfield 1849	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
    //   113: aload_2
    //   114: iload 5
    //   116: invokevirtual 4722	com/android/server/am/ProviderMap:getProviderByName	(Ljava/lang/String;I)Lcom/android/server/am/ContentProviderRecord;
    //   119: astore 19
    //   121: aload 19
    //   123: astore_1
    //   124: aload 18
    //   126: astore 15
    //   128: iload 10
    //   130: istore 9
    //   132: iload 5
    //   134: istore 6
    //   136: aload 19
    //   138: ifnonnull +117 -> 255
    //   141: aload 19
    //   143: astore_1
    //   144: aload 18
    //   146: astore 15
    //   148: iload 10
    //   150: istore 9
    //   152: iload 5
    //   154: istore 6
    //   156: iload 5
    //   158: ifeq +97 -> 255
    //   161: aload_0
    //   162: getfield 1849	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
    //   165: aload_2
    //   166: iconst_0
    //   167: invokevirtual 4722	com/android/server/am/ProviderMap:getProviderByName	(Ljava/lang/String;I)Lcom/android/server/am/ContentProviderRecord;
    //   170: astore 19
    //   172: aload 19
    //   174: astore_1
    //   175: aload 18
    //   177: astore 15
    //   179: iload 10
    //   181: istore 9
    //   183: iload 5
    //   185: istore 6
    //   187: aload 19
    //   189: ifnull +66 -> 255
    //   192: aload 19
    //   194: getfield 4725	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
    //   197: astore 15
    //   199: aload_0
    //   200: aload 15
    //   202: getfield 4643	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
    //   205: aload 15
    //   207: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   210: aload 15
    //   212: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   215: aload 15
    //   217: getfield 4644	android/content/pm/ProviderInfo:flags	I
    //   220: invokevirtual 4648	com/android/server/am/ActivityManagerService:isSingleton	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Ljava/lang/String;I)Z
    //   223: ifeq +2351 -> 2574
    //   226: aload_0
    //   227: aload 17
    //   229: getfield 2147	com/android/server/am/ProcessRecord:uid	I
    //   232: aload 15
    //   234: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   237: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   240: invokevirtual 4728	com/android/server/am/ActivityManagerService:isValidSingletonCall	(II)Z
    //   243: ifeq +2331 -> 2574
    //   246: iconst_0
    //   247: istore 6
    //   249: iconst_0
    //   250: istore 9
    //   252: aload 19
    //   254: astore_1
    //   255: aload_1
    //   256: ifnull +2340 -> 2596
    //   259: aload_1
    //   260: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   263: ifnull +2333 -> 2596
    //   266: aload_1
    //   267: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   270: getfield 2449	com/android/server/am/ProcessRecord:killed	Z
    //   273: ifeq +2317 -> 2590
    //   276: iconst_0
    //   277: istore 5
    //   279: goto +2292 -> 2571
    //   282: iload 5
    //   284: istore 7
    //   286: iload 5
    //   288: ifeq +425 -> 713
    //   291: aload_1
    //   292: getfield 4725	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
    //   295: astore 15
    //   297: aload_0
    //   298: lload 11
    //   300: ldc_w 4730
    //   303: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   306: aload_0
    //   307: aload 15
    //   309: aload 17
    //   311: iload 6
    //   313: iload 9
    //   315: invokespecial 4732	com/android/server/am/ActivityManagerService:checkContentProviderPermissionLocked	(Landroid/content/pm/ProviderInfo;Lcom/android/server/am/ProcessRecord;IZ)Ljava/lang/String;
    //   318: astore 16
    //   320: aload 16
    //   322: ifnull +13 -> 335
    //   325: new 4439	java/lang/SecurityException
    //   328: dup
    //   329: aload 16
    //   331: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   334: athrow
    //   335: aload_0
    //   336: lload 11
    //   338: ldc_w 4734
    //   341: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   344: aload 17
    //   346: ifnull +30 -> 376
    //   349: aload_1
    //   350: aload 17
    //   352: invokevirtual 4737	com/android/server/am/ContentProviderRecord:canRunHere	(Lcom/android/server/am/ProcessRecord;)Z
    //   355: ifeq +21 -> 376
    //   358: aload_1
    //   359: aconst_null
    //   360: invokevirtual 4741	com/android/server/am/ContentProviderRecord:newHolder	(Lcom/android/server/am/ContentProviderConnection;)Landroid/app/IActivityManager$ContentProviderHolder;
    //   363: astore_1
    //   364: aload_1
    //   365: aconst_null
    //   366: putfield 4744	android/app/IActivityManager$ContentProviderHolder:provider	Landroid/content/IContentProvider;
    //   369: aload_0
    //   370: monitorexit
    //   371: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   374: aload_1
    //   375: areturn
    //   376: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   379: lstore 13
    //   381: aload_0
    //   382: lload 11
    //   384: ldc_w 4746
    //   387: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   390: aload_0
    //   391: aload 17
    //   393: aload_1
    //   394: aload_3
    //   395: iload 4
    //   397: invokevirtual 4750	com/android/server/am/ActivityManagerService:incProviderCountLocked	(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Lcom/android/server/am/ContentProviderConnection;
    //   400: astore 16
    //   402: aload 16
    //   404: ifnull +64 -> 468
    //   407: aload 16
    //   409: getfield 4753	com/android/server/am/ContentProviderConnection:stableCount	I
    //   412: aload 16
    //   414: getfield 4756	com/android/server/am/ContentProviderConnection:unstableCount	I
    //   417: iadd
    //   418: iconst_1
    //   419: if_icmpne +49 -> 468
    //   422: aload_1
    //   423: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   426: ifnull +42 -> 468
    //   429: aload 17
    //   431: getfield 2407	com/android/server/am/ProcessRecord:setAdj	I
    //   434: sipush 200
    //   437: if_icmpgt +31 -> 468
    //   440: aload_0
    //   441: lload 11
    //   443: ldc_w 4758
    //   446: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   449: aload_0
    //   450: aload_1
    //   451: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   454: iconst_0
    //   455: aconst_null
    //   456: invokevirtual 2962	com/android/server/am/ActivityManagerService:updateLruProcessLocked	(Lcom/android/server/am/ProcessRecord;ZLcom/android/server/am/ProcessRecord;)V
    //   459: aload_0
    //   460: lload 11
    //   462: ldc_w 4760
    //   465: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   468: aload_0
    //   469: lload 11
    //   471: ldc_w 4762
    //   474: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   477: aload_1
    //   478: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   481: getfield 2497	com/android/server/am/ProcessRecord:verifiedAdj	I
    //   484: istore 7
    //   486: aload_0
    //   487: aload_1
    //   488: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   491: invokevirtual 4764	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
    //   494: istore 10
    //   496: iload 10
    //   498: istore 9
    //   500: iload 10
    //   502: ifeq +34 -> 536
    //   505: iload 10
    //   507: istore 9
    //   509: iload 7
    //   511: aload_1
    //   512: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   515: getfield 2407	com/android/server/am/ProcessRecord:setAdj	I
    //   518: if_icmpeq +18 -> 536
    //   521: aload_0
    //   522: aload_1
    //   523: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   526: invokevirtual 4767	com/android/server/am/ActivityManagerService:isProcessAliveLocked	(Lcom/android/server/am/ProcessRecord;)Z
    //   529: ifeq +163 -> 692
    //   532: iload 10
    //   534: istore 9
    //   536: aload_0
    //   537: aload 17
    //   539: aload_1
    //   540: getfield 4725	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
    //   543: getfield 4649	android/content/pm/ProviderInfo:packageName	Ljava/lang/String;
    //   546: aload_2
    //   547: invokespecial 4770	com/android/server/am/ActivityManagerService:maybeUpdateProviderUsageStatsLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;)V
    //   550: aload_0
    //   551: lload 11
    //   553: ldc_w 4772
    //   556: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   559: getstatic 4775	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROVIDER	Z
    //   562: ifeq +31 -> 593
    //   565: getstatic 1150	com/android/server/am/ActivityManagerService:TAG_PROVIDER	Ljava/lang/String;
    //   568: new 1066	java/lang/StringBuilder
    //   571: dup
    //   572: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   575: ldc_w 4777
    //   578: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   581: iload 9
    //   583: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   586: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   589: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   592: pop
    //   593: iload 9
    //   595: ifne +187 -> 782
    //   598: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   601: new 1066	java/lang/StringBuilder
    //   604: dup
    //   605: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   608: ldc_w 4779
    //   611: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   614: aload_1
    //   615: getfield 3404	com/android/server/am/ContentProviderRecord:name	Landroid/content/ComponentName;
    //   618: invokevirtual 4256	android/content/ComponentName:flattenToShortString	()Ljava/lang/String;
    //   621: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   624: ldc_w 4781
    //   627: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   630: aload 17
    //   632: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   635: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   638: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   641: pop
    //   642: aload_0
    //   643: aload 16
    //   645: aload_1
    //   646: aload_3
    //   647: iload 4
    //   649: invokevirtual 4785	com/android/server/am/ActivityManagerService:decProviderCountLocked	(Lcom/android/server/am/ContentProviderConnection;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Z
    //   652: istore 9
    //   654: aload_0
    //   655: lload 11
    //   657: ldc_w 4787
    //   660: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   663: aload_0
    //   664: aload_1
    //   665: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   668: invokevirtual 4790	com/android/server/am/ActivityManagerService:appDiedLocked	(Lcom/android/server/am/ProcessRecord;)V
    //   671: aload_0
    //   672: lload 11
    //   674: ldc_w 4792
    //   677: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   680: iload 9
    //   682: ifne +16 -> 698
    //   685: aload_0
    //   686: monitorexit
    //   687: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   690: aconst_null
    //   691: areturn
    //   692: iconst_0
    //   693: istore 9
    //   695: goto -159 -> 536
    //   698: iconst_0
    //   699: istore 5
    //   701: aconst_null
    //   702: astore 16
    //   704: lload 13
    //   706: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   709: iload 5
    //   711: istore 7
    //   713: aload_1
    //   714: astore 18
    //   716: aload 15
    //   718: astore 19
    //   720: iload 7
    //   722: ifne +1209 -> 1931
    //   725: aload 15
    //   727: astore_1
    //   728: aload_0
    //   729: lload 11
    //   731: ldc_w 4794
    //   734: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   737: aload 15
    //   739: astore_1
    //   740: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   743: aload_2
    //   744: sipush 3072
    //   747: iload 6
    //   749: invokeinterface 4798 4 0
    //   754: astore 15
    //   756: aload 15
    //   758: astore_1
    //   759: aload_0
    //   760: lload 11
    //   762: ldc_w 4800
    //   765: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   768: aload 15
    //   770: astore_1
    //   771: aload_1
    //   772: ifnonnull +27 -> 799
    //   775: aload_0
    //   776: monitorexit
    //   777: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   780: aconst_null
    //   781: areturn
    //   782: aload_1
    //   783: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   786: aload_1
    //   787: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   790: getfield 2407	com/android/server/am/ProcessRecord:setAdj	I
    //   793: putfield 2497	com/android/server/am/ProcessRecord:verifiedAdj	I
    //   796: goto -92 -> 704
    //   799: aload_0
    //   800: aload_1
    //   801: getfield 4643	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
    //   804: aload_1
    //   805: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   808: aload_1
    //   809: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   812: aload_1
    //   813: getfield 4644	android/content/pm/ProviderInfo:flags	I
    //   816: invokevirtual 4648	com/android/server/am/ActivityManagerService:isSingleton	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Ljava/lang/String;I)Z
    //   819: ifeq +1794 -> 2613
    //   822: aload_0
    //   823: aload 17
    //   825: getfield 2147	com/android/server/am/ProcessRecord:uid	I
    //   828: aload_1
    //   829: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   832: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   835: invokevirtual 4728	com/android/server/am/ActivityManagerService:isValidSingletonCall	(II)Z
    //   838: istore 9
    //   840: goto +1762 -> 2602
    //   843: aload_1
    //   844: aload_0
    //   845: aload_1
    //   846: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   849: iload 6
    //   851: invokevirtual 4804	com/android/server/am/ActivityManagerService:getAppInfoForUser	(Landroid/content/pm/ApplicationInfo;I)Landroid/content/pm/ApplicationInfo;
    //   854: putfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   857: aload_0
    //   858: lload 11
    //   860: ldc_w 4806
    //   863: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   866: aload_0
    //   867: lload 11
    //   869: ldc_w 4730
    //   872: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   875: iload 9
    //   877: ifeq +1742 -> 2619
    //   880: iconst_0
    //   881: istore 10
    //   883: aload_0
    //   884: aload_1
    //   885: aload 17
    //   887: iload 6
    //   889: iload 10
    //   891: invokespecial 4732	com/android/server/am/ActivityManagerService:checkContentProviderPermissionLocked	(Landroid/content/pm/ProviderInfo;Lcom/android/server/am/ProcessRecord;IZ)Ljava/lang/String;
    //   894: astore 15
    //   896: aload 15
    //   898: ifnull +13 -> 911
    //   901: new 4439	java/lang/SecurityException
    //   904: dup
    //   905: aload 15
    //   907: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   910: athrow
    //   911: aload_0
    //   912: lload 11
    //   914: ldc_w 4734
    //   917: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   920: aload_0
    //   921: getfield 1563	com/android/server/am/ActivityManagerService:mProcessesReady	Z
    //   924: ifne +16 -> 940
    //   927: aload_1
    //   928: getfield 4643	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
    //   931: ldc_w 1866
    //   934: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   937: ifeq +99 -> 1036
    //   940: aload_0
    //   941: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   944: iload 6
    //   946: iconst_0
    //   947: invokevirtual 4809	com/android/server/am/UserController:isUserRunningLocked	(II)Z
    //   950: ifne +97 -> 1047
    //   953: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   956: new 1066	java/lang/StringBuilder
    //   959: dup
    //   960: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   963: ldc_w 4811
    //   966: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   969: aload_1
    //   970: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   973: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   976: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   979: ldc_w 4813
    //   982: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   985: aload_1
    //   986: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   989: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   992: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   995: ldc_w 4815
    //   998: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1001: aload_2
    //   1002: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1005: ldc_w 4817
    //   1008: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1011: iload 6
    //   1013: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1016: ldc_w 4819
    //   1019: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1022: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1025: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   1028: pop
    //   1029: aload_0
    //   1030: monitorexit
    //   1031: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1034: aconst_null
    //   1035: areturn
    //   1036: new 2386	java/lang/IllegalArgumentException
    //   1039: dup
    //   1040: ldc_w 4821
    //   1043: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   1046: athrow
    //   1047: new 2891	android/content/ComponentName
    //   1050: dup
    //   1051: aload_1
    //   1052: getfield 4649	android/content/pm/ProviderInfo:packageName	Ljava/lang/String;
    //   1055: aload_1
    //   1056: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   1059: invokespecial 3566	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   1062: astore 19
    //   1064: aload_0
    //   1065: lload 11
    //   1067: ldc_w 4823
    //   1070: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1073: aload_0
    //   1074: getfield 1849	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
    //   1077: aload 19
    //   1079: iload 6
    //   1081: invokevirtual 4653	com/android/server/am/ProviderMap:getProviderByClass	(Landroid/content/ComponentName;I)Lcom/android/server/am/ContentProviderRecord;
    //   1084: astore 15
    //   1086: aload_0
    //   1087: lload 11
    //   1089: ldc_w 4825
    //   1092: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1095: aload 15
    //   1097: ifnonnull +45 -> 1142
    //   1100: iconst_1
    //   1101: istore 5
    //   1103: iload 5
    //   1105: ifeq +1520 -> 2625
    //   1108: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   1111: lstore 13
    //   1113: getstatic 4828	android/os/Build:PERMISSIONS_REVIEW_REQUIRED	Z
    //   1116: ifeq +32 -> 1148
    //   1119: aload_0
    //   1120: aload_1
    //   1121: aload 17
    //   1123: iload 6
    //   1125: invokespecial 4832	com/android/server/am/ActivityManagerService:requestTargetProviderPermissionsReviewIfNeededLocked	(Landroid/content/pm/ProviderInfo;Lcom/android/server/am/ProcessRecord;I)Z
    //   1128: istore 10
    //   1130: iload 10
    //   1132: ifne +16 -> 1148
    //   1135: aload_0
    //   1136: monitorexit
    //   1137: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1140: aconst_null
    //   1141: areturn
    //   1142: iconst_0
    //   1143: istore 5
    //   1145: goto -42 -> 1103
    //   1148: aload_0
    //   1149: lload 11
    //   1151: ldc_w 4834
    //   1154: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1157: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   1160: aload_1
    //   1161: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   1164: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   1167: sipush 1024
    //   1170: iload 6
    //   1172: invokeinterface 4838 4 0
    //   1177: astore 16
    //   1179: aload_0
    //   1180: lload 11
    //   1182: ldc_w 4840
    //   1185: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1188: aload 16
    //   1190: ifnonnull +45 -> 1235
    //   1193: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   1196: new 1066	java/lang/StringBuilder
    //   1199: dup
    //   1200: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1203: ldc_w 4842
    //   1206: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1209: aload_1
    //   1210: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   1213: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1216: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1219: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   1222: pop
    //   1223: lload 13
    //   1225: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1228: aload_0
    //   1229: monitorexit
    //   1230: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1233: aconst_null
    //   1234: areturn
    //   1235: new 3398	com/android/server/am/ContentProviderRecord
    //   1238: dup
    //   1239: aload_0
    //   1240: aload_1
    //   1241: aload_0
    //   1242: aload 16
    //   1244: iload 6
    //   1246: invokevirtual 4804	com/android/server/am/ActivityManagerService:getAppInfoForUser	(Landroid/content/pm/ApplicationInfo;I)Landroid/content/pm/ApplicationInfo;
    //   1249: aload 19
    //   1251: iload 9
    //   1253: invokespecial 4656	com/android/server/am/ContentProviderRecord:<init>	(Lcom/android/server/am/ActivityManagerService;Landroid/content/pm/ProviderInfo;Landroid/content/pm/ApplicationInfo;Landroid/content/ComponentName;Z)V
    //   1256: astore 16
    //   1258: lload 13
    //   1260: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1263: aload 16
    //   1265: astore 15
    //   1267: aload_0
    //   1268: lload 11
    //   1270: ldc_w 4844
    //   1273: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1276: aload 17
    //   1278: ifnull +45 -> 1323
    //   1281: aload 15
    //   1283: aload 17
    //   1285: invokevirtual 4737	com/android/server/am/ContentProviderRecord:canRunHere	(Lcom/android/server/am/ProcessRecord;)Z
    //   1288: ifeq +35 -> 1323
    //   1291: aload 15
    //   1293: aconst_null
    //   1294: invokevirtual 4741	com/android/server/am/ContentProviderRecord:newHolder	(Lcom/android/server/am/ContentProviderConnection;)Landroid/app/IActivityManager$ContentProviderHolder;
    //   1297: astore_1
    //   1298: aload_0
    //   1299: monitorexit
    //   1300: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1303: aload_1
    //   1304: areturn
    //   1305: astore 16
    //   1307: lload 13
    //   1309: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1312: goto +1313 -> 2625
    //   1315: astore_1
    //   1316: lload 13
    //   1318: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1321: aload_1
    //   1322: athrow
    //   1323: getstatic 4775	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROVIDER	Z
    //   1326: ifeq +102 -> 1428
    //   1329: getstatic 1150	com/android/server/am/ActivityManagerService:TAG_PROVIDER	Ljava/lang/String;
    //   1332: astore 18
    //   1334: new 1066	java/lang/StringBuilder
    //   1337: dup
    //   1338: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1341: ldc_w 4846
    //   1344: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1347: astore 20
    //   1349: aload 17
    //   1351: ifnull +317 -> 1668
    //   1354: aload 17
    //   1356: getfield 2147	com/android/server/am/ProcessRecord:uid	I
    //   1359: invokestatic 2819	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   1362: astore 16
    //   1364: aload 18
    //   1366: aload 20
    //   1368: aload 16
    //   1370: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1373: ldc_w 4848
    //   1376: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1379: aload 15
    //   1381: getfield 4849	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
    //   1384: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   1387: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1390: ldc_w 4851
    //   1393: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1396: aload 15
    //   1398: getfield 4725	com/android/server/am/ContentProviderRecord:info	Landroid/content/pm/ProviderInfo;
    //   1401: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   1404: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1407: ldc_w 4853
    //   1410: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1413: bipush 6
    //   1415: invokestatic 4856	android/os/Debug:getCallers	(I)Ljava/lang/String;
    //   1418: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1421: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1424: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   1427: pop
    //   1428: aload_0
    //   1429: getfield 1542	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
    //   1432: invokevirtual 2580	java/util/ArrayList:size	()I
    //   1435: istore 8
    //   1437: iconst_0
    //   1438: istore 7
    //   1440: iload 7
    //   1442: iload 8
    //   1444: if_icmpge +17 -> 1461
    //   1447: aload_0
    //   1448: getfield 1542	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
    //   1451: iload 7
    //   1453: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   1456: aload 15
    //   1458: if_acmpne +216 -> 1674
    //   1461: iload 7
    //   1463: iload 8
    //   1465: if_icmplt +390 -> 1855
    //   1468: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   1471: lstore 13
    //   1473: aload_0
    //   1474: lload 11
    //   1476: ldc_w 4858
    //   1479: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1482: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   1485: aload 15
    //   1487: getfield 4849	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
    //   1490: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   1493: iconst_0
    //   1494: iload 6
    //   1496: invokeinterface 4862 4 0
    //   1501: aload_0
    //   1502: lload 11
    //   1504: ldc_w 4864
    //   1507: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1510: aload_0
    //   1511: lload 11
    //   1513: ldc_w 4866
    //   1516: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1519: aload_0
    //   1520: aload_1
    //   1521: getfield 4643	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
    //   1524: aload 15
    //   1526: getfield 4849	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
    //   1529: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   1532: iconst_0
    //   1533: invokevirtual 4870	com/android/server/am/ActivityManagerService:getProcessRecordLocked	(Ljava/lang/String;IZ)Lcom/android/server/am/ProcessRecord;
    //   1536: astore 18
    //   1538: aload 18
    //   1540: ifnull +19 -> 1559
    //   1543: aload 18
    //   1545: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   1548: ifnull +11 -> 1559
    //   1551: aload 18
    //   1553: getfield 2449	com/android/server/am/ProcessRecord:killed	Z
    //   1556: ifeq +185 -> 1741
    //   1559: getstatic 4875	com/android/server/am/OnePlusAppBootManager:DEBUG	Z
    //   1562: ifeq +47 -> 1609
    //   1565: new 1066	java/lang/StringBuilder
    //   1568: dup
    //   1569: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1572: ldc_w 4877
    //   1575: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1578: aload 17
    //   1580: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1583: ldc_w 4879
    //   1586: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1589: aload_2
    //   1590: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1593: ldc_w 4881
    //   1596: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1599: aload_1
    //   1600: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1603: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1606: invokestatic 4884	com/android/server/am/OnePlusAppBootManager:myLog	(Ljava/lang/String;)V
    //   1609: getstatic 4887	com/android/server/am/OnePlusAppBootManager:IN_USING	Z
    //   1612: ifeq +488 -> 2100
    //   1615: aconst_null
    //   1616: invokestatic 4890	com/android/server/am/OnePlusAppBootManager:getInstance	(Lcom/android/server/pm/PackageManagerService;)Lcom/android/server/am/OnePlusAppBootManager;
    //   1619: aload 15
    //   1621: aload 17
    //   1623: invokevirtual 4894	com/android/server/am/OnePlusAppBootManager:canProviderGo	(Lcom/android/server/am/ContentProviderRecord;Lcom/android/server/am/ProcessRecord;)Z
    //   1626: ifne +474 -> 2100
    //   1629: ldc_w 4896
    //   1632: new 1066	java/lang/StringBuilder
    //   1635: dup
    //   1636: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1639: ldc_w 4898
    //   1642: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1645: aload_1
    //   1646: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1649: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1652: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   1655: pop
    //   1656: lload 13
    //   1658: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1661: aload_0
    //   1662: monitorexit
    //   1663: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1666: aconst_null
    //   1667: areturn
    //   1668: aconst_null
    //   1669: astore 16
    //   1671: goto -307 -> 1364
    //   1674: iload 7
    //   1676: iconst_1
    //   1677: iadd
    //   1678: istore 7
    //   1680: goto -240 -> 1440
    //   1683: astore 16
    //   1685: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   1688: new 1066	java/lang/StringBuilder
    //   1691: dup
    //   1692: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1695: ldc_w 4901
    //   1698: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1701: aload 15
    //   1703: getfield 4849	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
    //   1706: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   1709: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1712: ldc_w 2237
    //   1715: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1718: aload 16
    //   1720: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1723: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1726: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   1729: pop
    //   1730: goto -220 -> 1510
    //   1733: astore_1
    //   1734: lload 13
    //   1736: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1739: aload_1
    //   1740: athrow
    //   1741: getstatic 4775	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROVIDER	Z
    //   1744: ifeq +31 -> 1775
    //   1747: getstatic 1150	com/android/server/am/ActivityManagerService:TAG_PROVIDER	Ljava/lang/String;
    //   1750: new 1066	java/lang/StringBuilder
    //   1753: dup
    //   1754: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1757: ldc_w 4903
    //   1760: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1763: aload 18
    //   1765: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1768: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1771: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   1774: pop
    //   1775: aload 18
    //   1777: astore 16
    //   1779: aload 18
    //   1781: getfield 3411	com/android/server/am/ProcessRecord:pubProviders	Landroid/util/ArrayMap;
    //   1784: aload_1
    //   1785: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   1788: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   1791: ifne +42 -> 1833
    //   1794: aload_0
    //   1795: lload 11
    //   1797: ldc_w 4905
    //   1800: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1803: aload 18
    //   1805: getfield 3411	com/android/server/am/ProcessRecord:pubProviders	Landroid/util/ArrayMap;
    //   1808: aload_1
    //   1809: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   1812: aload 15
    //   1814: invokevirtual 4580	android/util/ArrayMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   1817: pop
    //   1818: aload 18
    //   1820: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   1823: aload_1
    //   1824: invokeinterface 4909 2 0
    //   1829: aload 18
    //   1831: astore 16
    //   1833: aload 15
    //   1835: aload 16
    //   1837: putfield 4912	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
    //   1840: aload_0
    //   1841: getfield 1542	com/android/server/am/ActivityManagerService:mLaunchingProviders	Ljava/util/ArrayList;
    //   1844: aload 15
    //   1846: invokevirtual 2607	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   1849: pop
    //   1850: lload 13
    //   1852: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1855: aload_0
    //   1856: lload 11
    //   1858: ldc_w 4914
    //   1861: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1864: iload 5
    //   1866: ifeq +14 -> 1880
    //   1869: aload_0
    //   1870: getfield 1849	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
    //   1873: aload 19
    //   1875: aload 15
    //   1877: invokevirtual 4660	com/android/server/am/ProviderMap:putProviderByClass	(Landroid/content/ComponentName;Lcom/android/server/am/ContentProviderRecord;)V
    //   1880: aload_0
    //   1881: getfield 1849	com/android/server/am/ActivityManagerService:mProviderMap	Lcom/android/server/am/ProviderMap;
    //   1884: aload_2
    //   1885: aload 15
    //   1887: invokevirtual 4918	com/android/server/am/ProviderMap:putProviderByName	(Ljava/lang/String;Lcom/android/server/am/ContentProviderRecord;)V
    //   1890: aload_0
    //   1891: aload 17
    //   1893: aload 15
    //   1895: aload_3
    //   1896: iload 4
    //   1898: invokevirtual 4750	com/android/server/am/ActivityManagerService:incProviderCountLocked	(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Lcom/android/server/am/ContentProviderConnection;
    //   1901: astore_3
    //   1902: aload 15
    //   1904: astore 18
    //   1906: aload_1
    //   1907: astore 19
    //   1909: aload_3
    //   1910: astore 16
    //   1912: aload_3
    //   1913: ifnull +18 -> 1931
    //   1916: aload_3
    //   1917: iconst_1
    //   1918: putfield 4921	com/android/server/am/ContentProviderConnection:waiting	Z
    //   1921: aload_3
    //   1922: astore 16
    //   1924: aload_1
    //   1925: astore 19
    //   1927: aload 15
    //   1929: astore 18
    //   1931: aload_0
    //   1932: lload 11
    //   1934: ldc_w 4923
    //   1937: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   1940: aload_0
    //   1941: monitorexit
    //   1942: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1945: iconst_0
    //   1946: istore 6
    //   1948: aload 18
    //   1950: monitorenter
    //   1951: iload 6
    //   1953: istore 7
    //   1955: aload 18
    //   1957: getfield 3424	com/android/server/am/ContentProviderRecord:provider	Landroid/content/IContentProvider;
    //   1960: ifnonnull +401 -> 2361
    //   1963: aload 18
    //   1965: getfield 4912	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
    //   1968: ifnonnull +277 -> 2245
    //   1971: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   1974: new 1066	java/lang/StringBuilder
    //   1977: dup
    //   1978: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1981: ldc_w 4811
    //   1984: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1987: aload 19
    //   1989: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   1992: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   1995: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1998: ldc_w 4813
    //   2001: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2004: aload 19
    //   2006: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2009: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   2012: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   2015: ldc_w 4815
    //   2018: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2021: aload_2
    //   2022: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2025: ldc_w 4925
    //   2028: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2031: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2034: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   2037: pop
    //   2038: sipush 30036
    //   2041: iconst_4
    //   2042: anewarray 1735	java/lang/Object
    //   2045: dup
    //   2046: iconst_0
    //   2047: aload 19
    //   2049: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2052: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   2055: invokestatic 3073	android/os/UserHandle:getUserId	(I)I
    //   2058: invokestatic 2819	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   2061: aastore
    //   2062: dup
    //   2063: iconst_1
    //   2064: aload 19
    //   2066: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2069: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   2072: aastore
    //   2073: dup
    //   2074: iconst_2
    //   2075: aload 19
    //   2077: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2080: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   2083: invokestatic 2819	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   2086: aastore
    //   2087: dup
    //   2088: iconst_3
    //   2089: aload_2
    //   2090: aastore
    //   2091: invokestatic 2822	android/util/EventLog:writeEvent	(I[Ljava/lang/Object;)I
    //   2094: pop
    //   2095: aload 18
    //   2097: monitorexit
    //   2098: aconst_null
    //   2099: areturn
    //   2100: aload_0
    //   2101: lload 11
    //   2103: ldc_w 4927
    //   2106: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   2109: aload_0
    //   2110: aload_1
    //   2111: getfield 4643	android/content/pm/ProviderInfo:processName	Ljava/lang/String;
    //   2114: aload 15
    //   2116: getfield 4849	com/android/server/am/ContentProviderRecord:appInfo	Landroid/content/pm/ApplicationInfo;
    //   2119: iconst_0
    //   2120: iconst_0
    //   2121: ldc_w 4929
    //   2124: new 2891	android/content/ComponentName
    //   2127: dup
    //   2128: aload_1
    //   2129: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2132: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   2135: aload_1
    //   2136: getfield 3212	android/content/pm/ProviderInfo:name	Ljava/lang/String;
    //   2139: invokespecial 3566	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   2142: iconst_0
    //   2143: iconst_0
    //   2144: iconst_0
    //   2145: invokevirtual 4932	com/android/server/am/ActivityManagerService:startProcessLocked	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZZ)Lcom/android/server/am/ProcessRecord;
    //   2148: astore 18
    //   2150: aload_0
    //   2151: lload 11
    //   2153: ldc_w 4934
    //   2156: invokespecial 4718	com/android/server/am/ActivityManagerService:checkTime	(JLjava/lang/String;)V
    //   2159: aload 18
    //   2161: astore 16
    //   2163: aload 18
    //   2165: ifnonnull -332 -> 1833
    //   2168: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   2171: new 1066	java/lang/StringBuilder
    //   2174: dup
    //   2175: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2178: ldc_w 4811
    //   2181: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2184: aload_1
    //   2185: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2188: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   2191: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2194: ldc_w 4813
    //   2197: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2200: aload_1
    //   2201: getfield 3193	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2204: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   2207: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   2210: ldc_w 4815
    //   2213: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2216: aload_2
    //   2217: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2220: ldc_w 4936
    //   2223: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2226: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2229: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   2232: pop
    //   2233: lload 13
    //   2235: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   2238: aload_0
    //   2239: monitorexit
    //   2240: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   2243: aconst_null
    //   2244: areturn
    //   2245: getstatic 4637	com/android/server/am/ActivityManagerDebugConfig:DEBUG_MU	Z
    //   2248: ifeq +45 -> 2293
    //   2251: getstatic 1125	com/android/server/am/ActivityManagerService:TAG_MU	Ljava/lang/String;
    //   2254: new 1066	java/lang/StringBuilder
    //   2257: dup
    //   2258: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2261: ldc_w 4938
    //   2264: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2267: aload 18
    //   2269: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2272: ldc_w 4940
    //   2275: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2278: aload 18
    //   2280: getfield 4912	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
    //   2283: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2286: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2289: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   2292: pop
    //   2293: aload 16
    //   2295: ifnull +9 -> 2304
    //   2298: aload 16
    //   2300: iconst_1
    //   2301: putfield 4921	com/android/server/am/ContentProviderConnection:waiting	Z
    //   2304: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   2307: lstore 11
    //   2309: aload 18
    //   2311: ldc2_w 3816
    //   2314: invokevirtual 4941	com/android/server/am/ContentProviderRecord:wait	(J)V
    //   2317: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   2320: lstore 13
    //   2322: lload 13
    //   2324: lload 11
    //   2326: lsub
    //   2327: ldc2_w 3816
    //   2330: lcmp
    //   2331: iflt +102 -> 2433
    //   2334: iconst_1
    //   2335: istore 5
    //   2337: iload 5
    //   2339: ifeq +100 -> 2439
    //   2342: iload 5
    //   2344: istore 7
    //   2346: aload 16
    //   2348: ifnull +13 -> 2361
    //   2351: aload 16
    //   2353: iconst_0
    //   2354: putfield 4921	com/android/server/am/ContentProviderConnection:waiting	Z
    //   2357: iload 5
    //   2359: istore 7
    //   2361: aload 18
    //   2363: monitorexit
    //   2364: iload 7
    //   2366: ifeq +171 -> 2537
    //   2369: aload_0
    //   2370: monitorenter
    //   2371: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   2374: getstatic 1125	com/android/server/am/ActivityManagerService:TAG_MU	Ljava/lang/String;
    //   2377: new 1066	java/lang/StringBuilder
    //   2380: dup
    //   2381: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2384: ldc_w 4943
    //   2387: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2390: aload 18
    //   2392: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2395: ldc_w 4940
    //   2398: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2401: aload 18
    //   2403: getfield 4912	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
    //   2406: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2409: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2412: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   2415: pop
    //   2416: aload 18
    //   2418: getfield 4912	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
    //   2421: astore_1
    //   2422: aload_1
    //   2423: ifnonnull +73 -> 2496
    //   2426: aload_0
    //   2427: monitorexit
    //   2428: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   2431: aconst_null
    //   2432: areturn
    //   2433: iconst_0
    //   2434: istore 5
    //   2436: goto -99 -> 2337
    //   2439: iload 5
    //   2441: istore 6
    //   2443: aload 16
    //   2445: ifnull -494 -> 1951
    //   2448: aload 16
    //   2450: iconst_0
    //   2451: putfield 4921	com/android/server/am/ContentProviderConnection:waiting	Z
    //   2454: iload 5
    //   2456: istore 6
    //   2458: goto -507 -> 1951
    //   2461: astore_1
    //   2462: aload 18
    //   2464: monitorexit
    //   2465: aload_1
    //   2466: athrow
    //   2467: astore_1
    //   2468: aload 16
    //   2470: ifnull -519 -> 1951
    //   2473: aload 16
    //   2475: iconst_0
    //   2476: putfield 4921	com/android/server/am/ContentProviderConnection:waiting	Z
    //   2479: goto -528 -> 1951
    //   2482: astore_1
    //   2483: aload 16
    //   2485: ifnull +9 -> 2494
    //   2488: aload 16
    //   2490: iconst_0
    //   2491: putfield 4921	com/android/server/am/ContentProviderConnection:waiting	Z
    //   2494: aload_1
    //   2495: athrow
    //   2496: aload_0
    //   2497: aload 18
    //   2499: getfield 4912	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
    //   2502: iconst_1
    //   2503: invokevirtual 3434	com/android/server/am/ActivityManagerService:cleanupAppInLaunchingProvidersLocked	(Lcom/android/server/am/ProcessRecord;Z)Z
    //   2506: pop
    //   2507: aload_0
    //   2508: aload 18
    //   2510: getfield 4912	com/android/server/am/ContentProviderRecord:launchingApp	Lcom/android/server/am/ProcessRecord;
    //   2513: iconst_0
    //   2514: iconst_1
    //   2515: ldc_w 4945
    //   2518: invokevirtual 4949	com/android/server/am/ActivityManagerService:removeProcessLocked	(Lcom/android/server/am/ProcessRecord;ZZLjava/lang/String;)Z
    //   2521: pop
    //   2522: aload_0
    //   2523: monitorexit
    //   2524: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   2527: aconst_null
    //   2528: areturn
    //   2529: astore_1
    //   2530: aload_0
    //   2531: monitorexit
    //   2532: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   2535: aload_1
    //   2536: athrow
    //   2537: aload 18
    //   2539: ifnull +11 -> 2550
    //   2542: aload 18
    //   2544: aload 16
    //   2546: invokevirtual 4741	com/android/server/am/ContentProviderRecord:newHolder	(Lcom/android/server/am/ContentProviderConnection;)Landroid/app/IActivityManager$ContentProviderHolder;
    //   2549: areturn
    //   2550: aconst_null
    //   2551: areturn
    //   2552: astore 16
    //   2554: aload 18
    //   2556: astore 16
    //   2558: goto -725 -> 1833
    //   2561: astore 16
    //   2563: goto -1053 -> 1510
    //   2566: astore 15
    //   2568: goto -1797 -> 771
    //   2571: goto -2289 -> 282
    //   2574: aconst_null
    //   2575: astore_1
    //   2576: aconst_null
    //   2577: astore 15
    //   2579: iload 10
    //   2581: istore 9
    //   2583: iload 5
    //   2585: istore 6
    //   2587: goto -2332 -> 255
    //   2590: iconst_1
    //   2591: istore 5
    //   2593: goto -22 -> 2571
    //   2596: iconst_0
    //   2597: istore 5
    //   2599: goto -2317 -> 282
    //   2602: iload 9
    //   2604: ifeq -1761 -> 843
    //   2607: iconst_0
    //   2608: istore 6
    //   2610: goto -1767 -> 843
    //   2613: iconst_0
    //   2614: istore 9
    //   2616: goto -14 -> 2602
    //   2619: iconst_1
    //   2620: istore 10
    //   2622: goto -1739 -> 883
    //   2625: goto -1358 -> 1267
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	2628	0	this	ActivityManagerService
    //   0	2628	1	paramIApplicationThread	IApplicationThread
    //   0	2628	2	paramString	String
    //   0	2628	3	paramIBinder	IBinder
    //   0	2628	4	paramBoolean	boolean
    //   0	2628	5	paramInt	int
    //   134	2475	6	i	int
    //   284	2081	7	j	int
    //   1435	31	8	k	int
    //   130	2485	9	bool1	boolean
    //   98	2523	10	bool2	boolean
    //   14	2311	11	l1	long
    //   379	1944	13	l2	long
    //   28	2087	15	localObject1	Object
    //   2566	1	15	localRemoteException1	RemoteException
    //   2577	1	15	localObject2	Object
    //   1	1263	16	localObject3	Object
    //   1305	1	16	localRemoteException2	RemoteException
    //   1362	308	16	localInteger	Integer
    //   1683	36	16	localIllegalArgumentException	IllegalArgumentException
    //   1777	768	16	localObject4	Object
    //   2552	1	16	localRemoteException3	RemoteException
    //   2556	1	16	localObject5	Object
    //   2561	1	16	localRemoteException4	RemoteException
    //   17	1875	17	localObject6	Object
    //   4	2551	18	localObject7	Object
    //   119	1957	19	localObject8	Object
    //   1347	20	20	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   8	16	89	finally
    //   23	30	89	finally
    //   39	89	89	finally
    //   100	121	89	finally
    //   161	172	89	finally
    //   192	246	89	finally
    //   259	276	89	finally
    //   291	320	89	finally
    //   325	335	89	finally
    //   335	344	89	finally
    //   349	369	89	finally
    //   376	402	89	finally
    //   407	468	89	finally
    //   468	496	89	finally
    //   509	532	89	finally
    //   536	593	89	finally
    //   598	680	89	finally
    //   704	709	89	finally
    //   728	737	89	finally
    //   740	756	89	finally
    //   759	768	89	finally
    //   782	796	89	finally
    //   799	840	89	finally
    //   843	875	89	finally
    //   883	896	89	finally
    //   901	911	89	finally
    //   911	940	89	finally
    //   940	1029	89	finally
    //   1036	1047	89	finally
    //   1047	1095	89	finally
    //   1108	1130	89	finally
    //   1223	1228	89	finally
    //   1258	1263	89	finally
    //   1267	1276	89	finally
    //   1281	1298	89	finally
    //   1307	1312	89	finally
    //   1316	1323	89	finally
    //   1323	1349	89	finally
    //   1354	1364	89	finally
    //   1364	1428	89	finally
    //   1428	1437	89	finally
    //   1447	1461	89	finally
    //   1468	1473	89	finally
    //   1656	1661	89	finally
    //   1734	1741	89	finally
    //   1850	1855	89	finally
    //   1855	1864	89	finally
    //   1869	1880	89	finally
    //   1880	1902	89	finally
    //   1916	1921	89	finally
    //   1931	1940	89	finally
    //   2233	2238	89	finally
    //   1148	1188	1305	android/os/RemoteException
    //   1193	1223	1305	android/os/RemoteException
    //   1235	1258	1305	android/os/RemoteException
    //   1148	1188	1315	finally
    //   1193	1223	1315	finally
    //   1235	1258	1315	finally
    //   1473	1510	1683	java/lang/IllegalArgumentException
    //   1473	1510	1733	finally
    //   1510	1538	1733	finally
    //   1543	1559	1733	finally
    //   1559	1609	1733	finally
    //   1609	1656	1733	finally
    //   1685	1730	1733	finally
    //   1741	1775	1733	finally
    //   1779	1818	1733	finally
    //   1818	1829	1733	finally
    //   1833	1850	1733	finally
    //   2100	2159	1733	finally
    //   2168	2233	1733	finally
    //   1955	2095	2461	finally
    //   2351	2357	2461	finally
    //   2448	2454	2461	finally
    //   2473	2479	2461	finally
    //   2488	2494	2461	finally
    //   2494	2496	2461	finally
    //   2245	2293	2467	java/lang/InterruptedException
    //   2298	2304	2467	java/lang/InterruptedException
    //   2304	2322	2467	java/lang/InterruptedException
    //   2245	2293	2482	finally
    //   2298	2304	2482	finally
    //   2304	2322	2482	finally
    //   2371	2422	2529	finally
    //   2496	2522	2529	finally
    //   1818	1829	2552	android/os/RemoteException
    //   1473	1510	2561	android/os/RemoteException
    //   728	737	2566	android/os/RemoteException
    //   740	756	2566	android/os/RemoteException
    //   759	768	2566	android/os/RemoteException
  }
  
  public static long getInputDispatchingTimeoutLocked(ActivityRecord paramActivityRecord)
  {
    if (paramActivityRecord != null) {
      return getInputDispatchingTimeoutLocked(paramActivityRecord.app);
    }
    return 5000L;
  }
  
  public static long getInputDispatchingTimeoutLocked(ProcessRecord paramProcessRecord)
  {
    if ((paramProcessRecord != null) && ((paramProcessRecord.instrumentationClass != null) || (paramProcessRecord.usingWrapper))) {
      return 60000L;
    }
    return 5000L;
  }
  
  private final long[] getKsmInfo()
  {
    int[] arrayOfInt = new int[1];
    arrayOfInt[0] = 8224;
    long[] arrayOfLong = new long[1];
    Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", arrayOfInt, null, arrayOfLong, null);
    long l1 = arrayOfLong[0] * 4096L / 1024L;
    arrayOfLong[0] = 0L;
    Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", arrayOfInt, null, arrayOfLong, null);
    long l2 = arrayOfLong[0] * 4096L / 1024L;
    arrayOfLong[0] = 0L;
    Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", arrayOfInt, null, arrayOfLong, null);
    long l3 = arrayOfLong[0] * 4096L / 1024L;
    arrayOfLong[0] = 0L;
    Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", arrayOfInt, null, arrayOfLong, null);
    return new long[] { l1, l2, l3, arrayOfLong[0] * 4096L / 1024L };
  }
  
  private final int getLRURecordIndexForAppLocked(IApplicationThread paramIApplicationThread)
  {
    paramIApplicationThread = paramIApplicationThread.asBinder();
    int i = this.mLruProcesses.size() - 1;
    while (i >= 0)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
      if ((localProcessRecord.thread != null) && (localProcessRecord.thread.asBinder() == paramIApplicationThread)) {
        return i;
      }
      i -= 1;
    }
    return -1;
  }
  
  private long getLowRamTimeSinceIdle(long paramLong)
  {
    long l1 = 0L;
    long l2 = this.mLowRamTimeSinceLastIdle;
    if (this.mLowRamStartTime > 0L) {
      l1 = paramLong - this.mLowRamStartTime;
    }
    return l1 + l2;
  }
  
  private ProviderInfo getProviderInfoLocked(String paramString, int paramInt1, int paramInt2)
  {
    ContentProviderRecord localContentProviderRecord = this.mProviderMap.getProviderByName(paramString, paramInt1);
    if (localContentProviderRecord != null) {
      return localContentProviderRecord.info;
    }
    try
    {
      paramString = AppGlobals.getPackageManager().resolveContentProvider(paramString, paramInt2 | 0x800, paramInt1);
      return paramString;
    }
    catch (RemoteException paramString) {}
    return null;
  }
  
  private final void handleAppDiedLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2)
  {
    int i = paramProcessRecord.pid;
    if ((cleanUpApplicationRecordLocked(paramProcessRecord, paramBoolean1, paramBoolean2, -1, false)) || (paramBoolean1)) {}
    for (;;)
    {
      if (this.mProfileProc == paramProcessRecord) {
        clearProfilerLocked();
      }
      paramBoolean2 = this.mStackSupervisor.handleAppDiedLocked(paramProcessRecord);
      paramProcessRecord.activities.clear();
      if (paramProcessRecord.instrumentationClass != null)
      {
        Slog.w(TAG, "Crash of app " + paramProcessRecord.processName + " running instrumentation " + paramProcessRecord.instrumentationClass);
        Bundle localBundle = new Bundle();
        localBundle.putString("shortMsg", "Process crashed.");
        finishInstrumentationLocked(paramProcessRecord, 0, localBundle);
      }
      if ((!paramBoolean1) && (paramBoolean2) && (!this.mStackSupervisor.resumeFocusedStackTopActivityLocked())) {
        break;
      }
      return;
      removeLruProcessLocked(paramProcessRecord);
      if (i > 0) {
        ProcessList.remove(i);
      }
    }
    this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
  }
  
  private void handleUntrackedProcessLocked(int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramInt);
      if ((localProcessRecord != null) && (localProcessRecord.info != null))
      {
        Log.e(TAG, "Handle untracked process die start : " + localProcessRecord.processName + ", pid : " + localProcessRecord.pid);
        appDiedLocked(localProcessRecord);
        Log.e(TAG, "Handle untracked process die end");
      }
      resetPriorityAfterLockedSection();
      if (OnePlusAppBootManager.IN_USING) {
        OnePlusAppBootManager.getInstance(null).trackProcess(false, localProcessRecord, "handleUntrackedProcessLocked");
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  private boolean hasUsageStatsPermission(String paramString)
  {
    int i = this.mAppOpsService.checkOperation(43, Binder.getCallingUid(), paramString);
    if (i == 3) {
      return checkCallingPermission("android.permission.PACKAGE_USAGE_STATS") == 0;
    }
    return i == 0;
  }
  
  private void installEncryptionUnawareProviders(int paramInt)
  {
    for (;;)
    {
      int j;
      int k;
      int m;
      try
      {
        boostPriorityForLockedSection();
        int i1 = this.mProcessNames.getMap().size();
        int i = 0;
        if (i < i1)
        {
          SparseArray localSparseArray = (SparseArray)this.mProcessNames.getMap().valueAt(i);
          int i2 = localSparseArray.size();
          j = 0;
          if (j < i2)
          {
            ProcessRecord localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
            if ((localProcessRecord.userId == paramInt) && (localProcessRecord.thread != null) && (!localProcessRecord.unlocked))
            {
              int i3 = localProcessRecord.pkgList.size();
              k = 0;
              if (k < i3)
              {
                try
                {
                  Object localObject2 = (String)localProcessRecord.pkgList.keyAt(k);
                  localObject2 = AppGlobals.getPackageManager().getPackageInfo((String)localObject2, 262152, paramInt);
                  if ((localObject2 == null) || (ArrayUtils.isEmpty(((PackageInfo)localObject2).providers))) {
                    break label374;
                  }
                  localObject2 = ((PackageInfo)localObject2).providers;
                  m = 0;
                  int i4 = localObject2.length;
                  if (m >= i4) {
                    break label374;
                  }
                  localObject3 = localObject2[m];
                  if (Objects.equals(((ProviderInfo)localObject3).processName, localProcessRecord.processName)) {
                    break label398;
                  }
                  bool = ((ProviderInfo)localObject3).multiprocess;
                  if (!isSingleton(((ProviderInfo)localObject3).processName, ((ProviderInfo)localObject3).applicationInfo, ((ProviderInfo)localObject3).name, ((ProviderInfo)localObject3).flags)) {
                    break label383;
                  }
                  if (localProcessRecord.userId != 0) {
                    break label404;
                  }
                }
                catch (RemoteException localRemoteException)
                {
                  Object localObject3;
                  break label374;
                }
                if ((bool) && (n != 0))
                {
                  Log.v(TAG, "Installing " + localObject3);
                  localProcessRecord.thread.scheduleInstallProvider((ProviderInfo)localObject3);
                  break label389;
                }
                Log.v(TAG, "Skipping " + localObject3);
                break label389;
              }
            }
          }
          else
          {
            i += 1;
          }
        }
        else
        {
          return;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      j += 1;
      continue;
      label374:
      k += 1;
      continue;
      label383:
      int n = 1;
      continue;
      label389:
      m += 1;
      continue;
      label398:
      boolean bool = true;
      continue;
      label404:
      n = 0;
    }
  }
  
  private boolean isDeviceProvisioned()
  {
    try
    {
      ContentResolver localContentResolver = this.mContext.getContentResolver();
      if (Settings.Global.getInt(localContentResolver, "device_provisioned") == 1)
      {
        int i = Settings.Secure.getInt(localContentResolver, "user_setup_complete");
        return i == 1;
      }
      return false;
    }
    catch (Settings.SettingNotFoundException localSettingNotFoundException) {}
    return false;
  }
  
  private boolean isExcludedAPP(String paramString)
  {
    if (sRestartWhiteList.contains(paramString))
    {
      Log.d(TAG, "Process package is in restart whitelist : " + paramString);
      return true;
    }
    return false;
  }
  
  private boolean isGetTasksAllowed(String paramString, int paramInt1, int paramInt2)
  {
    bool1 = false;
    if (checkPermission("android.permission.REAL_GET_TASKS", paramInt1, paramInt2) == 0) {
      bool1 = true;
    }
    bool2 = bool1;
    if (!bool1)
    {
      bool2 = bool1;
      if (checkPermission("android.permission.GET_TASKS", paramInt1, paramInt2) == 0) {
        bool2 = bool1;
      }
    }
    try
    {
      if (AppGlobals.getPackageManager().isUidPrivileged(paramInt2))
      {
        boolean bool4 = true;
        boolean bool3 = true;
        bool2 = bool3;
        bool1 = bool4;
        if (ActivityManagerDebugConfig.DEBUG_TASKS)
        {
          bool1 = bool4;
          Slog.w(TAG, paramString + ": caller " + paramInt2 + " is using old GET_TASKS but privileged; allowing");
          bool2 = bool3;
        }
      }
    }
    catch (RemoteException localRemoteException)
    {
      for (;;)
      {
        bool2 = bool1;
      }
    }
    if ((!bool2) && (ActivityManagerDebugConfig.DEBUG_TASKS)) {
      Slog.w(TAG, paramString + ": caller " + paramInt2 + " does not hold REAL_GET_TASKS; limiting output");
    }
    return bool2;
  }
  
  private boolean isPermittedShellBroadcast(Intent paramIntent)
  {
    return "android.intent.action.REMOTE_BUGREPORT_FINISHED".equals(paramIntent.getAction());
  }
  
  private boolean isProcShouldBeKilled(ProcessRecord paramProcessRecord, long paramLong)
  {
    if (paramProcessRecord == null) {
      return false;
    }
    if (paramProcessRecord.toString() == null) {
      return false;
    }
    boolean bool1 = true;
    if (paramLong == 30000L)
    {
      bool2 = false;
      bool1 = bool2;
      if (paramProcessRecord.pid == this.mHighConsumptionAppPid)
      {
        bool1 = bool2;
        if (paramProcessRecord.uid >= 10000) {
          if (paramProcessRecord.info != null)
          {
            bool1 = bool2;
            if ((paramProcessRecord.info.flags & 0x81) != 0) {}
          }
          else
          {
            bool1 = bool2;
            if (SystemClock.uptimeMillis() - this.mHighConsumptionTime < this.KILL_HIGH_CONSUMPT_TIMEOUT) {
              bool1 = true;
            }
          }
        }
      }
    }
    while ((paramProcessRecord.pid != MY_PID) && (!paramProcessRecord.toString().toLowerCase().contains("keyguard")))
    {
      boolean bool2;
      return bool1;
    }
    if (ActivityManagerDebugConfig.DEBUG_CLEANUP) {
      Slog.v(TAG, "watchdog will triggerd kill all process except system_server  ");
    }
    return false;
  }
  
  private BroadcastQueue isReceivingBroadcast(ProcessRecord paramProcessRecord)
  {
    Object localObject1 = paramProcessRecord.curReceiver;
    if (localObject1 != null) {
      return ((BroadcastRecord)localObject1).queue;
    }
    try
    {
      boostPriorityForLockedSection();
      localObject1 = this.mBroadcastQueues;
      int i = 0;
      int j = localObject1.length;
      while (i < j)
      {
        BroadcastQueue localBroadcastQueue = localObject1[i];
        Object localObject2 = localBroadcastQueue.mPendingBroadcast;
        if (localObject2 != null)
        {
          localObject2 = ((BroadcastRecord)localObject2).curApp;
          if (localObject2 == paramProcessRecord) {
            return localBroadcastQueue;
          }
        }
        i += 1;
      }
      return null;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  private void killAllBackgroundProcessesExcept(int paramInt1, int paramInt2)
  {
    Object localObject1;
    if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0)
    {
      localObject1 = "Permission Denial: killAllBackgroundProcessesExcept() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
      Slog.w(TAG, (String)localObject1);
      throw new SecurityException((String)localObject1);
    }
    long l = Binder.clearCallingIdentity();
    for (;;)
    {
      int j;
      try
      {
        int i;
        try
        {
          boostPriorityForLockedSection();
          localObject1 = new ArrayList();
          int k = this.mProcessNames.getMap().size();
          i = 0;
          if (i >= k) {
            break label253;
          }
          SparseArray localSparseArray = (SparseArray)this.mProcessNames.getMap().valueAt(i);
          int m = localSparseArray.size();
          j = 0;
          if (j < m)
          {
            ProcessRecord localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
            if (localProcessRecord.removed)
            {
              ((ArrayList)localObject1).add(localProcessRecord);
            }
            else if (((paramInt1 < 0) || (localProcessRecord.info.targetSdkVersion < paramInt1)) && ((paramInt2 < 0) || (localProcessRecord.setProcState > paramInt2)))
            {
              localProcessRecord.removed = true;
              ((ArrayList)localObject1).add(localProcessRecord);
            }
          }
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        i += 1;
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      continue;
      label253:
      paramInt2 = ((ArrayList)localObject3).size();
      paramInt1 = 0;
      while (paramInt1 < paramInt2)
      {
        removeProcessLocked((ProcessRecord)((ArrayList)localObject3).get(paramInt1), false, true, "kill all background except");
        paramInt1 += 1;
      }
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
      j += 1;
    }
  }
  
  private final boolean killPackageProcessesLocked(String paramString1, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, String paramString2)
  {
    ArrayList localArrayList = new ArrayList();
    int k = this.mProcessNames.getMap().size();
    int i = 0;
    while (i < k)
    {
      SparseArray localSparseArray = (SparseArray)this.mProcessNames.getMap().valueAt(i);
      int m = localSparseArray.size();
      int j = 0;
      if (j < m)
      {
        ProcessRecord localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
        if ((!localProcessRecord.persistent) || (paramBoolean4))
        {
          if (!localProcessRecord.removed) {
            break label120;
          }
          if (paramBoolean3) {
            localArrayList.add(localProcessRecord);
          }
        }
        for (;;)
        {
          j += 1;
          break;
          label120:
          if (localProcessRecord.setAdj >= paramInt3)
          {
            if (paramString1 == null)
            {
              if (((paramInt2 != -1) && (localProcessRecord.userId != paramInt2)) || ((paramInt1 >= 0) && (UserHandle.getAppId(localProcessRecord.uid) != paramInt1))) {
                continue;
              }
              label164:
              if (!paramBoolean3) {
                return true;
              }
            }
            else
            {
              if (localProcessRecord.pkgDeps != null) {}
              for (boolean bool = localProcessRecord.pkgDeps.contains(paramString1);; bool = false)
              {
                if (((!bool) && (UserHandle.getAppId(localProcessRecord.uid) != paramInt1)) || ((paramInt2 != -1) && (localProcessRecord.userId != paramInt2))) {
                  break label245;
                }
                if (localProcessRecord.pkgList.containsKey(paramString1)) {
                  break label164;
                }
                if (!bool) {
                  break;
                }
                break label164;
              }
              label245:
              continue;
            }
            localProcessRecord.removed = true;
            localArrayList.add(localProcessRecord);
          }
        }
      }
      i += 1;
    }
    paramInt2 = localArrayList.size();
    paramInt1 = 0;
    while (paramInt1 < paramInt2)
    {
      removeProcessLocked((ProcessRecord)localArrayList.get(paramInt1), paramBoolean1, paramBoolean2, paramString2);
      paramInt1 += 1;
    }
    updateOomAdjLocked();
    return paramInt2 > 0;
  }
  
  static void killProcessGroup(int paramInt1, int paramInt2)
  {
    if (sKillHandler != null)
    {
      sKillHandler.sendMessage(sKillHandler.obtainMessage(4000, paramInt1, paramInt2));
      return;
    }
    Slog.w(TAG, "Asked to kill process group before system bringup!");
    Process.killProcessGroup(paramInt1, paramInt2);
  }
  
  private boolean killProcessesBelowAdj(int paramInt, String paramString)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("killProcessesBelowAdj() only available to system");
    }
    boolean bool2;
    for (boolean bool1 = false;; bool1 = bool2)
    {
      int i;
      synchronized (this.mPidsSelfLocked)
      {
        int j = this.mPidsSelfLocked.size();
        i = 0;
        if (i < j)
        {
          this.mPidsSelfLocked.keyAt(i);
          ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.valueAt(i);
          if (localProcessRecord == null)
          {
            bool2 = bool1;
          }
          else
          {
            bool2 = bool1;
            if (localProcessRecord.setAdj > paramInt)
            {
              bool2 = bool1;
              if (!localProcessRecord.killedByAm)
              {
                localProcessRecord.kill(paramString, true);
                bool2 = true;
              }
            }
          }
        }
        else
        {
          return bool1;
        }
      }
      i += 1;
    }
  }
  
  private String lockScreenShownToString()
  {
    switch (this.mLockScreenShown)
    {
    default: 
      return "Unknown=" + this.mLockScreenShown;
    case 0: 
      return "LOCK_SCREEN_HIDDEN";
    case 1: 
      return "LOCK_SCREEN_LEAVING";
    }
    return "LOCK_SCREEN_SHOWN";
  }
  
  private void logStrictModeViolationToDropBox(ProcessRecord paramProcessRecord, StrictMode.ViolationInfo paramViolationInfo)
  {
    if (paramViolationInfo == null) {
      return;
    }
    boolean bool;
    if (paramProcessRecord != null)
    {
      if ((paramProcessRecord.info.flags & 0x81) == 0) {
        break label388;
      }
      bool = true;
    }
    label35:
    final String str2;
    label45:
    final DropBoxManager localDropBoxManager;
    label86:
    int i;
    for (;;)
    {
      String str1;
      if (paramProcessRecord == null)
      {
        str1 = "unknown";
        if (!bool) {
          break label403;
        }
        str2 = "system_app_strictmode";
        localDropBoxManager = (DropBoxManager)this.mContext.getSystemService("dropbox");
        if ((localDropBoxManager != null) && (localDropBoxManager.isTagEnabled(str2)) && (!bool)) {
          break label412;
        }
      }
      synchronized (this.mStrictModeBuffer)
      {
        if (???.length() == 0) {}
        for (i = 1;; i = 0)
        {
          appendDropBoxProcessHeaders(paramProcessRecord, str1, ???);
          ???.append("Build: ").append(Build.FINGERPRINT).append("\n");
          ???.append("System-App: ").append(bool).append("\n");
          ???.append("Uptime-Millis: ").append(paramViolationInfo.violationUptimeMillis).append("\n");
          if (paramViolationInfo.violationNumThisLoop != 0) {
            ???.append("Loop-Violation-Number: ").append(paramViolationInfo.violationNumThisLoop).append("\n");
          }
          if (paramViolationInfo.numAnimationsRunning != 0) {
            ???.append("Animations-Running: ").append(paramViolationInfo.numAnimationsRunning).append("\n");
          }
          if (paramViolationInfo.broadcastIntentAction != null) {
            ???.append("Broadcast-Intent-Action: ").append(paramViolationInfo.broadcastIntentAction).append("\n");
          }
          if (paramViolationInfo.durationMillis != -1) {
            ???.append("Duration-Millis: ").append(paramViolationInfo.durationMillis).append("\n");
          }
          if (paramViolationInfo.numInstances != -1L) {
            ???.append("Instance-Count: ").append(paramViolationInfo.numInstances).append("\n");
          }
          if (paramViolationInfo.tags == null) {
            break label432;
          }
          paramProcessRecord = paramViolationInfo.tags;
          j = 0;
          int k = paramProcessRecord.length;
          while (j < k)
          {
            str1 = paramProcessRecord[j];
            ???.append("Span-Tag: ").append(str1).append("\n");
            j += 1;
          }
          bool = true;
          break;
          label388:
          bool = false;
          break;
          str1 = paramProcessRecord.processName;
          break label35;
          label403:
          str2 = "data_app_strictmode";
          break label45;
          return;
          label412:
          ??? = new StringBuilder(1024);
          break label86;
        }
        label432:
        ???.append("\n");
        if ((paramViolationInfo.crashInfo != null) && (paramViolationInfo.crashInfo.stackTrace != null))
        {
          ???.append(paramViolationInfo.crashInfo.stackTrace);
          ???.append("\n");
        }
        if (paramViolationInfo.message != null)
        {
          ???.append(paramViolationInfo.message);
          ???.append("\n");
        }
        int j = ???.length();
        if (j > 65536)
        {
          j = 1;
          if ((!bool) || (j != 0)) {
            new Thread("Error dump: " + str2)
            {
              public void run()
              {
                synchronized (localStringBuilder)
                {
                  String str = localStringBuilder.toString();
                  localStringBuilder.delete(0, localStringBuilder.length());
                  localStringBuilder.trimToSize();
                  if (str.length() != 0) {
                    localDropBoxManager.addText(str2, str);
                  }
                  return;
                }
              }
            }.start();
          }
        }
        else
        {
          j = 0;
        }
      }
    }
    if (i == 0) {
      return;
    }
    new Thread("Error dump: " + str2)
    {
      /* Error */
      public void run()
      {
        // Byte code:
        //   0: ldc2_w 32
        //   3: invokestatic 37	java/lang/Thread:sleep	(J)V
        //   6: aload_0
        //   7: getfield 19	com/android/server/am/ActivityManagerService$24:this$0	Lcom/android/server/am/ActivityManagerService;
        //   10: invokestatic 41	com/android/server/am/ActivityManagerService:-get15	(Lcom/android/server/am/ActivityManagerService;)Ljava/lang/StringBuilder;
        //   13: astore_2
        //   14: aload_2
        //   15: monitorenter
        //   16: aload_0
        //   17: getfield 19	com/android/server/am/ActivityManagerService$24:this$0	Lcom/android/server/am/ActivityManagerService;
        //   20: invokestatic 41	com/android/server/am/ActivityManagerService:-get15	(Lcom/android/server/am/ActivityManagerService;)Ljava/lang/StringBuilder;
        //   23: invokevirtual 47	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //   26: astore_3
        //   27: aload_3
        //   28: invokevirtual 53	java/lang/String:length	()I
        //   31: istore_1
        //   32: iload_1
        //   33: ifne +10 -> 43
        //   36: aload_2
        //   37: monitorexit
        //   38: return
        //   39: astore_2
        //   40: goto -34 -> 6
        //   43: aload_0
        //   44: getfield 19	com/android/server/am/ActivityManagerService$24:this$0	Lcom/android/server/am/ActivityManagerService;
        //   47: invokestatic 41	com/android/server/am/ActivityManagerService:-get15	(Lcom/android/server/am/ActivityManagerService;)Ljava/lang/StringBuilder;
        //   50: iconst_0
        //   51: aload_0
        //   52: getfield 19	com/android/server/am/ActivityManagerService$24:this$0	Lcom/android/server/am/ActivityManagerService;
        //   55: invokestatic 41	com/android/server/am/ActivityManagerService:-get15	(Lcom/android/server/am/ActivityManagerService;)Ljava/lang/StringBuilder;
        //   58: invokevirtual 54	java/lang/StringBuilder:length	()I
        //   61: invokevirtual 58	java/lang/StringBuilder:delete	(II)Ljava/lang/StringBuilder;
        //   64: pop
        //   65: aload_0
        //   66: getfield 19	com/android/server/am/ActivityManagerService$24:this$0	Lcom/android/server/am/ActivityManagerService;
        //   69: invokestatic 41	com/android/server/am/ActivityManagerService:-get15	(Lcom/android/server/am/ActivityManagerService;)Ljava/lang/StringBuilder;
        //   72: invokevirtual 61	java/lang/StringBuilder:trimToSize	()V
        //   75: aload_2
        //   76: monitorexit
        //   77: aload_0
        //   78: getfield 21	com/android/server/am/ActivityManagerService$24:val$dbox	Landroid/os/DropBoxManager;
        //   81: aload_0
        //   82: getfield 23	com/android/server/am/ActivityManagerService$24:val$dropboxTag	Ljava/lang/String;
        //   85: aload_3
        //   86: invokevirtual 67	android/os/DropBoxManager:addText	(Ljava/lang/String;Ljava/lang/String;)V
        //   89: return
        //   90: astore_3
        //   91: aload_2
        //   92: monitorexit
        //   93: aload_3
        //   94: athrow
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	95	0	this	24
        //   31	2	1	i	int
        //   39	53	2	localInterruptedException	InterruptedException
        //   26	60	3	str	String
        //   90	4	3	localObject	Object
        // Exception table:
        //   from	to	target	type
        //   0	6	39	java/lang/InterruptedException
        //   16	32	90	finally
        //   43	75	90	finally
      }
    }.start();
  }
  
  private boolean maybePrunePersistedUriGrantsLocked(int paramInt)
  {
    Object localObject = (ArrayMap)this.mGrantedUriPermissions.get(paramInt);
    if (localObject == null) {
      return false;
    }
    if (((ArrayMap)localObject).size() < 128) {
      return false;
    }
    ArrayList localArrayList = Lists.newArrayList();
    localObject = ((ArrayMap)localObject).values().iterator();
    while (((Iterator)localObject).hasNext())
    {
      UriPermission localUriPermission = (UriPermission)((Iterator)localObject).next();
      if (localUriPermission.persistedModeFlags != 0) {
        localArrayList.add(localUriPermission);
      }
    }
    int i = localArrayList.size() - 128;
    if (i <= 0) {
      return false;
    }
    Collections.sort(localArrayList, new UriPermission.PersistedTimeComparator());
    paramInt = 0;
    while (paramInt < i)
    {
      localObject = (UriPermission)localArrayList.get(paramInt);
      if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
        Slog.v(TAG_URI_PERMISSION, "Trimming grant created at " + ((UriPermission)localObject).persistedCreateTime);
      }
      ((UriPermission)localObject).releasePersistableModes(-1);
      removeUriPermissionIfNeededLocked((UriPermission)localObject);
      paramInt += 1;
    }
    return true;
  }
  
  private void maybeUpdateProviderUsageStatsLocked(ProcessRecord paramProcessRecord, String paramString1, String paramString2)
  {
    if (paramProcessRecord == null) {
      return;
    }
    if (paramProcessRecord.curProcState <= 6)
    {
      UserState localUserState = this.mUserController.getStartedUserStateLocked(paramProcessRecord.userId);
      if (localUserState == null) {
        return;
      }
      long l = SystemClock.elapsedRealtime();
      Long localLong = (Long)localUserState.mProviderLastReportedFg.get(paramString2);
      if ((localLong == null) || (localLong.longValue() < l - 60000L))
      {
        if (this.mSystemReady) {
          this.mUsageStatsService.reportContentProviderUsage(paramString2, paramString1, paramProcessRecord.userId);
        }
        localUserState.mProviderLastReportedFg.put(paramString2, Long.valueOf(l));
      }
    }
  }
  
  private void maybeUpdateUsageStatsLocked(ProcessRecord paramProcessRecord, long paramLong)
  {
    if (ActivityManagerDebugConfig.DEBUG_USAGE_STATS) {
      Slog.d(TAG, "Checking proc [" + Arrays.toString(paramProcessRecord.getPackageList()) + "] state changes: old = " + paramProcessRecord.setProcState + ", new = " + paramProcessRecord.curProcState);
    }
    if (this.mUsageStatsService == null) {
      return;
    }
    boolean bool;
    if (paramProcessRecord.curProcState <= 3)
    {
      bool = true;
      paramProcessRecord.fgInteractionTime = 0L;
    }
    while ((bool) && ((!paramProcessRecord.reportedInteraction) || (paramLong - paramProcessRecord.interactionEventTime > 86400000L)))
    {
      paramProcessRecord.interactionEventTime = paramLong;
      String[] arrayOfString = paramProcessRecord.getPackageList();
      if (arrayOfString != null)
      {
        int i = 0;
        for (;;)
        {
          if (i < arrayOfString.length)
          {
            this.mUsageStatsService.reportEvent(arrayOfString[i], paramProcessRecord.userId, 6);
            i += 1;
            continue;
            if (paramProcessRecord.curProcState <= 5)
            {
              if (paramProcessRecord.fgInteractionTime == 0L)
              {
                paramProcessRecord.fgInteractionTime = paramLong;
                bool = false;
                break;
              }
              if (paramLong > paramProcessRecord.fgInteractionTime + 1800000L)
              {
                bool = true;
                break;
              }
              bool = false;
              break;
            }
            if (paramProcessRecord.forcingToForeground == null) {
              if (paramProcessRecord.curProcState <= 6) {
                bool = true;
              }
            }
            for (;;)
            {
              paramProcessRecord.fgInteractionTime = 0L;
              break;
              bool = false;
              continue;
              bool = false;
            }
          }
        }
      }
    }
    paramProcessRecord.reportedInteraction = bool;
    if (!bool) {
      paramProcessRecord.interactionEventTime = 0L;
    }
  }
  
  private final void moveTaskBackwardsLocked(int paramInt)
  {
    Slog.e(TAG, "moveTaskBackwards not yet implemented!");
  }
  
  private native boolean nativeGetwalflag(String paramString);
  
  private static native int nativeMigrateFromBoost();
  
  private static native int nativeMigrateToBoost();
  
  private final void networkOptsCheck(int paramInt, String paramString)
  {
    this.mHandler.sendMessage(this.mHandler.obtainMessage(71, paramInt, 0, paramString));
  }
  
  private void noteUidProcessState(int paramInt1, int paramInt2)
  {
    this.mBatteryStatsService.noteUidProcessState(paramInt1, paramInt2);
    if (this.mTrackingAssociations)
    {
      int i = 0;
      int m = this.mAssociations.size();
      while (i < m)
      {
        ArrayMap localArrayMap1 = (ArrayMap)this.mAssociations.valueAt(i);
        int j = 0;
        int n = localArrayMap1.size();
        while (j < n)
        {
          ArrayMap localArrayMap2 = (ArrayMap)((SparseArray)localArrayMap1.valueAt(j)).get(paramInt1);
          if (localArrayMap2 != null)
          {
            int k = 0;
            int i1 = localArrayMap2.size();
            while (k < i1)
            {
              Association localAssociation = (Association)localArrayMap2.valueAt(k);
              if (localAssociation.mNesting >= 1)
              {
                long l = SystemClock.uptimeMillis();
                long[] arrayOfLong = localAssociation.mStateTimes;
                int i2 = localAssociation.mLastState + 1;
                arrayOfLong[i2] += l - localAssociation.mLastStateUptime;
                localAssociation.mLastState = paramInt2;
                localAssociation.mLastStateUptime = l;
              }
              k += 1;
            }
          }
          j += 1;
        }
        i += 1;
      }
    }
  }
  
  static int procStateToImportance(int paramInt1, int paramInt2, ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo)
  {
    paramInt1 = ActivityManager.RunningAppProcessInfo.procStateToImportance(paramInt1);
    if (paramInt1 == 400)
    {
      paramRunningAppProcessInfo.lru = paramInt2;
      return paramInt1;
    }
    paramRunningAppProcessInfo.lru = 0;
    return paramInt1;
  }
  
  private static String processClass(ProcessRecord paramProcessRecord)
  {
    if ((paramProcessRecord == null) || (paramProcessRecord.pid == MY_PID))
    {
      if ((paramProcessRecord == null) && (Binder.getCallingPid() != MY_PID)) {
        return "data_app";
      }
      return "system_server";
    }
    if ((paramProcessRecord.info.flags & 0x1) != 0) {
      return "system_app";
    }
    return "data_app";
  }
  
  private final void processContentProviderPublishTimedOutLocked(ProcessRecord paramProcessRecord)
  {
    cleanupAppInLaunchingProvidersLocked(paramProcessRecord, true);
    removeProcessLocked(paramProcessRecord, false, true, "timeout publishing content providers");
  }
  
  private boolean processSanityChecksLocked(ProcessRecord paramProcessRecord)
  {
    if ((paramProcessRecord == null) || (paramProcessRecord.thread == null)) {
      return false;
    }
    return ("1".equals(SystemProperties.get("ro.debuggable", "0"))) || ((paramProcessRecord.info.flags & 0x2) != 0);
  }
  
  private final void processStartTimedOutLocked(ProcessRecord paramProcessRecord)
  {
    int k = paramProcessRecord.pid;
    int j = 0;
    synchronized (this.mPidsSelfLocked)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(k);
      int i = j;
      if (localProcessRecord != null)
      {
        i = j;
        if (localProcessRecord.thread == null)
        {
          this.mPidsSelfLocked.remove(k);
          i = 1;
        }
      }
      if (i != 0)
      {
        Slog.w(TAG, "Process " + paramProcessRecord + " failed to attach");
        EventLog.writeEvent(30037, new Object[] { Integer.valueOf(paramProcessRecord.userId), Integer.valueOf(k), Integer.valueOf(paramProcessRecord.uid), paramProcessRecord.processName });
        removeProcessNameLocked(paramProcessRecord.processName, paramProcessRecord.uid);
        if (this.mHeavyWeightProcess == paramProcessRecord)
        {
          this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
          this.mHeavyWeightProcess = null;
        }
        this.mBatteryStatsService.noteProcessFinish(paramProcessRecord.processName, paramProcessRecord.info.uid);
        if (paramProcessRecord.isolated) {
          this.mBatteryStatsService.removeIsolatedUid(paramProcessRecord.uid, paramProcessRecord.info.uid);
        }
        cleanupAppInLaunchingProvidersLocked(paramProcessRecord, true);
        this.mServices.processStartTimedOutLocked(paramProcessRecord);
        paramProcessRecord.kill("start timeout", true);
        removeLruProcessLocked(paramProcessRecord);
        if ((this.mBackupTarget != null) && (this.mBackupTarget.app.pid == k)) {
          Slog.w(TAG, "Unattached app died before backup, skipping");
        }
      }
    }
    try
    {
      IBackupManager.Stub.asInterface(ServiceManager.getService("backup")).agentDisconnected(paramProcessRecord.info.packageName);
      if (isPendingBroadcastProcessLocked(k))
      {
        Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
        skipPendingBroadcastLocked(k);
      }
      return;
      paramProcessRecord = finally;
      throw paramProcessRecord;
      Slog.w(TAG, "Spurious process start timeout - pid not known for " + paramProcessRecord);
      return;
    }
    catch (RemoteException paramProcessRecord)
    {
      for (;;) {}
    }
  }
  
  /* Error */
  private void readGrantedUriPermissionsLocked()
  {
    // Byte code:
    //   0: getstatic 3246	com/android/server/am/ActivityManagerDebugConfig:DEBUG_URI_PERMISSION	Z
    //   3: ifeq +13 -> 16
    //   6: getstatic 1183	com/android/server/am/ActivityManagerService:TAG_URI_PERMISSION	Ljava/lang/String;
    //   9: ldc_w 5359
    //   12: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   15: pop
    //   16: invokestatic 5362	java/lang/System:currentTimeMillis	()J
    //   19: lstore 5
    //   21: aconst_null
    //   22: astore 13
    //   24: aconst_null
    //   25: astore 14
    //   27: aconst_null
    //   28: astore 11
    //   30: aconst_null
    //   31: astore 15
    //   33: aload_0
    //   34: getfield 1928	com/android/server/am/ActivityManagerService:mGrantFile	Landroid/util/AtomicFile;
    //   37: invokevirtual 5366	android/util/AtomicFile:openRead	()Ljava/io/FileInputStream;
    //   40: astore 12
    //   42: aload 12
    //   44: astore 15
    //   46: aload 12
    //   48: astore 13
    //   50: aload 12
    //   52: astore 14
    //   54: aload 12
    //   56: astore 11
    //   58: invokestatic 5372	android/util/Xml:newPullParser	()Lorg/xmlpull/v1/XmlPullParser;
    //   61: astore 16
    //   63: aload 12
    //   65: astore 15
    //   67: aload 12
    //   69: astore 13
    //   71: aload 12
    //   73: astore 14
    //   75: aload 12
    //   77: astore 11
    //   79: aload 16
    //   81: aload 12
    //   83: getstatic 5378	java/nio/charset/StandardCharsets:UTF_8	Ljava/nio/charset/Charset;
    //   86: invokevirtual 5382	java/nio/charset/Charset:name	()Ljava/lang/String;
    //   89: invokeinterface 5388 3 0
    //   94: aload 12
    //   96: astore 15
    //   98: aload 12
    //   100: astore 13
    //   102: aload 12
    //   104: astore 14
    //   106: aload 12
    //   108: astore 11
    //   110: aload 16
    //   112: invokeinterface 5390 1 0
    //   117: istore_1
    //   118: iload_1
    //   119: iconst_1
    //   120: if_icmpeq +566 -> 686
    //   123: aload 12
    //   125: astore 15
    //   127: aload 12
    //   129: astore 13
    //   131: aload 12
    //   133: astore 14
    //   135: aload 12
    //   137: astore 11
    //   139: aload 16
    //   141: invokeinterface 5393 1 0
    //   146: astore 17
    //   148: iload_1
    //   149: iconst_2
    //   150: if_icmpne -56 -> 94
    //   153: aload 12
    //   155: astore 15
    //   157: aload 12
    //   159: astore 13
    //   161: aload 12
    //   163: astore 14
    //   165: aload 12
    //   167: astore 11
    //   169: ldc_w 470
    //   172: aload 17
    //   174: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   177: ifeq -83 -> 94
    //   180: aload 12
    //   182: astore 15
    //   184: aload 12
    //   186: astore 13
    //   188: aload 12
    //   190: astore 14
    //   192: aload 12
    //   194: astore 11
    //   196: aload 16
    //   198: ldc -33
    //   200: sipush 55536
    //   203: invokestatic 5399	com/android/internal/util/XmlUtils:readIntAttribute	(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)I
    //   206: istore_2
    //   207: iload_2
    //   208: sipush 55536
    //   211: if_icmpeq +331 -> 542
    //   214: iload_2
    //   215: istore_1
    //   216: aload 12
    //   218: astore 15
    //   220: aload 12
    //   222: astore 13
    //   224: aload 12
    //   226: astore 14
    //   228: aload 12
    //   230: astore 11
    //   232: aload 16
    //   234: aconst_null
    //   235: ldc -48
    //   237: invokeinterface 5402 3 0
    //   242: astore 17
    //   244: aload 12
    //   246: astore 15
    //   248: aload 12
    //   250: astore 13
    //   252: aload 12
    //   254: astore 14
    //   256: aload 12
    //   258: astore 11
    //   260: aload 16
    //   262: aconst_null
    //   263: ldc -42
    //   265: invokeinterface 5402 3 0
    //   270: astore 18
    //   272: aload 12
    //   274: astore 15
    //   276: aload 12
    //   278: astore 13
    //   280: aload 12
    //   282: astore 14
    //   284: aload 12
    //   286: astore 11
    //   288: aload 16
    //   290: aconst_null
    //   291: ldc -36
    //   293: invokeinterface 5402 3 0
    //   298: invokestatic 5406	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
    //   301: astore 19
    //   303: aload 12
    //   305: astore 15
    //   307: aload 12
    //   309: astore 13
    //   311: aload 12
    //   313: astore 14
    //   315: aload 12
    //   317: astore 11
    //   319: aload 16
    //   321: ldc -51
    //   323: invokestatic 5410	com/android/internal/util/XmlUtils:readBooleanAttribute	(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)Z
    //   326: istore 9
    //   328: aload 12
    //   330: astore 15
    //   332: aload 12
    //   334: astore 13
    //   336: aload 12
    //   338: astore 14
    //   340: aload 12
    //   342: astore 11
    //   344: aload 16
    //   346: ldc -54
    //   348: invokestatic 5413	com/android/internal/util/XmlUtils:readIntAttribute	(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)I
    //   351: istore 4
    //   353: aload 12
    //   355: astore 15
    //   357: aload 12
    //   359: astore 13
    //   361: aload 12
    //   363: astore 14
    //   365: aload 12
    //   367: astore 11
    //   369: aload 16
    //   371: ldc -57
    //   373: lload 5
    //   375: invokestatic 5417	com/android/internal/util/XmlUtils:readLongAttribute	(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;J)J
    //   378: lstore 7
    //   380: aload 12
    //   382: astore 15
    //   384: aload 12
    //   386: astore 13
    //   388: aload 12
    //   390: astore 14
    //   392: aload 12
    //   394: astore 11
    //   396: aload_0
    //   397: aload 19
    //   399: invokevirtual 5420	android/net/Uri:getAuthority	()Ljava/lang/String;
    //   402: iload_1
    //   403: ldc_w 5421
    //   406: invokespecial 5423	com/android/server/am/ActivityManagerService:getProviderInfoLocked	(Ljava/lang/String;II)Landroid/content/pm/ProviderInfo;
    //   409: astore 20
    //   411: aload 20
    //   413: ifnull +180 -> 593
    //   416: aload 12
    //   418: astore 15
    //   420: aload 12
    //   422: astore 13
    //   424: aload 12
    //   426: astore 14
    //   428: aload 12
    //   430: astore 11
    //   432: aload 17
    //   434: aload 20
    //   436: getfield 4649	android/content/pm/ProviderInfo:packageName	Ljava/lang/String;
    //   439: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   442: istore 10
    //   444: iload 10
    //   446: ifeq +147 -> 593
    //   449: iconst_m1
    //   450: istore_3
    //   451: aload 12
    //   453: astore 15
    //   455: aload 12
    //   457: astore 13
    //   459: aload 12
    //   461: astore 14
    //   463: aload 12
    //   465: astore 11
    //   467: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   470: aload 18
    //   472: sipush 8192
    //   475: iload_2
    //   476: invokeinterface 5426 4 0
    //   481: istore_2
    //   482: iload_2
    //   483: iconst_m1
    //   484: if_icmpeq -390 -> 94
    //   487: aload 12
    //   489: astore 15
    //   491: aload 12
    //   493: astore 13
    //   495: aload 12
    //   497: astore 14
    //   499: aload 12
    //   501: astore 11
    //   503: aload_0
    //   504: aload 17
    //   506: aload 18
    //   508: iload_2
    //   509: new 109	com/android/server/am/ActivityManagerService$GrantUri
    //   512: dup
    //   513: iload_1
    //   514: aload 19
    //   516: iload 9
    //   518: invokespecial 5429	com/android/server/am/ActivityManagerService$GrantUri:<init>	(ILandroid/net/Uri;Z)V
    //   521: invokespecial 5431	com/android/server/am/ActivityManagerService:findOrCreateUriPermissionLocked	(Ljava/lang/String;Ljava/lang/String;ILcom/android/server/am/ActivityManagerService$GrantUri;)Lcom/android/server/am/UriPermission;
    //   524: iload 4
    //   526: lload 7
    //   528: invokevirtual 5435	com/android/server/am/UriPermission:initPersistedModes	(IJ)V
    //   531: goto -437 -> 94
    //   534: astore 11
    //   536: aload 15
    //   538: invokestatic 5441	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   541: return
    //   542: aload 12
    //   544: astore 15
    //   546: aload 12
    //   548: astore 13
    //   550: aload 12
    //   552: astore 14
    //   554: aload 12
    //   556: astore 11
    //   558: aload 16
    //   560: ldc -45
    //   562: invokestatic 5413	com/android/internal/util/XmlUtils:readIntAttribute	(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)I
    //   565: istore_1
    //   566: aload 12
    //   568: astore 15
    //   570: aload 12
    //   572: astore 13
    //   574: aload 12
    //   576: astore 14
    //   578: aload 12
    //   580: astore 11
    //   582: aload 16
    //   584: ldc -39
    //   586: invokestatic 5413	com/android/internal/util/XmlUtils:readIntAttribute	(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)I
    //   589: istore_2
    //   590: goto -374 -> 216
    //   593: aload 12
    //   595: astore 15
    //   597: aload 12
    //   599: astore 13
    //   601: aload 12
    //   603: astore 14
    //   605: aload 12
    //   607: astore 11
    //   609: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   612: new 1066	java/lang/StringBuilder
    //   615: dup
    //   616: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   619: ldc_w 5443
    //   622: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   625: aload 19
    //   627: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   630: ldc_w 5445
    //   633: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   636: aload 17
    //   638: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   641: ldc_w 5447
    //   644: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   647: aload 20
    //   649: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   652: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   655: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   658: pop
    //   659: goto -565 -> 94
    //   662: astore 12
    //   664: aload 13
    //   666: astore 11
    //   668: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   671: ldc_w 5449
    //   674: aload 12
    //   676: invokestatic 3020	android/util/Slog:wtf	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   679: pop
    //   680: aload 13
    //   682: invokestatic 5441	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   685: return
    //   686: aload 12
    //   688: invokestatic 5441	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   691: return
    //   692: astore 12
    //   694: aload 14
    //   696: astore 11
    //   698: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   701: ldc_w 5449
    //   704: aload 12
    //   706: invokestatic 3020	android/util/Slog:wtf	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   709: pop
    //   710: aload 14
    //   712: invokestatic 5441	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   715: return
    //   716: astore 12
    //   718: aload 11
    //   720: invokestatic 5441	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   723: aload 12
    //   725: athrow
    //   726: astore 11
    //   728: iload_3
    //   729: istore_2
    //   730: goto -248 -> 482
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	733	0	this	ActivityManagerService
    //   117	449	1	i	int
    //   206	524	2	j	int
    //   450	279	3	k	int
    //   351	174	4	m	int
    //   19	355	5	l1	long
    //   378	149	7	l2	long
    //   326	191	9	bool1	boolean
    //   442	3	10	bool2	boolean
    //   28	474	11	localObject1	Object
    //   534	1	11	localFileNotFoundException	FileNotFoundException
    //   556	163	11	localObject2	Object
    //   726	1	11	localRemoteException	RemoteException
    //   40	566	12	localFileInputStream	java.io.FileInputStream
    //   662	25	12	localIOException	IOException
    //   692	13	12	localXmlPullParserException	org.xmlpull.v1.XmlPullParserException
    //   716	8	12	localObject3	Object
    //   22	659	13	localObject4	Object
    //   25	686	14	localObject5	Object
    //   31	565	15	localObject6	Object
    //   61	522	16	localXmlPullParser	org.xmlpull.v1.XmlPullParser
    //   146	491	17	str1	String
    //   270	237	18	str2	String
    //   301	325	19	localUri	Uri
    //   409	239	20	localProviderInfo	ProviderInfo
    // Exception table:
    //   from	to	target	type
    //   33	42	534	java/io/FileNotFoundException
    //   58	63	534	java/io/FileNotFoundException
    //   79	94	534	java/io/FileNotFoundException
    //   110	118	534	java/io/FileNotFoundException
    //   139	148	534	java/io/FileNotFoundException
    //   169	180	534	java/io/FileNotFoundException
    //   196	207	534	java/io/FileNotFoundException
    //   232	244	534	java/io/FileNotFoundException
    //   260	272	534	java/io/FileNotFoundException
    //   288	303	534	java/io/FileNotFoundException
    //   319	328	534	java/io/FileNotFoundException
    //   344	353	534	java/io/FileNotFoundException
    //   369	380	534	java/io/FileNotFoundException
    //   396	411	534	java/io/FileNotFoundException
    //   432	444	534	java/io/FileNotFoundException
    //   467	482	534	java/io/FileNotFoundException
    //   503	531	534	java/io/FileNotFoundException
    //   558	566	534	java/io/FileNotFoundException
    //   582	590	534	java/io/FileNotFoundException
    //   609	659	534	java/io/FileNotFoundException
    //   33	42	662	java/io/IOException
    //   58	63	662	java/io/IOException
    //   79	94	662	java/io/IOException
    //   110	118	662	java/io/IOException
    //   139	148	662	java/io/IOException
    //   169	180	662	java/io/IOException
    //   196	207	662	java/io/IOException
    //   232	244	662	java/io/IOException
    //   260	272	662	java/io/IOException
    //   288	303	662	java/io/IOException
    //   319	328	662	java/io/IOException
    //   344	353	662	java/io/IOException
    //   369	380	662	java/io/IOException
    //   396	411	662	java/io/IOException
    //   432	444	662	java/io/IOException
    //   467	482	662	java/io/IOException
    //   503	531	662	java/io/IOException
    //   558	566	662	java/io/IOException
    //   582	590	662	java/io/IOException
    //   609	659	662	java/io/IOException
    //   33	42	692	org/xmlpull/v1/XmlPullParserException
    //   58	63	692	org/xmlpull/v1/XmlPullParserException
    //   79	94	692	org/xmlpull/v1/XmlPullParserException
    //   110	118	692	org/xmlpull/v1/XmlPullParserException
    //   139	148	692	org/xmlpull/v1/XmlPullParserException
    //   169	180	692	org/xmlpull/v1/XmlPullParserException
    //   196	207	692	org/xmlpull/v1/XmlPullParserException
    //   232	244	692	org/xmlpull/v1/XmlPullParserException
    //   260	272	692	org/xmlpull/v1/XmlPullParserException
    //   288	303	692	org/xmlpull/v1/XmlPullParserException
    //   319	328	692	org/xmlpull/v1/XmlPullParserException
    //   344	353	692	org/xmlpull/v1/XmlPullParserException
    //   369	380	692	org/xmlpull/v1/XmlPullParserException
    //   396	411	692	org/xmlpull/v1/XmlPullParserException
    //   432	444	692	org/xmlpull/v1/XmlPullParserException
    //   467	482	692	org/xmlpull/v1/XmlPullParserException
    //   503	531	692	org/xmlpull/v1/XmlPullParserException
    //   558	566	692	org/xmlpull/v1/XmlPullParserException
    //   582	590	692	org/xmlpull/v1/XmlPullParserException
    //   609	659	692	org/xmlpull/v1/XmlPullParserException
    //   33	42	716	finally
    //   58	63	716	finally
    //   79	94	716	finally
    //   110	118	716	finally
    //   139	148	716	finally
    //   169	180	716	finally
    //   196	207	716	finally
    //   232	244	716	finally
    //   260	272	716	finally
    //   288	303	716	finally
    //   319	328	716	finally
    //   344	353	716	finally
    //   369	380	716	finally
    //   396	411	716	finally
    //   432	444	716	finally
    //   467	482	716	finally
    //   503	531	716	finally
    //   558	566	716	finally
    //   582	590	716	finally
    //   609	659	716	finally
    //   668	680	716	finally
    //   698	710	716	finally
    //   467	482	726	android/os/RemoteException
  }
  
  private void removeContentProviderExternalUnchecked(String paramString, IBinder paramIBinder, int paramInt)
  {
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        ContentProviderRecord localContentProviderRecord = this.mProviderMap.getProviderByName(paramString, paramInt);
        if (localContentProviderRecord == null)
        {
          if (ActivityManagerDebugConfig.DEBUG_ALL) {
            Slog.v(TAG, paramString + " content provider not found in providers list");
          }
          return;
        }
        paramString = new ComponentName(localContentProviderRecord.info.packageName, localContentProviderRecord.info.name);
        paramString = this.mProviderMap.getProviderByClass(paramString, paramInt);
        if (paramString.hasExternalProcessHandles())
        {
          if (paramString.removeExternalProcessHandleLocked(paramIBinder))
          {
            updateOomAdjLocked();
            return;
          }
          Slog.e(TAG, "Attmpt to remove content provider " + paramString + " with no external reference for token: " + paramIBinder + ".");
          continue;
        }
        Slog.e(TAG, "Attmpt to remove content provider: " + paramString + " with no external references.");
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
  }
  
  private final ProcessRecord removeProcessNameLocked(String paramString, int paramInt)
  {
    paramString = (ProcessRecord)this.mProcessNames.remove(paramString, paramInt);
    if (paramString != null)
    {
      UidRecord localUidRecord = paramString.uidRecord;
      localUidRecord.numProcs -= 1;
      if (paramString.uidRecord.numProcs == 0)
      {
        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
          Slog.i(TAG_UID_OBSERVERS, "No more processes in " + paramString.uidRecord);
        }
        enqueueUidChangeLocked(paramString.uidRecord, -1, 1);
        this.mActiveUids.remove(paramInt);
        noteUidProcessState(paramInt, -1);
      }
      paramString.uidRecord = null;
    }
    this.mIsolatedProcesses.remove(paramInt);
    return paramString;
  }
  
  private boolean removeTaskByIdLocked(int paramInt, boolean paramBoolean1, boolean paramBoolean2)
  {
    TaskRecord localTaskRecord = this.mStackSupervisor.anyTaskForIdLocked(paramInt, false, -1);
    if (localTaskRecord != null)
    {
      localTaskRecord.removeTaskActivitiesLocked();
      cleanUpRemovedTaskLocked(localTaskRecord, paramBoolean1, paramBoolean2);
      if (localTaskRecord.isPersistable) {
        notifyTaskPersisterLocked(null, true);
      }
      return true;
    }
    Slog.w(TAG, "Request to remove task ignored for non-existent task " + paramInt);
    return false;
  }
  
  private boolean removeTaskByRecordLocked(TaskRecord paramTaskRecord)
  {
    if (paramTaskRecord != null)
    {
      paramTaskRecord.removeTaskActivitiesLocked();
      String str = null;
      if (paramTaskRecord.realActivity != null) {
        str = paramTaskRecord.realActivity.getPackageName();
      }
      if (this.mOemBoostAppLaunchList.contains(str)) {
        cleanUpRemovedTaskLocked(paramTaskRecord, false, true);
      }
      for (;;)
      {
        if (paramTaskRecord.isPersistable) {
          notifyTaskPersisterLocked(null, true);
        }
        return true;
        cleanUpRemovedTaskLocked(paramTaskRecord, true, true);
      }
    }
    Slog.w(TAG, "Request to remove a task which does not exist! ");
    return false;
  }
  
  private void removeTasksByPackageNameLocked(String paramString, int paramInt)
  {
    int i = this.mRecentTasks.size() - 1;
    if (i >= 0)
    {
      TaskRecord localTaskRecord = (TaskRecord)this.mRecentTasks.get(i);
      if (localTaskRecord.userId != paramInt) {}
      for (;;)
      {
        i -= 1;
        break;
        ComponentName localComponentName = localTaskRecord.intent.getComponent();
        if ((localComponentName != null) && (localComponentName.getPackageName().equals(paramString))) {
          removeTaskByIdLocked(localTaskRecord.taskId, true, true);
        }
      }
    }
  }
  
  private void removeUriPermissionsForPackageLocked(String paramString, int paramInt, boolean paramBoolean)
  {
    if ((paramInt == -1) && (paramString == null)) {
      throw new IllegalArgumentException("Must narrow by either package or user");
    }
    int j = 0;
    int k = this.mGrantedUriPermissions.size();
    int i = 0;
    while (i < k)
    {
      int i4 = this.mGrantedUriPermissions.keyAt(i);
      ArrayMap localArrayMap = (ArrayMap)this.mGrantedUriPermissions.valueAt(i);
      int i2;
      int i3;
      int m;
      int i1;
      if (paramInt != -1)
      {
        i2 = k;
        i3 = i;
        m = j;
        if (paramInt != UserHandle.getUserId(i4)) {}
      }
      else
      {
        Iterator localIterator = localArrayMap.values().iterator();
        while (localIterator.hasNext())
        {
          UriPermission localUriPermission = (UriPermission)localIterator.next();
          if (((paramString == null) || (localUriPermission.sourcePkg.equals(paramString)) || (localUriPermission.targetPkg.equals(paramString))) && ((!"downloads".equals(localUriPermission.uri.uri.getAuthority())) || (paramBoolean)))
          {
            if (paramBoolean) {}
            for (m = -1;; i1 = -65)
            {
              int n = j | localUriPermission.revokeModes(m, true);
              j = n;
              if (localUriPermission.modeFlags != 0) {
                break;
              }
              localIterator.remove();
              j = n;
              break;
            }
          }
        }
        i2 = k;
        i3 = i;
        i1 = j;
        if (localArrayMap.isEmpty())
        {
          this.mGrantedUriPermissions.remove(i4);
          i2 = k - 1;
          i3 = i - 1;
          i1 = j;
        }
      }
      i = i3 + 1;
      k = i2;
      j = i1;
    }
    if (j != 0) {
      schedulePersistUriGrants();
    }
  }
  
  private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher paramIInstrumentationWatcher, ComponentName paramComponentName, String paramString)
  {
    Slog.w(TAG, paramString);
    if (paramIInstrumentationWatcher != null)
    {
      Bundle localBundle = new Bundle();
      localBundle.putString("id", "ActivityManagerService");
      localBundle.putString("Error", paramString);
      this.mInstrumentationReporter.reportStatus(paramIInstrumentationWatcher, paramComponentName, -1, localBundle);
    }
  }
  
  private boolean requestTargetProviderPermissionsReviewIfNeededLocked(final ProviderInfo paramProviderInfo, final ProcessRecord paramProcessRecord, int paramInt)
  {
    int j = 1;
    if (getPackageManagerInternalLocked().isPermissionsReviewRequired(paramProviderInfo.packageName, paramInt))
    {
      int i = j;
      if (paramProcessRecord != null) {
        if (paramProcessRecord.setSchedGroup == 0) {
          break label90;
        }
      }
      label90:
      for (i = j; i == 0; i = 0)
      {
        Slog.w(TAG, "u" + paramInt + " Instantiating a provider in package" + paramProviderInfo.packageName + " requires a permissions review");
        return false;
      }
      paramProcessRecord = new Intent("android.intent.action.REVIEW_PERMISSIONS");
      paramProcessRecord.addFlags(276824064);
      paramProcessRecord.putExtra("android.intent.extra.PACKAGE_NAME", paramProviderInfo.packageName);
      if (ActivityManagerDebugConfig.DEBUG_PERMISSIONS_REVIEW) {
        Slog.i(TAG, "u" + paramInt + " Launching permission review " + "for package " + paramProviderInfo.packageName);
      }
      paramProviderInfo = new UserHandle(paramInt);
      this.mHandler.post(new Runnable()
      {
        public void run()
        {
          ActivityManagerService.this.mContext.startActivityAsUser(paramProcessRecord, paramProviderInfo);
        }
      });
      return false;
    }
    return true;
  }
  
  static void resetPriorityAfterLockedSection()
  {
    PriorityState localPriorityState = (PriorityState)sThreadPriorityState.get();
    PriorityState.-set1(localPriorityState, PriorityState.-get1(localPriorityState) - 1);
    if ((PriorityState.-get1(localPriorityState) == 0) && (PriorityState.-get0(localPriorityState) > -2)) {
      Process.setThreadPriority(Process.myTid(), PriorityState.-get0(localPriorityState));
    }
  }
  
  private ActivityInfo resolveActivityInfo(Intent paramIntent, int paramInt1, int paramInt2)
  {
    ComponentName localComponentName = paramIntent.getComponent();
    if (localComponentName != null) {}
    try
    {
      return AppGlobals.getPackageManager().getActivityInfo(localComponentName, paramInt1, paramInt2);
    }
    catch (RemoteException paramIntent) {}
    paramIntent = AppGlobals.getPackageManager().resolveIntent(paramIntent, paramIntent.resolveTypeIfNeeded(this.mContext.getContentResolver()), paramInt1, paramInt2);
    if (paramIntent != null)
    {
      paramIntent = paramIntent.activityInfo;
      return paramIntent;
    }
    return null;
  }
  
  private final ActivityRecord resumedAppLocked()
  {
    ActivityRecord localActivityRecord = this.mStackSupervisor.resumedAppLocked();
    String str;
    int i;
    if (localActivityRecord != null)
    {
      str = localActivityRecord.packageName;
      i = localActivityRecord.info.applicationInfo.uid;
      if ((i != this.mCurResumedUid) || ((str != this.mCurResumedPackage) && ((str == null) || (!str.equals(this.mCurResumedPackage))))) {
        break label68;
      }
    }
    label68:
    do
    {
      return localActivityRecord;
      str = null;
      i = -1;
      break;
      if (this.mCurResumedPackage != null) {
        this.mBatteryStatsService.noteEvent(16387, this.mCurResumedPackage, this.mCurResumedUid);
      }
      this.mCurResumedPackage = str;
      this.mCurResumedUid = i;
    } while (this.mCurResumedPackage == null);
    this.mBatteryStatsService.noteEvent(32771, this.mCurResumedPackage, this.mCurResumedUid);
    return localActivityRecord;
  }
  
  private void retrieveSettings()
  {
    ContentResolver localContentResolver = this.mContext.getContentResolver();
    int i;
    boolean bool5;
    boolean bool6;
    String str;
    boolean bool2;
    label84:
    boolean bool3;
    label99:
    boolean bool4;
    label114:
    int j;
    label128:
    boolean bool1;
    label142:
    boolean bool7;
    Object localObject1;
    if (!this.mContext.getPackageManager().hasSystemFeature("android.software.freeform_window_management"))
    {
      if (Settings.Global.getInt(localContentResolver, "enable_freeform_support", 0) == 0) {
        break label470;
      }
      i = 1;
      bool5 = this.mContext.getPackageManager().hasSystemFeature("android.software.picture_in_picture");
      bool6 = ActivityManager.supportsMultiWindow();
      str = Settings.Global.getString(localContentResolver, "debug_app");
      if (Settings.Global.getInt(localContentResolver, "wait_for_debugger", 0) == 0) {
        break label475;
      }
      bool2 = true;
      if (Settings.Global.getInt(localContentResolver, "always_finish_activities", 0) == 0) {
        break label481;
      }
      bool3 = true;
      if (Settings.Global.getInt(localContentResolver, "lenient_background_check", 0) == 0) {
        break label487;
      }
      bool4 = true;
      if (Settings.Global.getInt(localContentResolver, "debug.force_rtl", 0) == 0) {
        break label493;
      }
      j = 1;
      if (Settings.Global.getInt(localContentResolver, "force_resizable_activities", 0) == 0) {
        break label498;
      }
      bool1 = true;
      bool7 = this.mContext.getPackageManager().hasSystemFeature("android.software.leanback_only");
      if (j == 0) {
        break label503;
      }
      localObject1 = "1";
      label166:
      SystemProperties.set("debug.force_rtl", (String)localObject1);
      localObject1 = new Configuration();
      Settings.System.getConfiguration(localContentResolver, (Configuration)localObject1);
      if (j != 0) {
        ((Configuration)localObject1).setLayoutDirection(((Configuration)localObject1).locale);
      }
    }
    label470:
    label475:
    label481:
    label487:
    label493:
    label498:
    label503:
    label550:
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        this.mOrigDebugApp = str;
        this.mDebugApp = str;
        this.mOrigWaitForDebugger = bool2;
        this.mWaitForDebugger = bool2;
        this.mAlwaysFinishActivities = bool3;
        this.mLenientBackgroundCheck = bool4;
        this.mSupportsLeanbackOnly = bool7;
        this.mForceResizableActivities = bool1;
        this.mWindowManager.setForceResizableTasks(this.mForceResizableActivities);
        if ((bool6) || (bool1))
        {
          this.mSupportsMultiWindow = true;
          if (i == 0)
          {
            bool2 = bool1;
            this.mSupportsFreeformWindowManagement = bool2;
            if (bool5) {
              continue;
            }
            this.mSupportsPictureInPicture = bool1;
            updateConfigurationLocked((Configuration)localObject1, null, true);
            if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
              Slog.v(TAG_CONFIGURATION, "Initial config: " + this.mConfiguration);
            }
            localObject1 = this.mContext.getResources();
            this.mHasRecents = ((Resources)localObject1).getBoolean(17957003);
            this.mThumbnailWidth = ((Resources)localObject1).getDimensionPixelSize(17104898);
            this.mThumbnailHeight = ((Resources)localObject1).getDimensionPixelSize(17104897);
            this.mDefaultPinnedStackBounds = Rect.unflattenFromString(((Resources)localObject1).getString(17039472));
            this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(((Resources)localObject1).getString(17039473));
            if ((this.mConfiguration.uiMode & 0x4) != 4) {
              break label550;
            }
            this.mFullscreenThumbnailScale = (((Resources)localObject1).getInteger(17694905) / this.mConfiguration.screenWidthDp);
            return;
            i = 1;
            break;
            i = 0;
            break;
            bool2 = false;
            break label84;
            bool3 = false;
            break label99;
            bool4 = false;
            break label114;
            j = 0;
            break label128;
            bool1 = false;
            break label142;
            localObject1 = "0";
            break label166;
          }
          bool2 = true;
          continue;
          bool1 = true;
          continue;
        }
        this.mSupportsMultiWindow = false;
        this.mSupportsFreeformWindowManagement = false;
        this.mSupportsPictureInPicture = false;
        continue;
        this.mFullscreenThumbnailScale = ((Resources)localObject2).getFraction(18022404, 1, 1);
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
  }
  
  private void revokeUriPermissionLocked(int paramInt1, GrantUri paramGrantUri, int paramInt2)
  {
    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
      Slog.v(TAG_URI_PERMISSION, "Revoking all granted permissions to " + paramGrantUri);
    }
    Object localObject1 = AppGlobals.getPackageManager();
    Object localObject2 = getProviderInfoLocked(paramGrantUri.uri.getAuthority(), paramGrantUri.sourceUserId, 786432);
    if (localObject2 == null)
    {
      Slog.w(TAG, "No content provider found for permission revoke: " + paramGrantUri.toSafeString());
      return;
    }
    UriPermission localUriPermission;
    if (!checkHoldingPermissionsLocked((IPackageManager)localObject1, (ProviderInfo)localObject2, paramGrantUri, paramInt1, paramInt2))
    {
      localObject1 = (ArrayMap)this.mGrantedUriPermissions.get(paramInt1);
      if (localObject1 != null)
      {
        i = 0;
        localObject2 = ((ArrayMap)localObject1).values().iterator();
        while (((Iterator)localObject2).hasNext())
        {
          localUriPermission = (UriPermission)((Iterator)localObject2).next();
          if ((localUriPermission.uri.sourceUserId == paramGrantUri.sourceUserId) && (localUriPermission.uri.uri.isPathPrefixMatch(paramGrantUri.uri)))
          {
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
              Slog.v(TAG_URI_PERMISSION, "Revoking non-owned " + localUriPermission.targetUid + " permission to " + localUriPermission.uri);
            }
            boolean bool1 = i | localUriPermission.revokeModes(paramInt2 | 0x40, false);
            i = bool1;
            if (localUriPermission.modeFlags == 0)
            {
              ((Iterator)localObject2).remove();
              i = bool1;
            }
          }
        }
        if (((ArrayMap)localObject1).isEmpty()) {
          this.mGrantedUriPermissions.remove(paramInt1);
        }
        if (i != 0) {
          schedulePersistUriGrants();
        }
      }
      return;
    }
    int i = 0;
    int j = this.mGrantedUriPermissions.size();
    paramInt1 = 0;
    while (paramInt1 < j)
    {
      int n = this.mGrantedUriPermissions.keyAt(paramInt1);
      localObject1 = (ArrayMap)this.mGrantedUriPermissions.valueAt(paramInt1);
      localObject2 = ((ArrayMap)localObject1).values().iterator();
      while (((Iterator)localObject2).hasNext())
      {
        localUriPermission = (UriPermission)((Iterator)localObject2).next();
        if ((localUriPermission.uri.sourceUserId == paramGrantUri.sourceUserId) && (localUriPermission.uri.uri.isPathPrefixMatch(paramGrantUri.uri)))
        {
          if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG_URI_PERMISSION, "Revoking " + localUriPermission.targetUid + " permission to " + localUriPermission.uri);
          }
          boolean bool2 = i | localUriPermission.revokeModes(paramInt2 | 0x40, true);
          i = bool2;
          if (localUriPermission.modeFlags == 0)
          {
            ((Iterator)localObject2).remove();
            i = bool2;
          }
        }
      }
      int k = j;
      int m = paramInt1;
      if (((ArrayMap)localObject1).isEmpty())
      {
        this.mGrantedUriPermissions.remove(n);
        k = j - 1;
        m = paramInt1 - 1;
      }
      paramInt1 = m + 1;
      j = k;
    }
    if (i != 0) {
      schedulePersistUriGrants();
    }
  }
  
  private static boolean scanArgs(String[] paramArrayOfString, String paramString)
  {
    if (paramArrayOfString != null)
    {
      int j = paramArrayOfString.length;
      int i = 0;
      while (i < j)
      {
        if (paramString.equals(paramArrayOfString[i])) {
          return true;
        }
        i += 1;
      }
    }
    return false;
  }
  
  private void schedulePersistUriGrants()
  {
    if (!this.mHandler.hasMessages(38)) {
      this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(38), 10000L);
    }
  }
  
  private final void sendPackageBroadcastLocked(int paramInt1, String[] paramArrayOfString, int paramInt2)
  {
    int i = this.mLruProcesses.size() - 1;
    for (;;)
    {
      ProcessRecord localProcessRecord;
      if (i >= 0)
      {
        localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
        if ((localProcessRecord.thread == null) || ((paramInt2 != -1) && (localProcessRecord.userId != paramInt2))) {}
      }
      try
      {
        localProcessRecord.thread.dispatchPackageBroadcast(paramInt1, paramArrayOfString);
        i -= 1;
        continue;
        return;
      }
      catch (RemoteException localRemoteException)
      {
        for (;;) {}
      }
    }
  }
  
  private final void setProcessTrackerStateLocked(ProcessRecord paramProcessRecord, int paramInt, long paramLong)
  {
    if ((paramProcessRecord.thread != null) && (paramProcessRecord.baseProcessTracker != null)) {
      paramProcessRecord.baseProcessTracker.setState(paramProcessRecord.repProcState, paramInt, paramLong, paramProcessRecord.pkgList);
    }
  }
  
  private static final boolean shouldShowDialogs(Configuration paramConfiguration, boolean paramBoolean)
  {
    int i;
    int j;
    if ((paramConfiguration.keyboard != 1) || (paramConfiguration.touchscreen != 1))
    {
      i = 1;
      j = paramConfiguration.uiMode & 0xF;
      if (j == 3) {
        break label88;
      }
      if ((j != 6) || (!"user".equals(Build.TYPE))) {
        break label83;
      }
      j = 0;
    }
    for (;;)
    {
      if ((i != 0) && (j != 0) && (!paramBoolean)) {
        break label93;
      }
      return false;
      if (paramConfiguration.navigation != 1)
      {
        i = 1;
        break;
      }
      i = 0;
      break;
      label83:
      j = 1;
      continue;
      label88:
      j = 0;
    }
    label93:
    return true;
  }
  
  private boolean shouldSleepLocked()
  {
    boolean bool2 = true;
    if (this.mRunningVoice != null) {
      return false;
    }
    switch (this.mWakefulness)
    {
    default: 
      return true;
    }
    boolean bool1 = bool2;
    if (this.mLockScreenShown == 0)
    {
      bool1 = bool2;
      if (this.mSleepTokens.isEmpty()) {
        bool1 = false;
      }
    }
    return bool1;
  }
  
  private final void showPCBNo(String paramString)
  {
    View localView = LayoutInflater.from(this.mContext).inflate(17367148, null);
    WindowManager.LayoutParams localLayoutParams = new WindowManager.LayoutParams();
    ((TextView)localView.findViewById(16909185)).setText(paramString);
    localLayoutParams.setTitle("PCB NO.");
    localLayoutParams.type = 2015;
    localLayoutParams.width = -1;
    localLayoutParams.height = -2;
    localLayoutParams.gravity = 8388691;
    localLayoutParams.format = 1;
    localLayoutParams.flags = 24;
    localLayoutParams.inputFeatures |= 0x2;
    localLayoutParams.privateFlags |= 0x10;
    ((WindowManager)this.mContext.getSystemService("window")).addView(localView, localLayoutParams);
  }
  
  private void start()
  {
    Process.removeAllProcessGroups();
    this.mProcessCpuThread.start();
    this.mBatteryStatsService.publish(this.mContext);
    this.mAppOpsService.publish(this.mContext);
    Slog.d("AppOps", "AppOpsService published");
    LocalServices.addService(ActivityManagerInternal.class, new LocalService(null));
  }
  
  /* Error */
  private void startPersistentApps(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1782	com/android/server/am/ActivityManagerService:mFactoryTest	I
    //   4: iconst_1
    //   5: if_icmpne +4 -> 9
    //   8: return
    //   9: aload_0
    //   10: monitorenter
    //   11: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   14: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   17: iload_1
    //   18: sipush 1024
    //   21: ior
    //   22: invokeinterface 5847 2 0
    //   27: invokevirtual 3640	android/content/pm/ParceledListSlice:getList	()Ljava/util/List;
    //   30: invokeinterface 2040 1 0
    //   35: astore_2
    //   36: aload_2
    //   37: invokeinterface 2045 1 0
    //   42: ifeq +38 -> 80
    //   45: aload_2
    //   46: invokeinterface 2049 1 0
    //   51: checkcast 2262	android/content/pm/ApplicationInfo
    //   54: astore_3
    //   55: ldc_w 4667
    //   58: aload_3
    //   59: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   62: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   65: ifne -29 -> 36
    //   68: aload_0
    //   69: aload_3
    //   70: iconst_0
    //   71: aconst_null
    //   72: invokevirtual 5851	com/android/server/am/ActivityManagerService:addAppLocked	(Landroid/content/pm/ApplicationInfo;ZLjava/lang/String;)Lcom/android/server/am/ProcessRecord;
    //   75: pop
    //   76: goto -40 -> 36
    //   79: astore_2
    //   80: aload_0
    //   81: monitorexit
    //   82: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   85: return
    //   86: astore_2
    //   87: aload_0
    //   88: monitorexit
    //   89: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   92: aload_2
    //   93: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	94	0	this	ActivityManagerService
    //   0	94	1	paramInt	int
    //   35	11	2	localIterator	Iterator
    //   79	1	2	localRemoteException	RemoteException
    //   86	7	2	localObject	Object
    //   54	16	3	localApplicationInfo	ApplicationInfo
    // Exception table:
    //   from	to	target	type
    //   14	36	79	android/os/RemoteException
    //   36	76	79	android/os/RemoteException
    //   11	14	86	finally
    //   14	36	86	finally
    //   36	76	86	finally
  }
  
  private final void startProcessLocked(ProcessRecord paramProcessRecord, String paramString1, String paramString2)
  {
    startProcessLocked(paramProcessRecord, paramString1, paramString2, null, null, null);
  }
  
  private final void startProcessLocked(ProcessRecord paramProcessRecord, String paramString1, String arg3, String paramString3, String paramString4, String[] paramArrayOfString)
  {
    long l = SystemClock.elapsedRealtime();
    if ((paramProcessRecord.pid > 0) && (paramProcessRecord.pid != MY_PID)) {
      checkTime(l, "startProcess: removing from pids map");
    }
    synchronized (this.mPidsSelfLocked)
    {
      this.mPidsSelfLocked.remove(paramProcessRecord.pid);
      this.mHandler.removeMessages(20, paramProcessRecord);
      checkTime(l, "startProcess: done removing from pids map");
      paramProcessRecord.setPid(0);
      if (OnePlusAppBootManager.DEBUG) {
        OnePlusAppBootManager.myLog("# startProcessLocked # hostingType=" + paramString1 + ", hostingNameStr=" + ??? + ", app=" + paramProcessRecord + ", abiOverride=" + paramString3 + ", entryPoint=" + paramString4 + ", entryPointArgs=" + paramArrayOfString);
      }
      if ((ActivityManagerDebugConfig.DEBUG_PROCESSES) && (this.mProcessesOnHold.contains(paramProcessRecord))) {
        Slog.v(TAG_PROCESSES, "startProcessLocked removing on hold: " + paramProcessRecord);
      }
      this.mProcessesOnHold.remove(paramProcessRecord);
      if ((OnePlusAppBootManager.IN_USING) && (!OnePlusAppBootManager.getInstance(null).canProcGo(paramProcessRecord, paramString1))) {
        return;
      }
    }
    checkTime(l, "startProcess: starting to update cpu stats");
    updateCpuStats();
    checkTime(l, "startProcess: done updating cpu stats");
    int i;
    int k;
    Object localObject2;
    label726:
    String str;
    for (;;)
    {
      try
      {
        i = UserHandle.getUserId(paramProcessRecord.uid);
        AppGlobals.getPackageManager().checkPackageStartable(paramProcessRecord.info.packageName, i);
        k = paramProcessRecord.uid;
        ??? = null;
        m = 0;
        boolean bool = paramProcessRecord.isolated;
        if (bool) {}
      }
      catch (RemoteException paramString1)
      {
        throw paramString1.rethrowAsRuntimeException();
      }
      catch (RuntimeException paramString1)
      {
        Slog.e(TAG, "Failure starting process " + paramProcessRecord.processName, paramString1);
        forceStopPackageLocked(paramProcessRecord.info.packageName, UserHandle.getAppId(paramProcessRecord.uid), false, false, true, false, false, UserHandle.getUserId(paramProcessRecord.userId), "start failure");
      }
      try
      {
        checkTime(l, "startProcess: getting gids from package manager");
        localObject2 = AppGlobals.getPackageManager().getPackageGids(paramProcessRecord.info.packageName, 268435456, paramProcessRecord.userId);
        m = ((MountServiceInternal)LocalServices.getService(MountServiceInternal.class)).getExternalStorageMountMode(k, paramProcessRecord.info.packageName);
        if (!ArrayUtils.isEmpty((int[])localObject2)) {
          break label934;
        }
        ??? = new int[2];
        ???[0] = UserHandle.getSharedAppGid(UserHandle.getAppId(k));
        ???[1] = UserHandle.getUserGid(UserHandle.getUserId(k));
        checkTime(l, "startProcess: building args");
        i = k;
        if (this.mFactoryTest != 0)
        {
          j = k;
          if (this.mFactoryTest == 1)
          {
            j = k;
            if (this.mTopComponent != null)
            {
              j = k;
              if (paramProcessRecord.processName.equals(this.mTopComponent.getPackageName())) {
                j = 0;
              }
            }
          }
          i = j;
          if (this.mFactoryTest == 2)
          {
            i = j;
            if ((paramProcessRecord.info.flags & 0x10) != 0) {
              i = 0;
            }
          }
        }
        k = 0;
        if ((paramProcessRecord.info.flags & 0x2) != 0) {
          k = 0x1 | 0x2;
        }
        j = k;
        if ((paramProcessRecord.info.privateFlags & 0x4000) != 0) {
          j = k | 0x1;
        }
        if ((paramProcessRecord.info.flags & 0x4000) != 0) {
          break label1872;
        }
        k = j;
        if (this.mSafeMode) {
          break label1872;
        }
        j = k;
        if ("1".equals(SystemProperties.get("debug.checkjni"))) {
          j = k | 0x2;
        }
        k = j;
        if ("true".equals(SystemProperties.get("debug.generate-debug-info"))) {
          k = j | 0x20;
        }
        j = k;
        if ("1".equals(SystemProperties.get("debug.jni.logging"))) {
          j = k | 0x10;
        }
        k = j;
        if ("1".equals(SystemProperties.get("debug.assert"))) {
          k = j | 0x4;
        }
        j = k;
        if (this.mNativeDebuggingApp == null) {
          break label1882;
        }
        j = k;
        if (!this.mNativeDebuggingApp.equals(paramProcessRecord.processName)) {
          break label1882;
        }
        j = k | 0x40 | 0x20 | 0x80;
        this.mNativeDebuggingApp = null;
      }
      catch (RemoteException paramString1)
      {
        throw paramString1.rethrowAsRuntimeException();
      }
      localObject2 = paramString3;
      if (paramString3 == null) {
        localObject2 = Build.SUPPORTED_ABIS[0];
      }
      str = null;
      if (paramProcessRecord.info.primaryCpuAbi != null) {
        str = VMRuntime.getInstructionSet(paramProcessRecord.info.primaryCpuAbi);
      }
      paramProcessRecord.gids = ((int[])???);
      paramProcessRecord.requiredAbi = ((String)localObject2);
      paramProcessRecord.instructionSet = str;
      OnePlusProcessManager.resumeProcessByUID_out(i, "StartProc");
      if (paramString4 != null) {
        break label1907;
      }
      k = 1;
      break label1890;
      Trace.traceBegin(64L, "Start proc: " + paramProcessRecord.processName);
      if ((paramProcessRecord.isolated) || (!findEmbryoLocked(paramProcessRecord, paramString1))) {
        break;
      }
      paramProcessRecord.isEmbryo = true;
      return;
      label927:
      return;
      label934:
      ??? = new int[localObject2.length + 2];
      System.arraycopy((int[])localObject2, 0, (int[])???, 2, localObject2.length);
      continue;
      label958:
      paramString3 = paramProcessRecord.info.primaryCpuAbi;
    }
    paramProcessRecord.isEmbryo = false;
    checkTime(l, "startProcess: asking zygote to start proc");
    paramArrayOfString = Process.start(paramString3, paramProcessRecord.processName, i, i, (int[])???, j, m, paramProcessRecord.info.targetSdkVersion, paramProcessRecord.info.seinfo, (String)localObject2, str, paramProcessRecord.info.dataDir, paramArrayOfString);
    OnePlusProcessManager.addPidToCgroupTasksWithJudge(paramProcessRecord, paramArrayOfString.pid);
    checkTime(l, "startProcess: returned from zygote!");
    Trace.traceEnd(64L);
    this.mBatteryStatsService.noteProcessStart(paramProcessRecord.processName, paramProcessRecord.info.uid);
    checkTime(l, "startProcess: done updating battery stats");
    int j = UserHandle.getUserId(i);
    int m = paramArrayOfString.pid;
    ??? = paramProcessRecord.processName;
    if (??? != null)
    {
      paramString4 = ???;
      label1110:
      EventLog.writeEvent(30014, new Object[] { Integer.valueOf(j), Integer.valueOf(m), Integer.valueOf(i), ???, paramString1, paramString4 });
    }
    for (;;)
    {
      try
      {
        AppGlobals.getPackageManager().logAppProcessStartIfNeeded(paramProcessRecord.processName, paramProcessRecord.uid, paramProcessRecord.info.seinfo, paramProcessRecord.info.sourceDir, paramArrayOfString.pid);
        if (paramProcessRecord.persistent) {
          Watchdog.getInstance().processStarted(paramProcessRecord.processName, paramArrayOfString.pid);
        }
        checkTime(l, "startProcess: building log message");
        paramString4 = this.mStringBuilder;
        paramString4.setLength(0);
        paramString4.append("Start proc ");
        paramString4.append(paramArrayOfString.pid);
        paramString4.append(':');
        paramString4.append(paramProcessRecord.processName);
        paramString4.append('/');
        UserHandle.formatUid(paramString4, i);
        if (k == 0)
        {
          paramString4.append(" [");
          paramString4.append(paramString3);
          paramString4.append("]");
        }
        paramString4.append(" for ");
        paramString4.append(paramString1);
        if (??? != null)
        {
          paramString4.append(" ");
          paramString4.append(???);
        }
        Slog.i(TAG, paramString4.toString());
        if (paramString1.equals("activity"))
        {
          ??? = new BoostFramework();
          if (??? != null) {
            ???.perfIOPrefetchStart(paramArrayOfString.pid, paramProcessRecord.processName);
          }
          if ((this.mIsFreqAggrEnabled) && (sFreqAggr_init == null) && (sFreqAggr == null))
          {
            sFreqAggr_init = new BoostFramework();
            sFreqAggr = new BoostFramework();
          }
          if ((sFreqAggr_init != null) && (sFreqAggr != null))
          {
            sFreqAggr_init.perfLockAcquire(this.lFreqAggr_TimeOut, this.lFreqAggr_Init_ParamVal);
            sIsFreqAggrBoostSet = true;
            if (this.lFreqAggr_ParamVal.length != 2) {
              continue;
            }
            this.lFreqAggr_ParamVal[1] = paramArrayOfString.pid;
            sFreqAggr.perfLockAcquire(this.lFreqAggr_TimeOut, this.lFreqAggr_ParamVal);
          }
          if ((this.mIsLaunchBoostv2_enabled) && (sPerfBoost_v2 == null)) {
            sPerfBoost_v2 = new BoostFramework();
          }
          if (sPerfBoost_v2 != null)
          {
            sPerfBoost_v2.perfLockAcquire(this.lBoost_v2_TimeOut, this.lBoost_v2_ParamVal);
            sIsLaunchBoostv2_set = true;
          }
        }
        paramProcessRecord.setPid(paramArrayOfString.pid);
        paramProcessRecord.usingWrapper = paramArrayOfString.usingWrapper;
        paramProcessRecord.removed = false;
        paramProcessRecord.killed = false;
        paramProcessRecord.killedByAm = false;
        if ("embryo".equals(paramString1))
        {
          return;
          sFreqAggr = null;
          sFreqAggr_init.perfLockRelease();
          sIsFreqAggrBoostSet = false;
          continue;
        }
        checkTime(l, "startProcess: starting to update pids map");
        synchronized (this.mPidsSelfLocked)
        {
          paramString3 = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfString.pid);
          if (paramString3 != null) {
            if (!paramProcessRecord.isolated) {
              continue;
            }
          }
        }
        synchronized (this.mPidsSelfLocked)
        {
          this.mPidsSelfLocked.put(paramArrayOfString.pid, paramProcessRecord);
          if (k != 0)
          {
            paramString3 = this.mHandler.obtainMessage(20);
            paramString3.obj = paramProcessRecord;
            paramString4 = this.mHandler;
            if (!paramArrayOfString.usingWrapper) {
              break label1921;
            }
            i = 1200000;
            paramString4.sendMessageDelayed(paramString3, i);
          }
          checkTime(l, "startProcess: done updating pids map");
          if (("activity".equals(paramString1)) || ("service".equals(paramString1))) {
            mActivityTrigger.activityMiscTrigger(1, paramProcessRecord.processName, paramArrayOfString.pid, 0);
          }
          if (!OnePlusAppBootManager.IN_USING) {
            break label927;
          }
          OnePlusAppBootManager.getInstance(null).trackProcess(true, paramProcessRecord, paramString1);
          return;
          paramString1 = finally;
          throw paramString1;
          Slog.w(TAG, "Reusing pid " + paramArrayOfString.pid + " while app is still mapped to it");
          cleanUpApplicationRecordLocked(paramString3, false, false, -1, true);
        }
      }
      catch (RemoteException paramString4)
      {
        continue;
      }
      label1872:
      k = j | 0x8;
      break;
      label1882:
      if (paramString3 == null) {
        break label958;
      }
      break label726;
      for (;;)
      {
        label1890:
        paramString3 = paramString4;
        if (paramString4 != null) {
          break;
        }
        paramString3 = "android.app.ActivityThread";
        break;
        label1907:
        k = 0;
      }
      paramString4 = "";
      break label1110;
      label1921:
      i = 10000;
    }
  }
  
  private void stopProfilerLocked(ProcessRecord paramProcessRecord, int paramInt)
  {
    ProcessRecord localProcessRecord;
    if (paramProcessRecord != null)
    {
      localProcessRecord = paramProcessRecord;
      if (paramProcessRecord != this.mProfileProc) {}
    }
    else
    {
      localProcessRecord = this.mProfileProc;
      paramInt = this.mProfileType;
      clearProfilerLocked();
    }
    if (localProcessRecord == null) {
      return;
    }
    try
    {
      localProcessRecord.thread.profilerControl(false, null, paramInt);
      return;
    }
    catch (RemoteException paramProcessRecord)
    {
      throw new IllegalStateException("Process disappeared");
    }
  }
  
  private static String stringifyKBSize(long paramLong)
  {
    return stringifySize(1024L * paramLong, 1024);
  }
  
  private static String stringifySize(long paramLong, int paramInt)
  {
    Locale localLocale = Locale.US;
    switch (paramInt)
    {
    default: 
      throw new IllegalArgumentException("Invalid size order");
    case 1: 
      return String.format(localLocale, "%,13d", new Object[] { Long.valueOf(paramLong) });
    case 1024: 
      return String.format(localLocale, "%,9dK", new Object[] { Long.valueOf(paramLong / 1024L) });
    case 1048576: 
      return String.format(localLocale, "%,5dM", new Object[] { Long.valueOf(paramLong / 1024L / 1024L) });
    }
    return String.format(localLocale, "%,1dG", new Object[] { Long.valueOf(paramLong / 1024L / 1024L / 1024L) });
  }
  
  private boolean updateConfigurationLocked(Configuration paramConfiguration, ActivityRecord paramActivityRecord, boolean paramBoolean1, boolean paramBoolean2, int paramInt, boolean paramBoolean3)
  {
    int i = 0;
    if (this.mWindowManager != null) {
      this.mWindowManager.deferSurfaceLayout();
    }
    if (paramConfiguration != null)
    {
      localObject1 = new Configuration(this.mConfiguration);
      int j = ((Configuration)localObject1).updateFrom(paramConfiguration);
      if (j != 0)
      {
        if ((ActivityManagerDebugConfig.DEBUG_SWITCH) || (ActivityManagerDebugConfig.DEBUG_CONFIGURATION)) {
          Slog.i(TAG_CONFIGURATION, "Updating configuration to: " + paramConfiguration);
        }
        EventLog.writeEvent(2719, j);
        Object localObject2;
        if ((paramBoolean1) || (paramConfiguration.getLocales().isEmpty()))
        {
          this.mConfigurationSeq += 1;
          if (this.mConfigurationSeq <= 0) {
            this.mConfigurationSeq = 1;
          }
          ((Configuration)localObject1).seq = this.mConfigurationSeq;
          this.mConfiguration = ((Configuration)localObject1);
          Slog.i(TAG, "Config changes=" + Integer.toHexString(j) + " " + localObject1);
          this.mUsageStatsService.reportConfigurationChange((Configuration)localObject1, this.mUserController.getCurrentUserIdLocked());
          paramConfiguration = new Configuration(this.mConfiguration);
          this.mShowDialogs = shouldShowDialogs((Configuration)localObject1, this.mInVrMode);
          localObject2 = AttributeCache.instance();
          if (localObject2 != null) {
            ((AttributeCache)localObject2).updateConfiguration(paramConfiguration);
          }
          this.mSystemThread.applyConfigurationToResources(paramConfiguration);
          if ((paramBoolean2) && (Settings.System.hasInterestingConfigurationChanges(j)))
          {
            localObject2 = this.mHandler.obtainMessage(4);
            ((Message)localObject2).obj = new Configuration(paramConfiguration);
            ((Message)localObject2).arg1 = paramInt;
            this.mHandler.sendMessage((Message)localObject2);
          }
          if ((j & 0x1000) == 0) {
            break label570;
          }
        }
        label570:
        for (paramInt = 1;; paramInt = 0)
        {
          if (paramInt != 0)
          {
            this.mUiHandler.sendEmptyMessage(70);
            killAllBackgroundProcessesExcept(24, 4);
          }
          paramInt = this.mLruProcesses.size() - 1;
          while (paramInt >= 0)
          {
            localObject2 = (ProcessRecord)this.mLruProcesses.get(paramInt);
            try
            {
              if (((ProcessRecord)localObject2).thread != null)
              {
                if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                  Slog.v(TAG_CONFIGURATION, "Sending to proc " + ((ProcessRecord)localObject2).processName + " new config " + this.mConfiguration);
                }
                if (OnePlusProcessManager.isSupportFrozenApp()) {
                  OnePlusProcessManager.resumeProcessByUID_out_Delay(((ProcessRecord)localObject2).uid, "updateConfigurationLocked", 2);
                }
                ((ProcessRecord)localObject2).thread.scheduleConfigurationChanged(paramConfiguration);
              }
            }
            catch (Exception localException)
            {
              for (;;) {}
            }
            paramInt -= 1;
          }
          if (!paramConfiguration.userSetLocale) {
            break;
          }
          paramConfiguration = paramConfiguration.getLocales();
          i = 0;
          if (paramConfiguration.size() > 1)
          {
            if (this.mSupportedSystemLocales == null) {
              this.mSupportedSystemLocales = Resources.getSystem().getAssets().getLocales();
            }
            i = Math.max(0, paramConfiguration.getFirstMatchIndex(this.mSupportedSystemLocales));
          }
          SystemProperties.set("persist.sys.locale", paramConfiguration.get(i).toLanguageTag());
          LocaleList.setDefault(paramConfiguration, i);
          this.mHandler.sendMessage(this.mHandler.obtainMessage(47, paramConfiguration.get(i)));
          break;
        }
        paramConfiguration = new Intent("android.intent.action.CONFIGURATION_CHANGED");
        if (localObject1 != null)
        {
          paramConfiguration.putExtra("font_scale", ((Configuration)localObject1).fontScale);
          paramConfiguration.putExtra("density_dpi", ((Configuration)localObject1).densityDpi);
        }
        paramConfiguration.addFlags(1879048192);
        broadcastIntentLocked(null, null, paramConfiguration, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, -1);
        if ((j & 0x4) != 0)
        {
          paramConfiguration = new Intent("android.intent.action.LOCALE_CHANGED");
          paramConfiguration.addFlags(268435456);
          if ((paramBoolean1) || (!this.mProcessesReady)) {
            break label805;
          }
        }
      }
      for (;;)
      {
        broadcastIntentLocked(null, null, paramConfiguration, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, -1);
        i = j;
        if (this.mWindowManager == null) {
          break;
        }
        paramConfiguration = this.mWindowManager.setNewConfiguration(this.mConfiguration);
        i = j;
        if (paramConfiguration == null) {
          break;
        }
        paramInt = 0;
        int k = paramConfiguration.length;
        for (;;)
        {
          i = j;
          if (paramInt >= k) {
            break;
          }
          i = paramConfiguration[paramInt];
          localObject1 = this.mWindowManager.getBoundsForNewConfiguration(i);
          this.mStackSupervisor.resizeStackLocked(i, (Rect)localObject1, null, null, false, false, paramBoolean3);
          paramInt += 1;
        }
        label805:
        paramConfiguration.addFlags(1073741824);
      }
    }
    paramBoolean2 = true;
    Object localObject1 = this.mStackSupervisor.getFocusedStack();
    paramBoolean1 = paramBoolean2;
    if (localObject1 != null)
    {
      paramConfiguration = paramActivityRecord;
      if (i != 0)
      {
        paramConfiguration = paramActivityRecord;
        if (paramActivityRecord == null) {
          paramConfiguration = ((ActivityStack)localObject1).topRunningActivityLocked();
        }
      }
      paramBoolean1 = paramBoolean2;
      if (paramConfiguration != null)
      {
        paramBoolean1 = ((ActivityStack)localObject1).ensureActivityConfigurationLocked(paramConfiguration, i, false);
        this.mStackSupervisor.ensureActivitiesVisibleLocked(paramConfiguration, i, false);
      }
    }
    if (this.mWindowManager != null) {
      this.mWindowManager.continueSurfaceLayout();
    }
    return paramBoolean1;
  }
  
  private void updateEventDispatchingLocked()
  {
    boolean bool2 = false;
    WindowManagerService localWindowManagerService = this.mWindowManager;
    boolean bool1 = bool2;
    if (this.mBooted) {
      if (!this.mShuttingDown) {
        break label31;
      }
    }
    label31:
    for (bool1 = bool2;; bool1 = true)
    {
      localWindowManagerService.setEventDispatching(bool1);
      return;
    }
  }
  
  private void updateFontScaleIfNeeded(int paramInt)
  {
    float f = Settings.System.getFloatForUser(this.mContext.getContentResolver(), "font_scale", 1.0F, paramInt);
    Configuration localConfiguration;
    if (this.mConfiguration.fontScale != f)
    {
      localConfiguration = this.mWindowManager.computeNewConfiguration();
      localConfiguration.fontScale = f;
    }
    try
    {
      boostPriorityForLockedSection();
      updatePersistentConfigurationLocked(localConfiguration, paramInt);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  private int updateLruProcessInternalLocked(ProcessRecord paramProcessRecord1, long paramLong, int paramInt, String paramString, Object paramObject, ProcessRecord paramProcessRecord2)
  {
    paramProcessRecord1.lastActivityTime = paramLong;
    if (paramProcessRecord1.activities.size() > 0) {
      return paramInt;
    }
    int j = this.mLruProcesses.lastIndexOf(paramProcessRecord1);
    if (j < 0)
    {
      Slog.wtf(TAG, "Adding dependent process " + paramProcessRecord1 + " not on LRU list: " + paramString + " " + paramObject + " from " + paramProcessRecord2);
      return paramInt;
    }
    if (j >= paramInt) {
      return paramInt;
    }
    if (j >= this.mLruProcessActivityStart) {
      return paramInt;
    }
    this.mLruProcesses.remove(j);
    int i = paramInt;
    if (paramInt > 0) {
      i = paramInt - 1;
    }
    if (ActivityManagerDebugConfig.DEBUG_LRU) {
      Slog.d(TAG_LRU, "Moving dep from " + j + " to " + i + " in LRU list: " + paramProcessRecord1);
    }
    this.mLruProcesses.add(i, paramProcessRecord1);
    return i;
  }
  
  private final boolean updateOomAdjLocked(ProcessRecord paramProcessRecord1, int paramInt, ProcessRecord paramProcessRecord2, boolean paramBoolean, long paramLong)
  {
    if (paramProcessRecord1.thread == null) {
      return false;
    }
    computeOomAdjLocked(paramProcessRecord1, paramInt, paramProcessRecord2, paramBoolean, paramLong);
    return applyOomAdjLocked(paramProcessRecord1, paramBoolean, paramLong, SystemClock.elapsedRealtime());
  }
  
  private void updatePersistentConfigurationLocked(Configuration paramConfiguration, int paramInt)
  {
    long l = Binder.clearCallingIdentity();
    try
    {
      updateConfigurationLocked(paramConfiguration, null, false, true, paramInt, false);
      return;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  private void writeGrantedUriPermissions()
  {
    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
      Slog.v(TAG_URI_PERMISSION, "writeGrantedUriPermissions()");
    }
    Object localObject4 = Lists.newArrayList();
    Object localObject3;
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        int j = this.mGrantedUriPermissions.size();
        int i = 0;
        if (i >= j) {
          break;
        }
        Iterator localIterator = ((ArrayMap)this.mGrantedUriPermissions.valueAt(i)).values().iterator();
        if (localIterator.hasNext())
        {
          localObject3 = (UriPermission)localIterator.next();
          if (((UriPermission)localObject3).persistedModeFlags != 0) {
            ((ArrayList)localObject4).add(((UriPermission)localObject3).snapshot());
          }
        }
        else
        {
          i += 1;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
    resetPriorityAfterLockedSection();
    Object localObject2 = null;
    FastXmlSerializer localFastXmlSerializer;
    try
    {
      localObject3 = this.mGrantFile.startWrite();
      localObject2 = localObject3;
      localFastXmlSerializer = new FastXmlSerializer();
      localObject2 = localObject3;
      localFastXmlSerializer.setOutput((OutputStream)localObject3, StandardCharsets.UTF_8.name());
      localObject2 = localObject3;
      localFastXmlSerializer.startDocument(null, Boolean.valueOf(true));
      localObject2 = localObject3;
      localFastXmlSerializer.startTag(null, "uri-grants");
      localObject2 = localObject3;
      localObject4 = ((Iterable)localObject4).iterator();
      for (;;)
      {
        localObject2 = localObject3;
        if (!((Iterator)localObject4).hasNext()) {
          break;
        }
        localObject2 = localObject3;
        UriPermission.Snapshot localSnapshot = (UriPermission.Snapshot)((Iterator)localObject4).next();
        localObject2 = localObject3;
        localFastXmlSerializer.startTag(null, "uri-grant");
        localObject2 = localObject3;
        XmlUtils.writeIntAttribute(localFastXmlSerializer, "sourceUserId", localSnapshot.uri.sourceUserId);
        localObject2 = localObject3;
        XmlUtils.writeIntAttribute(localFastXmlSerializer, "targetUserId", localSnapshot.targetUserId);
        localObject2 = localObject3;
        localFastXmlSerializer.attribute(null, "sourcePkg", localSnapshot.sourcePkg);
        localObject2 = localObject3;
        localFastXmlSerializer.attribute(null, "targetPkg", localSnapshot.targetPkg);
        localObject2 = localObject3;
        localFastXmlSerializer.attribute(null, "uri", String.valueOf(localSnapshot.uri.uri));
        localObject2 = localObject3;
        XmlUtils.writeBooleanAttribute(localFastXmlSerializer, "prefix", localSnapshot.uri.prefix);
        localObject2 = localObject3;
        XmlUtils.writeIntAttribute(localFastXmlSerializer, "modeFlags", localSnapshot.persistedModeFlags);
        localObject2 = localObject3;
        XmlUtils.writeLongAttribute(localFastXmlSerializer, "createdTime", localSnapshot.persistedCreateTime);
        localObject2 = localObject3;
        localFastXmlSerializer.endTag(null, "uri-grant");
      }
      localObject2 = localIOException;
    }
    catch (IOException localIOException)
    {
      if (localObject2 != null) {
        this.mGrantFile.failWrite((FileOutputStream)localObject2);
      }
      return;
    }
    localFastXmlSerializer.endTag(null, "uri-grants");
    localObject2 = localIOException;
    localFastXmlSerializer.endDocument();
    localObject2 = localIOException;
    this.mGrantFile.finishWrite(localIOException);
  }
  
  public final void activityDestroyed(IBinder paramIBinder)
  {
    if (ActivityManagerDebugConfig.DEBUG_SWITCH) {
      Slog.v(TAG_SWITCH, "ACTIVITY DESTROYED: " + paramIBinder);
    }
    try
    {
      boostPriorityForLockedSection();
      ActivityStack localActivityStack = ActivityRecord.getStackLocked(paramIBinder);
      if (localActivityStack != null) {
        localActivityStack.activityDestroyedLocked(paramIBinder, "activityDestroyed");
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public final void activityIdle(IBinder paramIBinder, Configuration paramConfiguration, boolean paramBoolean)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore 4
    //   5: aload_0
    //   6: monitorenter
    //   7: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   10: aload_1
    //   11: invokestatic 6305	com/android/server/am/ActivityRecord:getStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityStack;
    //   14: ifnull +49 -> 63
    //   17: aload_0
    //   18: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   21: aload_1
    //   22: iconst_0
    //   23: aload_2
    //   24: invokevirtual 6316	com/android/server/am/ActivityStackSupervisor:activityIdleInternalLocked	(Landroid/os/IBinder;ZLandroid/content/res/Configuration;)Lcom/android/server/am/ActivityRecord;
    //   27: astore_1
    //   28: iload_3
    //   29: ifeq +34 -> 63
    //   32: aload_0
    //   33: getfield 1641	com/android/server/am/ActivityManagerService:mProfileProc	Lcom/android/server/am/ProcessRecord;
    //   36: aload_1
    //   37: getfield 3679	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
    //   40: if_acmpne +23 -> 63
    //   43: aload_0
    //   44: getfield 2878	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
    //   47: astore_1
    //   48: aload_1
    //   49: ifnull +14 -> 63
    //   52: aload_0
    //   53: getfield 2878	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
    //   56: invokevirtual 3617	android/os/ParcelFileDescriptor:close	()V
    //   59: aload_0
    //   60: invokespecial 4982	com/android/server/am/ActivityManagerService:clearProfilerLocked	()V
    //   63: aload_0
    //   64: monitorexit
    //   65: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   68: lload 4
    //   70: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   73: return
    //   74: astore_1
    //   75: aload_0
    //   76: monitorexit
    //   77: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   80: aload_1
    //   81: athrow
    //   82: astore_1
    //   83: goto -24 -> 59
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	86	0	this	ActivityManagerService
    //   0	86	1	paramIBinder	IBinder
    //   0	86	2	paramConfiguration	Configuration
    //   0	86	3	paramBoolean	boolean
    //   3	66	4	l	long
    // Exception table:
    //   from	to	target	type
    //   7	28	74	finally
    //   32	48	74	finally
    //   52	59	74	finally
    //   59	63	74	finally
    //   52	59	82	java/io/IOException
  }
  
  public final void activityPaused(IBinder paramIBinder)
  {
    long l = Binder.clearCallingIdentity();
    try
    {
      boostPriorityForLockedSection();
      ActivityStack localActivityStack = ActivityRecord.getStackLocked(paramIBinder);
      if (localActivityStack != null) {
        localActivityStack.activityPausedLocked(paramIBinder, false);
      }
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public final void activityRelaunched(IBinder paramIBinder)
  {
    long l = Binder.clearCallingIdentity();
    try
    {
      boostPriorityForLockedSection();
      this.mStackSupervisor.activityRelaunchedLocked(paramIBinder);
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public final void activityResumed(IBinder paramIBinder)
  {
    long l = Binder.clearCallingIdentity();
    if ((ActivityRecord.forTokenLocked(paramIBinder) != null) && (ActivityRecord.forTokenLocked(paramIBinder).appInfo != null) && (nativeGetwalflag(ActivityRecord.forTokenLocked(paramIBinder).appInfo.processName)))
    {
      mWalFlag = true;
      SystemProperties.set("sys.thermal.para", "242654746854");
    }
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        ActivityStack localActivityStack = ActivityRecord.getStackLocked(paramIBinder);
        if (localActivityStack != null) {
          localActivityStack.activityResumedLocked(paramIBinder);
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(l);
        return;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if (mWalFlag)
      {
        SystemProperties.set("sys.thermal.para", "2426543426744");
        mWalFlag = false;
      }
    }
  }
  
  public final void activitySlept(IBinder paramIBinder)
  {
    if (ActivityManagerDebugConfig.DEBUG_ALL) {
      Slog.v(TAG, "Activity slept: token=" + paramIBinder);
    }
    long l = Binder.clearCallingIdentity();
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder != null) {
        this.mStackSupervisor.activitySleptLocked(paramIBinder);
      }
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public final void activityStopped(IBinder paramIBinder, Bundle paramBundle, PersistableBundle paramPersistableBundle, CharSequence paramCharSequence)
  {
    if (ActivityManagerDebugConfig.DEBUG_ALL) {
      Slog.v(TAG, "Activity stopped: token=" + paramIBinder);
    }
    if ((paramBundle != null) && (paramBundle.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Bundle");
    }
    long l = Binder.clearCallingIdentity();
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder != null) {
        paramIBinder.task.stack.activityStoppedLocked(paramIBinder, paramBundle, paramPersistableBundle, paramCharSequence);
      }
      resetPriorityAfterLockedSection();
      trimApplications();
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void activityTransitionLocked(ActivityRecord paramActivityRecord1, ActivityRecord paramActivityRecord2)
  {
    if ((paramActivityRecord2 == null) || (paramActivityRecord2.appInfo == null)) {
      return;
    }
    this.mEmbryoManager.activityTransition(paramActivityRecord1, paramActivityRecord2);
  }
  
  final ProcessRecord addAppLocked(ApplicationInfo paramApplicationInfo, boolean paramBoolean, String paramString)
  {
    ProcessRecord localProcessRecord1;
    if (!paramBoolean) {
      localProcessRecord1 = getProcessRecordLocked(paramApplicationInfo.processName, paramApplicationInfo.uid, true);
    }
    for (;;)
    {
      ProcessRecord localProcessRecord2 = localProcessRecord1;
      if (localProcessRecord1 == null)
      {
        localProcessRecord2 = newProcessRecordLocked(paramApplicationInfo, null, paramBoolean, 0);
        updateLruProcessLocked(localProcessRecord2, false, null);
        updateOomAdjLocked();
      }
      try
      {
        AppGlobals.getPackageManager().setPackageStoppedState(paramApplicationInfo.packageName, false, UserHandle.getUserId(localProcessRecord2.uid));
        if ((paramApplicationInfo.flags & 0x9) == 9)
        {
          localProcessRecord2.persistent = true;
          localProcessRecord2.maxAdj = 64736;
        }
        if ((localProcessRecord2.thread == null) && (this.mPersistentStartingProcesses.indexOf(localProcessRecord2) < 0))
        {
          this.mPersistentStartingProcesses.add(localProcessRecord2);
          startProcessLocked(localProcessRecord2, "added application", localProcessRecord2.processName, paramString, null, null);
        }
        return localProcessRecord2;
        localProcessRecord1 = null;
      }
      catch (IllegalArgumentException localIllegalArgumentException)
      {
        for (;;)
        {
          Slog.w(TAG, "Failed trying to unstop package " + paramApplicationInfo.packageName + ": " + localIllegalArgumentException);
        }
      }
      catch (RemoteException localRemoteException)
      {
        for (;;) {}
      }
    }
  }
  
  public int addAppTask(IBinder paramIBinder, Intent paramIntent, ActivityManager.TaskDescription paramTaskDescription, Bitmap paramBitmap)
    throws RemoteException
  {
    int i = Binder.getCallingUid();
    long l = Binder.clearCallingIdentity();
    ActivityRecord localActivityRecord;
    try
    {
      try
      {
        boostPriorityForLockedSection();
        localActivityRecord = ActivityRecord.isInStackLocked(paramIBinder);
        if (localActivityRecord == null) {
          throw new IllegalArgumentException("Activity does not exist; token=" + paramIBinder);
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      localObject2 = paramIntent.getComponent();
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    if (localObject2 == null) {
      throw new IllegalArgumentException("Intent " + paramIntent + " must specify explicit component");
    }
    if ((paramBitmap.getWidth() != this.mThumbnailWidth) || (paramBitmap.getHeight() != this.mThumbnailHeight)) {
      throw new IllegalArgumentException("Bad thumbnail size: got " + paramBitmap.getWidth() + "x" + paramBitmap.getHeight() + ", require " + this.mThumbnailWidth + "x" + this.mThumbnailHeight);
    }
    if (paramIntent.getSelector() != null) {
      paramIntent.setSelector(null);
    }
    if (paramIntent.getSourceBounds() != null) {
      paramIntent.setSourceBounds(null);
    }
    if (((paramIntent.getFlags() & 0x80000) != 0) && ((paramIntent.getFlags() & 0x2000) == 0)) {
      paramIntent.addFlags(8192);
    }
    if ((!((ComponentName)localObject2).equals(this.mLastAddedTaskComponent)) || (i != this.mLastAddedTaskUid)) {
      this.mLastAddedTaskActivity = null;
    }
    Object localObject1 = this.mLastAddedTaskActivity;
    paramIBinder = (IBinder)localObject1;
    if (localObject1 == null)
    {
      localObject1 = AppGlobals.getPackageManager().getActivityInfo((ComponentName)localObject2, 0, UserHandle.getUserId(i));
      this.mLastAddedTaskActivity = ((ActivityInfo)localObject1);
      paramIBinder = (IBinder)localObject1;
      if (((ActivityInfo)localObject1).applicationInfo.uid != i) {
        throw new SecurityException("Can't add task for another application: target uid=" + ((ActivityInfo)localObject1).applicationInfo.uid + ", calling uid=" + i);
      }
    }
    localObject1 = new Point();
    Object localObject2 = new ActivityManager.TaskThumbnailInfo();
    localActivityRecord.task.stack.getDisplaySize((Point)localObject1);
    ((ActivityManager.TaskThumbnailInfo)localObject2).taskWidth = ((Point)localObject1).x;
    ((ActivityManager.TaskThumbnailInfo)localObject2).taskHeight = ((Point)localObject1).y;
    ((ActivityManager.TaskThumbnailInfo)localObject2).screenOrientation = this.mConfiguration.orientation;
    paramIBinder = new TaskRecord(this, this.mStackSupervisor.getNextTaskIdForUserLocked(localActivityRecord.userId), paramIBinder, paramIntent, paramTaskDescription, (ActivityManager.TaskThumbnailInfo)localObject2);
    i = this.mRecentTasks.trimForTaskLocked(paramIBinder, false);
    if (i >= 0)
    {
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return -1;
    }
    i = this.mRecentTasks.size();
    if (i >= ActivityManager.getMaxRecentTasksStatic() - 1) {
      ((TaskRecord)this.mRecentTasks.remove(i - 1)).removedFromRecents();
    }
    paramIBinder.inRecents = true;
    this.mRecentTasks.add(paramIBinder);
    localActivityRecord.task.stack.addTask(paramIBinder, false, "addAppTask");
    paramIBinder.setLastThumbnailLocked(paramBitmap);
    paramIBinder.freeLastThumbnail();
    i = paramIBinder.taskId;
    resetPriorityAfterLockedSection();
    Binder.restoreCallingIdentity(l);
    return i;
  }
  
  final void addBroadcastStatLocked(String paramString1, String paramString2, int paramInt1, int paramInt2, long paramLong)
  {
    long l = SystemClock.elapsedRealtime();
    if ((this.mCurBroadcastStats == null) || (this.mCurBroadcastStats.mStartRealtime + 86400000L < l))
    {
      this.mLastBroadcastStats = this.mCurBroadcastStats;
      if (this.mLastBroadcastStats != null)
      {
        this.mLastBroadcastStats.mEndRealtime = SystemClock.elapsedRealtime();
        this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
      }
      this.mCurBroadcastStats = new BroadcastStats();
    }
    this.mCurBroadcastStats.addBroadcast(paramString1, paramString2, paramInt1, paramInt2, paramLong);
  }
  
  public void addErrorToDropBox(String paramString1, ProcessRecord paramProcessRecord, String paramString2, ActivityRecord paramActivityRecord1, ActivityRecord paramActivityRecord2, String paramString3, final String paramString4, final File paramFile, final ApplicationErrorReport.CrashInfo paramCrashInfo)
  {
    final String str = processClass(paramProcessRecord) + "_" + paramString1;
    final DropBoxManager localDropBoxManager = (DropBoxManager)this.mContext.getSystemService("dropbox");
    final StringBuilder localStringBuilder;
    if ((localDropBoxManager != null) && (localDropBoxManager.isTagEnabled(str)))
    {
      long l = SystemClock.elapsedRealtime();
      if (l - this.mWtfClusterStart <= 10000L) {
        break label384;
      }
      this.mWtfClusterStart = l;
      this.mWtfClusterCount = 1;
      localStringBuilder = new StringBuilder(1024);
      appendDropBoxProcessHeaders(paramProcessRecord, paramString2, localStringBuilder);
      if (paramProcessRecord != null)
      {
        paramString2 = localStringBuilder.append("Foreground: ");
        if (!paramProcessRecord.isInterestingToUserLocked()) {
          break label405;
        }
      }
    }
    label384:
    label405:
    for (paramString1 = "Yes";; paramString1 = "No")
    {
      paramString2.append(paramString1).append("\n");
      if (paramActivityRecord1 != null) {
        localStringBuilder.append("Activity: ").append(paramActivityRecord1.shortComponentName).append("\n");
      }
      if ((paramActivityRecord2 != null) && (paramActivityRecord2.app != null) && (paramActivityRecord2.app.pid != paramProcessRecord.pid)) {
        localStringBuilder.append("Parent-Process: ").append(paramActivityRecord2.app.processName).append("\n");
      }
      if ((paramActivityRecord2 != null) && (paramActivityRecord2 != paramActivityRecord1)) {
        localStringBuilder.append("Parent-Activity: ").append(paramActivityRecord2.shortComponentName).append("\n");
      }
      if (paramString3 != null) {
        localStringBuilder.append("Subject: ").append(paramString3).append("\n");
      }
      localStringBuilder.append("Build: ").append(Build.FINGERPRINT).append("\n");
      if (Debug.isDebuggerConnected()) {
        localStringBuilder.append("Debugger: Connected\n");
      }
      localStringBuilder.append("\n");
      paramString1 = new Thread("Error dump: " + str)
      {
        /* Error */
        public void run()
        {
          // Byte code:
          //   0: aload_0
          //   1: getfield 28	com/android/server/am/ActivityManagerService$26:val$report	Ljava/lang/String;
          //   4: ifnull +15 -> 19
          //   7: aload_0
          //   8: getfield 30	com/android/server/am/ActivityManagerService$26:val$sb	Ljava/lang/StringBuilder;
          //   11: aload_0
          //   12: getfield 28	com/android/server/am/ActivityManagerService$26:val$report	Ljava/lang/String;
          //   15: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   18: pop
          //   19: new 48	java/lang/StringBuilder
          //   22: dup
          //   23: invokespecial 54	java/lang/StringBuilder:<init>	()V
          //   26: ldc 56
          //   28: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   31: aload_0
          //   32: getfield 32	com/android/server/am/ActivityManagerService$26:val$dropboxTag	Ljava/lang/String;
          //   35: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   38: invokevirtual 60	java/lang/StringBuilder:toString	()Ljava/lang/String;
          //   41: astore_3
          //   42: aload_0
          //   43: getfield 26	com/android/server/am/ActivityManagerService$26:this$0	Lcom/android/server/am/ActivityManagerService;
          //   46: getfield 64	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
          //   49: invokevirtual 70	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
          //   52: aload_3
          //   53: iconst_0
          //   54: invokestatic 76	android/provider/Settings$Global:getInt	(Landroid/content/ContentResolver;Ljava/lang/String;I)I
          //   57: istore_1
          //   58: ldc 77
          //   60: aload_0
          //   61: getfield 30	com/android/server/am/ActivityManagerService$26:val$sb	Ljava/lang/StringBuilder;
          //   64: invokevirtual 81	java/lang/StringBuilder:length	()I
          //   67: isub
          //   68: iload_1
          //   69: bipush 100
          //   71: imul
          //   72: isub
          //   73: istore_2
          //   74: aload_0
          //   75: getfield 34	com/android/server/am/ActivityManagerService$26:val$dataFile	Ljava/io/File;
          //   78: ifnull +25 -> 103
          //   81: iload_2
          //   82: ifle +21 -> 103
          //   85: aload_0
          //   86: getfield 30	com/android/server/am/ActivityManagerService$26:val$sb	Ljava/lang/StringBuilder;
          //   89: aload_0
          //   90: getfield 34	com/android/server/am/ActivityManagerService$26:val$dataFile	Ljava/io/File;
          //   93: iload_2
          //   94: ldc 83
          //   96: invokestatic 89	android/os/FileUtils:readTextFile	(Ljava/io/File;ILjava/lang/String;)Ljava/lang/String;
          //   99: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   102: pop
          //   103: aload_0
          //   104: getfield 36	com/android/server/am/ActivityManagerService$26:val$crashInfo	Landroid/app/ApplicationErrorReport$CrashInfo;
          //   107: ifnull +28 -> 135
          //   110: aload_0
          //   111: getfield 36	com/android/server/am/ActivityManagerService$26:val$crashInfo	Landroid/app/ApplicationErrorReport$CrashInfo;
          //   114: getfield 94	android/app/ApplicationErrorReport$CrashInfo:stackTrace	Ljava/lang/String;
          //   117: ifnull +18 -> 135
          //   120: aload_0
          //   121: getfield 30	com/android/server/am/ActivityManagerService$26:val$sb	Ljava/lang/StringBuilder;
          //   124: aload_0
          //   125: getfield 36	com/android/server/am/ActivityManagerService$26:val$crashInfo	Landroid/app/ApplicationErrorReport$CrashInfo;
          //   128: getfield 94	android/app/ApplicationErrorReport$CrashInfo:stackTrace	Ljava/lang/String;
          //   131: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   134: pop
          //   135: iload_1
          //   136: ifle +237 -> 373
          //   139: aload_0
          //   140: getfield 30	com/android/server/am/ActivityManagerService$26:val$sb	Ljava/lang/StringBuilder;
          //   143: ldc 96
          //   145: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   148: pop
          //   149: aconst_null
          //   150: astore 4
          //   152: aconst_null
          //   153: astore 6
          //   155: aload 4
          //   157: astore_3
          //   158: new 98	java/lang/ProcessBuilder
          //   161: dup
          //   162: bipush 17
          //   164: anewarray 100	java/lang/String
          //   167: dup
          //   168: iconst_0
          //   169: ldc 102
          //   171: aastore
          //   172: dup
          //   173: iconst_1
          //   174: ldc 104
          //   176: aastore
          //   177: dup
          //   178: iconst_2
          //   179: ldc 106
          //   181: aastore
          //   182: dup
          //   183: iconst_3
          //   184: ldc 108
          //   186: aastore
          //   187: dup
          //   188: iconst_4
          //   189: ldc 110
          //   191: aastore
          //   192: dup
          //   193: iconst_5
          //   194: ldc 112
          //   196: aastore
          //   197: dup
          //   198: bipush 6
          //   200: ldc 114
          //   202: aastore
          //   203: dup
          //   204: bipush 7
          //   206: ldc 116
          //   208: aastore
          //   209: dup
          //   210: bipush 8
          //   212: ldc 118
          //   214: aastore
          //   215: dup
          //   216: bipush 9
          //   218: ldc 116
          //   220: aastore
          //   221: dup
          //   222: bipush 10
          //   224: ldc 120
          //   226: aastore
          //   227: dup
          //   228: bipush 11
          //   230: ldc 116
          //   232: aastore
          //   233: dup
          //   234: bipush 12
          //   236: ldc 122
          //   238: aastore
          //   239: dup
          //   240: bipush 13
          //   242: ldc 116
          //   244: aastore
          //   245: dup
          //   246: bipush 14
          //   248: ldc 124
          //   250: aastore
          //   251: dup
          //   252: bipush 15
          //   254: ldc 126
          //   256: aastore
          //   257: dup
          //   258: bipush 16
          //   260: iload_1
          //   261: invokestatic 130	java/lang/String:valueOf	(I)Ljava/lang/String;
          //   264: aastore
          //   265: invokespecial 133	java/lang/ProcessBuilder:<init>	([Ljava/lang/String;)V
          //   268: iconst_1
          //   269: invokevirtual 137	java/lang/ProcessBuilder:redirectErrorStream	(Z)Ljava/lang/ProcessBuilder;
          //   272: invokevirtual 141	java/lang/ProcessBuilder:start	()Ljava/lang/Process;
          //   275: astore 5
          //   277: aload 4
          //   279: astore_3
          //   280: aload 5
          //   282: invokevirtual 147	java/lang/Process:getOutputStream	()Ljava/io/OutputStream;
          //   285: invokevirtual 152	java/io/OutputStream:close	()V
          //   288: aload 4
          //   290: astore_3
          //   291: aload 5
          //   293: invokevirtual 156	java/lang/Process:getErrorStream	()Ljava/io/InputStream;
          //   296: invokevirtual 159	java/io/InputStream:close	()V
          //   299: aload 4
          //   301: astore_3
          //   302: new 161	java/io/InputStreamReader
          //   305: dup
          //   306: aload 5
          //   308: invokevirtual 164	java/lang/Process:getInputStream	()Ljava/io/InputStream;
          //   311: invokespecial 167	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;)V
          //   314: astore 4
          //   316: sipush 8192
          //   319: newarray <illegal type>
          //   321: astore_3
          //   322: aload 4
          //   324: aload_3
          //   325: invokevirtual 171	java/io/InputStreamReader:read	([C)I
          //   328: istore_1
          //   329: iload_1
          //   330: ifle +96 -> 426
          //   333: aload_0
          //   334: getfield 30	com/android/server/am/ActivityManagerService$26:val$sb	Ljava/lang/StringBuilder;
          //   337: aload_3
          //   338: iconst_0
          //   339: iload_1
          //   340: invokevirtual 174	java/lang/StringBuilder:append	([CII)Ljava/lang/StringBuilder;
          //   343: pop
          //   344: goto -22 -> 322
          //   347: astore 5
          //   349: aload 4
          //   351: astore_3
          //   352: invokestatic 177	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
          //   355: ldc -77
          //   357: aload 5
          //   359: invokestatic 185	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
          //   362: pop
          //   363: aload 4
          //   365: ifnull +8 -> 373
          //   368: aload 4
          //   370: invokevirtual 186	java/io/InputStreamReader:close	()V
          //   373: aload_0
          //   374: getfield 38	com/android/server/am/ActivityManagerService$26:val$dbox	Landroid/os/DropBoxManager;
          //   377: aload_0
          //   378: getfield 32	com/android/server/am/ActivityManagerService$26:val$dropboxTag	Ljava/lang/String;
          //   381: aload_0
          //   382: getfield 30	com/android/server/am/ActivityManagerService$26:val$sb	Ljava/lang/StringBuilder;
          //   385: invokevirtual 60	java/lang/StringBuilder:toString	()Ljava/lang/String;
          //   388: invokevirtual 192	android/os/DropBoxManager:addText	(Ljava/lang/String;Ljava/lang/String;)V
          //   391: return
          //   392: astore_3
          //   393: invokestatic 177	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
          //   396: new 48	java/lang/StringBuilder
          //   399: dup
          //   400: invokespecial 54	java/lang/StringBuilder:<init>	()V
          //   403: ldc -62
          //   405: invokevirtual 52	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
          //   408: aload_0
          //   409: getfield 34	com/android/server/am/ActivityManagerService$26:val$dataFile	Ljava/io/File;
          //   412: invokevirtual 197	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
          //   415: invokevirtual 60	java/lang/StringBuilder:toString	()Ljava/lang/String;
          //   418: aload_3
          //   419: invokestatic 185	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
          //   422: pop
          //   423: goto -320 -> 103
          //   426: aload 4
          //   428: ifnull -55 -> 373
          //   431: aload 4
          //   433: invokevirtual 186	java/io/InputStreamReader:close	()V
          //   436: goto -63 -> 373
          //   439: astore_3
          //   440: goto -67 -> 373
          //   443: astore_3
          //   444: goto -71 -> 373
          //   447: astore 4
          //   449: aload_3
          //   450: ifnull +7 -> 457
          //   453: aload_3
          //   454: invokevirtual 186	java/io/InputStreamReader:close	()V
          //   457: aload 4
          //   459: athrow
          //   460: astore_3
          //   461: goto -4 -> 457
          //   464: astore 5
          //   466: aload 4
          //   468: astore_3
          //   469: aload 5
          //   471: astore 4
          //   473: goto -24 -> 449
          //   476: astore 5
          //   478: aload 6
          //   480: astore 4
          //   482: goto -133 -> 349
          //   485: astore_3
          //   486: goto -187 -> 299
          //   489: astore_3
          //   490: goto -202 -> 288
          // Local variable table:
          //   start	length	slot	name	signature
          //   0	493	0	this	26
          //   57	283	1	i	int
          //   73	21	2	j	int
          //   41	311	3	localObject1	Object
          //   392	27	3	localIOException1	IOException
          //   439	1	3	localIOException2	IOException
          //   443	11	3	localIOException3	IOException
          //   460	1	3	localIOException4	IOException
          //   468	1	3	localObject2	Object
          //   485	1	3	localIOException5	IOException
          //   489	1	3	localIOException6	IOException
          //   150	282	4	localInputStreamReader	java.io.InputStreamReader
          //   447	20	4	localObject3	Object
          //   471	10	4	localObject4	Object
          //   275	32	5	localProcess	Process
          //   347	11	5	localIOException7	IOException
          //   464	6	5	localObject5	Object
          //   476	1	5	localIOException8	IOException
          //   153	326	6	localObject6	Object
          // Exception table:
          //   from	to	target	type
          //   316	322	347	java/io/IOException
          //   322	329	347	java/io/IOException
          //   333	344	347	java/io/IOException
          //   85	103	392	java/io/IOException
          //   431	436	439	java/io/IOException
          //   368	373	443	java/io/IOException
          //   158	277	447	finally
          //   280	288	447	finally
          //   291	299	447	finally
          //   302	316	447	finally
          //   352	363	447	finally
          //   453	457	460	java/io/IOException
          //   316	322	464	finally
          //   322	329	464	finally
          //   333	344	464	finally
          //   158	277	476	java/io/IOException
          //   302	316	476	java/io/IOException
          //   291	299	485	java/io/IOException
          //   280	288	489	java/io/IOException
        }
      };
      if (paramProcessRecord != null) {
        break label412;
      }
      paramString1.run();
      return;
      return;
      int i = this.mWtfClusterCount;
      this.mWtfClusterCount = (i + 1);
      if (i < 5) {
        break;
      }
      return;
    }
    label412:
    paramString1.start();
  }
  
  /* Error */
  public void addPackageDependency(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   8: istore_2
    //   9: invokestatic 1230	android/os/Process:myPid	()I
    //   12: istore_3
    //   13: iload_2
    //   14: iload_3
    //   15: if_icmpne +9 -> 24
    //   18: aload_0
    //   19: monitorexit
    //   20: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   23: return
    //   24: aload_0
    //   25: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   28: astore 4
    //   30: aload 4
    //   32: monitorenter
    //   33: aload_0
    //   34: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   37: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   40: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   43: checkcast 2141	com/android/server/am/ProcessRecord
    //   46: astore 5
    //   48: aload 4
    //   50: monitorexit
    //   51: aload 5
    //   53: ifnull +100 -> 153
    //   56: aload 5
    //   58: getfield 5119	com/android/server/am/ProcessRecord:pkgDeps	Landroid/util/ArraySet;
    //   61: ifnonnull +16 -> 77
    //   64: aload 5
    //   66: new 3444	android/util/ArraySet
    //   69: dup
    //   70: iconst_1
    //   71: invokespecial 3571	android/util/ArraySet:<init>	(I)V
    //   74: putfield 5119	com/android/server/am/ProcessRecord:pkgDeps	Landroid/util/ArraySet;
    //   77: getstatic 4875	com/android/server/am/OnePlusAppBootManager:DEBUG	Z
    //   80: ifeq +41 -> 121
    //   83: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   86: new 1066	java/lang/StringBuilder
    //   89: dup
    //   90: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   93: ldc_w 6540
    //   96: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   99: aload_1
    //   100: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   103: ldc_w 6542
    //   106: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   109: aload 5
    //   111: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   114: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   117: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   120: pop
    //   121: getstatic 4887	com/android/server/am/OnePlusAppBootManager:IN_USING	Z
    //   124: ifeq +19 -> 143
    //   127: aconst_null
    //   128: invokestatic 4890	com/android/server/am/OnePlusAppBootManager:getInstance	(Lcom/android/server/pm/PackageManagerService;)Lcom/android/server/am/OnePlusAppBootManager;
    //   131: aload 5
    //   133: getfield 2260	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
    //   136: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   139: iload_2
    //   140: invokevirtual 6545	com/android/server/am/OnePlusAppBootManager:addDependencyPackageFlag	(Ljava/lang/String;I)V
    //   143: aload 5
    //   145: getfield 5119	com/android/server/am/ProcessRecord:pkgDeps	Landroid/util/ArraySet;
    //   148: aload_1
    //   149: invokevirtual 6546	android/util/ArraySet:add	(Ljava/lang/Object;)Z
    //   152: pop
    //   153: aload_0
    //   154: monitorexit
    //   155: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   158: return
    //   159: astore_1
    //   160: aload 4
    //   162: monitorexit
    //   163: aload_1
    //   164: athrow
    //   165: astore_1
    //   166: aload_0
    //   167: monitorexit
    //   168: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   171: aload_1
    //   172: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	173	0	this	ActivityManagerService
    //   0	173	1	paramString	String
    //   8	132	2	i	int
    //   12	4	3	j	int
    //   46	98	5	localProcessRecord	ProcessRecord
    // Exception table:
    //   from	to	target	type
    //   33	48	159	finally
    //   2	13	165	finally
    //   24	33	165	finally
    //   48	51	165	finally
    //   56	77	165	finally
    //   77	121	165	finally
    //   121	143	165	finally
    //   143	153	165	finally
    //   160	165	165	finally
  }
  
  final void addProcessToGcListLocked(ProcessRecord paramProcessRecord)
  {
    int k = 0;
    int i = this.mProcessesToGc.size() - 1;
    for (;;)
    {
      int j = k;
      if (i >= 0)
      {
        if (((ProcessRecord)this.mProcessesToGc.get(i)).lastRequestedGc < paramProcessRecord.lastRequestedGc)
        {
          j = 1;
          this.mProcessesToGc.add(i + 1, paramProcessRecord);
        }
      }
      else
      {
        if (j == 0) {
          this.mProcessesToGc.add(0, paramProcessRecord);
        }
        return;
      }
      i -= 1;
    }
  }
  
  protected void addRestartWhitelist(String paramString)
  {
    synchronized (sRestartWhiteList)
    {
      if (!sRestartWhiteList.contains(paramString)) {
        sRestartWhiteList.add(paramString);
      }
      return;
    }
  }
  
  final void appDiedLocked(ProcessRecord paramProcessRecord)
  {
    appDiedLocked(paramProcessRecord, paramProcessRecord.pid, paramProcessRecord.thread, false);
  }
  
  final void appDiedLocked(ProcessRecord paramProcessRecord, int paramInt, IApplicationThread paramIApplicationThread, boolean paramBoolean)
  {
    Object localObject2;
    synchronized (this.mPidsSelfLocked)
    {
      localObject2 = (ProcessRecord)this.mPidsSelfLocked.get(paramInt);
      if (localObject2 != paramProcessRecord)
      {
        Slog.w(TAG, "Spurious death for " + paramProcessRecord + ", curProc for " + paramInt + ": " + localObject2);
        return;
      }
      if (this.mEmbryoManager.checkBackgroundLevel(this.mLruProcesses)) {
        this.mEmbryoManager.prepare(paramProcessRecord);
      }
    }
    label769:
    do
    {
      do
      {
        for (;;)
        {
          synchronized (this.mBatteryStatsService.getActiveStatistics())
          {
            ((BatteryStatsImpl)???).noteProcessDiedLocked(paramProcessRecord.info.uid, paramInt);
            if (paramProcessRecord != null) {
              OnePlusProcessManager.resumeProcessByUID_out_Delay(paramProcessRecord.uid, "appDiedLocked", 2);
            }
            this.mOHPD.cancelBgDetectNotificationIfNeeded();
            if (!paramProcessRecord.killed)
            {
              if (!paramBoolean) {
                Process.killProcessQuiet(paramInt);
              }
              killProcessGroup(paramProcessRecord.uid, paramInt);
              paramProcessRecord.killed = true;
            }
            if ((paramProcessRecord.pid != paramInt) || (paramProcessRecord.thread == null) || (paramProcessRecord.thread.asBinder() != paramIApplicationThread.asBinder())) {
              break;
            }
            if (paramProcessRecord.instrumentationClass == null)
            {
              i = 1;
              int m = 0;
              k = 0;
              if (paramProcessRecord.killedByAm) {
                break label769;
              }
              int j = k;
              if (this.mHomeProcessName != null)
              {
                j = k;
                if (paramProcessRecord.processName.equals(this.mHomeProcessName))
                {
                  this.mHomeKilled = true;
                  j = 1;
                }
              }
              Slog.i(TAG, "Process " + paramProcessRecord.processName + " (pid " + paramInt + ") has died");
              this.mAllowLowerMemLevel = true;
              k = i;
              m = j;
              if (mEnableNetOpts)
              {
                networkOptsCheck(1, paramProcessRecord.processName);
                m = j;
                k = i;
              }
              EventLog.writeEvent(30011, new Object[] { Integer.valueOf(paramProcessRecord.userId), Integer.valueOf(paramProcessRecord.pid), paramProcessRecord.processName });
              if (ActivityManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.v(TAG_CLEANUP, "Dying app: " + paramProcessRecord + ", pid: " + paramInt + ", thread: " + paramIApplicationThread.asBinder());
              }
              long l2 = 0L;
              long l1 = l2;
              try
              {
                paramIApplicationThread = this.mProcessStats.mProcessStats.getPackageStateLocked(paramProcessRecord.info.packageName, paramProcessRecord.uid, paramProcessRecord.info.versionCode).mProcesses;
                l1 = l2;
                ??? = paramIApplicationThread.keySet().iterator();
                l1 = l2;
                long l3 = l2;
                if (((Iterator)???).hasNext())
                {
                  l1 = l2;
                  localObject2 = (String)((Iterator)???).next();
                  l1 = l2;
                  l3 = ((ProcessState)paramIApplicationThread.get(localObject2)).getTopDuration();
                  l2 += l3;
                  l1 = l2;
                  Log.d(TAG, "get process top duration : " + (String)localObject2 + ", duration : " + l3);
                  continue;
                }
                return;
              }
              catch (Exception paramIApplicationThread)
              {
                Slog.w(TAG, "Failure update process duration", paramIApplicationThread);
                l3 = l1;
                this.mRestartProcessManager.updateDuration(paramProcessRecord.info.packageName, l3);
                handleAppDiedLocked(paramProcessRecord, false, checkRestart(paramProcessRecord));
                if (OnePlusAppBootManager.IN_USING) {
                  OnePlusAppBootManager.getInstance(null).trackProcess(false, paramProcessRecord, "appDiedLocked-same pid");
                }
                if (i != 0) {
                  updateOomAdjLocked();
                }
                if (k != 0) {
                  doLowMemReportIfNeededLocked(paramProcessRecord);
                }
                if ((this.mHomeKilled) && (m != 0))
                {
                  paramProcessRecord = getHomeIntent();
                  paramProcessRecord = this.mStackSupervisor.resolveActivity(paramProcessRecord, null, 0, null, 0);
                  startProcessLocked(paramProcessRecord.processName, paramProcessRecord.applicationInfo, true, 0, "activity", null, false, false, true);
                }
              }
              paramProcessRecord = finally;
              throw paramProcessRecord;
            }
          }
          int i = 0;
          continue;
          this.mAllowLowerMemLevel = false;
          int k = 0;
        }
        if (paramProcessRecord.pid == paramInt) {
          break;
        }
        Slog.i(TAG, "Process " + paramProcessRecord.processName + " (pid " + paramInt + ") has died and restarted (pid " + paramProcessRecord.pid + ").");
        EventLog.writeEvent(30011, new Object[] { Integer.valueOf(paramProcessRecord.userId), Integer.valueOf(paramProcessRecord.pid), paramProcessRecord.processName });
      } while (!OnePlusAppBootManager.IN_USING);
      OnePlusAppBootManager.getInstance(null).trackProcess(false, paramProcessRecord, "appDiedLocked-diff pid");
      return;
    } while (!ActivityManagerDebugConfig.DEBUG_PROCESSES);
    Slog.d(TAG_PROCESSES, "Received spurious death notification for thread " + paramIApplicationThread.asBinder());
  }
  
  public void appNotRespondingViaProvider(final IBinder paramIBinder)
  {
    enforceCallingPermission("android.permission.REMOVE_TASKS", "appNotRespondingViaProvider()");
    paramIBinder = (ContentProviderConnection)paramIBinder;
    if (paramIBinder == null)
    {
      Slog.w(TAG, "ContentProviderConnection is null");
      return;
    }
    paramIBinder = paramIBinder.provider.proc;
    if (paramIBinder == null)
    {
      Slog.w(TAG, "Failed to find hosting ProcessRecord");
      return;
    }
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        ActivityManagerService.this.mAppErrors.appNotResponding(paramIBinder, null, null, false, "ContentProvider not responding");
      }
    });
  }
  
  final void applyUpdateLockStateLocked(ActivityRecord paramActivityRecord)
  {
    boolean bool;
    MainHandler localMainHandler1;
    MainHandler localMainHandler2;
    if (paramActivityRecord != null)
    {
      bool = paramActivityRecord.immersive;
      localMainHandler1 = this.mHandler;
      localMainHandler2 = this.mHandler;
      if (!bool) {
        break label49;
      }
    }
    label49:
    for (int i = 1;; i = 0)
    {
      localMainHandler1.sendMessage(localMainHandler2.obtainMessage(37, i, 0, paramActivityRecord));
      return;
      bool = false;
      break;
    }
  }
  
  final void applyUpdateVrModeLocked(ActivityRecord paramActivityRecord)
  {
    this.mHandler.sendMessage(this.mHandler.obtainMessage(63, 0, 0, paramActivityRecord));
  }
  
  public final void attachApplication(IApplicationThread paramIApplicationThread)
  {
    try
    {
      boostPriorityForLockedSection();
      int i = Binder.getCallingPid();
      long l = Binder.clearCallingIdentity();
      Trace.traceBegin(64L, "attachApplication");
      attachApplicationLocked(paramIApplicationThread, i);
      Trace.traceEnd(64L);
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public final void backgroundResourcesReleased(IBinder paramIBinder)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore_2
    //   4: aload_0
    //   5: monitorenter
    //   6: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   9: aload_1
    //   10: invokestatic 6305	com/android/server/am/ActivityRecord:getStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityStack;
    //   13: astore_1
    //   14: aload_1
    //   15: ifnull +7 -> 22
    //   18: aload_1
    //   19: invokevirtual 6653	com/android/server/am/ActivityStack:backgroundResourcesReleased	()V
    //   22: aload_0
    //   23: monitorexit
    //   24: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   27: lload_2
    //   28: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   31: return
    //   32: astore_1
    //   33: aload_0
    //   34: monitorexit
    //   35: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   38: aload_1
    //   39: athrow
    //   40: astore_1
    //   41: lload_2
    //   42: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   45: aload_1
    //   46: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	47	0	this	ActivityManagerService
    //   0	47	1	paramIBinder	IBinder
    //   3	39	2	l	long
    // Exception table:
    //   from	to	target	type
    //   6	14	32	finally
    //   18	22	32	finally
    //   4	6	40	finally
    //   22	27	40	finally
    //   33	40	40	finally
  }
  
  void backgroundServicesFinishedLocked(int paramInt)
  {
    BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
    int i = 0;
    int j = arrayOfBroadcastQueue.length;
    while (i < j)
    {
      arrayOfBroadcastQueue[i].backgroundServicesFinishedLocked(paramInt);
      i += 1;
    }
  }
  
  /* Error */
  public void backupAgentCreated(String paramString, IBinder paramIBinder)
  {
    // Byte code:
    //   0: getstatic 2990	com/android/server/am/ActivityManagerDebugConfig:DEBUG_BACKUP	Z
    //   3: ifeq +40 -> 43
    //   6: getstatic 1083	com/android/server/am/ActivityManagerService:TAG_BACKUP	Ljava/lang/String;
    //   9: new 1066	java/lang/StringBuilder
    //   12: dup
    //   13: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   16: ldc_w 6660
    //   19: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   22: aload_1
    //   23: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   26: ldc_w 6662
    //   29: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   32: aload_2
    //   33: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   36: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   39: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   42: pop
    //   43: aload_0
    //   44: monitorenter
    //   45: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   48: aload_1
    //   49: aload_0
    //   50: getfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   53: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   56: ifne +42 -> 98
    //   59: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   62: new 1066	java/lang/StringBuilder
    //   65: dup
    //   66: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   69: ldc_w 6664
    //   72: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   75: aload_1
    //   76: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   79: ldc_w 6666
    //   82: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   85: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   88: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   91: pop
    //   92: aload_0
    //   93: monitorexit
    //   94: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   97: return
    //   98: aload_0
    //   99: monitorexit
    //   100: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   103: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   106: lstore_3
    //   107: ldc_w 1394
    //   110: invokestatic 3468	android/os/ServiceManager:getService	(Ljava/lang/String;)Landroid/os/IBinder;
    //   113: invokestatic 3474	android/app/backup/IBackupManager$Stub:asInterface	(Landroid/os/IBinder;)Landroid/app/backup/IBackupManager;
    //   116: aload_1
    //   117: aload_2
    //   118: invokeinterface 6669 3 0
    //   123: lload_3
    //   124: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   127: return
    //   128: astore_1
    //   129: aload_0
    //   130: monitorexit
    //   131: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   134: aload_1
    //   135: athrow
    //   136: astore_1
    //   137: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   140: ldc_w 6671
    //   143: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   146: pop
    //   147: aload_1
    //   148: invokevirtual 2680	java/lang/Exception:printStackTrace	()V
    //   151: lload_3
    //   152: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   155: return
    //   156: astore_1
    //   157: lload_3
    //   158: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   161: return
    //   162: astore_1
    //   163: lload_3
    //   164: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   167: aload_1
    //   168: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	169	0	this	ActivityManagerService
    //   0	169	1	paramString	String
    //   0	169	2	paramIBinder	IBinder
    //   106	58	3	l	long
    // Exception table:
    //   from	to	target	type
    //   45	92	128	finally
    //   107	123	136	java/lang/Exception
    //   107	123	156	android/os/RemoteException
    //   107	123	162	finally
    //   137	151	162	finally
  }
  
  public void batteryNeedsCpuUpdate()
  {
    new Thread(new Runnable()
    {
      public void run()
      {
        ActivityManagerService.this.updateCpuStatsNow();
      }
    }).start();
  }
  
  /* Error */
  public void batteryPowerChanged(boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 6680	com/android/server/am/ActivityManagerService:updateCpuStatsNow	()V
    //   4: aload_0
    //   5: monitorenter
    //   6: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   9: aload_0
    //   10: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   13: astore_2
    //   14: aload_2
    //   15: monitorenter
    //   16: getstatic 1894	com/android/server/am/ActivityManagerDebugConfig:DEBUG_POWER	Z
    //   19: ifeq +5 -> 24
    //   22: iconst_1
    //   23: istore_1
    //   24: aload_0
    //   25: iload_1
    //   26: putfield 1567	com/android/server/am/ActivityManagerService:mOnBattery	Z
    //   29: aload_2
    //   30: monitorexit
    //   31: aload_0
    //   32: monitorexit
    //   33: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   36: return
    //   37: astore_3
    //   38: aload_2
    //   39: monitorexit
    //   40: aload_3
    //   41: athrow
    //   42: astore_2
    //   43: aload_0
    //   44: monitorexit
    //   45: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   48: aload_2
    //   49: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	50	0	this	ActivityManagerService
    //   0	50	1	paramBoolean	boolean
    //   42	7	2	localObject1	Object
    //   37	4	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   16	22	37	finally
    //   24	29	37	finally
    //   6	16	42	finally
    //   29	31	42	finally
    //   38	42	42	finally
  }
  
  public void batterySendBroadcast(Intent paramIntent)
  {
    try
    {
      boostPriorityForLockedSection();
      broadcastIntentLocked(null, null, paramIntent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, -1);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public boolean bindBackupAgent(String paramString, int paramInt1, int paramInt2)
  {
    // Byte code:
    //   0: getstatic 2990	com/android/server/am/ActivityManagerDebugConfig:DEBUG_BACKUP	Z
    //   3: ifeq +40 -> 43
    //   6: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   9: new 1066	java/lang/StringBuilder
    //   12: dup
    //   13: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   16: ldc_w 6684
    //   19: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   22: aload_1
    //   23: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   26: ldc_w 6686
    //   29: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   32: iload_2
    //   33: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   36: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   39: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   42: pop
    //   43: aload_0
    //   44: ldc_w 6688
    //   47: ldc_w 6689
    //   50: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   53: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   56: astore 5
    //   58: aconst_null
    //   59: astore 4
    //   61: aload 5
    //   63: aload_1
    //   64: iconst_0
    //   65: iload_3
    //   66: invokeinterface 4838 4 0
    //   71: astore 5
    //   73: aload 5
    //   75: astore 4
    //   77: aload 4
    //   79: ifnonnull +37 -> 116
    //   82: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   85: new 1066	java/lang/StringBuilder
    //   88: dup
    //   89: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   92: ldc_w 6691
    //   95: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   98: aload_1
    //   99: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   102: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   105: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   108: pop
    //   109: iconst_0
    //   110: ireturn
    //   111: astore 5
    //   113: goto -36 -> 77
    //   116: aload_0
    //   117: monitorenter
    //   118: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   121: aload_0
    //   122: getfield 1879	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
    //   125: invokevirtual 1883	com/android/server/am/BatteryStatsService:getActiveStatistics	()Lcom/android/internal/os/BatteryStatsImpl;
    //   128: astore 5
    //   130: aload 5
    //   132: monitorenter
    //   133: aload 5
    //   135: aload 4
    //   137: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   140: aload 4
    //   142: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   145: aload 4
    //   147: getfield 6692	android/content/pm/ApplicationInfo:name	Ljava/lang/String;
    //   150: invokevirtual 6696	com/android/internal/os/BatteryStatsImpl:getServiceStatsLocked	(ILjava/lang/String;Ljava/lang/String;)Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;
    //   153: astore_1
    //   154: aload 5
    //   156: monitorexit
    //   157: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   160: aload 4
    //   162: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   165: iconst_0
    //   166: aload 4
    //   168: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   171: invokestatic 3073	android/os/UserHandle:getUserId	(I)I
    //   174: invokeinterface 4862 4 0
    //   179: new 2880	com/android/server/am/BackupRecord
    //   182: dup
    //   183: aload_1
    //   184: aload 4
    //   186: iload_2
    //   187: invokespecial 6699	com/android/server/am/BackupRecord:<init>	(Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;Landroid/content/pm/ApplicationInfo;I)V
    //   190: astore 5
    //   192: iload_2
    //   193: ifne +142 -> 335
    //   196: new 2891	android/content/ComponentName
    //   199: dup
    //   200: aload 4
    //   202: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   205: aload 4
    //   207: getfield 6702	android/content/pm/ApplicationInfo:backupAgentName	Ljava/lang/String;
    //   210: invokespecial 3566	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   213: astore_1
    //   214: aload_0
    //   215: aload 4
    //   217: getfield 6327	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
    //   220: aload 4
    //   222: iconst_0
    //   223: iconst_0
    //   224: ldc_w 1394
    //   227: aload_1
    //   228: iconst_0
    //   229: iconst_0
    //   230: iconst_0
    //   231: invokevirtual 4932	com/android/server/am/ActivityManagerService:startProcessLocked	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZZ)Lcom/android/server/am/ProcessRecord;
    //   234: astore_1
    //   235: aload_1
    //   236: ifnonnull +116 -> 352
    //   239: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   242: new 1066	java/lang/StringBuilder
    //   245: dup
    //   246: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   249: ldc_w 6704
    //   252: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   255: aload 5
    //   257: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   260: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   263: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   266: pop
    //   267: aload_0
    //   268: monitorexit
    //   269: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   272: iconst_0
    //   273: ireturn
    //   274: astore_1
    //   275: aload 5
    //   277: monitorexit
    //   278: aload_1
    //   279: athrow
    //   280: astore_1
    //   281: aload_0
    //   282: monitorexit
    //   283: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   286: aload_1
    //   287: athrow
    //   288: astore 5
    //   290: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   293: new 1066	java/lang/StringBuilder
    //   296: dup
    //   297: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   300: ldc_w 4901
    //   303: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   306: aload 4
    //   308: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   311: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   314: ldc_w 2237
    //   317: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   320: aload 5
    //   322: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   325: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   328: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   331: pop
    //   332: goto -153 -> 179
    //   335: new 2891	android/content/ComponentName
    //   338: dup
    //   339: ldc_w 4667
    //   342: ldc_w 6706
    //   345: invokespecial 3566	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   348: astore_1
    //   349: goto -135 -> 214
    //   352: aload 4
    //   354: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   357: invokestatic 6709	android/os/UserHandle:isApp	(I)Z
    //   360: ifeq +13 -> 373
    //   363: iload_2
    //   364: iconst_1
    //   365: if_icmpne +8 -> 373
    //   368: aload_1
    //   369: iconst_1
    //   370: putfield 6712	com/android/server/am/ProcessRecord:inFullBackup	Z
    //   373: aload 5
    //   375: aload_1
    //   376: putfield 3456	com/android/server/am/BackupRecord:app	Lcom/android/server/am/ProcessRecord;
    //   379: aload_0
    //   380: aload 5
    //   382: putfield 1540	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
    //   385: aload_0
    //   386: aload 4
    //   388: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   391: putfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   394: aload_0
    //   395: aload_1
    //   396: invokevirtual 4764	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
    //   399: pop
    //   400: aload_1
    //   401: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   404: ifnull +61 -> 465
    //   407: getstatic 2990	com/android/server/am/ActivityManagerDebugConfig:DEBUG_BACKUP	Z
    //   410: ifeq +30 -> 440
    //   413: getstatic 1083	com/android/server/am/ActivityManagerService:TAG_BACKUP	Ljava/lang/String;
    //   416: new 1066	java/lang/StringBuilder
    //   419: dup
    //   420: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   423: ldc_w 6714
    //   426: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   429: aload_1
    //   430: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   433: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   436: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   439: pop
    //   440: aload_1
    //   441: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   444: aload 4
    //   446: aload_0
    //   447: aload 4
    //   449: invokevirtual 2911	com/android/server/am/ActivityManagerService:compatibilityInfoForPackageLocked	(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
    //   452: iload_2
    //   453: invokeinterface 2999 4 0
    //   458: aload_0
    //   459: monitorexit
    //   460: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   463: iconst_1
    //   464: ireturn
    //   465: getstatic 2990	com/android/server/am/ActivityManagerDebugConfig:DEBUG_BACKUP	Z
    //   468: ifeq -10 -> 458
    //   471: getstatic 1083	com/android/server/am/ActivityManagerService:TAG_BACKUP	Ljava/lang/String;
    //   474: ldc_w 6716
    //   477: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   480: pop
    //   481: goto -23 -> 458
    //   484: astore_1
    //   485: goto -27 -> 458
    //   488: astore 5
    //   490: goto -311 -> 179
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	493	0	this	ActivityManagerService
    //   0	493	1	paramString	String
    //   0	493	2	paramInt1	int
    //   0	493	3	paramInt2	int
    //   59	389	4	localObject1	Object
    //   56	18	5	localObject2	Object
    //   111	1	5	localRemoteException1	RemoteException
    //   288	93	5	localIllegalArgumentException	IllegalArgumentException
    //   488	1	5	localRemoteException2	RemoteException
    // Exception table:
    //   from	to	target	type
    //   61	73	111	android/os/RemoteException
    //   133	154	274	finally
    //   118	133	280	finally
    //   154	157	280	finally
    //   157	179	280	finally
    //   179	192	280	finally
    //   196	214	280	finally
    //   214	235	280	finally
    //   239	267	280	finally
    //   275	280	280	finally
    //   290	332	280	finally
    //   335	349	280	finally
    //   352	363	280	finally
    //   368	373	280	finally
    //   373	440	280	finally
    //   440	458	280	finally
    //   465	481	280	finally
    //   157	179	288	java/lang/IllegalArgumentException
    //   440	458	484	android/os/RemoteException
    //   157	179	488	android/os/RemoteException
  }
  
  public int bindService(IApplicationThread paramIApplicationThread, IBinder paramIBinder, Intent paramIntent, String paramString1, IServiceConnection paramIServiceConnection, int paramInt1, String paramString2, int paramInt2)
    throws TransactionTooLargeException
  {
    enforceNotIsolatedCaller("bindService");
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    if (paramString2 == null) {
      throw new IllegalArgumentException("callingPackage cannot be null");
    }
    try
    {
      boostPriorityForLockedSection();
      paramInt1 = this.mServices.bindServiceLocked(paramIApplicationThread, paramIBinder, paramIntent, paramString1, paramIServiceConnection, paramInt1, paramString2, paramInt2);
      return paramInt1;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void bootAnimationComplete()
  {
    try
    {
      boostPriorityForLockedSection();
      boolean bool = this.mCallFinishBooting;
      this.mBootAnimationComplete = true;
      resetPriorityAfterLockedSection();
      if (bool)
      {
        Trace.traceBegin(64L, "FinishBooting");
        finishBooting();
        Trace.traceEnd(64L);
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public final int broadcastIntent(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString1, IIntentReceiver paramIIntentReceiver, int paramInt1, String paramString2, Bundle paramBundle1, String[] paramArrayOfString, int paramInt2, Bundle paramBundle2, boolean paramBoolean1, boolean paramBoolean2, int paramInt3)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 6741
    //   4: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   7: aload_0
    //   8: monitorenter
    //   9: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   12: aload_0
    //   13: aload_2
    //   14: invokevirtual 6745	com/android/server/am/ActivityManagerService:verifyBroadcastLocked	(Landroid/content/Intent;)Landroid/content/Intent;
    //   17: astore_2
    //   18: aload_0
    //   19: aload_1
    //   20: invokevirtual 4710	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
    //   23: astore 18
    //   25: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   28: istore 14
    //   30: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   33: istore 15
    //   35: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   38: lstore 16
    //   40: aload 18
    //   42: ifnull +60 -> 102
    //   45: aload 18
    //   47: getfield 2260	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
    //   50: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   53: astore_1
    //   54: aload_0
    //   55: aload 18
    //   57: aload_1
    //   58: aload_2
    //   59: aload_3
    //   60: aload 4
    //   62: iload 5
    //   64: aload 6
    //   66: aload 7
    //   68: aload 8
    //   70: iload 9
    //   72: aload 10
    //   74: iload 11
    //   76: iload 12
    //   78: iload 14
    //   80: iload 15
    //   82: iload 13
    //   84: invokevirtual 4613	com/android/server/am/ActivityManagerService:broadcastIntentLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIII)I
    //   87: istore 5
    //   89: lload 16
    //   91: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   94: aload_0
    //   95: monitorexit
    //   96: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   99: iload 5
    //   101: ireturn
    //   102: aconst_null
    //   103: astore_1
    //   104: goto -50 -> 54
    //   107: astore_1
    //   108: aload_0
    //   109: monitorexit
    //   110: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   113: aload_1
    //   114: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	115	0	this	ActivityManagerService
    //   0	115	1	paramIApplicationThread	IApplicationThread
    //   0	115	2	paramIntent	Intent
    //   0	115	3	paramString1	String
    //   0	115	4	paramIIntentReceiver	IIntentReceiver
    //   0	115	5	paramInt1	int
    //   0	115	6	paramString2	String
    //   0	115	7	paramBundle1	Bundle
    //   0	115	8	paramArrayOfString	String[]
    //   0	115	9	paramInt2	int
    //   0	115	10	paramBundle2	Bundle
    //   0	115	11	paramBoolean1	boolean
    //   0	115	12	paramBoolean2	boolean
    //   0	115	13	paramInt3	int
    //   28	51	14	i	int
    //   33	48	15	j	int
    //   38	52	16	l	long
    //   23	33	18	localProcessRecord	ProcessRecord
    // Exception table:
    //   from	to	target	type
    //   9	40	107	finally
    //   45	54	107	finally
    //   54	94	107	finally
  }
  
  /* Error */
  int broadcastIntentInPackage(String paramString1, int paramInt1, Intent paramIntent, String paramString2, IIntentReceiver paramIIntentReceiver, int paramInt2, String paramString3, Bundle paramBundle1, String paramString4, Bundle paramBundle2, boolean paramBoolean1, boolean paramBoolean2, int paramInt3)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: aload_3
    //   7: invokevirtual 6745	com/android/server/am/ActivityManagerService:verifyBroadcastLocked	(Landroid/content/Intent;)Landroid/content/Intent;
    //   10: astore 16
    //   12: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   15: lstore 14
    //   17: aload 9
    //   19: ifnonnull +48 -> 67
    //   22: aconst_null
    //   23: astore_3
    //   24: aload_0
    //   25: aconst_null
    //   26: aload_1
    //   27: aload 16
    //   29: aload 4
    //   31: aload 5
    //   33: iload 6
    //   35: aload 7
    //   37: aload 8
    //   39: aload_3
    //   40: iconst_m1
    //   41: aload 10
    //   43: iload 11
    //   45: iload 12
    //   47: iconst_m1
    //   48: iload_2
    //   49: iload 13
    //   51: invokevirtual 4613	com/android/server/am/ActivityManagerService:broadcastIntentLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIII)I
    //   54: istore_2
    //   55: lload 14
    //   57: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   60: aload_0
    //   61: monitorexit
    //   62: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   65: iload_2
    //   66: ireturn
    //   67: iconst_1
    //   68: anewarray 1205	java/lang/String
    //   71: astore_3
    //   72: aload_3
    //   73: iconst_0
    //   74: aload 9
    //   76: aastore
    //   77: goto -53 -> 24
    //   80: astore_1
    //   81: aload_0
    //   82: monitorexit
    //   83: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   86: aload_1
    //   87: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	88	0	this	ActivityManagerService
    //   0	88	1	paramString1	String
    //   0	88	2	paramInt1	int
    //   0	88	3	paramIntent	Intent
    //   0	88	4	paramString2	String
    //   0	88	5	paramIIntentReceiver	IIntentReceiver
    //   0	88	6	paramInt2	int
    //   0	88	7	paramString3	String
    //   0	88	8	paramBundle1	Bundle
    //   0	88	9	paramString4	String
    //   0	88	10	paramBundle2	Bundle
    //   0	88	11	paramBoolean1	boolean
    //   0	88	12	paramBoolean2	boolean
    //   0	88	13	paramInt3	int
    //   15	41	14	l	long
    //   10	18	16	localIntent	Intent
    // Exception table:
    //   from	to	target	type
    //   2	17	80	finally
    //   24	60	80	finally
    //   67	72	80	finally
  }
  
  final int broadcastIntentLocked(ProcessRecord paramProcessRecord, String paramString1, Intent arg3, String paramString2, IIntentReceiver paramIIntentReceiver, int paramInt1, String paramString3, Bundle paramBundle1, String[] paramArrayOfString, int paramInt2, Bundle paramBundle2, boolean paramBoolean1, boolean paramBoolean2, int paramInt3, int paramInt4, int paramInt5)
  {
    Intent localIntent = new Intent(???);
    localIntent.addFlags(16);
    if ((!this.mProcessesReady) && ((localIntent.getFlags() & 0x2000000) == 0)) {
      localIntent.addFlags(1073741824);
    }
    Object localObject2;
    if ((ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) || (DEBUG_ONEPLUS))
    {
      localObject1 = TAG_BROADCAST;
      localObject2 = new StringBuilder();
      if (paramBoolean2)
      {
        ??? = "Broadcast sticky: ";
        Slog.v((String)localObject1, ??? + localIntent + " ordered=" + paramBoolean1 + " userid=" + paramInt5 + " from pid=" + paramInt3);
      }
    }
    else
    {
      if ((paramIIntentReceiver != null) && (!paramBoolean1)) {
        break label177;
      }
    }
    for (;;)
    {
      if ((!OnePlusAppBootManager.IN_USING) || (!OnePlusAppBootManager.getInstance(null).skipBroadcast(localIntent, paramString1, paramInt3, paramInt4, paramProcessRecord))) {
        break label214;
      }
      return 0;
      ??? = "Broadcast: ";
      break;
      label177:
      Slog.w(TAG, "Broadcast " + localIntent + " not ordered but result callback requested!");
    }
    label214:
    int i2 = this.mUserController.handleIncomingUser(paramInt3, paramInt4, paramInt5, true, 0, "broadcast", paramString1);
    if ((i2 == -1) || (this.mUserController.isUserRunningLocked(i2, 0))) {}
    while (((paramInt4 == 1000) && ((localIntent.getFlags() & 0x2000000) != 0)) || ("android.intent.action.ACTION_SHUTDOWN".equals(localIntent.getAction())))
    {
      localObject2 = null;
      if (paramBundle2 == null) {
        break;
      }
      ??? = new BroadcastOptions(paramBundle2);
      localObject2 = ???;
      if (???.getTemporaryAppWhitelistDuration() <= 0L) {
        break;
      }
      localObject2 = ???;
      if (checkComponentPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", Binder.getCallingPid(), Binder.getCallingUid(), -1, true) == 0) {
        break;
      }
      paramProcessRecord = "Permission Denial: " + localIntent.getAction() + " broadcast from " + paramString1 + " (pid=" + paramInt3 + ", uid=" + paramInt4 + ")" + " requires " + "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST";
      Slog.w(TAG, paramProcessRecord);
      throw new SecurityException(paramProcessRecord);
    }
    Slog.w(TAG, "Skipping broadcast of " + localIntent + ": user " + i2 + " is stopped");
    return -2;
    ??? = localIntent.getAction();
    boolean bool4;
    boolean bool1;
    for (;;)
    {
      try
      {
        bool4 = AppGlobals.getPackageManager().isProtectedBroadcast(???);
        switch (UserHandle.getAppId(paramInt4))
        {
        default: 
          if (paramProcessRecord == null) {
            break label652;
          }
          bool1 = paramProcessRecord.persistent;
          if (bool1) {
            break label821;
          }
          if (!bool4) {
            break label658;
          }
          paramProcessRecord = "Permission Denial: not allowed to send broadcast " + ??? + " from pid=" + paramInt3 + ", uid=" + paramInt4;
          Slog.w(TAG, paramProcessRecord);
          throw new SecurityException(paramProcessRecord);
        }
      }
      catch (RemoteException paramProcessRecord)
      {
        Slog.w(TAG, "Remote exception", paramProcessRecord);
        return 0;
      }
      bool1 = true;
      continue;
      label652:
      bool1 = false;
    }
    label658:
    if (("android.appwidget.action.APPWIDGET_CONFIGURE".equals(???)) || ("android.appwidget.action.APPWIDGET_UPDATE".equals(???)))
    {
      if (paramString1 == null)
      {
        paramProcessRecord = "Permission Denial: not allowed to send broadcast " + ??? + " from unknown caller.";
        Slog.w(TAG, paramProcessRecord);
        throw new SecurityException(paramProcessRecord);
      }
      if (localIntent.getComponent() != null)
      {
        if (!localIntent.getComponent().getPackageName().equals(paramString1))
        {
          paramProcessRecord = "Permission Denial: not allowed to send broadcast " + ??? + " to " + localIntent.getComponent().getPackageName() + " from " + paramString1;
          Slog.w(TAG, paramProcessRecord);
          throw new SecurityException(paramProcessRecord);
        }
      }
      else {
        localIntent.setPackage(paramString1);
      }
    }
    label821:
    boolean bool2;
    if (??? != null)
    {
      if (???.equals("android.intent.action.UID_REMOVED")) {}
      for (;;)
      {
        if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", paramInt3, paramInt4, -1, true) != 0)
        {
          paramProcessRecord = "Permission Denial: " + localIntent.getAction() + " broadcast from " + paramString1 + " (pid=" + paramInt3 + ", uid=" + paramInt4 + ")" + " requires " + "android.permission.BROADCAST_PACKAGE_REMOVED";
          Slog.w(TAG, paramProcessRecord);
          throw new SecurityException(paramProcessRecord);
          if ((!???.equals("android.intent.action.PACKAGE_REMOVED")) && (!???.equals("android.intent.action.PACKAGE_CHANGED")) && (!???.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) && (!???.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) && (!???.equals("android.intent.action.PACKAGES_SUSPENDED")) && (!???.equals("android.intent.action.PACKAGES_UNSUSPENDED"))) {
            if (???.equals("android.intent.action.PACKAGE_REPLACED"))
            {
              ??? = localIntent.getData();
              if (??? != null)
              {
                paramBundle2 = ???.getSchemeSpecificPart();
                if (paramBundle2 != null)
                {
                  localObject1 = getPackageManagerInternalLocked().getApplicationInfo(paramBundle2, i2);
                  if (localObject1 != null) {
                    break label2275;
                  }
                  Slog.w(TAG, "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp=" + paramBundle2 + " data=" + ???);
                  return 0;
                }
              }
            }
            else
            {
              if (!???.equals("android.intent.action.PACKAGE_ADDED")) {
                break label1289;
              }
              ??? = localIntent.getData();
              if (??? != null)
              {
                ??? = ???.getSchemeSpecificPart();
                if (??? != null)
                {
                  bool2 = localIntent.getBooleanExtra("android.intent.extra.REPLACING", false);
                  this.mCompatModePackages.handlePackageAddedLocked(???, bool2);
                }
              }
            }
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        paramBundle2 = AppGlobals.getPackageManager().getApplicationInfo(???, 0, 0);
        localObject1 = this.mBatteryStatsService;
        if (paramBundle2 == null) {
          continue;
        }
        paramInt5 = paramBundle2.versionCode;
        ((BatteryStatsService)localObject1).notePackageInstalled(???, paramInt5);
        if (this.mEmbryoManager.checkBackgroundLevel(this.mLruProcesses)) {
          this.mEmbryoManager.packageInstalled(paramBundle2);
        }
      }
      catch (RemoteException ???)
      {
        label1289:
        boolean bool3;
        label2275:
        int i;
        Object localObject3;
        Object localObject4;
        int k;
        int i1;
        int i3;
        int j;
        continue;
        continue;
        ??? = null;
        continue;
      }
      if (!paramBoolean2) {
        continue;
      }
      if (checkPermission("android.permission.BROADCAST_STICKY", paramInt3, paramInt4) != 0)
      {
        paramProcessRecord = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + paramInt3 + ", uid=" + paramInt4 + " requires " + "android.permission.BROADCAST_STICKY";
        Slog.w(TAG, paramProcessRecord);
        throw new SecurityException(paramProcessRecord);
        if (???.equals("android.intent.action.PACKAGE_DATA_CLEARED"))
        {
          ??? = localIntent.getData();
          if (??? == null) {
            continue;
          }
          ??? = ???.getSchemeSpecificPart();
          if (??? == null) {
            continue;
          }
          if ((this.mUnsupportedDisplaySizeDialog != null) && (???.equals(this.mUnsupportedDisplaySizeDialog.getPackageName())))
          {
            this.mUnsupportedDisplaySizeDialog.dismiss();
            this.mUnsupportedDisplaySizeDialog = null;
          }
          this.mCompatModePackages.handlePackageDataClearedLocked(???);
          continue;
        }
        if (???.equals("android.intent.action.TIMEZONE_CHANGED"))
        {
          this.mHandler.sendEmptyMessage(13);
          continue;
        }
        if (???.equals("android.intent.action.TIME_SET"))
        {
          if (localIntent.getBooleanExtra("android.intent.extra.TIME_PREF_24_HOUR_FORMAT", false))
          {
            paramInt5 = 1;
            this.mHandler.sendMessage(this.mHandler.obtainMessage(41, paramInt5, 0));
          }
        }
        else {
          synchronized (this.mBatteryStatsService.getActiveStatistics())
          {
            ???.noteCurrentTimeChangedLocked();
            continue;
            if (???.equals("android.intent.action.CLEAR_DNS_CACHE"))
            {
              this.mHandler.sendEmptyMessage(28);
              continue;
            }
            if (???.equals("android.intent.action.PROXY_CHANGE"))
            {
              ??? = (ProxyInfo)localIntent.getParcelableExtra("android.intent.extra.PROXY_INFO");
              this.mHandler.sendMessage(this.mHandler.obtainMessage(29, ???));
              continue;
            }
            if (???.equals("android.hardware.action.NEW_PICTURE"))
            {
              Slog.w(TAG, ??? + " no longer allowed; dropping from " + UserHandle.formatUid(paramInt4));
              if (paramIIntentReceiver != null) {
                paramString1 = broadcastQueueForIntent(localIntent);
              }
            }
          }
        }
        try
        {
          paramString1.performReceiveLocked(paramProcessRecord, paramIIntentReceiver, localIntent, 0, null, null, false, false, i2);
          return 0;
          if (???.equals("android.hardware.action.NEW_VIDEO"))
          {
            continue;
            if (???.equals("android.intent.action.UID_REMOVED"))
            {
              ??? = localIntent.getExtras();
              if (??? != null)
              {
                paramInt5 = ???.getInt("android.intent.extra.UID");
                if (paramInt5 < 0) {
                  continue;
                }
                this.mBatteryStatsService.removeUid(paramInt5);
                this.mAppOpsService.uidRemoved(paramInt5);
              }
            }
            else
            {
              if (???.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE"))
              {
                ??? = localIntent.getStringArrayExtra("android.intent.extra.changed_package_list");
                if ((??? == null) || (???.length <= 0)) {
                  continue;
                }
                paramInt5 = 0;
                if (paramInt5 >= ???.length) {
                  continue;
                }
                this.mEmbryoManager.packageChanged(???[paramInt5]);
                forceStopPackageLocked(???[paramInt5], -1, false, true, true, false, false, i2, "storage unmount");
                paramInt5 += 1;
                continue;
              }
              if (???.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE"))
              {
                this.mRecentTasks.cleanupLocked(-1);
                continue;
              }
              if (???.equals("android.intent.action.PACKAGE_REMOVED"))
              {
                paramBundle2 = localIntent.getData();
                if (paramBundle2 == null) {
                  continue;
                }
                paramBundle2 = paramBundle2.getSchemeSpecificPart();
                if (paramBundle2 == null) {
                  continue;
                }
                this.mEmbryoManager.packageChanged(paramBundle2);
                boolean bool5 = "android.intent.action.PACKAGE_REMOVED".equals(???);
                bool3 = localIntent.getBooleanExtra("android.intent.extra.REPLACING", false);
                if (!localIntent.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false)) {
                  continue;
                }
                bool2 = false;
                if ((bool5) && (!bool3)) {
                  continue;
                }
                bool3 = false;
                if (!bool5) {
                  continue;
                }
                if (bool2)
                {
                  paramInt5 = UserHandle.getAppId(localIntent.getIntExtra("android.intent.extra.UID", -1));
                  if (!bool5) {
                    continue;
                  }
                  ??? = "pkg removed";
                  forceStopPackageLocked(paramBundle2, paramInt5, false, true, true, false, bool3, i2, ???);
                }
                if (!bool2) {
                  continue;
                }
                paramInt5 = 0;
                sendPackageBroadcastLocked(paramInt5, new String[] { paramBundle2 }, i2);
                if (bool3)
                {
                  this.mAppOpsService.packageRemoved(localIntent.getIntExtra("android.intent.extra.UID", -1), paramBundle2);
                  removeUriPermissionsForPackageLocked(paramBundle2, i2, true);
                  removeTasksByPackageNameLocked(paramBundle2, i2);
                  if ((this.mUnsupportedDisplaySizeDialog != null) && (paramBundle2.equals(this.mUnsupportedDisplaySizeDialog.getPackageName())))
                  {
                    this.mUnsupportedDisplaySizeDialog.dismiss();
                    this.mUnsupportedDisplaySizeDialog = null;
                  }
                  this.mCompatModePackages.handlePackageUninstalledLocked(paramBundle2);
                  this.mBatteryStatsService.notePackageUninstalled(paramBundle2);
                }
                ??? = this.mHandler.obtainMessage(55004);
                ???.obj = paramBundle2;
                this.mHandler.sendMessage(???);
                continue;
              }
              if (???.equals("android.intent.action.PACKAGE_CHANGED")) {
                continue;
              }
              if (???.equals("android.intent.action.PACKAGES_SUSPENDED"))
              {
                bool2 = "android.intent.action.PACKAGES_SUSPENDED".equals(localIntent.getAction());
                ??? = localIntent.getStringArrayExtra("android.intent.extra.changed_package_list");
                paramInt5 = localIntent.getIntExtra("android.intent.extra.user_handle", 55536);
              }
            }
            try
            {
              boostPriorityForLockedSection();
              this.mRecentTasks.onPackagesSuspendedChanged(???, bool2, paramInt5);
              resetPriorityAfterLockedSection();
            }
            finally
            {
              resetPriorityAfterLockedSection();
            }
            if (???.equals("android.intent.action.PACKAGES_UNSUSPENDED"))
            {
              continue;
              paramInt5 = -1;
              continue;
              this.mRecentTasks.cleanupLocked(-1);
              sendPackageBroadcastLocked(1, ???, i2);
              continue;
              bool2 = true;
              continue;
              bool3 = true;
              continue;
              ??? = "pkg changed";
              continue;
              paramInt5 = 2;
              continue;
              if (bool2) {
                killPackageProcessesLocked(paramBundle2, UserHandle.getAppId(localIntent.getIntExtra("android.intent.extra.UID", -1)), i2, 55536, false, true, true, false, "change " + paramBundle2);
              }
              cleanupDisabledPackageComponentsLocked(paramBundle2, i2, bool2, localIntent.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
              continue;
              tmp2290_2287[0] = paramBundle2;
              sendPackageBroadcastLocked(3, tmp2290_2287, i2);
              continue;
              paramInt5 = 0;
              continue;
              paramInt5 = 0;
              continue;
              paramProcessRecord = finally;
              throw paramProcessRecord;
            }
          }
        }
        catch (RemoteException paramProcessRecord)
        {
          Slog.w(TAG, "Failure [" + paramString1.mQueueName + "] sending broadcast result of " + localIntent, paramProcessRecord);
        }
      }
    }
    if ((paramArrayOfString != null) && (paramArrayOfString.length > 0))
    {
      Slog.w(TAG, "Can't broadcast sticky intent " + localIntent + " and enforce permissions " + Arrays.toString(paramArrayOfString));
      return -1;
    }
    if (localIntent.getComponent() != null) {
      throw new SecurityException("Sticky broadcasts can't target a specific component");
    }
    if (i2 != -1)
    {
      ??? = (ArrayMap)this.mStickyBroadcasts.get(-1);
      if (??? != null)
      {
        ??? = (ArrayList)???.get(localIntent.getAction());
        if (??? != null)
        {
          i = ???.size();
          paramInt5 = 0;
          while (paramInt5 < i)
          {
            if (localIntent.filterEquals((Intent)???.get(paramInt5))) {
              throw new IllegalArgumentException("Sticky broadcast " + localIntent + " for user " + i2 + " conflicts with existing global broadcast");
            }
            paramInt5 += 1;
          }
        }
      }
    }
    paramBundle2 = (ArrayMap)this.mStickyBroadcasts.get(i2);
    ??? = paramBundle2;
    if (paramBundle2 == null)
    {
      ??? = new ArrayMap();
      this.mStickyBroadcasts.put(i2, ???);
    }
    Object localObject1 = (ArrayList)???.get(localIntent.getAction());
    paramBundle2 = (Bundle)localObject1;
    if (localObject1 == null)
    {
      paramBundle2 = new ArrayList();
      ???.put(localIntent.getAction(), paramBundle2);
    }
    i = paramBundle2.size();
    paramInt5 = 0;
    if (paramInt5 < i)
    {
      if (localIntent.filterEquals((Intent)paramBundle2.get(paramInt5))) {
        paramBundle2.set(paramInt5, new Intent(localIntent));
      }
    }
    else
    {
      if (paramInt5 >= i) {
        paramBundle2.add(new Intent(localIntent));
      }
      if (i2 != -1) {
        break label2852;
      }
      localObject3 = this.mUserController.getStartedUserArrayLocked();
      label2740:
      paramBundle2 = null;
      localObject1 = null;
      if ((localIntent.getFlags() & 0x40000000) != 0) {
        break label3940;
      }
      ??? = collectReceiverComponents(localIntent, paramString2, paramInt4, (int[])localObject3);
      if (localIntent.getComponent() != null) {
        break label2939;
      }
      if ((i2 != -1) || (paramInt4 != 2000)) {
        break label2923;
      }
      paramInt5 = 0;
      label2796:
      paramBundle2 = (Bundle)localObject1;
      if (paramInt5 >= localObject3.length) {
        break label2939;
      }
      if (!this.mUserController.hasUserRestriction("no_debugging_features", localObject3[paramInt5])) {
        break label2866;
      }
      paramBundle2 = (Bundle)localObject1;
    }
    for (;;)
    {
      paramInt5 += 1;
      localObject1 = paramBundle2;
      break label2796;
      paramInt5 += 1;
      break;
      label2852:
      localObject3 = new int[1];
      localObject3[0] = i2;
      break label2740;
      label2866:
      localObject4 = this.mReceiverResolver.queryIntent(localIntent, paramString2, false, localObject3[paramInt5]);
      if (localObject1 == null)
      {
        paramBundle2 = (Bundle)localObject4;
      }
      else
      {
        paramBundle2 = (Bundle)localObject1;
        if (localObject4 != null)
        {
          ((List)localObject1).addAll((Collection)localObject4);
          paramBundle2 = (Bundle)localObject1;
        }
      }
    }
    label2923:
    paramBundle2 = this.mReceiverResolver.queryIntent(localIntent, paramString2, false, i2);
    label2939:
    if ((localIntent.getFlags() & 0x20000000) != 0)
    {
      bool2 = true;
      if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
        Slog.v(TAG_BROADCAST, "Enqueing broadcast: " + localIntent.getAction() + " replacePending=" + bool2);
      }
      if (paramBundle2 == null) {
        break label3412;
      }
      paramInt5 = paramBundle2.size();
      label3016:
      localObject3 = paramBundle2;
      k = paramInt5;
      if (!paramBoolean1)
      {
        localObject3 = paramBundle2;
        k = paramInt5;
        if (paramInt5 > 0)
        {
          if (bool1) {
            checkBroadcastFromSystem(localIntent, paramProcessRecord, paramString1, paramInt4, bool4, paramBundle2);
          }
          localObject1 = broadcastQueueForIntent(localIntent);
          paramBundle2 = new BroadcastRecord((BroadcastQueue)localObject1, localIntent, paramProcessRecord, paramString1, paramInt3, paramInt4, paramString2, paramArrayOfString, paramInt2, (BroadcastOptions)localObject2, paramBundle2, paramIIntentReceiver, paramInt1, paramString3, paramBundle1, paramBoolean1, paramBoolean2, false, i2);
          if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG_BROADCAST, "Enqueueing parallel broadcast " + paramBundle2);
          }
          if (!bool2) {
            break label3418;
          }
          bool3 = ((BroadcastQueue)localObject1).replaceParallelBroadcastLocked(paramBundle2);
          label3161:
          if (!bool3)
          {
            ((BroadcastQueue)localObject1).enqueueParallelBroadcastLocked(paramBundle2);
            ((BroadcastQueue)localObject1).scheduleBroadcastsLocked();
          }
          localObject3 = null;
          k = 0;
        }
      }
      paramInt5 = 0;
      i1 = 0;
      if (??? == null) {
        break label3937;
      }
      localObject1 = null;
      if ((!"android.intent.action.PACKAGE_ADDED".equals(localIntent.getAction())) && (!"android.intent.action.PACKAGE_RESTARTED".equals(localIntent.getAction())) && (!"android.intent.action.PACKAGE_DATA_CLEARED".equals(localIntent.getAction()))) {
        break label3424;
      }
      localObject4 = localIntent.getData();
      paramBundle2 = (Bundle)localObject1;
      if (localObject4 != null)
      {
        localObject4 = ((Uri)localObject4).getSchemeSpecificPart();
        paramBundle2 = (Bundle)localObject1;
        if (localObject4 != null)
        {
          paramBundle2 = new String[1];
          paramBundle2[0] = localObject4;
        }
      }
      label3283:
      if ((paramBundle2 == null) || (paramBundle2.length <= 0)) {
        break label3464;
      }
      i = 0;
      i3 = paramBundle2.length;
    }
    for (;;)
    {
      if (i >= i3) {
        break label3464;
      }
      localObject1 = paramBundle2[i];
      if (localObject1 != null)
      {
        j = ???.size();
        paramInt5 = 0;
        for (;;)
        {
          if (paramInt5 < j)
          {
            int m = j;
            int n = paramInt5;
            if (((ResolveInfo)???.get(paramInt5)).activityInfo.packageName.equals(localObject1))
            {
              ???.remove(paramInt5);
              n = paramInt5 - 1;
              m = j - 1;
            }
            paramInt5 = n + 1;
            j = m;
            continue;
            bool2 = false;
            break;
            label3412:
            paramInt5 = 0;
            break label3016;
            label3418:
            bool3 = false;
            break label3161;
            label3424:
            paramBundle2 = (Bundle)localObject1;
            if (!"android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(localIntent.getAction())) {
              break label3283;
            }
            paramBundle2 = localIntent.getStringArrayExtra("android.intent.extra.changed_package_list");
            break label3283;
          }
        }
      }
      i += 1;
    }
    label3464:
    if (??? != null)
    {
      j = ???.size();
      i = 0;
      localObject1 = null;
      paramBundle2 = null;
      paramInt5 = i1;
    }
    for (;;)
    {
      if ((i < j) && (paramInt5 < k))
      {
        localObject4 = localObject1;
        if (localObject1 == null) {
          localObject4 = (ResolveInfo)???.get(i);
        }
        localObject1 = paramBundle2;
        if (paramBundle2 == null) {
          localObject1 = (BroadcastFilter)((List)localObject3).get(paramInt5);
        }
        if (((BroadcastFilter)localObject1).getPriority() < ((ResolveInfo)localObject4).priority) {
          break label3657;
        }
        ???.add(i, localObject1);
        paramInt5 += 1;
        paramBundle2 = null;
        i += 1;
        j += 1;
        localObject1 = localObject4;
        continue;
        j = 0;
        break;
      }
      while (paramInt5 < k)
      {
        paramBundle2 = ???;
        if (??? == null) {
          paramBundle2 = new ArrayList();
        }
        paramBundle2.add(((List)localObject3).get(paramInt5));
        paramInt5 += 1;
        ??? = paramBundle2;
      }
      label3657:
      i += 1;
      localObject4 = null;
      paramBundle2 = (Bundle)localObject1;
      localObject1 = localObject4;
    }
    if (bool1) {
      checkBroadcastFromSystem(localIntent, paramProcessRecord, paramString1, paramInt4, bool4, ???);
    }
    if ((??? != null) && (???.size() > 0))
    {
      paramBundle2 = broadcastQueueForIntent(localIntent);
      paramProcessRecord = new BroadcastRecord(paramBundle2, localIntent, paramProcessRecord, paramString1, paramInt3, paramInt4, paramString2, paramArrayOfString, paramInt2, (BroadcastOptions)localObject2, ???, paramIIntentReceiver, paramInt1, paramString3, paramBundle1, paramBoolean1, paramBoolean2, false, i2);
      if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
        Slog.v(TAG_BROADCAST, "Enqueueing ordered broadcast " + paramProcessRecord + ": prev had " + paramBundle2.mOrderedBroadcasts.size());
      }
      if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
        Slog.i(TAG_BROADCAST, "Enqueueing broadcast " + paramProcessRecord.intent.getAction());
      }
      if (!bool2) {
        break label3927;
      }
    }
    label3927:
    for (paramBoolean1 = paramBundle2.replaceOrderedBroadcastLocked(paramProcessRecord);; paramBoolean1 = false)
    {
      if (!paramBoolean1)
      {
        paramBundle2.enqueueOrderedBroadcastLocked(paramProcessRecord);
        paramBundle2.scheduleBroadcastsLocked();
      }
      for (;;)
      {
        return 0;
        if (paramIIntentReceiver != null) {
          break;
        }
        if ((localIntent.getComponent() == null) && (localIntent.getPackage() == null) && ((localIntent.getFlags() & 0x40000000) == 0)) {
          addBroadcastStatLocked(localIntent.getAction(), paramString1, 0, 0, 0L);
        }
      }
    }
  }
  
  BroadcastQueue broadcastQueueForIntent(Intent paramIntent)
  {
    int i;
    String str;
    StringBuilder localStringBuilder;
    if ((paramIntent.getFlags() & 0x10000000) != 0)
    {
      i = 1;
      if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND)
      {
        str = TAG_BROADCAST;
        localStringBuilder = new StringBuilder().append("Broadcast intent ").append(paramIntent).append(" on ");
        if (i == 0) {
          break label90;
        }
      }
    }
    label90:
    for (paramIntent = "foreground";; paramIntent = "background")
    {
      Slog.i(str, paramIntent + " queue");
      if (i == 0) {
        break label97;
      }
      return this.mFgBroadcastQueue;
      i = 0;
      break;
    }
    label97:
    return this.mBgBroadcastQueue;
  }
  
  ReceiverRecord broadcastRecordForNotOrderReceiverLocked(IBinder paramIBinder, int paramInt)
  {
    BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
    int i = 0;
    int j = arrayOfBroadcastQueue.length;
    while (i < j)
    {
      ReceiverRecord localReceiverRecord = arrayOfBroadcastQueue[i].getMatchingNotOrderedReceiver(paramIBinder, paramInt);
      if (localReceiverRecord != null) {
        return localReceiverRecord;
      }
      i += 1;
    }
    return null;
  }
  
  public boolean canBypassWorkChallenge(PendingIntent paramPendingIntent)
    throws RemoteException
  {
    boolean bool2 = false;
    int i = paramPendingIntent.getCreatorUserHandle().getIdentifier();
    if (!this.mUserController.isUserRunningLocked(i, 2)) {
      return false;
    }
    paramPendingIntent = paramPendingIntent.getTarget();
    if (!(paramPendingIntent instanceof PendingIntentRecord)) {
      return false;
    }
    paramPendingIntent = (PendingIntentRecord)paramPendingIntent;
    paramPendingIntent = this.mStackSupervisor.resolveIntent(paramPendingIntent.key.requestIntent, paramPendingIntent.key.requestResolvedType, i, 524288);
    boolean bool1 = bool2;
    if (paramPendingIntent != null)
    {
      bool1 = bool2;
      if (paramPendingIntent.activityInfo != null) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public boolean canShowErrorDialogs()
  {
    if ((!this.mShowDialogs) || (this.mSleeping)) {}
    while ((this.mShuttingDown) || (this.mLockScreenShown == 2)) {
      return false;
    }
    return true;
  }
  
  public void cancelIntentSender(IIntentSender paramIIntentSender)
  {
    if (!(paramIIntentSender instanceof PendingIntentRecord)) {
      return;
    }
    try
    {
      boostPriorityForLockedSection();
      paramIIntentSender = (PendingIntentRecord)paramIIntentSender;
      try
      {
        if (!UserHandle.isSameApp(AppGlobals.getPackageManager().getPackageUid(paramIIntentSender.key.packageName, 268435456, UserHandle.getCallingUserId()), Binder.getCallingUid()))
        {
          paramIIntentSender = "Permission Denial: cancelIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " is not allowed to cancel packges " + paramIIntentSender.key.packageName;
          Slog.w(TAG, paramIIntentSender);
          throw new SecurityException(paramIIntentSender);
        }
      }
      catch (RemoteException paramIIntentSender)
      {
        throw new SecurityException(paramIIntentSender);
      }
      cancelIntentSenderLocked(paramIIntentSender, true);
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    resetPriorityAfterLockedSection();
  }
  
  void cancelIntentSenderLocked(PendingIntentRecord paramPendingIntentRecord, boolean paramBoolean)
  {
    paramPendingIntentRecord.canceled = true;
    this.mIntentSenderRecords.remove(paramPendingIntentRecord.key);
    if ((paramBoolean) && (paramPendingIntentRecord.key.activity != null)) {
      paramPendingIntentRecord.key.activity.pendingResults.remove(paramPendingIntentRecord.ref);
    }
  }
  
  int checkAllowBackgroundLocked(int paramInt1, String paramString, int paramInt2, boolean paramBoolean)
  {
    ??? = (UidRecord)this.mActiveUids.get(paramInt1);
    if (!this.mLenientBackgroundCheck)
    {
      if ((!paramBoolean) || (??? == null)) {}
      while (((UidRecord)???).curProcState >= 7)
      {
        if (this.mAppOpsService.noteOperation(64, paramInt1, paramString) == 0) {
          break;
        }
        return 1;
      }
    }
    do
    {
      do
      {
        return 0;
      } while ((??? != null) && (!((UidRecord)???).idle));
      if (paramInt2 >= 0) {
        synchronized (this.mPidsSelfLocked)
        {
          ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramInt2);
          if ((localProcessRecord != null) && (localProcessRecord.curProcState < 11)) {
            return 0;
          }
        }
      }
    } while (this.mAppOpsService.noteOperation(64, paramInt1, paramString) == 0);
    return 1;
  }
  
  boolean checkAppInLaunchingProvidersLocked(ProcessRecord paramProcessRecord)
  {
    int i = this.mLaunchingProviders.size() - 1;
    while (i >= 0)
    {
      if (((ContentProviderRecord)this.mLaunchingProviders.get(i)).launchingApp == paramProcessRecord) {
        return true;
      }
      i -= 1;
    }
    return false;
  }
  
  boolean checkAppSwitchAllowedLocked(int paramInt1, int paramInt2, int paramInt3, int paramInt4, String paramString)
  {
    if (this.mAppSwitchesAllowedTime < SystemClock.uptimeMillis()) {
      return true;
    }
    if (checkComponentPermission("android.permission.STOP_APP_SWITCHES", paramInt1, paramInt2, -1, true) == 0) {
      return true;
    }
    if ((paramInt4 != -1) && (paramInt4 != paramInt2) && (checkComponentPermission("android.permission.STOP_APP_SWITCHES", paramInt3, paramInt4, -1, true) == 0)) {
      return true;
    }
    Slog.w(TAG, paramString + " request from " + paramInt2 + " stopped");
    return false;
  }
  
  boolean checkAuthorityGrants(int paramInt1, ProviderInfo paramProviderInfo, int paramInt2, boolean paramBoolean)
  {
    ArrayMap localArrayMap = (ArrayMap)this.mGrantedUriPermissions.get(paramInt1);
    if (localArrayMap != null)
    {
      paramInt1 = localArrayMap.size() - 1;
      if (paramInt1 >= 0)
      {
        GrantUri localGrantUri = (GrantUri)localArrayMap.keyAt(paramInt1);
        if ((localGrantUri.sourceUserId != paramInt2) && (paramBoolean)) {}
        while (!matchesProvider(localGrantUri.uri, paramProviderInfo))
        {
          paramInt1 -= 1;
          break;
        }
        return true;
      }
    }
    return false;
  }
  
  int checkCallingPermission(String paramString)
  {
    return checkPermission(paramString, Binder.getCallingPid(), UserHandle.getAppId(Binder.getCallingUid()));
  }
  
  int checkComponentPermission(String paramString, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
  {
    if (paramInt1 == MY_PID) {
      return 0;
    }
    return ActivityManager.checkComponentPermission(paramString, paramInt2, paramInt3, paramBoolean);
  }
  
  public String checkContentProviderAccess(String paramString, int paramInt)
  {
    int i = paramInt;
    if (paramInt == -1)
    {
      this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", TAG);
      i = UserHandle.getCallingUserId();
    }
    ??? = null;
    try
    {
      paramString = AppGlobals.getPackageManager().resolveContentProvider(paramString, 789504, i);
      if (paramString == null) {
        return null;
      }
      ProcessRecord localProcessRecord;
      synchronized (this.mPidsSelfLocked)
      {
        localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(Binder.getCallingPid());
        if (localProcessRecord == null) {
          return "Failed to find PID " + Binder.getCallingPid();
        }
      }
      try
      {
        boostPriorityForLockedSection();
        paramString = checkContentProviderPermissionLocked(paramString, localProcessRecord, i, true);
        return paramString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
    catch (RemoteException paramString)
    {
      for (;;)
      {
        paramString = ???;
      }
    }
  }
  
  final void checkExcessivePowerUsageLocked(boolean paramBoolean)
  {
    updateCpuStatsNow();
    BatteryStatsImpl localBatteryStatsImpl = this.mBatteryStatsService.getActiveStatistics();
    if (this.mLastPowerCheckRealtime == 0L) {
      paramBoolean = false;
    }
    if (localBatteryStatsImpl.isScreenOn()) {
      paramBoolean = false;
    }
    long l1 = SystemClock.elapsedRealtime();
    long l2 = l1 - this.mLastPowerCheckRealtime;
    long l3 = SystemClock.uptimeMillis();
    long l4 = this.mLastPowerCheckUptime;
    this.mLastPowerCheckRealtime = l1;
    this.mLastPowerCheckUptime = l3;
    if (l2 < WAKE_LOCK_MIN_CHECK_DURATION) {
      paramBoolean = false;
    }
    int i = this.mLruProcesses.size();
    while (i > 0)
    {
      int j = i - 1;
      ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(j);
      i = j;
      if (localProcessRecord.setProcState >= 12) {
        try
        {
          l3 = localBatteryStatsImpl.getProcessWakeTime(localProcessRecord.info.uid, localProcessRecord.pid, l1);
          l4 = l3 - localProcessRecord.lastWakeTime;
          if (ActivityManagerDebugConfig.DEBUG_POWER)
          {
            StringBuilder localStringBuilder = new StringBuilder(128);
            localStringBuilder.append("Wake for ");
            localProcessRecord.toShortString(localStringBuilder);
            localStringBuilder.append(": over ");
            TimeUtils.formatDuration(l2, localStringBuilder);
            localStringBuilder.append(" used ");
            TimeUtils.formatDuration(l4, localStringBuilder);
            localStringBuilder.append(" (");
            localStringBuilder.append(100L * l4 / l2);
            localStringBuilder.append("%)");
            Slog.i(TAG_POWER, localStringBuilder.toString());
          }
          if ((!paramBoolean) || (l2 <= 0L) || (100L * l4 / l2 < 50L)) {}
        }
        finally
        {
          try
          {
            localBatteryStatsImpl.reportExcessiveWakeLocked(localProcessRecord.info.uid, localProcessRecord.processName, l2, l4);
            localProcessRecord.kill("excessive wake held " + l4 + " during " + l2, true);
            if (localProcessRecord.baseProcessTracker == null) {
              break label408;
            }
            localProcessRecord.baseProcessTracker.reportExcessiveWake(localProcessRecord.pkgList);
            i = j;
            continue;
          }
          finally {}
          localObject1 = finally;
          throw ((Throwable)localObject1);
          label408:
          Slog.d(TAG, "ProcessState is null when reportExcessiveWake : " + ((ProcessRecord)localObject2).processName + ", pid : " + ((ProcessRecord)localObject2).pid);
          i = j;
          continue;
          ((ProcessRecord)localObject2).lastWakeTime = l3;
          i = j;
        }
      }
    }
  }
  
  public int checkGrantUriPermission(int paramInt1, String paramString, Uri paramUri, int paramInt2, int paramInt3)
  {
    enforceNotIsolatedCaller("checkGrantUriPermission");
    try
    {
      boostPriorityForLockedSection();
      paramInt1 = checkGrantUriPermissionLocked(paramInt1, paramString, new GrantUri(paramInt3, paramUri, false), paramInt2, -1);
      return paramInt1;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  NeededUriGrants checkGrantUriPermissionFromIntentLocked(int paramInt1, String paramString, Intent paramIntent, int paramInt2, NeededUriGrants paramNeededUriGrants, int paramInt3)
  {
    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION)
    {
      localObject2 = TAG_URI_PERMISSION;
      StringBuilder localStringBuilder = new StringBuilder().append("Checking URI perm to data=");
      if (paramIntent == null) {
        break label129;
      }
      localObject1 = paramIntent.getData();
      localStringBuilder = localStringBuilder.append(localObject1).append(" clip=");
      if (paramIntent == null) {
        break label135;
      }
      localObject1 = paramIntent.getClipData();
      label61:
      localObject1 = localStringBuilder.append(localObject1).append(" from ").append(paramIntent).append("; flags=0x");
      if (paramIntent == null) {
        break label141;
      }
    }
    label129:
    label135:
    label141:
    for (int i = paramIntent.getFlags();; i = 0)
    {
      Slog.v((String)localObject2, Integer.toHexString(i));
      if (paramString != null) {
        break label147;
      }
      throw new NullPointerException("targetPkg");
      localObject1 = null;
      break;
      localObject1 = null;
      break label61;
    }
    label147:
    if (paramIntent == null) {
      return null;
    }
    Object localObject1 = paramIntent.getData();
    Object localObject2 = paramIntent.getClipData();
    if ((localObject1 == null) && (localObject2 == null)) {
      return null;
    }
    i = paramIntent.getContentUserHint();
    int k = i;
    if (i == -2) {
      k = UserHandle.getUserId(paramInt1);
    }
    paramIntent = AppGlobals.getPackageManager();
    int j;
    int m;
    if (paramNeededUriGrants != null)
    {
      j = paramNeededUriGrants.targetUid;
      i = j;
      paramIntent = paramNeededUriGrants;
      if (localObject1 != null)
      {
        localObject1 = GrantUri.resolve(k, (Uri)localObject1);
        j = checkGrantUriPermissionLocked(paramInt1, paramString, (GrantUri)localObject1, paramInt2, j);
        i = j;
        paramIntent = paramNeededUriGrants;
        if (j > 0)
        {
          paramIntent = paramNeededUriGrants;
          if (paramNeededUriGrants == null) {
            paramIntent = new NeededUriGrants(paramString, j, paramInt2);
          }
          paramIntent.add(localObject1);
          i = j;
        }
      }
      paramNeededUriGrants = paramIntent;
      if (localObject2 == null) {
        break label558;
      }
      j = 0;
      m = i;
      label310:
      paramNeededUriGrants = paramIntent;
      if (j >= ((ClipData)localObject2).getItemCount()) {
        break label558;
      }
      paramNeededUriGrants = ((ClipData)localObject2).getItemAt(j).getUri();
      if (paramNeededUriGrants == null) {
        break label496;
      }
      localObject1 = GrantUri.resolve(k, paramNeededUriGrants);
      m = checkGrantUriPermissionLocked(paramInt1, paramString, (GrantUri)localObject1, paramInt2, m);
      i = m;
      paramNeededUriGrants = paramIntent;
      if (m > 0)
      {
        paramNeededUriGrants = paramIntent;
        if (paramIntent == null) {
          paramNeededUriGrants = new NeededUriGrants(paramString, m, paramInt2);
        }
        paramNeededUriGrants.add(localObject1);
        i = m;
      }
    }
    for (;;)
    {
      j += 1;
      m = i;
      paramIntent = paramNeededUriGrants;
      break label310;
      try
      {
        i = paramIntent.getPackageUid(paramString, 268435456, paramInt3);
        j = i;
        if (i >= 0) {
          break;
        }
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
          Slog.v(TAG_URI_PERMISSION, "Can't grant URI permission no uid for: " + paramString + " on user " + paramInt3);
        }
        return null;
      }
      catch (RemoteException paramString)
      {
        return null;
      }
      label496:
      localObject1 = ((ClipData)localObject2).getItemAt(j).getIntent();
      i = m;
      paramNeededUriGrants = paramIntent;
      if (localObject1 != null)
      {
        localObject1 = checkGrantUriPermissionFromIntentLocked(paramInt1, paramString, (Intent)localObject1, paramInt2, paramIntent, paramInt3);
        i = m;
        paramNeededUriGrants = paramIntent;
        if (localObject1 != null)
        {
          paramNeededUriGrants = (NeededUriGrants)localObject1;
          i = m;
        }
      }
    }
    label558:
    return paramNeededUriGrants;
  }
  
  int checkGrantUriPermissionLocked(int paramInt1, String paramString, GrantUri paramGrantUri, int paramInt2, int paramInt3)
  {
    if (!Intent.isAccessUriMode(paramInt2)) {
      return -1;
    }
    if ((paramString != null) && (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION)) {
      Slog.v(TAG_URI_PERMISSION, "Checking grant " + paramString + " permission to " + paramGrantUri);
    }
    IPackageManager localIPackageManager = AppGlobals.getPackageManager();
    if (!"content".equals(paramGrantUri.uri.getScheme()))
    {
      if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
        Slog.v(TAG_URI_PERMISSION, "Can't grant URI permission for non-content URI: " + paramGrantUri);
      }
      return -1;
    }
    ProviderInfo localProviderInfo = getProviderInfoLocked(paramGrantUri.uri.getAuthority(), paramGrantUri.sourceUserId, 268435456);
    if (localProviderInfo == null)
    {
      Slog.w(TAG, "No content provider found for permission check: " + paramGrantUri.uri.toSafeString());
      return -1;
    }
    int j = paramInt3;
    int i = j;
    if (paramInt3 < 0)
    {
      i = j;
      if (paramString != null) {
        try
        {
          paramInt3 = localIPackageManager.getPackageUid(paramString, 268435456, UserHandle.getUserId(paramInt1));
          i = paramInt3;
          if (paramInt3 < 0)
          {
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
              Slog.v(TAG_URI_PERMISSION, "Can't grant URI permission no uid for: " + paramString);
            }
            return -1;
          }
        }
        catch (RemoteException paramString)
        {
          return -1;
        }
      }
    }
    boolean bool1;
    if (i >= 0)
    {
      if (checkHoldingPermissionsLocked(localIPackageManager, localProviderInfo, paramGrantUri, i, paramInt2))
      {
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
          Slog.v(TAG_URI_PERMISSION, "Target " + paramString + " already has full permission to " + paramGrantUri);
        }
        return -1;
      }
    }
    else
    {
      boolean bool2 = localProviderInfo.exported;
      bool1 = bool2;
      if ((paramInt2 & 0x1) != 0)
      {
        bool1 = bool2;
        if (localProviderInfo.readPermission != null) {
          bool1 = false;
        }
      }
      bool2 = bool1;
      if ((paramInt2 & 0x2) != 0)
      {
        bool2 = bool1;
        if (localProviderInfo.writePermission != null) {
          bool2 = false;
        }
      }
      if (bool2) {
        return -1;
      }
    }
    if (UserHandle.getUserId(i) != paramGrantUri.sourceUserId) {
      bool1 = checkHoldingPermissionsInternalLocked(localIPackageManager, localProviderInfo, paramGrantUri, paramInt1, paramInt2, false);
    }
    while (!bool1) {
      if (!localProviderInfo.grantUriPermissions)
      {
        throw new SecurityException("Provider " + localProviderInfo.packageName + "/" + localProviderInfo.name + " does not allow granting of Uri permissions (uri " + paramGrantUri + ")");
        bool1 = false;
      }
      else if (localProviderInfo.uriPermissionPatterns != null)
      {
        int m = localProviderInfo.uriPermissionPatterns.length;
        int k = 0;
        paramInt3 = 0;
        for (;;)
        {
          j = k;
          if (paramInt3 < m)
          {
            if ((localProviderInfo.uriPermissionPatterns[paramInt3] != null) && (localProviderInfo.uriPermissionPatterns[paramInt3].match(paramGrantUri.uri.getPath()))) {
              j = 1;
            }
          }
          else
          {
            if (j != 0) {
              break;
            }
            throw new SecurityException("Provider " + localProviderInfo.packageName + "/" + localProviderInfo.name + " does not allow granting of permission to path of Uri " + paramGrantUri);
          }
          paramInt3 += 1;
        }
      }
    }
    if ((UserHandle.getAppId(paramInt1) != 1000) && (!checkHoldingPermissionsLocked(localIPackageManager, localProviderInfo, paramGrantUri, paramInt1, paramInt2)) && (!checkUriPermissionLocked(paramGrantUri, paramInt1, paramInt2))) {
      throw new SecurityException("Uid " + paramInt1 + " does not have permission to uri " + paramGrantUri);
    }
    return i;
  }
  
  public int checkPermission(String paramString, int paramInt1, int paramInt2)
  {
    if (paramString == null) {
      return -1;
    }
    return checkComponentPermission(paramString, paramInt1, paramInt2, -1, true);
  }
  
  public int checkPermissionWithToken(String paramString, int paramInt1, int paramInt2, IBinder paramIBinder)
  {
    if (paramString == null) {
      return -1;
    }
    Identity localIdentity = (Identity)sCallerIdentity.get();
    int j = paramInt1;
    int i = paramInt2;
    if (localIdentity != null)
    {
      j = paramInt1;
      i = paramInt2;
      if (localIdentity.token == paramIBinder)
      {
        Slog.d(TAG, "checkComponentPermission() adjusting {pid,uid} to {" + localIdentity.pid + "," + localIdentity.uid + "}");
        i = localIdentity.uid;
        j = localIdentity.pid;
      }
    }
    return checkComponentPermission(paramString, j, i, -1, true);
  }
  
  /* Error */
  public int checkUriPermission(Uri paramUri, int paramInt1, int paramInt2, int paramInt3, int paramInt4, IBinder paramIBinder)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore 9
    //   3: aload_0
    //   4: ldc_w 7287
    //   7: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   10: getstatic 1277	com/android/server/am/ActivityManagerService:sCallerIdentity	Ljava/lang/ThreadLocal;
    //   13: invokevirtual 3041	java/lang/ThreadLocal:get	()Ljava/lang/Object;
    //   16: checkcast 115	com/android/server/am/ActivityManagerService$Identity
    //   19: astore 11
    //   21: iload_2
    //   22: istore 8
    //   24: iload_3
    //   25: istore 7
    //   27: aload 11
    //   29: ifnull +33 -> 62
    //   32: iload_2
    //   33: istore 8
    //   35: iload_3
    //   36: istore 7
    //   38: aload 11
    //   40: getfield 7280	com/android/server/am/ActivityManagerService$Identity:token	Landroid/os/IBinder;
    //   43: aload 6
    //   45: if_acmpne +17 -> 62
    //   48: aload 11
    //   50: getfield 7284	com/android/server/am/ActivityManagerService$Identity:uid	I
    //   53: istore 7
    //   55: aload 11
    //   57: getfield 7283	com/android/server/am/ActivityManagerService$Identity:pid	I
    //   60: istore 8
    //   62: iload 8
    //   64: getstatic 1232	com/android/server/am/ActivityManagerService:MY_PID	I
    //   67: if_icmpne +5 -> 72
    //   70: iconst_0
    //   71: ireturn
    //   72: aload_0
    //   73: monitorenter
    //   74: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   77: aload_0
    //   78: new 109	com/android/server/am/ActivityManagerService$GrantUri
    //   81: dup
    //   82: iload 5
    //   84: aload_1
    //   85: iconst_0
    //   86: invokespecial 5429	com/android/server/am/ActivityManagerService$GrantUri:<init>	(ILandroid/net/Uri;Z)V
    //   89: iload 7
    //   91: iload 4
    //   93: invokespecial 7271	com/android/server/am/ActivityManagerService:checkUriPermissionLocked	(Lcom/android/server/am/ActivityManagerService$GrantUri;II)Z
    //   96: istore 10
    //   98: iload 10
    //   100: ifeq +13 -> 113
    //   103: iload 9
    //   105: istore_2
    //   106: aload_0
    //   107: monitorexit
    //   108: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   111: iload_2
    //   112: ireturn
    //   113: iconst_m1
    //   114: istore_2
    //   115: goto -9 -> 106
    //   118: astore_1
    //   119: aload_0
    //   120: monitorexit
    //   121: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   124: aload_1
    //   125: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	126	0	this	ActivityManagerService
    //   0	126	1	paramUri	Uri
    //   0	126	2	paramInt1	int
    //   0	126	3	paramInt2	int
    //   0	126	4	paramInt3	int
    //   0	126	5	paramInt4	int
    //   0	126	6	paramIBinder	IBinder
    //   25	65	7	i	int
    //   22	46	8	j	int
    //   1	103	9	k	int
    //   96	3	10	bool	boolean
    //   19	37	11	localIdentity	Identity
    // Exception table:
    //   from	to	target	type
    //   74	98	118	finally
  }
  
  boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord paramProcessRecord, boolean paramBoolean)
  {
    boolean bool1 = false;
    int i = this.mLaunchingProviders.size() - 1;
    if (i >= 0)
    {
      ContentProviderRecord localContentProviderRecord = (ContentProviderRecord)this.mLaunchingProviders.get(i);
      boolean bool2 = bool1;
      if (localContentProviderRecord.launchingApp == paramProcessRecord)
      {
        if ((!paramBoolean) && (!paramProcessRecord.bad)) {
          break label78;
        }
        label54:
        removeDyingProviderLocked(paramProcessRecord, localContentProviderRecord, true);
      }
      for (bool2 = bool1;; bool2 = true)
      {
        i -= 1;
        bool1 = bool2;
        break;
        label78:
        if (!localContentProviderRecord.hasConnectionOrHandle()) {
          break label54;
        }
      }
    }
    return bool1;
  }
  
  public void cleanupProcesses(long paramLong)
  {
    try
    {
      int k = this.mProcessNames.getMap().size();
      int i = 0;
      while (i < k)
      {
        SparseArray localSparseArray = (SparseArray)this.mProcessNames.getMap().valueAt(i);
        if (localSparseArray != null)
        {
          int m = localSparseArray.size();
          int j = 0;
          while (j < m)
          {
            ProcessRecord localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
            if (isProcShouldBeKilled(localProcessRecord, paramLong))
            {
              Slog.v(TAG, "CleanupProcesses, killProcessQuiet!, timeout = " + paramLong + ", app = " + localProcessRecord);
              Process.killProcessQuiet(localProcessRecord.pid);
            }
            j += 1;
          }
        }
        i += 1;
      }
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public boolean clearApplicationUserData(String paramString, final IPackageDataObserver paramIPackageDataObserver, final int paramInt)
  {
    enforceNotIsolatedCaller("clearApplicationUserData");
    int k = Binder.getCallingUid();
    int m = Binder.getCallingPid();
    final int j = this.mUserController.handleIncomingUser(m, k, paramInt, false, 2, "clearApplicationUserData", null);
    long l = Binder.clearCallingIdentity();
    IPackageManager localIPackageManager;
    try
    {
      localIPackageManager = AppGlobals.getPackageManager();
      paramInt = -1;
      try
      {
        boostPriorityForLockedSection();
        if (getPackageManagerInternalLocked().isPackageDataProtected(j, paramString)) {
          throw new SecurityException("Cannot clear data for a protected package: " + paramString);
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      try
      {
        i = localIPackageManager.getPackageUid(paramString, 8192, j);
        paramInt = i;
      }
      catch (RemoteException localRemoteException)
      {
        try
        {
          paramIPackageDataObserver.onRemoveCompleted(paramString, false);
          resetPriorityAfterLockedSection();
          return false;
          localRemoteException = localRemoteException;
        }
        catch (RemoteException paramString)
        {
          for (;;)
          {
            Slog.i(TAG, "Observer no longer exists.");
          }
        }
        if (k == paramInt) {
          break label226;
        }
      }
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    int i;
    if (paramInt == -1)
    {
      Slog.w(TAG, "Invalid packageName: " + paramString);
      if (paramIPackageDataObserver == null) {}
    }
    if (checkComponentPermission("android.permission.CLEAR_APP_USER_DATA", m, k, -1, true) == 0)
    {
      label226:
      forceStopPackageLocked(paramString, paramInt, "clear data");
      i = this.mRecentTasks.size() - 1;
    }
    for (;;)
    {
      if (i >= 0)
      {
        TaskRecord localTaskRecord = (TaskRecord)this.mRecentTasks.get(i);
        String str = localTaskRecord.getBaseIntent().getComponent().getPackageName();
        if (localTaskRecord.userId != j)
        {
          break label458;
          throw new SecurityException("PID " + m + " does not have permission " + "android.permission.CLEAR_APP_USER_DATA" + " to clear data" + " of package " + paramString);
        }
        else if (str.equals(paramString))
        {
          removeTaskByIdLocked(localTaskRecord.taskId, false, true);
        }
      }
      else
      {
        resetPriorityAfterLockedSection();
        paramIPackageDataObserver = new IPackageDataObserver.Stub()
        {
          public void onRemoveCompleted(String paramAnonymousString, boolean paramAnonymousBoolean)
            throws RemoteException
          {
            synchronized (ActivityManagerService.this)
            {
              ActivityManagerService.boostPriorityForLockedSection();
              ActivityManagerService.-wrap10(ActivityManagerService.this, paramAnonymousString, paramInt);
              ActivityManagerService.resetPriorityAfterLockedSection();
              ??? = new Intent("android.intent.action.PACKAGE_DATA_CLEARED", Uri.fromParts("package", paramAnonymousString, null));
              ((Intent)???).putExtra("android.intent.extra.UID", paramInt);
              ((Intent)???).putExtra("android.intent.extra.user_handle", UserHandle.getUserId(paramInt));
              ActivityManagerService.this.broadcastIntentInPackage("android", 1000, (Intent)???, null, null, 0, null, null, null, null, false, false, j);
              if (paramIPackageDataObserver != null) {
                paramIPackageDataObserver.onRemoveCompleted(paramAnonymousString, paramAnonymousBoolean);
              }
              return;
            }
          }
        };
        for (;;)
        {
          try
          {
            localIPackageManager.clearApplicationUserData(paramString, paramIPackageDataObserver, j);
          }
          catch (RemoteException paramString)
          {
            continue;
          }
          try
          {
            boostPriorityForLockedSection();
            removeUriPermissionsForPackageLocked(paramString, j, true);
            resetPriorityAfterLockedSection();
            paramIPackageDataObserver = NotificationManager.getService();
            paramIPackageDataObserver.removeAutomaticZenRules(paramString);
            paramIPackageDataObserver.setNotificationPolicyAccessGranted(paramString, false);
            Binder.restoreCallingIdentity(l);
            return true;
          }
          finally
          {
            resetPriorityAfterLockedSection();
          }
        }
      }
      label458:
      i -= 1;
    }
  }
  
  final boolean clearBroadcastQueueForUserLocked(int paramInt)
  {
    boolean bool = false;
    int i = this.mBroadcastQueues.length - 1;
    while (i >= 0)
    {
      bool |= this.mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(null, null, paramInt, true);
      i -= 1;
    }
    return bool;
  }
  
  public void clearGrantedUriPermissions(String paramString, int paramInt)
  {
    enforceCallingPermission("android.permission.CLEAR_APP_GRANTED_URI_PERMISSIONS", "clearGrantedUriPermissions");
    removeUriPermissionsForPackageLocked(paramString, paramInt, true);
  }
  
  public void clearPendingBackup()
  {
    if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
      Slog.v(TAG_BACKUP, "clearPendingBackup");
    }
    enforceCallingPermission("android.permission.BACKUP", "clearPendingBackup");
    try
    {
      boostPriorityForLockedSection();
      this.mBackupTarget = null;
      this.mBackupAppName = null;
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void closeSystemDialogs(String paramString)
  {
    enforceNotIsolatedCaller("closeSystemDialogs");
    int i = Binder.getCallingPid();
    int j = Binder.getCallingUid();
    long l = Binder.clearCallingIdentity();
    try
    {
      try
      {
        boostPriorityForLockedSection();
        if (j >= 10000)
        {
          synchronized (this.mPidsSelfLocked)
          {
            ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(i);
            if (localProcessRecord.curRawAdj <= 200) {
              break label139;
            }
            Slog.w(TAG, "Ignoring closeSystemDialogs " + paramString + " from background process " + localProcessRecord);
            resetPriorityAfterLockedSection();
            return;
          }
          paramString = finally;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      closeSystemDialogsLocked(paramString);
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    label139:
    resetPriorityAfterLockedSection();
    Binder.restoreCallingIdentity(l);
  }
  
  void closeSystemDialogsLocked(String paramString)
  {
    Intent localIntent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
    localIntent.addFlags(1342177280);
    if (paramString != null) {
      localIntent.putExtra("reason", paramString);
    }
    this.mWindowManager.closeSystemDialogs(paramString);
    this.mStackSupervisor.closeSystemDialogsLocked();
    broadcastIntentLocked(null, null, localIntent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, -1);
  }
  
  ArrayList<ProcessRecord> collectProcesses(PrintWriter paramPrintWriter, int paramInt, boolean paramBoolean, String[] paramArrayOfString)
  {
    try
    {
      boostPriorityForLockedSection();
      if ((paramArrayOfString != null) && (paramArrayOfString.length > paramInt) && (paramArrayOfString[paramInt].charAt(0) != '-'))
      {
        paramPrintWriter = new ArrayList();
        i = -1;
      }
    }
    finally
    {
      int i;
      label54:
      label65:
      resetPriorityAfterLockedSection();
    }
    try
    {
      j = Integer.parseInt(paramArrayOfString[paramInt]);
      i = j;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      break label54;
      j -= 1;
      break label65;
    }
    j = this.mLruProcesses.size() - 1;
    if (j >= 0)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(j);
      if (localProcessRecord.pid == i) {
        paramPrintWriter.add(localProcessRecord);
      } else if ((paramBoolean) && (localProcessRecord.pkgList != null) && (localProcessRecord.pkgList.containsKey(paramArrayOfString[paramInt]))) {
        paramPrintWriter.add(localProcessRecord);
      } else if (localProcessRecord.processName.equals(paramArrayOfString[paramInt])) {
        paramPrintWriter.add(localProcessRecord);
      }
    }
    else
    {
      paramInt = paramPrintWriter.size();
      if (paramInt <= 0)
      {
        resetPriorityAfterLockedSection();
        return null;
        paramPrintWriter = new ArrayList(this.mLruProcesses);
      }
      resetPriorityAfterLockedSection();
      return paramPrintWriter;
    }
  }
  
  CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo paramApplicationInfo)
  {
    return this.mCompatModePackages.compatibilityInfoForPackageLocked(paramApplicationInfo);
  }
  
  /* Error */
  public boolean convertFromTranslucent(IBinder paramIBinder)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore_2
    //   4: aload_0
    //   5: monitorenter
    //   6: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   9: aload_1
    //   10: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   13: astore 5
    //   15: aload 5
    //   17: ifnonnull +14 -> 31
    //   20: aload_0
    //   21: monitorexit
    //   22: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   25: lload_2
    //   26: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   29: iconst_0
    //   30: ireturn
    //   31: aload 5
    //   33: iconst_1
    //   34: invokevirtual 7381	com/android/server/am/ActivityRecord:changeWindowTranslucency	(Z)Z
    //   37: istore 4
    //   39: iload 4
    //   41: ifeq +26 -> 67
    //   44: aload 5
    //   46: getfield 3550	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
    //   49: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   52: aload 5
    //   54: invokevirtual 7384	com/android/server/am/ActivityStack:releaseBackgroundResources	(Lcom/android/server/am/ActivityRecord;)V
    //   57: aload_0
    //   58: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   61: aconst_null
    //   62: iconst_0
    //   63: iconst_0
    //   64: invokevirtual 5000	com/android/server/am/ActivityStackSupervisor:ensureActivitiesVisibleLocked	(Lcom/android/server/am/ActivityRecord;IZ)V
    //   67: aload_0
    //   68: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   71: aload_1
    //   72: iconst_1
    //   73: invokevirtual 7387	com/android/server/wm/WindowManagerService:setAppFullscreen	(Landroid/os/IBinder;Z)V
    //   76: aload_0
    //   77: monitorexit
    //   78: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   81: lload_2
    //   82: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   85: iload 4
    //   87: ireturn
    //   88: astore_1
    //   89: aload_0
    //   90: monitorexit
    //   91: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   94: aload_1
    //   95: athrow
    //   96: astore_1
    //   97: lload_2
    //   98: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   101: aload_1
    //   102: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	103	0	this	ActivityManagerService
    //   0	103	1	paramIBinder	IBinder
    //   3	95	2	l	long
    //   37	49	4	bool	boolean
    //   13	40	5	localActivityRecord	ActivityRecord
    // Exception table:
    //   from	to	target	type
    //   6	15	88	finally
    //   31	39	88	finally
    //   44	67	88	finally
    //   67	76	88	finally
    //   4	6	96	finally
    //   20	25	96	finally
    //   76	81	96	finally
    //   89	96	96	finally
  }
  
  /* Error */
  public boolean convertToTranslucent(IBinder paramIBinder, ActivityOptions paramActivityOptions)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore 4
    //   5: aload_0
    //   6: monitorenter
    //   7: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   10: aload_1
    //   11: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   14: astore 7
    //   16: aload 7
    //   18: ifnonnull +15 -> 33
    //   21: aload_0
    //   22: monitorexit
    //   23: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   26: lload 4
    //   28: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   31: iconst_0
    //   32: ireturn
    //   33: aload 7
    //   35: getfield 3550	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
    //   38: getfield 3949	com/android/server/am/TaskRecord:mActivities	Ljava/util/ArrayList;
    //   41: aload 7
    //   43: invokevirtual 6208	java/util/ArrayList:lastIndexOf	(Ljava/lang/Object;)I
    //   46: istore_3
    //   47: iload_3
    //   48: ifle +24 -> 72
    //   51: aload 7
    //   53: getfield 3550	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
    //   56: getfield 3949	com/android/server/am/TaskRecord:mActivities	Ljava/util/ArrayList;
    //   59: iload_3
    //   60: iconst_1
    //   61: isub
    //   62: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   65: checkcast 3546	com/android/server/am/ActivityRecord
    //   68: aload_2
    //   69: putfield 7393	com/android/server/am/ActivityRecord:returningOptions	Landroid/app/ActivityOptions;
    //   72: aload 7
    //   74: iconst_0
    //   75: invokevirtual 7381	com/android/server/am/ActivityRecord:changeWindowTranslucency	(Z)Z
    //   78: istore 6
    //   80: iload 6
    //   82: ifeq +16 -> 98
    //   85: aload 7
    //   87: getfield 3550	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
    //   90: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   93: aload 7
    //   95: invokevirtual 7396	com/android/server/am/ActivityStack:convertActivityToTranslucent	(Lcom/android/server/am/ActivityRecord;)V
    //   98: aload_0
    //   99: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   102: aconst_null
    //   103: iconst_0
    //   104: iconst_0
    //   105: invokevirtual 5000	com/android/server/am/ActivityStackSupervisor:ensureActivitiesVisibleLocked	(Lcom/android/server/am/ActivityRecord;IZ)V
    //   108: aload_0
    //   109: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   112: aload_1
    //   113: iconst_0
    //   114: invokevirtual 7387	com/android/server/wm/WindowManagerService:setAppFullscreen	(Landroid/os/IBinder;Z)V
    //   117: aload_0
    //   118: monitorexit
    //   119: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   122: lload 4
    //   124: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   127: iload 6
    //   129: ireturn
    //   130: astore_1
    //   131: aload_0
    //   132: monitorexit
    //   133: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   136: aload_1
    //   137: athrow
    //   138: astore_1
    //   139: lload 4
    //   141: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   144: aload_1
    //   145: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	146	0	this	ActivityManagerService
    //   0	146	1	paramIBinder	IBinder
    //   0	146	2	paramActivityOptions	ActivityOptions
    //   46	16	3	i	int
    //   3	137	4	l	long
    //   78	50	6	bool	boolean
    //   14	80	7	localActivityRecord	ActivityRecord
    // Exception table:
    //   from	to	target	type
    //   7	16	130	finally
    //   33	47	130	finally
    //   51	72	130	finally
    //   72	80	130	finally
    //   85	98	130	finally
    //   98	117	130	finally
    //   5	7	138	finally
    //   21	26	138	finally
    //   117	122	138	finally
    //   131	138	138	finally
  }
  
  public void crashApplication(int paramInt1, int paramInt2, String paramString1, String paramString2)
  {
    if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0)
    {
      paramString1 = "Permission Denial: crashApplication() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
      Slog.w(TAG, paramString1);
      throw new SecurityException(paramString1);
    }
    try
    {
      boostPriorityForLockedSection();
      this.mAppErrors.scheduleAppCrashLocked(paramInt1, paramInt2, paramString1, paramString2);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public IActivityContainer createStackOnDisplay(int paramInt)
    throws RemoteException
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "createStackOnDisplay()");
    try
    {
      boostPriorityForLockedSection();
      int i = this.mStackSupervisor.getNextStackId();
      Object localObject1 = this.mStackSupervisor.createStackOnDisplay(i, paramInt, true);
      if (localObject1 == null) {
        return null;
      }
      localObject1 = ((ActivityStack)localObject1).mActivityContainer;
      return (IActivityContainer)localObject1;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public IActivityContainer createVirtualActivityContainer(IBinder paramIBinder, IActivityContainerCallback paramIActivityContainerCallback)
    throws RemoteException
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "createActivityContainer()");
    try
    {
      boostPriorityForLockedSection();
      if (paramIBinder == null) {
        throw new IllegalArgumentException("parent token must not be null");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    paramIBinder = ActivityRecord.forTokenLocked(paramIBinder);
    if (paramIBinder == null)
    {
      resetPriorityAfterLockedSection();
      return null;
    }
    if (paramIActivityContainerCallback == null) {
      throw new IllegalArgumentException("callback must not be null");
    }
    paramIBinder = this.mStackSupervisor.createVirtualActivityContainer(paramIBinder, paramIActivityContainerCallback);
    resetPriorityAfterLockedSection();
    return paramIBinder;
  }
  
  boolean decProviderCountLocked(ContentProviderConnection paramContentProviderConnection, ContentProviderRecord paramContentProviderRecord, IBinder paramIBinder, boolean paramBoolean)
  {
    if (paramContentProviderConnection != null)
    {
      paramContentProviderRecord = paramContentProviderConnection.provider;
      if ("com.android.providers.contacts/.ContactsProvider2".equals(paramContentProviderRecord.name.flattenToShortString())) {
        paramContentProviderConnection.client.lastContactProviderTime = SystemClock.uptimeMillis();
      }
      if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
        Slog.v(TAG_PROVIDER, "Removing provider requested by " + paramContentProviderConnection.client.processName + " from process " + paramContentProviderRecord.info.processName + ": " + paramContentProviderRecord.name.flattenToShortString() + " scnt=" + paramContentProviderConnection.stableCount + " uscnt=" + paramContentProviderConnection.unstableCount);
      }
      if (paramContentProviderRecord.proc != null) {
        OnePlusProcessManager.resumeProcessByUID_out(paramContentProviderRecord.proc.uid, "decProviderCountLocked");
      }
      if (paramBoolean) {
        paramContentProviderConnection.stableCount -= 1;
      }
      while ((paramContentProviderConnection.stableCount == 0) && (paramContentProviderConnection.unstableCount == 0))
      {
        paramContentProviderRecord.connections.remove(paramContentProviderConnection);
        paramContentProviderConnection.client.conProviders.remove(paramContentProviderConnection);
        if ((paramContentProviderConnection.client.setProcState < 13) && (paramContentProviderRecord.proc != null)) {
          paramContentProviderRecord.proc.lastProviderTime = SystemClock.uptimeMillis();
        }
        stopAssociationLocked(paramContentProviderConnection.client.uid, paramContentProviderConnection.client.processName, paramContentProviderRecord.uid, paramContentProviderRecord.name);
        return true;
        paramContentProviderConnection.unstableCount -= 1;
      }
      return false;
    }
    paramContentProviderRecord.removeExternalProcessHandleLocked(paramIBinder);
    return false;
  }
  
  public void deleteActivityContainer(IActivityContainer paramIActivityContainer)
    throws RemoteException
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "deleteActivityContainer()");
    try
    {
      boostPriorityForLockedSection();
      this.mStackSupervisor.deleteActivityContainer(paramIActivityContainer);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  final void doLowMemReportIfNeededLocked(ProcessRecord paramProcessRecord)
  {
    int k = 0;
    int i = this.mLruProcesses.size() - 1;
    int j = k;
    Object localObject1;
    boolean bool2;
    boolean bool1;
    long l;
    label105:
    label126:
    label155:
    Object localObject2;
    if (i >= 0)
    {
      localObject1 = (ProcessRecord)this.mLruProcesses.get(i);
      if ((((ProcessRecord)localObject1).thread != null) && (((ProcessRecord)localObject1).setProcState >= 14)) {
        j = 1;
      }
    }
    else
    {
      if (j != 0) {
        return;
      }
      bool2 = "1".equals(SystemProperties.get("ro.debuggable", "0"));
      bool1 = bool2;
      if (bool2)
      {
        l = SystemClock.uptimeMillis();
        if (l >= this.mLastMemUsageReportTime + 300000L) {
          break label200;
        }
        bool1 = false;
      }
      if (!bool1) {
        break label289;
      }
      localObject1 = new ArrayList(this.mLruProcesses.size());
      EventLog.writeEvent(30017, this.mLruProcesses.size());
      l = SystemClock.uptimeMillis();
      i = this.mLruProcesses.size() - 1;
      if (i < 0) {
        break label420;
      }
      localObject2 = (ProcessRecord)this.mLruProcesses.get(i);
      if ((localObject2 != paramProcessRecord) && (((ProcessRecord)localObject2).thread != null)) {
        break label295;
      }
    }
    label200:
    label289:
    label295:
    do
    {
      i -= 1;
      break label155;
      i -= 1;
      break;
      localObject1 = new MemInfoReader();
      localObject2 = ((MemInfoReader)localObject1).getRawInfo();
      Debug.getMemInfo((long[])localObject2);
      if (((MemInfoReader)localObject1).getFreeSizeKb() + ((MemInfoReader)localObject1).getCachedSizeKb() > 1048576L)
      {
        Log.d(TAG, "Free Memory is : " + localObject2[1] + ", skip dump memory info");
        return;
      }
      this.mLastMemUsageReportTime = l;
      bool1 = bool2;
      break label105;
      localObject1 = null;
      break label126;
      if (bool1) {
        ((ArrayList)localObject1).add(new ProcessMemInfo(((ProcessRecord)localObject2).processName, ((ProcessRecord)localObject2).pid, ((ProcessRecord)localObject2).setAdj, ((ProcessRecord)localObject2).setProcState, ((ProcessRecord)localObject2).adjType, ((ProcessRecord)localObject2).makeAdjReason()));
      }
    } while (((ProcessRecord)localObject2).lastLowMemory + 60000L > l);
    if (((ProcessRecord)localObject2).setAdj <= 400) {}
    for (((ProcessRecord)localObject2).lastRequestedGc = 0L;; ((ProcessRecord)localObject2).lastRequestedGc = ((ProcessRecord)localObject2).lastLowMemory)
    {
      ((ProcessRecord)localObject2).reportLowMemory = true;
      ((ProcessRecord)localObject2).lastLowMemory = l;
      this.mProcessesToGc.remove(localObject2);
      addProcessToGcListLocked((ProcessRecord)localObject2);
      break;
    }
    label420:
    if (bool1)
    {
      paramProcessRecord = this.mHandler.obtainMessage(33, localObject1);
      this.mHandler.sendMessage(paramProcessRecord);
    }
    scheduleAppGcsLocked();
  }
  
  final void doStopUidLocked(int paramInt, UidRecord paramUidRecord)
  {
    this.mServices.stopInBackgroundLocked(paramInt);
    enqueueUidChangeLocked(paramUidRecord, paramInt, 3);
  }
  
  protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
  {
    if (checkCallingPermission("android.permission.DUMP") != 0)
    {
      paramPrintWriter.println("Permission Denial: can't dump ActivityManager from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
      return;
    }
    boolean bool3 = false;
    boolean bool1 = false;
    boolean bool2 = false;
    int k = 0;
    Object localObject1 = null;
    int i = 0;
    Object localObject2;
    label105:
    long l;
    int n;
    int j;
    String[] arrayOfString;
    Object localObject3;
    if (i < paramArrayOfString.length)
    {
      localObject2 = paramArrayOfString[i];
      if ((localObject2 != null) && (((String)localObject2).length() > 0)) {}
    }
    else
    {
      l = Binder.clearCallingIdentity();
      n = 0;
      j = i;
      localObject2 = localObject1;
      arrayOfString = paramArrayOfString;
      if (i >= paramArrayOfString.length) {
        break label2408;
      }
      localObject3 = paramArrayOfString[i];
      j = i + 1;
      if ((!"activities".equals(localObject3)) && (!"a".equals(localObject3))) {
        break label410;
      }
    }
    for (;;)
    {
      int m;
      try
      {
        boostPriorityForLockedSection();
        dumpActivitiesLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true, bool1, (String)localObject1);
        resetPriorityAfterLockedSection();
        arrayOfString = paramArrayOfString;
        m = n;
        localObject2 = localObject1;
        i = j;
        j = i;
        return;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if (((String)localObject2).charAt(0) != '-') {
        break label105;
      }
      i += 1;
      if ("-a".equals(localObject2))
      {
        bool3 = true;
        break;
      }
      if ("-c".equals(localObject2))
      {
        bool1 = true;
        break;
      }
      if ("-p".equals(localObject2))
      {
        if (i < paramArrayOfString.length)
        {
          localObject1 = paramArrayOfString[i];
          i += 1;
          bool1 = true;
          break;
        }
        paramPrintWriter.println("Error: -p option requires package argument");
        return;
      }
      if ("--checkin".equals(localObject2))
      {
        k = 1;
        bool2 = true;
        break;
      }
      if ("-C".equals(localObject2))
      {
        k = 1;
        break;
      }
      if ("-h".equals(localObject2))
      {
        ActivityManagerShellCommand.dumpHelp(paramPrintWriter, true);
        return;
      }
      paramPrintWriter.println("Unknown argument: " + (String)localObject2 + "; use -h for help");
      break;
      try
      {
        label410:
        boostPriorityForLockedSection();
        dumpRecentsLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true, (String)localObject1);
        resetPriorityAfterLockedSection();
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      try
      {
        boostPriorityForLockedSection();
        if (this.mOnePlusProcessManager != null) {
          this.mOnePlusProcessManager.openDebug(true);
        }
        resetPriorityAfterLockedSection();
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      try
      {
        boostPriorityForLockedSection();
        if (this.mOnePlusProcessManager != null) {
          this.mOnePlusProcessManager.dump(paramPrintWriter);
        }
        resetPriorityAfterLockedSection();
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if (j >= paramArrayOfString.length)
      {
        localObject2 = EMPTY_STRING_ARRAY;
        i = j;
      }
      for (;;)
      {
        try
        {
          boostPriorityForLockedSection();
          dumpBroadcastsLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, true, (String)localObject1);
          resetPriorityAfterLockedSection();
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        localObject2 = paramArrayOfString[j];
        j += 1;
        arrayOfString = new String[paramArrayOfString.length - j];
        i = j;
        localObject1 = localObject2;
        if (paramArrayOfString.length > 2)
        {
          System.arraycopy(paramArrayOfString, j, arrayOfString, 0, paramArrayOfString.length - j);
          i = j;
          localObject1 = localObject2;
        }
      }
      localObject2 = EMPTY_STRING_ARRAY;
      i = j;
      try
      {
        label774:
        boostPriorityForLockedSection();
        if (k != 0) {
          dumpBroadcastStatsCheckinLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, bool2, (String)localObject1);
        }
        for (;;)
        {
          resetPriorityAfterLockedSection();
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
          break;
          localObject2 = paramArrayOfString[j];
          j += 1;
          arrayOfString = new String[paramArrayOfString.length - j];
          i = j;
          localObject1 = localObject2;
          if (paramArrayOfString.length <= 2) {
            break label774;
          }
          System.arraycopy(paramArrayOfString, j, arrayOfString, 0, paramArrayOfString.length - j);
          i = j;
          localObject1 = localObject2;
          break label774;
          dumpBroadcastStatsLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, true, (String)localObject1);
        }
        if ("intents".equals(localObject3)) {
          break label922;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if ("i".equals(localObject3))
      {
        label922:
        if (j >= paramArrayOfString.length)
        {
          localObject2 = EMPTY_STRING_ARRAY;
          i = j;
        }
        for (;;)
        {
          try
          {
            boostPriorityForLockedSection();
            dumpPendingIntentsLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, true, (String)localObject1);
            resetPriorityAfterLockedSection();
            localObject2 = localObject1;
            m = n;
            arrayOfString = paramArrayOfString;
          }
          finally
          {
            resetPriorityAfterLockedSection();
          }
          localObject2 = paramArrayOfString[j];
          j += 1;
          arrayOfString = new String[paramArrayOfString.length - j];
          i = j;
          localObject1 = localObject2;
          if (paramArrayOfString.length > 2)
          {
            System.arraycopy(paramArrayOfString, j, arrayOfString, 0, paramArrayOfString.length - j);
            i = j;
            localObject1 = localObject2;
          }
        }
      }
      if (j >= paramArrayOfString.length)
      {
        localObject2 = EMPTY_STRING_ARRAY;
        i = j;
      }
      for (;;)
      {
        try
        {
          boostPriorityForLockedSection();
          dumpProcessesLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, i, true, (String)localObject1);
          resetPriorityAfterLockedSection();
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        localObject2 = paramArrayOfString[j];
        j += 1;
        arrayOfString = new String[paramArrayOfString.length - j];
        i = j;
        localObject1 = localObject2;
        if (paramArrayOfString.length > 2)
        {
          System.arraycopy(paramArrayOfString, j, arrayOfString, 0, paramArrayOfString.length - j);
          i = j;
          localObject1 = localObject2;
        }
      }
      try
      {
        boostPriorityForLockedSection();
        dumpOomLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true);
        resetPriorityAfterLockedSection();
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      try
      {
        boostPriorityForLockedSection();
        dumpPermissionsLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true, null);
        resetPriorityAfterLockedSection();
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      Object localObject4 = null;
      localObject3 = EMPTY_STRING_ARRAY;
      for (;;)
      {
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
        if (dumpProvider(paramFileDescriptor, paramPrintWriter, (String)localObject4, (String[])localObject3, 0, bool3)) {
          break;
        }
        paramPrintWriter.println("No providers match: " + (String)localObject4);
        paramPrintWriter.println("Use -h for help.");
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
        break;
        localObject2 = paramArrayOfString[j];
        i = j + 1;
        arrayOfString = new String[paramArrayOfString.length - i];
        j = i;
        localObject4 = localObject2;
        localObject3 = arrayOfString;
        if (paramArrayOfString.length > 2)
        {
          System.arraycopy(paramArrayOfString, i, arrayOfString, 0, paramArrayOfString.length - i);
          j = i;
          localObject4 = localObject2;
          localObject3 = arrayOfString;
        }
      }
      if (("providers".equals(localObject3)) || ("prov".equals(localObject3))) {}
      try
      {
        boostPriorityForLockedSection();
        dumpProvidersLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true, null);
        resetPriorityAfterLockedSection();
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      localObject4 = null;
      localObject3 = EMPTY_STRING_ARRAY;
      for (;;)
      {
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
        if (this.mServices.dumpService(paramFileDescriptor, paramPrintWriter, (String)localObject4, (String[])localObject3, 0, bool3)) {
          break;
        }
        paramPrintWriter.println("No services match: " + (String)localObject4);
        paramPrintWriter.println("Use -h for help.");
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
        break;
        localObject2 = paramArrayOfString[j];
        i = j + 1;
        arrayOfString = new String[paramArrayOfString.length - i];
        j = i;
        localObject4 = localObject2;
        localObject3 = arrayOfString;
        if (paramArrayOfString.length > 2)
        {
          System.arraycopy(paramArrayOfString, i, arrayOfString, 0, paramArrayOfString.length - i);
          j = i;
          localObject4 = localObject2;
          localObject3 = arrayOfString;
        }
      }
      if ("package".equals(localObject3))
      {
        if (j >= paramArrayOfString.length)
        {
          paramPrintWriter.println("package: no package name specified");
          paramPrintWriter.println("Use -h for help.");
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        else
        {
          localObject2 = paramArrayOfString[j];
          i = j + 1;
          arrayOfString = new String[paramArrayOfString.length - i];
          if (paramArrayOfString.length > 2) {
            System.arraycopy(paramArrayOfString, i, arrayOfString, 0, paramArrayOfString.length - i);
          }
          i = 0;
          m = 1;
        }
      }
      else
      {
        if (("associations".equals(localObject3)) || ("as".equals(localObject3))) {}
        try
        {
          boostPriorityForLockedSection();
          dumpAssociationsLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true, bool1, (String)localObject1);
          resetPriorityAfterLockedSection();
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        if (bool1) {}
        try
        {
          boostPriorityForLockedSection();
          localObject2 = this.mServices.newServiceDumperLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true, (String)localObject1);
          resetPriorityAfterLockedSection();
          ((ActiveServices.ServiceDumper)localObject2).dumpWithClient();
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        try
        {
          boostPriorityForLockedSection();
          this.mServices.newServiceDumperLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, j, true, (String)localObject1).dumpLocked();
          resetPriorityAfterLockedSection();
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        i = j;
        localObject2 = localObject1;
        m = n;
        arrayOfString = paramArrayOfString;
        continue;
        if ("ohpd".equals(localObject3))
        {
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
          if (j < paramArrayOfString.length)
          {
            i = j + 1;
            if ("thresh".equals(paramArrayOfString[j]))
            {
              if (i < paramArrayOfString.length) {
                OnePlusHighPowerDetector.updateCpuThreshold(paramArrayOfString[i]);
              }
            }
            else {
              return;
            }
            OnePlusHighPowerDetector.updateCpuThreshold(null);
          }
        }
        else if ("log".equals(localObject3))
        {
          dynamicallyConfigLogTag(paramPrintWriter, paramArrayOfString, j);
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        else if ("rankedpackages".equals(localObject3))
        {
          this.mRestartProcessManager.dump(paramPrintWriter, sRestartWhiteList);
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        else if ("embryo".equals(localObject3))
        {
          this.mEmbryoManager.dumpsys(paramPrintWriter, paramArrayOfString);
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
        }
        else
        {
          i = j;
          localObject2 = localObject1;
          m = n;
          arrayOfString = paramArrayOfString;
          if (!dumpActivity(paramFileDescriptor, paramPrintWriter, (String)localObject3, paramArrayOfString, j, bool3))
          {
            i = j;
            localObject2 = localObject1;
            m = n;
            arrayOfString = paramArrayOfString;
            if (new ActivityManagerShellCommand(this, true).exec(this, null, paramFileDescriptor, null, paramArrayOfString, new ResultReceiver(null)) < 0)
            {
              paramPrintWriter.println("Bad activity command, or no activities match: " + (String)localObject3);
              paramPrintWriter.println("Use -h for help.");
              i = j;
              localObject2 = localObject1;
              m = n;
              arrayOfString = paramArrayOfString;
            }
          }
        }
      }
    }
    label2408:
    if (k != 0)
    {
      dumpBroadcastStatsCheckinLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool2, (String)localObject2);
      label2427:
      Binder.restoreCallingIdentity(l);
      return;
    }
    if (bool1) {
      try
      {
        boostPriorityForLockedSection();
        dumpPendingIntentsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        paramPrintWriter.println();
        if (bool3) {
          paramPrintWriter.println("-------------------------------------------------------------------------------");
        }
        dumpBroadcastsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        paramPrintWriter.println();
        if (!bool3) {
          break label3142;
        }
        paramPrintWriter.println("-------------------------------------------------------------------------------");
        break label3142;
        label2506:
        dumpBroadcastStatsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        paramPrintWriter.println();
        if (bool3) {
          paramPrintWriter.println("-------------------------------------------------------------------------------");
        }
        label2536:
        dumpProvidersLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        paramPrintWriter.println();
        if (bool3) {
          paramPrintWriter.println("-------------------------------------------------------------------------------");
        }
        dumpPermissionsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        paramPrintWriter.println();
        if (bool3) {
          paramPrintWriter.println("-------------------------------------------------------------------------------");
        }
        paramArrayOfString = this.mServices.newServiceDumperLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        resetPriorityAfterLockedSection();
        paramArrayOfString.dumpWithClient();
        paramPrintWriter.println();
      }
      finally
      {
        try
        {
          boostPriorityForLockedSection();
          if (bool3) {
            paramPrintWriter.println("-------------------------------------------------------------------------------");
          }
          dumpRecentsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
          paramPrintWriter.println();
          if (bool3) {
            paramPrintWriter.println("-------------------------------------------------------------------------------");
          }
          dumpActivitiesLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, bool1, (String)localObject2);
          if (this.mAssociations.size() > 0)
          {
            paramPrintWriter.println();
            if (bool3) {
              paramPrintWriter.println("-------------------------------------------------------------------------------");
            }
            dumpAssociationsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, bool1, (String)localObject2);
          }
          paramPrintWriter.println();
          if (bool3) {
            paramPrintWriter.println("-------------------------------------------------------------------------------");
          }
          dumpProcessesLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
          resetPriorityAfterLockedSection();
          break label2427;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        paramFileDescriptor = finally;
        resetPriorityAfterLockedSection();
      }
    }
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        dumpPendingIntentsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        paramPrintWriter.println();
        if (bool3) {
          paramPrintWriter.println("-------------------------------------------------------------------------------");
        }
        dumpBroadcastsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
        paramPrintWriter.println();
        if (!bool3) {
          break label3155;
        }
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      dumpBroadcastStatsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
      paramPrintWriter.println();
      if (bool3) {
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      dumpProvidersLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
      paramPrintWriter.println();
      if (bool3) {
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      dumpPermissionsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
      paramPrintWriter.println();
      if (bool3) {
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      this.mServices.newServiceDumperLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2).dumpLocked();
      paramPrintWriter.println();
      if (bool3) {
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      dumpRecentsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
      paramPrintWriter.println();
      if (bool3) {
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      dumpActivitiesLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, bool1, (String)localObject2);
      if (this.mAssociations.size() > 0)
      {
        paramPrintWriter.println();
        if (bool3) {
          paramPrintWriter.println("-------------------------------------------------------------------------------");
        }
        dumpAssociationsLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, bool1, (String)localObject2);
      }
      paramPrintWriter.println();
      if (bool3) {
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      this.mEmbryoManager.dumpsys(paramPrintWriter, arrayOfString);
      paramPrintWriter.println();
      if (bool3) {
        paramPrintWriter.println("-------------------------------------------------------------------------------");
      }
      dumpProcessesLocked(paramFileDescriptor, paramPrintWriter, arrayOfString, j, bool3, (String)localObject2);
      resetPriorityAfterLockedSection();
      break;
      label3142:
      if (bool3) {
        break label2506;
      }
      if (localObject2 == null) {
        break label2536;
      }
      break label2506;
      label3155:
      if (!bool3) {
        if (localObject2 == null) {}
      }
    }
  }
  
  void dumpActivitiesLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean1, boolean paramBoolean2, String paramString)
  {
    paramPrintWriter.println("ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)");
    paramBoolean2 = this.mStackSupervisor.dumpActivitiesLocked(paramFileDescriptor, paramPrintWriter, paramBoolean1, paramBoolean2, paramString);
    boolean bool = paramBoolean2;
    paramBoolean1 = paramBoolean2;
    if (ActivityStackSupervisor.printThisActivity(paramPrintWriter, this.mFocusedActivity, paramString, paramBoolean2, "  mFocusedActivity: "))
    {
      paramBoolean1 = true;
      bool = false;
    }
    if (paramString == null)
    {
      if (bool) {
        paramPrintWriter.println();
      }
      paramBoolean1 = true;
      this.mStackSupervisor.dump(paramPrintWriter, "  ");
    }
    if (!paramBoolean1) {
      paramPrintWriter.println("  (nothing)");
    }
  }
  
  protected boolean dumpActivity(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String paramString, String[] paramArrayOfString, int paramInt, boolean paramBoolean)
  {
    ArrayList localArrayList;
    try
    {
      boostPriorityForLockedSection();
      localArrayList = this.mStackSupervisor.getDumpActivitiesLocked(paramString);
      resetPriorityAfterLockedSection();
      if (localArrayList.size() <= 0) {
        return false;
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    String[] arrayOfString = new String[paramArrayOfString.length - paramInt];
    System.arraycopy(paramArrayOfString, paramInt, arrayOfString, 0, paramArrayOfString.length - paramInt);
    paramArrayOfString = null;
    int i = 0;
    paramInt = localArrayList.size() - 1;
    while (paramInt >= 0)
    {
      ActivityRecord localActivityRecord = (ActivityRecord)localArrayList.get(paramInt);
      if (i != 0) {
        paramPrintWriter.println();
      }
      i = 1;
      try
      {
        boostPriorityForLockedSection();
        paramString = paramArrayOfString;
        if (paramArrayOfString != localActivityRecord.task)
        {
          paramArrayOfString = localActivityRecord.task;
          paramPrintWriter.print("TASK ");
          paramPrintWriter.print(paramArrayOfString.affinity);
          paramPrintWriter.print(" id=");
          paramPrintWriter.println(paramArrayOfString.taskId);
          paramString = paramArrayOfString;
          if (paramBoolean)
          {
            paramArrayOfString.dump(paramPrintWriter, "  ");
            paramString = paramArrayOfString;
          }
        }
        resetPriorityAfterLockedSection();
        dumpActivity("  ", paramFileDescriptor, paramPrintWriter, (ActivityRecord)localArrayList.get(paramInt), arrayOfString, paramBoolean);
        paramInt -= 1;
        paramArrayOfString = paramString;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
    return true;
  }
  
  final void dumpApplicationMemoryUsage(FileDescriptor arg1, PrintWriter paramPrintWriter1, String arg3, String[] paramArrayOfString, boolean paramBoolean, PrintWriter paramPrintWriter2)
  {
    int i = 0;
    boolean bool7 = false;
    boolean bool1 = false;
    boolean bool6 = false;
    boolean bool4 = false;
    int k = 0;
    boolean bool5 = false;
    int m = 0;
    boolean bool3 = false;
    boolean bool8 = false;
    int j = 0;
    int i1 = 0;
    label61:
    long l1;
    long[] arrayOfLong3;
    ArrayList localArrayList2;
    if (i1 < paramArrayOfString.length)
    {
      ??? = paramArrayOfString[i1];
      if ((??? != null) && (???.length() > 0)) {}
    }
    else
    {
      l1 = SystemClock.uptimeMillis();
      l2 = SystemClock.elapsedRealtime();
      arrayOfLong3 = new long[1];
      localArrayList2 = collectProcesses(paramPrintWriter1, i1, bool3, paramArrayOfString);
      if (localArrayList2 != null) {
        break label811;
      }
      if ((paramArrayOfString == null) || (paramArrayOfString.length <= i1) || (paramArrayOfString[i1].charAt(0) == '-')) {
        break label782;
      }
      paramPrintWriter2 = new ArrayList();
      updateCpuStatsNow();
      j = -1;
    }
    for (;;)
    {
      try
      {
        m = Integer.parseInt(paramArrayOfString[i1]);
        j = m;
      }
      catch (NumberFormatException ???)
      {
        int n;
        String[] arrayOfString;
        ArrayList localArrayList1;
        SparseArray localSparseArray;
        long l8;
        long l6;
        long[] arrayOfLong1;
        long[] arrayOfLong2;
        long[] arrayOfLong6;
        long[] arrayOfLong7;
        long[] arrayOfLong4;
        long[] arrayOfLong5;
        ArrayList[] arrayOfArrayList;
        long l10;
        boolean bool2;
        ProcessRecord localProcessRecord;
        int i2;
        Object localObject;
        long l12;
        long l13;
        long l14;
        long l15;
        long l16;
        boolean bool10;
        long l17;
        long l18;
        long l19;
        long l20;
        long l23;
        long l24;
        long l21;
        long l22;
        continue;
      }
      synchronized (this.mProcessCpuTracker)
      {
        n = this.mProcessCpuTracker.countStats();
        m = 0;
        if (m < n)
        {
          ??? = this.mProcessCpuTracker.getStats(m);
          if ((???.pid == j) || ((???.baseName != null) && (???.baseName.equals(paramArrayOfString[i1])))) {
            paramPrintWriter2.add(???);
          }
          m += 1;
          continue;
          if (???.charAt(0) != '-') {
            break label61;
          }
          i1 += 1;
          if ("-a".equals(???))
          {
            i = 1;
            bool7 = true;
            bool1 = true;
            j = 1;
            break;
          }
          if ("-d".equals(???))
          {
            bool1 = true;
            break;
          }
          if ("-c".equals(???))
          {
            bool5 = true;
            break;
          }
          if ("-s".equals(???))
          {
            i = 1;
            bool6 = true;
            break;
          }
          if ("-S".equals(???))
          {
            j = 1;
            break;
          }
          if ("--unreachable".equals(???))
          {
            bool4 = true;
            break;
          }
          if ("--oom".equals(???))
          {
            k = 1;
            break;
          }
          if ("--local".equals(???))
          {
            m = 1;
            break;
          }
          if ("--package".equals(???))
          {
            bool3 = true;
            break;
          }
          if ("--checkin".equals(???))
          {
            bool8 = true;
            break;
          }
          if ("-h".equals(???))
          {
            paramPrintWriter1.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
            paramPrintWriter1.println("  -a: include all available information for each process.");
            paramPrintWriter1.println("  -d: include dalvik details.");
            paramPrintWriter1.println("  -c: dump in a compact machine-parseable representation.");
            paramPrintWriter1.println("  -s: dump only summary of application memory usage.");
            paramPrintWriter1.println("  -S: dump also SwapPss.");
            paramPrintWriter1.println("  --oom: only show processes organized by oom adj.");
            paramPrintWriter1.println("  --local: only collect details locally, don't call process.");
            paramPrintWriter1.println("  --package: interpret process arg as package, dumping all");
            paramPrintWriter1.println("             processes that have loaded that package.");
            paramPrintWriter1.println("  --checkin: dump data for a checkin");
            paramPrintWriter1.println("If [process] is specified it can be the name or ");
            paramPrintWriter1.println("pid of a specific process to dump.");
            return;
          }
          paramPrintWriter1.println("Unknown argument: " + ??? + "; use -h for help");
          break;
        }
        if (paramPrintWriter2.size() <= 0) {
          continue;
        }
        dumpApplicationMemoryUsageHeader(paramPrintWriter1, l1, l2, bool8, bool5);
        ??? = null;
        j = paramPrintWriter2.size() - 1;
        if (j < 0) {
          continue;
        }
        paramArrayOfString = (ProcessCpuTracker.Stats)paramPrintWriter2.get(j);
        m = paramArrayOfString.pid;
        if ((!bool8) && (i != 0)) {
          paramPrintWriter1.println("\n** MEMINFO in pid " + m + " [" + paramArrayOfString.baseName + "] **");
        }
        ??? = ???;
        if (??? == null) {
          ??? = new Debug.MemoryInfo();
        }
        if ((i == 0) && ((paramBoolean) || (k != 0)))
        {
          ???.dalvikPss = ((int)Debug.getPss(m, arrayOfLong3, null));
          ???.dalvikPrivateDirty = ((int)arrayOfLong3[0]);
          ActivityThread.dumpMemInfoTable(paramPrintWriter1, ???, bool8, bool7, bool1, bool6, m, paramArrayOfString.baseName, 0L, 0L, 0L, 0L, 0L, 0L);
          if (bool8) {
            paramPrintWriter1.println();
          }
          j -= 1;
          ??? = ???;
        }
      }
      Debug.getMemoryInfo(m, ???);
    }
    return;
    label782:
    paramPrintWriter1.println("No process found for: " + paramArrayOfString[i1]);
    return;
    label811:
    n = i;
    long l7;
    label910:
    label921:
    long l4;
    long l3;
    long l9;
    if (!paramBoolean)
    {
      if (k != 0) {
        n = i;
      }
    }
    else
    {
      dumpApplicationMemoryUsageHeader(paramPrintWriter1, l1, l2, bool8, bool5);
      arrayOfString = new String[paramArrayOfString.length - i1];
      System.arraycopy(paramArrayOfString, i1, arrayOfString, 0, paramArrayOfString.length - i1);
      localArrayList1 = new ArrayList();
      localSparseArray = new SparseArray();
      l8 = 0L;
      l7 = 0L;
      l6 = 0L;
      l5 = 0L;
      if (!bool1) {
        break label1665;
      }
      arrayOfLong1 = new long[8];
      if (!bool1) {
        break label1673;
      }
      arrayOfLong2 = new long[8];
      l4 = 0L;
      l3 = 0L;
      arrayOfLong6 = new long[17];
      arrayOfLong7 = new long[17];
      arrayOfLong4 = new long[DUMP_MEM_OOM_LABEL.length];
      arrayOfLong5 = new long[DUMP_MEM_OOM_LABEL.length];
      arrayOfArrayList = new ArrayList[DUMP_MEM_OOM_LABEL.length];
      l9 = 0L;
      l10 = 0L;
      l1 = 0L;
      l2 = 0L;
      bool2 = false;
      paramArrayOfString = null;
      i = localArrayList2.size() - 1;
      if (i < 0) {
        break label2164;
      }
      localProcessRecord = (ProcessRecord)localArrayList2.get(i);
    }
    long l11;
    for (;;)
    {
      IApplicationThread localIApplicationThread;
      try
      {
        boostPriorityForLockedSection();
        localIApplicationThread = localProcessRecord.thread;
        i1 = localProcessRecord.pid;
        i2 = localProcessRecord.getSetAdjWithServices();
        int i3 = localProcessRecord.activities.size();
        if (i3 > 0)
        {
          bool9 = true;
          resetPriorityAfterLockedSection();
          localObject = paramArrayOfString;
          l11 = l4;
          l12 = l3;
          l13 = l1;
          l14 = l2;
          l15 = l6;
          l16 = l5;
          bool10 = bool2;
          l17 = l8;
          l18 = l7;
          l19 = l9;
          l20 = l10;
          if (localIApplicationThread == null) {
            break label2098;
          }
          if ((!bool8) && (n != 0)) {
            paramPrintWriter1.println("\n** MEMINFO in pid " + i1 + " [" + localProcessRecord.processName + "] **");
          }
          ??? = paramArrayOfString;
          if (paramArrayOfString == null) {
            ??? = new Debug.MemoryInfo();
          }
          if ((n != 0) || ((!paramBoolean) && (k == 0))) {
            continue;
          }
          ???.dalvikPss = ((int)Debug.getPss(i1, arrayOfLong3, null));
          ???.dalvikPrivateDirty = ((int)arrayOfLong3[0]);
          if (n != 0)
          {
            if (m == 0) {
              break label1710;
            }
            ActivityThread.dumpMemInfoTable(paramPrintWriter1, ???, bool8, bool7, bool1, bool6, i1, localProcessRecord.processName, 0L, 0L, 0L, 0L, 0L, 0L);
            if (bool8) {
              paramPrintWriter1.println();
            }
          }
          l23 = ???.getTotalPss();
          l11 = ???.getTotalUss();
          l24 = ???.getTotalSwappedOutPss();
        }
      }
      finally
      {
        boolean bool9;
        resetPriorityAfterLockedSection();
      }
      try
      {
        boostPriorityForLockedSection();
        if ((localProcessRecord.thread != null) && (i2 == localProcessRecord.getSetAdjWithServices())) {
          localProcessRecord.baseProcessTracker.addPss(l23, l11, true, localProcessRecord.pkgList);
        }
        resetPriorityAfterLockedSection();
        localObject = ???;
        l11 = l4;
        l12 = l3;
        l13 = l1;
        l14 = l2;
        l15 = l6;
        l16 = l5;
        bool10 = bool2;
        l17 = l8;
        l18 = l7;
        l19 = l9;
        l20 = l10;
        if (bool8) {
          break label2098;
        }
        localObject = ???;
        l11 = l4;
        l12 = l3;
        l13 = l1;
        l14 = l2;
        l15 = l6;
        l16 = l5;
        bool10 = bool2;
        l17 = l8;
        l18 = l7;
        l19 = l9;
        l20 = l10;
        if (??? == null) {
          break label2098;
        }
        l9 += l23;
        l10 += l24;
        localObject = new StringBuilder().append(localProcessRecord.processName).append(" (pid ").append(i1);
        if (!bool9) {
          break label1759;
        }
        paramArrayOfString = " / activities)";
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      paramArrayOfString = new MemItem(paramArrayOfString, localProcessRecord.processName, l23, l24, i1, bool9);
      localArrayList1.add(paramArrayOfString);
      localSparseArray.put(i1, paramArrayOfString);
      l8 += ???.nativePss;
      l7 += ???.nativeSwappedOutPss;
      l21 = l6 + ???.dalvikPss;
      l22 = l5 + ???.dalvikSwappedOutPss;
      i1 = 0;
      if (i1 >= arrayOfLong1.length) {
        break label1775;
      }
      arrayOfLong1[i1] += ???.getOtherPss(i1 + 17);
      arrayOfLong2[i1] += ???.getOtherSwappedOutPss(i1 + 17);
      i1 += 1;
      continue;
      if ((localArrayList2.size() != 1) && (!bool8))
      {
        n = i;
        if (!bool3) {
          break;
        }
      }
      n = 1;
      break;
      label1665:
      arrayOfLong1 = EmptyArray.LONG;
      break label910;
      label1673:
      arrayOfLong2 = EmptyArray.LONG;
      break label921;
      bool9 = false;
      continue;
      continue;
      try
      {
        label1710:
        paramPrintWriter1.flush();
        localIApplicationThread.dumpMemInfo(???, ???, bool8, bool7, bool1, bool6, bool4, arrayOfString);
      }
      catch (RemoteException paramArrayOfString) {}
      if (!bool8)
      {
        paramPrintWriter1.println("Got RemoteException!");
        paramPrintWriter1.flush();
      }
    }
    label1759:
    label1775:
    l4 += ???.otherPss;
    l3 += ???.otherSwappedOutPss;
    i1 = 0;
    while (i1 < 17)
    {
      l5 = ???.getOtherPss(i1);
      arrayOfLong6[i1] += l5;
      l4 -= l5;
      l5 = ???.getOtherSwappedOutPss(i1);
      arrayOfLong7[i1] += l5;
      l3 -= l5;
      i1 += 1;
    }
    l6 = l1;
    long l5 = l2;
    if (i2 >= 900)
    {
      l6 = l1 + l23;
      l5 = l2 + l24;
    }
    i1 = 0;
    for (;;)
    {
      localObject = ???;
      l11 = l4;
      l12 = l3;
      l13 = l6;
      l14 = l5;
      l15 = l21;
      l16 = l22;
      bool10 = bool2;
      l17 = l8;
      l18 = l7;
      l19 = l9;
      l20 = l10;
      if (i1 < arrayOfLong4.length)
      {
        if ((i1 == arrayOfLong4.length - 1) || ((i2 >= DUMP_MEM_OOM_ADJ[i1]) && (i2 < DUMP_MEM_OOM_ADJ[(i1 + 1)])))
        {
          arrayOfLong4[i1] += l23;
          arrayOfLong5[i1] += l24;
          if (arrayOfArrayList[i1] == null) {
            arrayOfArrayList[i1] = new ArrayList();
          }
          arrayOfArrayList[i1].add(paramArrayOfString);
          l20 = l10;
          l19 = l9;
          l18 = l7;
          l17 = l8;
          bool10 = bool2;
          l16 = l22;
          l15 = l21;
          l14 = l5;
          l13 = l6;
          l12 = l3;
          l11 = l4;
          localObject = ???;
        }
      }
      else
      {
        label2098:
        i -= 1;
        paramArrayOfString = (String[])localObject;
        l4 = l11;
        l3 = l12;
        l1 = l13;
        l2 = l14;
        l6 = l15;
        l5 = l16;
        bool2 = bool10;
        l8 = l17;
        l7 = l18;
        l9 = l19;
        l10 = l20;
        break;
      }
      i1 += 1;
    }
    label2164:
    long l2 = 0L;
    if ((bool8) || (localArrayList2.size() <= 1) || (bool3)) {
      return;
    }
    updateCpuStatsNow();
    for (;;)
    {
      synchronized (this.mProcessCpuTracker)
      {
        n = this.mProcessCpuTracker.countStats();
        i = 0;
        ??? = null;
        if (i >= n) {
          break label2678;
        }
      }
      l4 += ???.otherPss;
      l2 = l3 + ???.otherSwappedOutPss;
      m = 0;
      l3 = l4;
      while (m < 17)
      {
        l4 = ???.getOtherPss(m);
        arrayOfLong6[m] += l4;
        l3 -= l4;
        l4 = ???.getOtherSwappedOutPss(m);
        arrayOfLong7[m] += l4;
        l2 -= l4;
        m += 1;
      }
      arrayOfLong4[0] += l13;
      arrayOfLong5[0] += l14;
      if (arrayOfArrayList[0] == null) {
        arrayOfArrayList[0] = new ArrayList();
      }
      arrayOfArrayList[0].add(paramArrayOfString);
      l5 = l12;
      break label4215;
      label2678:
      ??? = new ArrayList();
      ???.add(new MemItem("Native", "Native", l8, l7, -1));
      ??? = new MemItem("Dalvik", "Dalvik", l6, l5, -2);
      if (arrayOfLong1.length > 0)
      {
        ???.subitems = new ArrayList();
        i = 0;
        while (i < arrayOfLong1.length)
        {
          paramArrayOfString = Debug.MemoryInfo.getOtherLabel(i + 17);
          ???.subitems.add(new MemItem(paramArrayOfString, paramArrayOfString, arrayOfLong1[i], arrayOfLong2[i], i));
          i += 1;
        }
      }
      ???.add(???);
      ???.add(new MemItem("Unknown", "Unknown", l4, l3, -3));
      i = 0;
      while (i < 17)
      {
        ??? = Debug.MemoryInfo.getOtherLabel(i);
        ???.add(new MemItem(???, ???, arrayOfLong6[i], arrayOfLong7[i], i));
        i += 1;
      }
      paramArrayOfString = new ArrayList();
      i = 0;
      if (i < arrayOfLong4.length)
      {
        if (arrayOfLong4[i] != 0L) {
          if (!bool5) {
            break label2983;
          }
        }
        label2983:
        for (??? = DUMP_MEM_OOM_COMPACT_LABEL[i];; ??? = DUMP_MEM_OOM_LABEL[i])
        {
          ??? = new MemItem(???, ???, arrayOfLong4[i], arrayOfLong5[i], DUMP_MEM_OOM_ADJ[i]);
          ???.subitems = arrayOfArrayList[i];
          paramArrayOfString.add(???);
          i += 1;
          break;
        }
      }
      if ((j != 0) && (bool2) && (l10 != 0L))
      {
        bool1 = true;
        if ((!paramBoolean) && (k == 0)) {
          break label3764;
        }
        label3023:
        if (!bool5) {
          paramPrintWriter1.println("Total PSS by OOM adjustment:");
        }
        dumpMemItems(paramPrintWriter1, "  ", "oom", paramArrayOfString, false, bool5, bool1);
        if ((!paramBoolean) && (k == 0)) {
          break label3804;
        }
        if (!bool5) {
          paramPrintWriter1.println();
        }
        ??? = new MemInfoReader();
        ???.readMemInfo();
        if (l2 <= 0L) {}
      }
      try
      {
        boostPriorityForLockedSection();
        l3 = ???.getCachedSizeKb();
        l4 = ???.getFreeSizeKb();
        l5 = ???.getZramTotalSizeKb();
        l6 = ???.getKernelUsedSizeKb();
        EventLogTags.writeAmMeminfo(l3 * 1024L, l4 * 1024L, l5 * 1024L, l6 * 1024L, l2 * 1024L);
        this.mProcessStats.addSysMemUsageLocked(l3, l4, l5, l6, l2);
        resetPriorityAfterLockedSection();
        if (paramBoolean) {
          break label3344;
        }
        if (bool5) {
          break label3901;
        }
        paramPrintWriter1.print("Total RAM: ");
        paramPrintWriter1.print(stringifyKBSize(???.getTotalSizeKb()));
        paramPrintWriter1.print(" (status ");
        switch (this.mLastMemoryLevel)
        {
        default: 
          paramPrintWriter1.print(this.mLastMemoryLevel);
          paramPrintWriter1.println(")");
        }
      }
      finally
      {
        label3259:
        resetPriorityAfterLockedSection();
      }
      paramPrintWriter1.print(" Free RAM: ");
      paramPrintWriter1.print(stringifyKBSize(???.getCachedSizeKb() + l1 + ???.getFreeSizeKb()));
      paramPrintWriter1.print(" (");
      paramPrintWriter1.print(stringifyKBSize(l1));
      paramPrintWriter1.print(" cached pss + ");
      paramPrintWriter1.print(stringifyKBSize(???.getCachedSizeKb()));
      paramPrintWriter1.print(" cached kernel + ");
      paramPrintWriter1.print(stringifyKBSize(???.getFreeSizeKb()));
      paramPrintWriter1.println(" free)");
      label3344:
      l2 = ???.getTotalSizeKb() - (l9 - l10) - ???.getFreeSizeKb() - ???.getCachedSizeKb() - ???.getKernelUsedSizeKb() - ???.getZramTotalSizeKb();
      if (!bool5)
      {
        paramPrintWriter1.print(" Used RAM: ");
        paramPrintWriter1.print(stringifyKBSize(l9 - l1 + ???.getKernelUsedSizeKb()));
        paramPrintWriter1.print(" (");
        paramPrintWriter1.print(stringifyKBSize(l9 - l1));
        paramPrintWriter1.print(" used pss + ");
        paramPrintWriter1.print(stringifyKBSize(???.getKernelUsedSizeKb()));
        paramPrintWriter1.print(" kernel)\n");
        paramPrintWriter1.print(" Lost RAM: ");
        paramPrintWriter1.println(stringifyKBSize(l2));
        label3465:
        if (paramBoolean) {
          break label4187;
        }
        if (???.getZramTotalSizeKb() != 0L)
        {
          if (bool5) {
            break label3974;
          }
          paramPrintWriter1.print("     ZRAM: ");
          paramPrintWriter1.print(stringifyKBSize(???.getZramTotalSizeKb()));
          paramPrintWriter1.print(" physical used for ");
          paramPrintWriter1.print(stringifyKBSize(???.getSwapTotalSizeKb() - ???.getSwapFreeSizeKb()));
          paramPrintWriter1.print(" in swap (");
          paramPrintWriter1.print(stringifyKBSize(???.getSwapTotalSizeKb()));
          paramPrintWriter1.println(" total swap)");
        }
        label3550:
        ??? = getKsmInfo();
        if (bool5) {
          break label4041;
        }
        if ((???[1] == 0L) && (???[0] == 0L)) {
          break label4022;
        }
      }
      for (;;)
      {
        label3576:
        paramPrintWriter1.print("      KSM: ");
        paramPrintWriter1.print(stringifyKBSize(???[1]));
        paramPrintWriter1.print(" saved from shared ");
        paramPrintWriter1.print(stringifyKBSize(???[0]));
        paramPrintWriter1.print("           ");
        paramPrintWriter1.print(stringifyKBSize(???[2]));
        paramPrintWriter1.print(" unshared; ");
        paramPrintWriter1.print(stringifyKBSize(???[3]));
        paramPrintWriter1.println(" volatile");
        label3764:
        label3804:
        label3901:
        label3974:
        label4022:
        do
        {
          paramPrintWriter1.print("   Tuning: ");
          paramPrintWriter1.print(ActivityManager.staticGetMemoryClass());
          paramPrintWriter1.print(" (large ");
          paramPrintWriter1.print(ActivityManager.staticGetLargeMemoryClass());
          paramPrintWriter1.print("), oom ");
          paramPrintWriter1.print(stringifySize(this.mProcessList.getMemLevel(906), 1024));
          paramPrintWriter1.print(", restore limit ");
          paramPrintWriter1.print(stringifyKBSize(this.mProcessList.getCachedRestoreThresholdKb()));
          if (ActivityManager.isLowRamDeviceStatic()) {
            paramPrintWriter1.print(" (low-ram)");
          }
          if (ActivityManager.isHighEndGfx()) {
            paramPrintWriter1.print(" (high-end-gfx)");
          }
          paramPrintWriter1.println();
          return;
          bool1 = false;
          break;
          if (bool5) {
            break label3023;
          }
          paramPrintWriter1.println();
          paramPrintWriter1.println("Total PSS by process:");
          dumpMemItems(paramPrintWriter1, "  ", "proc", localArrayList1, true, bool5, bool1);
          paramPrintWriter1.println();
          break label3023;
          if (paramPrintWriter2 != null) {}
          for (;;)
          {
            if (!bool5)
            {
              paramPrintWriter2.println();
              paramPrintWriter2.println("Total PSS by category:");
            }
            dumpMemItems(paramPrintWriter2, "  ", "cat", ???, true, bool5, bool1);
            break;
            paramPrintWriter2 = paramPrintWriter1;
          }
          paramPrintWriter1.println("moderate)");
          break label3259;
          paramPrintWriter1.println("low)");
          break label3259;
          paramPrintWriter1.println("critical)");
          break label3259;
          paramPrintWriter1.print("ram,");
          paramPrintWriter1.print(???.getTotalSizeKb());
          paramPrintWriter1.print(",");
          paramPrintWriter1.print(???.getCachedSizeKb() + l1 + ???.getFreeSizeKb());
          paramPrintWriter1.print(",");
          paramPrintWriter1.println(l9 - l1);
          break label3344;
          paramPrintWriter1.print("lostram,");
          paramPrintWriter1.println(l2);
          break label3465;
          paramPrintWriter1.print("zram,");
          paramPrintWriter1.print(???.getZramTotalSizeKb());
          paramPrintWriter1.print(",");
          paramPrintWriter1.print(???.getSwapTotalSizeKb());
          paramPrintWriter1.print(",");
          paramPrintWriter1.println(???.getSwapFreeSizeKb());
          break label3550;
          if (???[2] != 0L) {
            break label3576;
          }
        } while (???[3] == 0L);
      }
      label4041:
      paramPrintWriter1.print("ksm,");
      paramPrintWriter1.print(???[1]);
      paramPrintWriter1.print(",");
      paramPrintWriter1.print(???[0]);
      paramPrintWriter1.print(",");
      paramPrintWriter1.print(???[2]);
      paramPrintWriter1.print(",");
      paramPrintWriter1.println(???[3]);
      paramPrintWriter1.print("tuning,");
      paramPrintWriter1.print(ActivityManager.staticGetMemoryClass());
      paramPrintWriter1.print(',');
      paramPrintWriter1.print(ActivityManager.staticGetLargeMemoryClass());
      paramPrintWriter1.print(',');
      paramPrintWriter1.print(this.mProcessList.getMemLevel(906) / 1024L);
      if (ActivityManager.isLowRamDeviceStatic()) {
        paramPrintWriter1.print(",low-ram");
      }
      if (ActivityManager.isHighEndGfx()) {
        paramPrintWriter1.print(",high-end-gfx");
      }
      paramPrintWriter1.println();
      return;
      label4187:
      return;
      continue;
      l11 = l9;
      l9 = l7;
      l7 = l5;
      l5 = l2;
      l2 = l3;
      l3 = l4;
      label4215:
      i += 1;
      l4 = l3;
      l3 = l2;
      l2 = l5;
      l5 = l7;
      l7 = l9;
      l9 = l11;
    }
  }
  
  void dumpAssociationsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean1, boolean paramBoolean2, String paramString)
  {
    paramPrintWriter.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
    int i = 0;
    paramInt = i;
    if (paramString != null) {
      paramFileDescriptor = AppGlobals.getPackageManager();
    }
    try
    {
      paramInt = paramFileDescriptor.getPackageUid(paramString, 8192, 0);
      m = 0;
      l3 = SystemClock.uptimeMillis();
      i = 0;
      int i2 = this.mAssociations.size();
      if (i < i2)
      {
        paramFileDescriptor = (ArrayMap)this.mAssociations.valueAt(i);
        j = 0;
        int i3 = paramFileDescriptor.size();
        if (j < i3)
        {
          paramArrayOfString = (SparseArray)paramFileDescriptor.valueAt(j);
          k = 0;
          int i4 = paramArrayOfString.size();
          if (k < i4)
          {
            ArrayMap localArrayMap = (ArrayMap)paramArrayOfString.valueAt(k);
            i1 = 0;
            int i5 = localArrayMap.size();
            n = m;
            m = i1;
            for (;;)
            {
              if (m >= i5) {
                break label552;
              }
              localAssociation = (Association)localArrayMap.valueAt(m);
              if ((paramString == null) || (localAssociation.mTargetComponent.getPackageName().equals(paramString)) || (UserHandle.getAppId(localAssociation.mSourceUid) == paramInt)) {
                break;
              }
              m += 1;
            }
          }
        }
      }
    }
    catch (RemoteException paramFileDescriptor)
    {
      int m;
      for (;;)
      {
        long l3;
        int j;
        int k;
        Association localAssociation;
        paramInt = i;
        continue;
        int i1 = 1;
        paramPrintWriter.print("  ");
        paramPrintWriter.print(localAssociation.mTargetProcess);
        paramPrintWriter.print("/");
        UserHandle.formatUid(paramPrintWriter, localAssociation.mTargetUid);
        paramPrintWriter.print(" <- ");
        paramPrintWriter.print(localAssociation.mSourceProcess);
        paramPrintWriter.print("/");
        UserHandle.formatUid(paramPrintWriter, localAssociation.mSourceUid);
        paramPrintWriter.println();
        paramPrintWriter.print("    via ");
        paramPrintWriter.print(localAssociation.mTargetComponent.flattenToShortString());
        paramPrintWriter.println();
        paramPrintWriter.print("    ");
        long l2 = localAssociation.mTime;
        long l1 = l2;
        if (localAssociation.mNesting > 0) {
          l1 = l2 + (l3 - localAssociation.mStartTime);
        }
        TimeUtils.formatDuration(l1, paramPrintWriter);
        paramPrintWriter.print(" (");
        paramPrintWriter.print(localAssociation.mCount);
        paramPrintWriter.print(" times)");
        paramPrintWriter.print("  ");
        int n = 0;
        while (n < localAssociation.mStateTimes.length)
        {
          l2 = localAssociation.mStateTimes[n];
          l1 = l2;
          if (localAssociation.mLastState + 1 == n) {
            l1 = l2 + (l3 - localAssociation.mLastStateUptime);
          }
          if (l1 != 0L)
          {
            paramPrintWriter.print(" ");
            paramPrintWriter.print(ProcessList.makeProcStateString(n - 1));
            paramPrintWriter.print("=");
            TimeUtils.formatDuration(l1, paramPrintWriter);
            if (localAssociation.mLastState + 1 == n) {
              paramPrintWriter.print("*");
            }
          }
          n += 1;
        }
        paramPrintWriter.println();
        n = i1;
        if (localAssociation.mNesting > 0)
        {
          paramPrintWriter.print("    Currently active: ");
          TimeUtils.formatDuration(l3 - localAssociation.mStartTime, paramPrintWriter);
          paramPrintWriter.println();
          n = i1;
          continue;
          label552:
          k += 1;
          m = n;
          continue;
          j += 1;
          continue;
          i += 1;
        }
      }
      if (m == 0) {
        paramPrintWriter.println("  (nothing)");
      }
    }
  }
  
  void dumpBroadcastStatsCheckinLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    if (this.mCurBroadcastStats == null) {
      return;
    }
    if (this.mLastBroadcastStats != null)
    {
      this.mLastBroadcastStats.dumpCheckinStats(paramPrintWriter, paramString);
      if (paramBoolean)
      {
        this.mLastBroadcastStats = null;
        return;
      }
    }
    this.mCurBroadcastStats.dumpCheckinStats(paramPrintWriter, paramString);
    if (paramBoolean) {
      this.mCurBroadcastStats = null;
    }
  }
  
  void dumpBroadcastStatsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    if (this.mCurBroadcastStats == null) {
      return;
    }
    paramPrintWriter.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
    long l = SystemClock.elapsedRealtime();
    if (this.mLastBroadcastStats != null)
    {
      paramPrintWriter.print("  Last stats (from ");
      TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, l, paramPrintWriter);
      paramPrintWriter.print(" to ");
      TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, l, paramPrintWriter);
      paramPrintWriter.print(", ");
      TimeUtils.formatDuration(this.mLastBroadcastStats.mEndUptime - this.mLastBroadcastStats.mStartUptime, paramPrintWriter);
      paramPrintWriter.println(" uptime):");
      if (!this.mLastBroadcastStats.dumpStats(paramPrintWriter, "    ", paramString)) {
        paramPrintWriter.println("    (nothing)");
      }
      paramPrintWriter.println();
    }
    paramPrintWriter.print("  Current stats (from ");
    TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, l, paramPrintWriter);
    paramPrintWriter.print(" to now, ");
    TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, paramPrintWriter);
    paramPrintWriter.println(" uptime):");
    if (!this.mCurBroadcastStats.dumpStats(paramPrintWriter, "    ", paramString)) {
      paramPrintWriter.println("    (nothing)");
    }
  }
  
  void dumpBroadcastsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    boolean bool6 = false;
    boolean bool7 = false;
    boolean bool5 = false;
    int k = 0;
    int j = 0;
    boolean bool2 = false;
    int m = 0;
    boolean bool4 = paramBoolean;
    Object localObject1 = paramString;
    boolean bool3;
    if ("history".equals(paramString))
    {
      bool3 = paramBoolean;
      if (paramInt < paramArrayOfString.length)
      {
        bool3 = paramBoolean;
        if ("-s".equals(paramArrayOfString[paramInt])) {
          bool3 = false;
        }
      }
      k = 1;
      localObject1 = null;
      bool4 = bool3;
    }
    paramPrintWriter.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
    paramBoolean = bool7;
    boolean bool1 = bool2;
    Object localObject2;
    if (k == 0)
    {
      paramBoolean = bool7;
      bool1 = bool2;
      if (bool4)
      {
        paramBoolean = bool6;
        if (this.mRegisteredReceivers.size() > 0)
        {
          j = 0;
          paramString = this.mRegisteredReceivers.values().iterator();
          bool1 = m;
          m = j;
          bool3 = bool5;
          for (;;)
          {
            paramBoolean = bool3;
            j = bool1;
            if (!paramString.hasNext()) {
              break;
            }
            localObject2 = (ReceiverList)paramString.next();
            if ((localObject1 == null) || ((((ReceiverList)localObject2).app != null) && (((String)localObject1).equals(((ReceiverList)localObject2).app.info.packageName))))
            {
              j = m;
              if (m == 0)
              {
                paramPrintWriter.println("  Registered Receivers:");
                bool3 = true;
                j = 1;
                bool1 = true;
              }
              paramPrintWriter.print("  * ");
              paramPrintWriter.println(localObject2);
              ((ReceiverList)localObject2).dump(paramPrintWriter, "    ");
              m = j;
            }
          }
        }
        localObject2 = this.mReceiverResolver;
        if (!paramBoolean) {
          break label375;
        }
      }
    }
    label375:
    for (paramString = "\n  Receiver Resolver Table:";; paramString = "  Receiver Resolver Table:")
    {
      bool1 = j;
      if (((IntentResolver)localObject2).dump(paramPrintWriter, paramString, "    ", (String)localObject1, false, false))
      {
        paramBoolean = true;
        bool1 = true;
      }
      paramString = this.mBroadcastQueues;
      m = paramString.length;
      j = 0;
      while (j < m)
      {
        paramBoolean = paramString[j].dumpLocked(paramFileDescriptor, paramPrintWriter, paramArrayOfString, paramInt, bool4, (String)localObject1, paramBoolean);
        bool1 |= paramBoolean;
        j += 1;
      }
    }
    paramInt = bool1;
    if (k == 0)
    {
      paramInt = bool1;
      if (this.mStickyBroadcasts != null)
      {
        paramInt = bool1;
        if (localObject1 == null)
        {
          j = 0;
          for (paramInt = bool1; j < this.mStickyBroadcasts.size(); paramInt = bool1)
          {
            if (1 != 0) {
              paramPrintWriter.println();
            }
            bool1 = true;
            paramPrintWriter.print("  Sticky broadcasts for user ");
            paramPrintWriter.print(this.mStickyBroadcasts.keyAt(j));
            paramPrintWriter.println(":");
            paramFileDescriptor = new StringBuilder(128);
            paramArrayOfString = ((ArrayMap)this.mStickyBroadcasts.valueAt(j)).entrySet().iterator();
            while (paramArrayOfString.hasNext())
            {
              paramString = (Map.Entry)paramArrayOfString.next();
              paramPrintWriter.print("  * Sticky action ");
              paramPrintWriter.print((String)paramString.getKey());
              if (bool4)
              {
                paramPrintWriter.println(":");
                paramString = (ArrayList)paramString.getValue();
                m = paramString.size();
                paramInt = 0;
                while (paramInt < m)
                {
                  paramFileDescriptor.setLength(0);
                  paramFileDescriptor.append("    Intent: ");
                  ((Intent)paramString.get(paramInt)).toShortString(paramFileDescriptor, false, true, false, false);
                  paramPrintWriter.println(paramFileDescriptor.toString());
                  localObject1 = ((Intent)paramString.get(paramInt)).getExtras();
                  if (localObject1 != null)
                  {
                    paramPrintWriter.print("      ");
                    paramPrintWriter.println(((Bundle)localObject1).toString());
                  }
                  paramInt += 1;
                }
              }
              else
              {
                paramPrintWriter.println("");
              }
            }
            j += 1;
          }
        }
      }
    }
    int i = paramInt;
    if (k == 0)
    {
      i = paramInt;
      if (bool4)
      {
        paramPrintWriter.println();
        paramFileDescriptor = this.mBroadcastQueues;
        paramInt = 0;
        i = paramFileDescriptor.length;
        while (paramInt < i)
        {
          paramArrayOfString = paramFileDescriptor[paramInt];
          paramPrintWriter.println("  mBroadcastsScheduled [" + paramArrayOfString.mQueueName + "]=" + paramArrayOfString.mBroadcastsScheduled);
          paramInt += 1;
        }
        paramPrintWriter.println("  mHandler:");
        this.mHandler.dump(new PrintWriterPrinter(paramPrintWriter), "    ");
        i = 1;
      }
    }
    if (i == 0) {
      paramPrintWriter.println("  (nothing)");
    }
  }
  
  /* Error */
  final void dumpDbInfo(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_2
    //   2: iconst_0
    //   3: iconst_0
    //   4: aload_3
    //   5: invokevirtual 7717	com/android/server/am/ActivityManagerService:collectProcesses	(Ljava/io/PrintWriter;IZ[Ljava/lang/String;)Ljava/util/ArrayList;
    //   8: astore 5
    //   10: aload 5
    //   12: ifnonnull +30 -> 42
    //   15: aload_2
    //   16: new 1066	java/lang/StringBuilder
    //   19: dup
    //   20: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   23: ldc_w 7789
    //   26: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   29: aload_3
    //   30: iconst_0
    //   31: aaload
    //   32: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   35: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   38: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   41: return
    //   42: aload_2
    //   43: ldc_w 8118
    //   46: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   49: aload 5
    //   51: invokevirtual 2580	java/util/ArrayList:size	()I
    //   54: iconst_1
    //   55: isub
    //   56: istore 4
    //   58: iload 4
    //   60: iflt +195 -> 255
    //   63: aload 5
    //   65: iload 4
    //   67: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   70: checkcast 2141	com/android/server/am/ProcessRecord
    //   73: astore 6
    //   75: aload 6
    //   77: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   80: ifnull +176 -> 256
    //   83: aload_2
    //   84: new 1066	java/lang/StringBuilder
    //   87: dup
    //   88: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   91: ldc_w 8120
    //   94: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   97: aload 6
    //   99: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   102: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   105: ldc_w 6008
    //   108: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   111: aload 6
    //   113: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   116: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   119: ldc_w 7766
    //   122: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   125: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   128: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   131: aload_2
    //   132: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   135: new 4101	com/android/internal/os/TransferPipe
    //   138: dup
    //   139: invokespecial 4102	com/android/internal/os/TransferPipe:<init>	()V
    //   142: astore 7
    //   144: aload 6
    //   146: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   149: aload 7
    //   151: invokevirtual 4105	com/android/internal/os/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
    //   154: invokevirtual 4109	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
    //   157: aload_3
    //   158: invokeinterface 8123 3 0
    //   163: aload 7
    //   165: aload_1
    //   166: invokevirtual 4120	com/android/internal/os/TransferPipe:go	(Ljava/io/FileDescriptor;)V
    //   169: aload 7
    //   171: invokevirtual 4122	com/android/internal/os/TransferPipe:kill	()V
    //   174: goto +82 -> 256
    //   177: astore 8
    //   179: aload 7
    //   181: invokevirtual 4122	com/android/internal/os/TransferPipe:kill	()V
    //   184: aload 8
    //   186: athrow
    //   187: astore 7
    //   189: aload_2
    //   190: new 1066	java/lang/StringBuilder
    //   193: dup
    //   194: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   197: ldc_w 8125
    //   200: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   203: aload 6
    //   205: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   208: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   211: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   214: aload_2
    //   215: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   218: goto +38 -> 256
    //   221: astore 7
    //   223: aload_2
    //   224: new 1066	java/lang/StringBuilder
    //   227: dup
    //   228: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   231: ldc_w 8127
    //   234: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   237: aload 6
    //   239: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   242: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   245: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   248: aload_2
    //   249: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   252: goto +4 -> 256
    //   255: return
    //   256: iload 4
    //   258: iconst_1
    //   259: isub
    //   260: istore 4
    //   262: goto -204 -> 58
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	265	0	this	ActivityManagerService
    //   0	265	1	paramFileDescriptor	FileDescriptor
    //   0	265	2	paramPrintWriter	PrintWriter
    //   0	265	3	paramArrayOfString	String[]
    //   56	205	4	i	int
    //   8	56	5	localArrayList	ArrayList
    //   73	165	6	localProcessRecord	ProcessRecord
    //   142	38	7	localTransferPipe	TransferPipe
    //   187	1	7	localIOException	IOException
    //   221	1	7	localRemoteException	RemoteException
    //   177	8	8	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   144	169	177	finally
    //   135	144	187	java/io/IOException
    //   169	174	187	java/io/IOException
    //   179	187	187	java/io/IOException
    //   135	144	221	android/os/RemoteException
    //   169	174	221	android/os/RemoteException
    //   179	187	221	android/os/RemoteException
  }
  
  /* Error */
  final void dumpGraphicsHardwareUsage(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_2
    //   2: iconst_0
    //   3: iconst_0
    //   4: aload_3
    //   5: invokevirtual 7717	com/android/server/am/ActivityManagerService:collectProcesses	(Ljava/io/PrintWriter;IZ[Ljava/lang/String;)Ljava/util/ArrayList;
    //   8: astore 9
    //   10: aload 9
    //   12: ifnonnull +30 -> 42
    //   15: aload_2
    //   16: new 1066	java/lang/StringBuilder
    //   19: dup
    //   20: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   23: ldc_w 7789
    //   26: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   29: aload_3
    //   30: iconst_0
    //   31: aaload
    //   32: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   35: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   38: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   41: return
    //   42: invokestatic 1504	android/os/SystemClock:uptimeMillis	()J
    //   45: lstore 5
    //   47: invokestatic 4231	android/os/SystemClock:elapsedRealtime	()J
    //   50: lstore 7
    //   52: aload_2
    //   53: ldc_w 8130
    //   56: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   59: aload_2
    //   60: new 1066	java/lang/StringBuilder
    //   63: dup
    //   64: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   67: ldc_w 4146
    //   70: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   73: lload 5
    //   75: invokevirtual 2337	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   78: ldc_w 4148
    //   81: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   84: lload 7
    //   86: invokevirtual 2337	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   89: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   92: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   95: aload 9
    //   97: invokevirtual 2580	java/util/ArrayList:size	()I
    //   100: iconst_1
    //   101: isub
    //   102: istore 4
    //   104: iload 4
    //   106: iflt +195 -> 301
    //   109: aload 9
    //   111: iload 4
    //   113: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   116: checkcast 2141	com/android/server/am/ProcessRecord
    //   119: astore 10
    //   121: aload 10
    //   123: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   126: ifnull +176 -> 302
    //   129: aload_2
    //   130: new 1066	java/lang/StringBuilder
    //   133: dup
    //   134: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   137: ldc_w 8132
    //   140: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   143: aload 10
    //   145: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   148: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   151: ldc_w 6008
    //   154: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   157: aload 10
    //   159: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   162: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   165: ldc_w 7766
    //   168: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   171: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   174: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   177: aload_2
    //   178: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   181: new 4101	com/android/internal/os/TransferPipe
    //   184: dup
    //   185: invokespecial 4102	com/android/internal/os/TransferPipe:<init>	()V
    //   188: astore 11
    //   190: aload 10
    //   192: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   195: aload 11
    //   197: invokevirtual 4105	com/android/internal/os/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
    //   200: invokevirtual 4109	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
    //   203: aload_3
    //   204: invokeinterface 8135 3 0
    //   209: aload 11
    //   211: aload_1
    //   212: invokevirtual 4120	com/android/internal/os/TransferPipe:go	(Ljava/io/FileDescriptor;)V
    //   215: aload 11
    //   217: invokevirtual 4122	com/android/internal/os/TransferPipe:kill	()V
    //   220: goto +82 -> 302
    //   223: astore 12
    //   225: aload 11
    //   227: invokevirtual 4122	com/android/internal/os/TransferPipe:kill	()V
    //   230: aload 12
    //   232: athrow
    //   233: astore 11
    //   235: aload_2
    //   236: new 1066	java/lang/StringBuilder
    //   239: dup
    //   240: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   243: ldc_w 8125
    //   246: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   249: aload 10
    //   251: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   254: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   257: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   260: aload_2
    //   261: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   264: goto +38 -> 302
    //   267: astore 11
    //   269: aload_2
    //   270: new 1066	java/lang/StringBuilder
    //   273: dup
    //   274: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   277: ldc_w 8127
    //   280: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   283: aload 10
    //   285: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   288: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   291: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   294: aload_2
    //   295: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   298: goto +4 -> 302
    //   301: return
    //   302: iload 4
    //   304: iconst_1
    //   305: isub
    //   306: istore 4
    //   308: goto -204 -> 104
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	311	0	this	ActivityManagerService
    //   0	311	1	paramFileDescriptor	FileDescriptor
    //   0	311	2	paramPrintWriter	PrintWriter
    //   0	311	3	paramArrayOfString	String[]
    //   102	205	4	i	int
    //   45	29	5	l1	long
    //   50	35	7	l2	long
    //   8	102	9	localArrayList	ArrayList
    //   119	165	10	localProcessRecord	ProcessRecord
    //   188	38	11	localTransferPipe	TransferPipe
    //   233	1	11	localIOException	IOException
    //   267	1	11	localRemoteException	RemoteException
    //   223	8	12	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   190	215	223	finally
    //   181	190	233	java/io/IOException
    //   215	220	233	java/io/IOException
    //   225	233	233	java/io/IOException
    //   181	190	267	android/os/RemoteException
    //   215	220	267	android/os/RemoteException
    //   225	233	267	android/os/RemoteException
  }
  
  public boolean dumpHeap(String paramString1, int paramInt, boolean paramBoolean, String paramString2, ParcelFileDescriptor paramParcelFileDescriptor)
    throws RemoteException
  {
    localObject1 = paramParcelFileDescriptor;
    localObject2 = paramParcelFileDescriptor;
    try
    {
      try
      {
        boostPriorityForLockedSection();
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
          throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
      }
      finally
      {
        localObject1 = paramParcelFileDescriptor;
        localObject2 = paramParcelFileDescriptor;
        localObject1 = paramParcelFileDescriptor;
        localObject2 = paramParcelFileDescriptor;
        resetPriorityAfterLockedSection();
        localObject1 = paramParcelFileDescriptor;
        localObject2 = paramParcelFileDescriptor;
      }
      try
      {
        ((ParcelFileDescriptor)localObject2).close();
        throw paramString1;
        if (paramParcelFileDescriptor == null) {
          throw new IllegalArgumentException("null fd");
        }
        localObject1 = findProcessLocked(paramString1, paramInt, "dumpHeap");
        if ((localObject1 == null) || (((ProcessRecord)localObject1).thread == null)) {
          throw new IllegalArgumentException("Unknown process: " + paramString1);
        }
        if ((!"1".equals(SystemProperties.get("ro.debuggable", "0"))) && ((((ProcessRecord)localObject1).info.flags & 0x2) == 0)) {
          throw new SecurityException("Process not debuggable: " + localObject1);
        }
        ((ProcessRecord)localObject1).thread.dumpHeap(paramBoolean, paramString2, paramParcelFileDescriptor);
        paramString2 = null;
        paramString1 = null;
        localObject1 = paramString1;
        localObject2 = paramString2;
        localObject1 = paramString1;
        localObject2 = paramString2;
        resetPriorityAfterLockedSection();
        return true;
      }
      catch (IOException paramString2)
      {
        for (;;) {}
      }
    }
    catch (RemoteException paramString1)
    {
      localObject2 = localObject1;
      throw new IllegalStateException("Process disappeared");
    }
    finally
    {
      if (localObject2 == null) {}
    }
  }
  
  public void dumpHeapFinished(String paramString)
  {
    try
    {
      boostPriorityForLockedSection();
      if (Binder.getCallingPid() != this.mMemWatchDumpPid)
      {
        Slog.w(TAG, "dumpHeapFinished: Calling pid " + Binder.getCallingPid() + " does not match last pid " + this.mMemWatchDumpPid);
        return;
      }
      if ((this.mMemWatchDumpFile != null) && (this.mMemWatchDumpFile.equals(paramString)))
      {
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
          Slog.d(TAG_PSS, "Dump heap finished for " + paramString);
        }
        this.mHandler.sendEmptyMessage(51);
        return;
      }
      Slog.w(TAG, "dumpHeapFinished: Calling path " + paramString + " does not match last path " + this.mMemWatchDumpFile);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  boolean dumpOomLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean)
  {
    boolean bool = false;
    if (this.mLruProcesses.size() > 0)
    {
      if (0 != 0) {
        paramPrintWriter.println();
      }
      paramPrintWriter.println("  OOM levels:");
      printOomLevel(paramPrintWriter, "SYSTEM_ADJ", 64636);
      printOomLevel(paramPrintWriter, "PERSISTENT_PROC_ADJ", 64736);
      printOomLevel(paramPrintWriter, "PERSISTENT_SERVICE_ADJ", 64836);
      printOomLevel(paramPrintWriter, "FOREGROUND_APP_ADJ", 0);
      printOomLevel(paramPrintWriter, "VISIBLE_APP_ADJ", 100);
      printOomLevel(paramPrintWriter, "PERCEPTIBLE_APP_ADJ", 200);
      printOomLevel(paramPrintWriter, "BACKUP_APP_ADJ", 300);
      printOomLevel(paramPrintWriter, "HEAVY_WEIGHT_APP_ADJ", 400);
      printOomLevel(paramPrintWriter, "SERVICE_ADJ", 500);
      printOomLevel(paramPrintWriter, "HOME_APP_ADJ", 600);
      printOomLevel(paramPrintWriter, "PREVIOUS_APP_ADJ", 700);
      printOomLevel(paramPrintWriter, "SERVICE_B_ADJ", 800);
      printOomLevel(paramPrintWriter, "CACHED_APP_MIN_ADJ", 900);
      printOomLevel(paramPrintWriter, "CACHED_APP_MAX_ADJ", 906);
      if (1 != 0) {
        paramPrintWriter.println();
      }
      paramPrintWriter.print("  Process OOM control (");
      paramPrintWriter.print(this.mLruProcesses.size());
      paramPrintWriter.print(" total, non-act at ");
      paramPrintWriter.print(this.mLruProcesses.size() - this.mLruProcessActivityStart);
      paramPrintWriter.print(", non-svc at ");
      paramPrintWriter.print(this.mLruProcesses.size() - this.mLruProcessServiceStart);
      paramPrintWriter.println("):");
      dumpProcessOomList(paramPrintWriter, this, this.mLruProcesses, "    ", "Proc", "PERS", true, null);
      bool = true;
    }
    dumpProcessesToGc(paramFileDescriptor, paramPrintWriter, paramArrayOfString, paramInt, bool, paramBoolean, null);
    paramPrintWriter.println();
    paramPrintWriter.println("  mHomeProcess: " + this.mHomeProcess);
    paramPrintWriter.println("  mPreviousProcess: " + this.mPreviousProcess);
    if (this.mHeavyWeightProcess != null) {
      paramPrintWriter.println("  mHeavyWeightProcess: " + this.mHeavyWeightProcess);
    }
    return true;
  }
  
  void dumpPendingIntentsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    int i = 0;
    paramInt = 0;
    paramPrintWriter.println("ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents)");
    if (this.mIntentSenderRecords.size() > 0)
    {
      paramArrayOfString = this.mIntentSenderRecords.values().iterator();
      for (;;)
      {
        i = paramInt;
        if (!paramArrayOfString.hasNext()) {
          break;
        }
        WeakReference localWeakReference = (WeakReference)paramArrayOfString.next();
        if (localWeakReference != null) {}
        for (paramFileDescriptor = (PendingIntentRecord)localWeakReference.get();; paramFileDescriptor = null)
        {
          if ((paramString != null) && ((paramFileDescriptor == null) || (!paramString.equals(paramFileDescriptor.key.packageName)))) {
            break label144;
          }
          i = 1;
          if (paramFileDescriptor == null) {
            break label146;
          }
          paramPrintWriter.print("  * ");
          paramPrintWriter.println(paramFileDescriptor);
          paramInt = i;
          if (!paramBoolean) {
            break;
          }
          paramFileDescriptor.dump(paramPrintWriter, "    ");
          paramInt = i;
          break;
        }
        label144:
        continue;
        label146:
        paramPrintWriter.print("  * ");
        paramPrintWriter.println(localWeakReference);
        paramInt = i;
      }
    }
    if (i == 0) {
      paramPrintWriter.println("  (nothing)");
    }
  }
  
  void dumpPermissionsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    int j = 0;
    int m = 0;
    paramInt = 0;
    paramPrintWriter.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
    if (this.mGrantedUriPermissions.size() > 0)
    {
      int k = 0;
      int i = -2;
      if (paramString != null) {}
      int i2;
      int n;
      try
      {
        i = this.mContext.getPackageManager().getPackageUidAsUser(paramString, 8192, 0);
        i1 = 0;
        for (;;)
        {
          m = paramInt;
          if (i1 >= this.mGrantedUriPermissions.size()) {
            break label266;
          }
          i2 = this.mGrantedUriPermissions.keyAt(i1);
          if ((i < -1) || (UserHandle.getAppId(i2) == i)) {
            break;
          }
          i2 = paramInt;
          i1 += 1;
          paramInt = i2;
        }
      }
      catch (PackageManager.NameNotFoundException paramFileDescriptor)
      {
        int i1;
        for (;;)
        {
          i = -1;
        }
        paramFileDescriptor = (ArrayMap)this.mGrantedUriPermissions.valueAt(i1);
        n = j;
        m = k;
        if (k == 0)
        {
          if (j != 0) {
            paramPrintWriter.println();
          }
          n = 1;
          paramPrintWriter.println("  Granted Uri Permissions:");
          m = 1;
          paramInt = 1;
        }
        paramPrintWriter.print("  * UID ");
        paramPrintWriter.print(i2);
        paramPrintWriter.println(" holds:");
        paramFileDescriptor = paramFileDescriptor.values().iterator();
      }
      for (;;)
      {
        j = n;
        k = m;
        i2 = paramInt;
        if (!paramFileDescriptor.hasNext()) {
          break;
        }
        paramArrayOfString = (UriPermission)paramFileDescriptor.next();
        paramPrintWriter.print("    ");
        paramPrintWriter.println(paramArrayOfString);
        if (paramBoolean) {
          paramArrayOfString.dump(paramPrintWriter, "      ");
        }
      }
    }
    label266:
    if (m == 0) {
      paramPrintWriter.println("  (nothing)");
    }
  }
  
  /* Error */
  void dumpProcessesLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore 15
    //   3: iconst_0
    //   4: istore 16
    //   6: iconst_0
    //   7: istore 7
    //   9: iconst_0
    //   10: istore 9
    //   12: iconst_0
    //   13: istore 10
    //   15: iconst_0
    //   16: istore 8
    //   18: aload_2
    //   19: ldc_w 8248
    //   22: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   25: iload 5
    //   27: ifeq +286 -> 313
    //   30: aload_0
    //   31: getfield 1470	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/internal/app/ProcessMap;
    //   34: invokevirtual 3535	com/android/internal/app/ProcessMap:getMap	()Landroid/util/ArrayMap;
    //   37: invokevirtual 2287	android/util/ArrayMap:size	()I
    //   40: istore 13
    //   42: iconst_0
    //   43: istore 11
    //   45: iload 16
    //   47: istore 15
    //   49: iload 8
    //   51: istore 10
    //   53: iload 9
    //   55: istore 7
    //   57: iload 11
    //   59: iload 13
    //   61: if_icmpge +252 -> 313
    //   64: aload_0
    //   65: getfield 1470	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/internal/app/ProcessMap;
    //   68: invokevirtual 3535	com/android/internal/app/ProcessMap:getMap	()Landroid/util/ArrayMap;
    //   71: iload 11
    //   73: invokevirtual 3320	android/util/ArrayMap:valueAt	(I)Ljava/lang/Object;
    //   76: checkcast 1455	android/util/SparseArray
    //   79: astore 21
    //   81: aload 21
    //   83: invokevirtual 3536	android/util/SparseArray:size	()I
    //   86: istore 14
    //   88: iconst_0
    //   89: istore 10
    //   91: iload 9
    //   93: istore 7
    //   95: iload 10
    //   97: istore 9
    //   99: iload 16
    //   101: istore 15
    //   103: iload 9
    //   105: iload 14
    //   107: if_icmpge +189 -> 296
    //   110: aload 21
    //   112: iload 9
    //   114: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   117: checkcast 2141	com/android/server/am/ProcessRecord
    //   120: astore 22
    //   122: aload 6
    //   124: ifnull +28 -> 152
    //   127: iload 15
    //   129: istore 17
    //   131: iload 8
    //   133: istore 12
    //   135: iload 7
    //   137: istore 10
    //   139: aload 22
    //   141: getfield 2282	com/android/server/am/ProcessRecord:pkgList	Landroid/util/ArrayMap;
    //   144: aload 6
    //   146: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   149: ifeq +118 -> 267
    //   152: iload 15
    //   154: istore 16
    //   156: iload 15
    //   158: ifne +16 -> 174
    //   161: aload_2
    //   162: ldc_w 8250
    //   165: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   168: iconst_1
    //   169: istore 16
    //   171: iconst_1
    //   172: istore 7
    //   174: aload 22
    //   176: getfield 2154	com/android/server/am/ProcessRecord:persistent	Z
    //   179: ifeq +109 -> 288
    //   182: ldc_w 8252
    //   185: astore 20
    //   187: aload_2
    //   188: aload 20
    //   190: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   193: aload_2
    //   194: ldc_w 8254
    //   197: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   200: aload_2
    //   201: aload 21
    //   203: iload 9
    //   205: invokevirtual 5133	android/util/SparseArray:keyAt	(I)I
    //   208: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   211: aload_2
    //   212: ldc_w 2488
    //   215: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   218: aload_2
    //   219: aload 22
    //   221: invokevirtual 4209	java/io/PrintWriter:println	(Ljava/lang/Object;)V
    //   224: aload 22
    //   226: aload_2
    //   227: ldc_w 4168
    //   230: invokevirtual 8255	com/android/server/am/ProcessRecord:dump	(Ljava/io/PrintWriter;Ljava/lang/String;)V
    //   233: iload 16
    //   235: istore 17
    //   237: iload 8
    //   239: istore 12
    //   241: iload 7
    //   243: istore 10
    //   245: aload 22
    //   247: getfield 2154	com/android/server/am/ProcessRecord:persistent	Z
    //   250: ifeq +17 -> 267
    //   253: iload 8
    //   255: iconst_1
    //   256: iadd
    //   257: istore 12
    //   259: iload 7
    //   261: istore 10
    //   263: iload 16
    //   265: istore 17
    //   267: iload 9
    //   269: iconst_1
    //   270: iadd
    //   271: istore 9
    //   273: iload 17
    //   275: istore 15
    //   277: iload 12
    //   279: istore 8
    //   281: iload 10
    //   283: istore 7
    //   285: goto -182 -> 103
    //   288: ldc_w 8257
    //   291: astore 20
    //   293: goto -106 -> 187
    //   296: iload 11
    //   298: iconst_1
    //   299: iadd
    //   300: istore 11
    //   302: iload 15
    //   304: istore 16
    //   306: iload 7
    //   308: istore 9
    //   310: goto -265 -> 45
    //   313: iload 15
    //   315: istore 16
    //   317: iload 7
    //   319: istore 9
    //   321: aload_0
    //   322: getfield 1472	com/android/server/am/ActivityManagerService:mIsolatedProcesses	Landroid/util/SparseArray;
    //   325: invokevirtual 3536	android/util/SparseArray:size	()I
    //   328: ifle +172 -> 500
    //   331: iconst_0
    //   332: istore 8
    //   334: iconst_0
    //   335: istore 11
    //   337: iload 15
    //   339: istore 16
    //   341: iload 7
    //   343: istore 9
    //   345: iload 11
    //   347: aload_0
    //   348: getfield 1472	com/android/server/am/ActivityManagerService:mIsolatedProcesses	Landroid/util/SparseArray;
    //   351: invokevirtual 3536	android/util/SparseArray:size	()I
    //   354: if_icmpge +146 -> 500
    //   357: aload_0
    //   358: getfield 1472	com/android/server/am/ActivityManagerService:mIsolatedProcesses	Landroid/util/SparseArray;
    //   361: iload 11
    //   363: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   366: checkcast 2141	com/android/server/am/ProcessRecord
    //   369: astore 20
    //   371: aload 6
    //   373: ifnull +28 -> 401
    //   376: iload 15
    //   378: istore 16
    //   380: iload 8
    //   382: istore 9
    //   384: iload 7
    //   386: istore 12
    //   388: aload 20
    //   390: getfield 2282	com/android/server/am/ProcessRecord:pkgList	Landroid/util/ArrayMap;
    //   393: aload 6
    //   395: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   398: ifeq +81 -> 479
    //   401: iload 15
    //   403: istore 16
    //   405: iload 8
    //   407: istore 9
    //   409: iload 8
    //   411: ifne +28 -> 439
    //   414: iload 15
    //   416: ifeq +7 -> 423
    //   419: aload_2
    //   420: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   423: aload_2
    //   424: ldc_w 8259
    //   427: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   430: iconst_1
    //   431: istore 7
    //   433: iconst_1
    //   434: istore 9
    //   436: iconst_1
    //   437: istore 16
    //   439: aload_2
    //   440: ldc_w 8261
    //   443: iconst_3
    //   444: anewarray 1735	java/lang/Object
    //   447: dup
    //   448: iconst_0
    //   449: ldc_w 4168
    //   452: aastore
    //   453: dup
    //   454: iconst_1
    //   455: iload 11
    //   457: invokestatic 2819	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   460: aastore
    //   461: dup
    //   462: iconst_2
    //   463: aload 20
    //   465: invokevirtual 4215	com/android/server/am/ProcessRecord:toString	()Ljava/lang/String;
    //   468: aastore
    //   469: invokestatic 4219	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   472: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   475: iload 7
    //   477: istore 12
    //   479: iload 11
    //   481: iconst_1
    //   482: iadd
    //   483: istore 11
    //   485: iload 16
    //   487: istore 15
    //   489: iload 9
    //   491: istore 8
    //   493: iload 12
    //   495: istore 7
    //   497: goto -160 -> 337
    //   500: iload 16
    //   502: istore 15
    //   504: iload 9
    //   506: istore 7
    //   508: aload_0
    //   509: getfield 1510	com/android/server/am/ActivityManagerService:mActiveUids	Landroid/util/SparseArray;
    //   512: invokevirtual 3536	android/util/SparseArray:size	()I
    //   515: ifle +36 -> 551
    //   518: iload 16
    //   520: istore 15
    //   522: iload 9
    //   524: istore 7
    //   526: aload_0
    //   527: aload_2
    //   528: aload 6
    //   530: aload_0
    //   531: getfield 1510	com/android/server/am/ActivityManagerService:mActiveUids	Landroid/util/SparseArray;
    //   534: ldc_w 8263
    //   537: iload 16
    //   539: invokevirtual 8267	com/android/server/am/ActivityManagerService:dumpUids	(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/util/SparseArray;Ljava/lang/String;Z)Z
    //   542: ifeq +9 -> 551
    //   545: iconst_1
    //   546: istore 15
    //   548: iconst_1
    //   549: istore 7
    //   551: iload 15
    //   553: istore 16
    //   555: iload 7
    //   557: istore 8
    //   559: aload_0
    //   560: getfield 1519	com/android/server/am/ActivityManagerService:mValidateUids	Landroid/util/SparseArray;
    //   563: invokevirtual 3536	android/util/SparseArray:size	()I
    //   566: ifle +36 -> 602
    //   569: iload 15
    //   571: istore 16
    //   573: iload 7
    //   575: istore 8
    //   577: aload_0
    //   578: aload_2
    //   579: aload 6
    //   581: aload_0
    //   582: getfield 1519	com/android/server/am/ActivityManagerService:mValidateUids	Landroid/util/SparseArray;
    //   585: ldc_w 8269
    //   588: iload 15
    //   590: invokevirtual 8267	com/android/server/am/ActivityManagerService:dumpUids	(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/util/SparseArray;Ljava/lang/String;Z)Z
    //   593: ifeq +9 -> 602
    //   596: iconst_1
    //   597: istore 16
    //   599: iconst_1
    //   600: istore 8
    //   602: iload 16
    //   604: istore 15
    //   606: aload_0
    //   607: getfield 1488	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
    //   610: invokevirtual 2580	java/util/ArrayList:size	()I
    //   613: ifle +111 -> 724
    //   616: iload 16
    //   618: ifeq +7 -> 625
    //   621: aload_2
    //   622: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   625: aload_2
    //   626: ldc_w 8271
    //   629: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   632: aload_2
    //   633: aload_0
    //   634: getfield 1488	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
    //   637: invokevirtual 2580	java/util/ArrayList:size	()I
    //   640: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   643: aload_2
    //   644: ldc_w 8206
    //   647: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   650: aload_2
    //   651: aload_0
    //   652: getfield 1488	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
    //   655: invokevirtual 2580	java/util/ArrayList:size	()I
    //   658: aload_0
    //   659: getfield 1490	com/android/server/am/ActivityManagerService:mLruProcessActivityStart	I
    //   662: isub
    //   663: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   666: aload_2
    //   667: ldc_w 8208
    //   670: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   673: aload_2
    //   674: aload_0
    //   675: getfield 1488	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
    //   678: invokevirtual 2580	java/util/ArrayList:size	()I
    //   681: aload_0
    //   682: getfield 1492	com/android/server/am/ActivityManagerService:mLruProcessServiceStart	I
    //   685: isub
    //   686: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   689: aload_2
    //   690: ldc_w 8210
    //   693: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   696: aload_2
    //   697: aload_0
    //   698: aload_0
    //   699: getfield 1488	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
    //   702: ldc_w 4168
    //   705: ldc_w 8212
    //   708: ldc_w 8214
    //   711: iconst_0
    //   712: aload 6
    //   714: invokestatic 8216	com/android/server/am/ActivityManagerService:dumpProcessOomList	(Ljava/io/PrintWriter;Lcom/android/server/am/ActivityManagerService;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Z
    //   717: pop
    //   718: iconst_1
    //   719: istore 15
    //   721: iconst_1
    //   722: istore 8
    //   724: iload 5
    //   726: ifne +16 -> 742
    //   729: iload 15
    //   731: istore 16
    //   733: iload 8
    //   735: istore 7
    //   737: aload 6
    //   739: ifnull +192 -> 931
    //   742: aload_0
    //   743: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   746: astore 20
    //   748: aload 20
    //   750: monitorenter
    //   751: iconst_0
    //   752: istore 9
    //   754: iconst_0
    //   755: istore 11
    //   757: iload 8
    //   759: istore 7
    //   761: iload 9
    //   763: istore 8
    //   765: iload 11
    //   767: aload_0
    //   768: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   771: invokevirtual 3536	android/util/SparseArray:size	()I
    //   774: if_icmpge +150 -> 924
    //   777: aload_0
    //   778: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   781: iload 11
    //   783: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   786: checkcast 2141	com/android/server/am/ProcessRecord
    //   789: astore 21
    //   791: aload 6
    //   793: ifnull +28 -> 821
    //   796: iload 15
    //   798: istore 16
    //   800: iload 8
    //   802: istore 9
    //   804: iload 7
    //   806: istore 12
    //   808: aload 21
    //   810: getfield 2282	com/android/server/am/ProcessRecord:pkgList	Landroid/util/ArrayMap;
    //   813: aload 6
    //   815: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   818: ifeq +85 -> 903
    //   821: iload 15
    //   823: istore 16
    //   825: iload 8
    //   827: istore 9
    //   829: iload 8
    //   831: ifne +28 -> 859
    //   834: iload 15
    //   836: ifeq +7 -> 843
    //   839: aload_2
    //   840: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   843: iconst_1
    //   844: istore 16
    //   846: aload_2
    //   847: ldc_w 8273
    //   850: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   853: iconst_1
    //   854: istore 9
    //   856: iconst_1
    //   857: istore 7
    //   859: aload_2
    //   860: ldc_w 8275
    //   863: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   866: aload_2
    //   867: aload_0
    //   868: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   871: iload 11
    //   873: invokevirtual 5133	android/util/SparseArray:keyAt	(I)I
    //   876: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   879: aload_2
    //   880: ldc_w 2237
    //   883: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   886: aload_2
    //   887: aload_0
    //   888: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   891: iload 11
    //   893: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   896: invokevirtual 4209	java/io/PrintWriter:println	(Ljava/lang/Object;)V
    //   899: iload 7
    //   901: istore 12
    //   903: iload 11
    //   905: iconst_1
    //   906: iadd
    //   907: istore 11
    //   909: iload 16
    //   911: istore 15
    //   913: iload 9
    //   915: istore 8
    //   917: iload 12
    //   919: istore 7
    //   921: goto -156 -> 765
    //   924: aload 20
    //   926: monitorexit
    //   927: iload 15
    //   929: istore 16
    //   931: iload 16
    //   933: istore 15
    //   935: iload 7
    //   937: istore 8
    //   939: aload_0
    //   940: getfield 1480	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
    //   943: invokevirtual 3536	android/util/SparseArray:size	()I
    //   946: ifle +224 -> 1170
    //   949: aload_0
    //   950: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   953: astore 20
    //   955: aload 20
    //   957: monitorenter
    //   958: iconst_0
    //   959: istore 8
    //   961: iconst_0
    //   962: istore 11
    //   964: iload 11
    //   966: aload_0
    //   967: getfield 1480	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
    //   970: invokevirtual 3536	android/util/SparseArray:size	()I
    //   973: if_icmpge +186 -> 1159
    //   976: aload_0
    //   977: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   980: aload_0
    //   981: getfield 1480	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
    //   984: iload 11
    //   986: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   989: checkcast 106	com/android/server/am/ActivityManagerService$ForegroundToken
    //   992: getfield 8276	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
    //   995: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   998: checkcast 2141	com/android/server/am/ProcessRecord
    //   1001: astore 21
    //   1003: aload 6
    //   1005: ifnull +45 -> 1050
    //   1008: iload 16
    //   1010: istore 15
    //   1012: iload 8
    //   1014: istore 9
    //   1016: iload 7
    //   1018: istore 12
    //   1020: aload 21
    //   1022: ifnull +110 -> 1132
    //   1025: iload 16
    //   1027: istore 15
    //   1029: iload 8
    //   1031: istore 9
    //   1033: iload 7
    //   1035: istore 12
    //   1037: aload 21
    //   1039: getfield 2282	com/android/server/am/ProcessRecord:pkgList	Landroid/util/ArrayMap;
    //   1042: aload 6
    //   1044: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   1047: ifeq +85 -> 1132
    //   1050: iload 16
    //   1052: istore 15
    //   1054: iload 8
    //   1056: istore 9
    //   1058: iload 8
    //   1060: ifne +28 -> 1088
    //   1063: iload 16
    //   1065: ifeq +7 -> 1072
    //   1068: aload_2
    //   1069: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1072: iconst_1
    //   1073: istore 15
    //   1075: aload_2
    //   1076: ldc_w 8278
    //   1079: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1082: iconst_1
    //   1083: istore 9
    //   1085: iconst_1
    //   1086: istore 7
    //   1088: aload_2
    //   1089: ldc_w 8275
    //   1092: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   1095: aload_2
    //   1096: aload_0
    //   1097: getfield 1480	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
    //   1100: iload 11
    //   1102: invokevirtual 5133	android/util/SparseArray:keyAt	(I)I
    //   1105: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   1108: aload_2
    //   1109: ldc_w 2237
    //   1112: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   1115: aload_2
    //   1116: aload_0
    //   1117: getfield 1480	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
    //   1120: iload 11
    //   1122: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   1125: invokevirtual 4209	java/io/PrintWriter:println	(Ljava/lang/Object;)V
    //   1128: iload 7
    //   1130: istore 12
    //   1132: iload 11
    //   1134: iconst_1
    //   1135: iadd
    //   1136: istore 11
    //   1138: iload 15
    //   1140: istore 16
    //   1142: iload 9
    //   1144: istore 8
    //   1146: iload 12
    //   1148: istore 7
    //   1150: goto -186 -> 964
    //   1153: astore_1
    //   1154: aload 20
    //   1156: monitorexit
    //   1157: aload_1
    //   1158: athrow
    //   1159: aload 20
    //   1161: monitorexit
    //   1162: iload 7
    //   1164: istore 8
    //   1166: iload 16
    //   1168: istore 15
    //   1170: iload 15
    //   1172: istore 16
    //   1174: aload_0
    //   1175: getfield 1484	com/android/server/am/ActivityManagerService:mPersistentStartingProcesses	Ljava/util/ArrayList;
    //   1178: invokevirtual 2580	java/util/ArrayList:size	()I
    //   1181: ifle +46 -> 1227
    //   1184: iload 15
    //   1186: ifeq +7 -> 1193
    //   1189: aload_2
    //   1190: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1193: iconst_1
    //   1194: istore 16
    //   1196: iconst_1
    //   1197: istore 8
    //   1199: aload_2
    //   1200: ldc_w 8280
    //   1203: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1206: aload_2
    //   1207: aload_0
    //   1208: aload_0
    //   1209: getfield 1484	com/android/server/am/ActivityManagerService:mPersistentStartingProcesses	Ljava/util/ArrayList;
    //   1212: ldc_w 4168
    //   1215: ldc_w 8282
    //   1218: ldc_w 8284
    //   1221: aload 6
    //   1223: invokestatic 8286	com/android/server/am/ActivityManagerService:dumpProcessList	(Ljava/io/PrintWriter;Lcom/android/server/am/ActivityManagerService;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
    //   1226: pop
    //   1227: iload 16
    //   1229: istore 15
    //   1231: aload_0
    //   1232: getfield 1486	com/android/server/am/ActivityManagerService:mRemovedProcesses	Ljava/util/ArrayList;
    //   1235: invokevirtual 2580	java/util/ArrayList:size	()I
    //   1238: ifle +46 -> 1284
    //   1241: iload 16
    //   1243: ifeq +7 -> 1250
    //   1246: aload_2
    //   1247: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1250: iconst_1
    //   1251: istore 15
    //   1253: iconst_1
    //   1254: istore 8
    //   1256: aload_2
    //   1257: ldc_w 8288
    //   1260: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1263: aload_2
    //   1264: aload_0
    //   1265: aload_0
    //   1266: getfield 1486	com/android/server/am/ActivityManagerService:mRemovedProcesses	Ljava/util/ArrayList;
    //   1269: ldc_w 4168
    //   1272: ldc_w 8290
    //   1275: ldc_w 8292
    //   1278: aload 6
    //   1280: invokestatic 8286	com/android/server/am/ActivityManagerService:dumpProcessList	(Ljava/io/PrintWriter;Lcom/android/server/am/ActivityManagerService;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
    //   1283: pop
    //   1284: iload 15
    //   1286: istore 16
    //   1288: aload_0
    //   1289: getfield 1482	com/android/server/am/ActivityManagerService:mProcessesOnHold	Ljava/util/ArrayList;
    //   1292: invokevirtual 2580	java/util/ArrayList:size	()I
    //   1295: ifle +46 -> 1341
    //   1298: iload 15
    //   1300: ifeq +7 -> 1307
    //   1303: aload_2
    //   1304: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1307: iconst_1
    //   1308: istore 16
    //   1310: iconst_1
    //   1311: istore 8
    //   1313: aload_2
    //   1314: ldc_w 8294
    //   1317: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1320: aload_2
    //   1321: aload_0
    //   1322: aload_0
    //   1323: getfield 1482	com/android/server/am/ActivityManagerService:mProcessesOnHold	Ljava/util/ArrayList;
    //   1326: ldc_w 4168
    //   1329: ldc_w 8296
    //   1332: ldc_w 8298
    //   1335: aload 6
    //   1337: invokestatic 8286	com/android/server/am/ActivityManagerService:dumpProcessList	(Ljava/io/PrintWriter;Lcom/android/server/am/ActivityManagerService;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
    //   1340: pop
    //   1341: aload_0
    //   1342: aload_1
    //   1343: aload_2
    //   1344: aload_3
    //   1345: iload 4
    //   1347: iload 16
    //   1349: iload 5
    //   1351: aload 6
    //   1353: invokevirtual 8220	com/android/server/am/ActivityManagerService:dumpProcessesToGc	(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZZLjava/lang/String;)Z
    //   1356: istore 15
    //   1358: aload_0
    //   1359: getfield 1856	com/android/server/am/ActivityManagerService:mAppErrors	Lcom/android/server/am/AppErrors;
    //   1362: aload_1
    //   1363: aload_2
    //   1364: iload 15
    //   1366: aload 6
    //   1368: invokevirtual 8301	com/android/server/am/AppErrors:dumpLocked	(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;ZLjava/lang/String;)Z
    //   1371: istore 16
    //   1373: iload 16
    //   1375: ifeq +6 -> 1381
    //   1378: iconst_1
    //   1379: istore 8
    //   1381: aload 6
    //   1383: ifnonnull +20 -> 1403
    //   1386: aload_2
    //   1387: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1390: iconst_0
    //   1391: istore 16
    //   1393: aload_0
    //   1394: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   1397: aload_2
    //   1398: iload 5
    //   1400: invokevirtual 8303	com/android/server/am/UserController:dump	(Ljava/io/PrintWriter;Z)V
    //   1403: iload 16
    //   1405: istore 15
    //   1407: aload_0
    //   1408: getfield 3489	com/android/server/am/ActivityManagerService:mHomeProcess	Lcom/android/server/am/ProcessRecord;
    //   1411: ifnull +70 -> 1481
    //   1414: aload 6
    //   1416: ifnull +22 -> 1438
    //   1419: iload 16
    //   1421: istore 15
    //   1423: aload_0
    //   1424: getfield 3489	com/android/server/am/ActivityManagerService:mHomeProcess	Lcom/android/server/am/ProcessRecord;
    //   1427: getfield 2282	com/android/server/am/ProcessRecord:pkgList	Landroid/util/ArrayMap;
    //   1430: aload 6
    //   1432: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   1435: ifeq +46 -> 1481
    //   1438: iload 16
    //   1440: istore 15
    //   1442: iload 16
    //   1444: ifeq +10 -> 1454
    //   1447: aload_2
    //   1448: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1451: iconst_0
    //   1452: istore 15
    //   1454: aload_2
    //   1455: new 1066	java/lang/StringBuilder
    //   1458: dup
    //   1459: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1462: ldc_w 8222
    //   1465: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1468: aload_0
    //   1469: getfield 3489	com/android/server/am/ActivityManagerService:mHomeProcess	Lcom/android/server/am/ProcessRecord;
    //   1472: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1475: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1478: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1481: iload 15
    //   1483: istore 16
    //   1485: aload_0
    //   1486: getfield 3491	com/android/server/am/ActivityManagerService:mPreviousProcess	Lcom/android/server/am/ProcessRecord;
    //   1489: ifnull +70 -> 1559
    //   1492: aload 6
    //   1494: ifnull +22 -> 1516
    //   1497: iload 15
    //   1499: istore 16
    //   1501: aload_0
    //   1502: getfield 3491	com/android/server/am/ActivityManagerService:mPreviousProcess	Lcom/android/server/am/ProcessRecord;
    //   1505: getfield 2282	com/android/server/am/ProcessRecord:pkgList	Landroid/util/ArrayMap;
    //   1508: aload 6
    //   1510: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   1513: ifeq +46 -> 1559
    //   1516: iload 15
    //   1518: istore 16
    //   1520: iload 15
    //   1522: ifeq +10 -> 1532
    //   1525: aload_2
    //   1526: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1529: iconst_0
    //   1530: istore 16
    //   1532: aload_2
    //   1533: new 1066	java/lang/StringBuilder
    //   1536: dup
    //   1537: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1540: ldc_w 8224
    //   1543: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1546: aload_0
    //   1547: getfield 3491	com/android/server/am/ActivityManagerService:mPreviousProcess	Lcom/android/server/am/ProcessRecord;
    //   1550: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1553: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1556: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1559: iload 5
    //   1561: ifeq +35 -> 1596
    //   1564: new 1066	java/lang/StringBuilder
    //   1567: dup
    //   1568: sipush 128
    //   1571: invokespecial 1555	java/lang/StringBuilder:<init>	(I)V
    //   1574: astore_1
    //   1575: aload_1
    //   1576: ldc_w 8305
    //   1579: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1582: pop
    //   1583: aload_0
    //   1584: getfield 8307	com/android/server/am/ActivityManagerService:mPreviousProcessVisibleTime	J
    //   1587: aload_1
    //   1588: invokestatic 7164	android/util/TimeUtils:formatDuration	(JLjava/lang/StringBuilder;)V
    //   1591: aload_2
    //   1592: aload_1
    //   1593: invokevirtual 4209	java/io/PrintWriter:println	(Ljava/lang/Object;)V
    //   1596: iload 16
    //   1598: istore 15
    //   1600: aload_0
    //   1601: getfield 1476	com/android/server/am/ActivityManagerService:mHeavyWeightProcess	Lcom/android/server/am/ProcessRecord;
    //   1604: ifnull +70 -> 1674
    //   1607: aload 6
    //   1609: ifnull +22 -> 1631
    //   1612: iload 16
    //   1614: istore 15
    //   1616: aload_0
    //   1617: getfield 1476	com/android/server/am/ActivityManagerService:mHeavyWeightProcess	Lcom/android/server/am/ProcessRecord;
    //   1620: getfield 2282	com/android/server/am/ProcessRecord:pkgList	Landroid/util/ArrayMap;
    //   1623: aload 6
    //   1625: invokevirtual 3541	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   1628: ifeq +46 -> 1674
    //   1631: iload 16
    //   1633: istore 15
    //   1635: iload 16
    //   1637: ifeq +10 -> 1647
    //   1640: aload_2
    //   1641: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1644: iconst_0
    //   1645: istore 15
    //   1647: aload_2
    //   1648: new 1066	java/lang/StringBuilder
    //   1651: dup
    //   1652: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1655: ldc_w 8226
    //   1658: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1661: aload_0
    //   1662: getfield 1476	com/android/server/am/ActivityManagerService:mHeavyWeightProcess	Lcom/android/server/am/ProcessRecord;
    //   1665: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1668: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1671: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1674: aload 6
    //   1676: ifnonnull +30 -> 1706
    //   1679: aload_2
    //   1680: new 1066	java/lang/StringBuilder
    //   1683: dup
    //   1684: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1687: ldc_w 8309
    //   1690: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1693: aload_0
    //   1694: getfield 1549	com/android/server/am/ActivityManagerService:mConfiguration	Landroid/content/res/Configuration;
    //   1697: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1700: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1703: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1706: iload 5
    //   1708: ifeq +186 -> 1894
    //   1711: aload_2
    //   1712: new 1066	java/lang/StringBuilder
    //   1715: dup
    //   1716: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1719: ldc_w 8311
    //   1722: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1725: aload_0
    //   1726: invokevirtual 4453	com/android/server/am/ActivityManagerService:getFocusedStack	()Lcom/android/server/am/ActivityStack;
    //   1729: getfield 8314	com/android/server/am/ActivityStack:mConfigWillChange	Z
    //   1732: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   1735: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1738: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1741: aload_0
    //   1742: getfield 1975	com/android/server/am/ActivityManagerService:mCompatModePackages	Lcom/android/server/am/CompatModePackages;
    //   1745: invokevirtual 8318	com/android/server/am/CompatModePackages:getPackages	()Ljava/util/HashMap;
    //   1748: invokevirtual 8057	java/util/HashMap:size	()I
    //   1751: ifle +143 -> 1894
    //   1754: iconst_0
    //   1755: istore 4
    //   1757: aload_0
    //   1758: getfield 1975	com/android/server/am/ActivityManagerService:mCompatModePackages	Lcom/android/server/am/CompatModePackages;
    //   1761: invokevirtual 8318	com/android/server/am/CompatModePackages:getPackages	()Ljava/util/HashMap;
    //   1764: invokevirtual 8319	java/util/HashMap:entrySet	()Ljava/util/Set;
    //   1767: invokeinterface 2040 1 0
    //   1772: astore_1
    //   1773: aload_1
    //   1774: invokeinterface 2045 1 0
    //   1779: ifeq +115 -> 1894
    //   1782: aload_1
    //   1783: invokeinterface 2049 1 0
    //   1788: checkcast 8083	java/util/Map$Entry
    //   1791: astore_3
    //   1792: aload_3
    //   1793: invokeinterface 8088 1 0
    //   1798: checkcast 1205	java/lang/String
    //   1801: astore 20
    //   1803: aload_3
    //   1804: invokeinterface 8091 1 0
    //   1809: checkcast 2275	java/lang/Integer
    //   1812: invokevirtual 4053	java/lang/Integer:intValue	()I
    //   1815: istore 9
    //   1817: aload 6
    //   1819: ifnull +13 -> 1832
    //   1822: aload 6
    //   1824: aload 20
    //   1826: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1829: ifeq -56 -> 1773
    //   1832: iload 4
    //   1834: istore 7
    //   1836: iload 4
    //   1838: ifne +13 -> 1851
    //   1841: aload_2
    //   1842: ldc_w 8321
    //   1845: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1848: iconst_1
    //   1849: istore 7
    //   1851: aload_2
    //   1852: ldc_w 4168
    //   1855: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   1858: aload_2
    //   1859: aload 20
    //   1861: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   1864: aload_2
    //   1865: ldc_w 2237
    //   1868: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   1871: aload_2
    //   1872: iload 9
    //   1874: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   1877: aload_2
    //   1878: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   1881: iload 7
    //   1883: istore 4
    //   1885: goto -112 -> 1773
    //   1888: astore_1
    //   1889: aload 20
    //   1891: monitorexit
    //   1892: aload_1
    //   1893: athrow
    //   1894: aload 6
    //   1896: ifnonnull +201 -> 2097
    //   1899: aload_2
    //   1900: new 1066	java/lang/StringBuilder
    //   1903: dup
    //   1904: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1907: ldc_w 8323
    //   1910: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1913: aload_0
    //   1914: getfield 1581	com/android/server/am/ActivityManagerService:mWakefulness	I
    //   1917: invokestatic 8326	android/os/PowerManagerInternal:wakefulnessToString	(I)Ljava/lang/String;
    //   1920: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1923: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1926: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1929: aload_2
    //   1930: new 1066	java/lang/StringBuilder
    //   1933: dup
    //   1934: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1937: ldc_w 8328
    //   1940: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1943: aload_0
    //   1944: getfield 1583	com/android/server/am/ActivityManagerService:mSleepTokens	Ljava/util/ArrayList;
    //   1947: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1950: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1953: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1956: aload_2
    //   1957: new 1066	java/lang/StringBuilder
    //   1960: dup
    //   1961: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   1964: ldc_w 8330
    //   1967: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1970: aload_0
    //   1971: getfield 903	com/android/server/am/ActivityManagerService:mSleeping	Z
    //   1974: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   1977: ldc_w 8332
    //   1980: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1983: aload_0
    //   1984: invokespecial 8334	com/android/server/am/ActivityManagerService:lockScreenShownToString	()Ljava/lang/String;
    //   1987: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1990: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1993: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1996: aload_2
    //   1997: new 1066	java/lang/StringBuilder
    //   2000: dup
    //   2001: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2004: ldc_w 8336
    //   2007: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2010: aload_0
    //   2011: getfield 1587	com/android/server/am/ActivityManagerService:mShuttingDown	Z
    //   2014: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2017: ldc_w 8338
    //   2020: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2023: aload_0
    //   2024: getfield 1619	com/android/server/am/ActivityManagerService:mTestPssMode	Z
    //   2027: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2030: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2033: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2036: aload_0
    //   2037: getfield 5760	com/android/server/am/ActivityManagerService:mRunningVoice	Landroid/service/voice/IVoiceInteractionSession;
    //   2040: ifnull +57 -> 2097
    //   2043: aload_2
    //   2044: new 1066	java/lang/StringBuilder
    //   2047: dup
    //   2048: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2051: ldc_w 8340
    //   2054: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2057: aload_0
    //   2058: getfield 5760	com/android/server/am/ActivityManagerService:mRunningVoice	Landroid/service/voice/IVoiceInteractionSession;
    //   2061: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2064: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2067: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2070: aload_2
    //   2071: new 1066	java/lang/StringBuilder
    //   2074: dup
    //   2075: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2078: ldc_w 8342
    //   2081: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2084: aload_0
    //   2085: getfield 8344	com/android/server/am/ActivityManagerService:mVoiceWakeLock	Landroid/os/PowerManager$WakeLock;
    //   2088: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2091: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2094: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2097: aload_0
    //   2098: getfield 1621	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
    //   2101: ifnonnull +10 -> 2111
    //   2104: aload_0
    //   2105: getfield 1627	com/android/server/am/ActivityManagerService:mOrigDebugApp	Ljava/lang/String;
    //   2108: ifnull +362 -> 2470
    //   2111: aload 6
    //   2113: ifnull +31 -> 2144
    //   2116: aload 6
    //   2118: aload_0
    //   2119: getfield 1621	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
    //   2122: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2125: ifne +19 -> 2144
    //   2128: iload 15
    //   2130: istore 16
    //   2132: aload 6
    //   2134: aload_0
    //   2135: getfield 1627	com/android/server/am/ActivityManagerService:mOrigDebugApp	Ljava/lang/String;
    //   2138: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2141: ifeq +85 -> 2226
    //   2144: iload 15
    //   2146: istore 16
    //   2148: iload 15
    //   2150: ifeq +10 -> 2160
    //   2153: aload_2
    //   2154: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   2157: iconst_0
    //   2158: istore 16
    //   2160: aload_2
    //   2161: new 1066	java/lang/StringBuilder
    //   2164: dup
    //   2165: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2168: ldc_w 8346
    //   2171: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2174: aload_0
    //   2175: getfield 1621	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
    //   2178: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2181: ldc_w 8348
    //   2184: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2187: aload_0
    //   2188: getfield 1627	com/android/server/am/ActivityManagerService:mOrigDebugApp	Ljava/lang/String;
    //   2191: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2194: ldc_w 8350
    //   2197: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2200: aload_0
    //   2201: getfield 1625	com/android/server/am/ActivityManagerService:mDebugTransient	Z
    //   2204: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2207: ldc_w 8352
    //   2210: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2213: aload_0
    //   2214: getfield 1629	com/android/server/am/ActivityManagerService:mOrigWaitForDebugger	Z
    //   2217: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2220: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2223: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2226: aload_0
    //   2227: getfield 8354	com/android/server/am/ActivityManagerService:mCurAppTimeTracker	Lcom/android/server/am/AppTimeTracker;
    //   2230: ifnull +15 -> 2245
    //   2233: aload_0
    //   2234: getfield 8354	com/android/server/am/ActivityManagerService:mCurAppTimeTracker	Lcom/android/server/am/AppTimeTracker;
    //   2237: aload_2
    //   2238: ldc_w 2221
    //   2241: iconst_1
    //   2242: invokevirtual 8360	com/android/server/am/AppTimeTracker:dumpWithHeader	(Ljava/io/PrintWriter;Ljava/lang/String;Z)V
    //   2245: iload 16
    //   2247: istore 15
    //   2249: aload_0
    //   2250: getfield 1649	com/android/server/am/ActivityManagerService:mMemWatchProcesses	Lcom/android/internal/app/ProcessMap;
    //   2253: invokevirtual 3535	com/android/internal/app/ProcessMap:getMap	()Landroid/util/ArrayMap;
    //   2256: invokevirtual 2287	android/util/ArrayMap:size	()I
    //   2259: ifle +301 -> 2560
    //   2262: aload_2
    //   2263: ldc_w 8362
    //   2266: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2269: aload_0
    //   2270: getfield 1649	com/android/server/am/ActivityManagerService:mMemWatchProcesses	Lcom/android/internal/app/ProcessMap;
    //   2273: invokevirtual 3535	com/android/internal/app/ProcessMap:getMap	()Landroid/util/ArrayMap;
    //   2276: astore_1
    //   2277: iconst_0
    //   2278: istore 4
    //   2280: iload 16
    //   2282: istore 15
    //   2284: iload 4
    //   2286: aload_1
    //   2287: invokevirtual 2287	android/util/ArrayMap:size	()I
    //   2290: if_icmpge +210 -> 2500
    //   2293: aload_1
    //   2294: iload 4
    //   2296: invokevirtual 2290	android/util/ArrayMap:keyAt	(I)Ljava/lang/Object;
    //   2299: checkcast 1205	java/lang/String
    //   2302: astore_3
    //   2303: aload_1
    //   2304: iload 4
    //   2306: invokevirtual 3320	android/util/ArrayMap:valueAt	(I)Ljava/lang/Object;
    //   2309: checkcast 1455	android/util/SparseArray
    //   2312: astore 20
    //   2314: iconst_0
    //   2315: istore 7
    //   2317: iload 7
    //   2319: aload 20
    //   2321: invokevirtual 3536	android/util/SparseArray:size	()I
    //   2324: if_icmpge +167 -> 2491
    //   2327: iload 15
    //   2329: istore 16
    //   2331: iload 15
    //   2333: ifeq +10 -> 2343
    //   2336: aload_2
    //   2337: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   2340: iconst_0
    //   2341: istore 16
    //   2343: new 1066	java/lang/StringBuilder
    //   2346: dup
    //   2347: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2350: astore 21
    //   2352: aload 21
    //   2354: ldc_w 4168
    //   2357: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2360: aload_3
    //   2361: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2364: bipush 47
    //   2366: invokevirtual 2228	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
    //   2369: pop
    //   2370: aload 21
    //   2372: aload 20
    //   2374: iload 7
    //   2376: invokevirtual 5133	android/util/SparseArray:keyAt	(I)I
    //   2379: invokestatic 6006	android/os/UserHandle:formatUid	(Ljava/lang/StringBuilder;I)V
    //   2382: aload 20
    //   2384: iload 7
    //   2386: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   2389: checkcast 4224	android/util/Pair
    //   2392: astore 22
    //   2394: aload 21
    //   2396: ldc_w 2237
    //   2399: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2402: pop
    //   2403: aload 22
    //   2405: getfield 4238	android/util/Pair:first	Ljava/lang/Object;
    //   2408: checkcast 4192	java/lang/Long
    //   2411: invokevirtual 5271	java/lang/Long:longValue	()J
    //   2414: aload 21
    //   2416: invokestatic 8366	android/util/DebugUtils:sizeValueToString	(JLjava/lang/StringBuilder;)Ljava/lang/String;
    //   2419: pop
    //   2420: aload 22
    //   2422: getfield 4243	android/util/Pair:second	Ljava/lang/Object;
    //   2425: ifnull +23 -> 2448
    //   2428: aload 21
    //   2430: ldc_w 8368
    //   2433: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2436: aload 22
    //   2438: getfield 4243	android/util/Pair:second	Ljava/lang/Object;
    //   2441: checkcast 1205	java/lang/String
    //   2444: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2447: pop
    //   2448: aload_2
    //   2449: aload 21
    //   2451: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2454: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2457: iload 7
    //   2459: iconst_1
    //   2460: iadd
    //   2461: istore 7
    //   2463: iload 16
    //   2465: istore 15
    //   2467: goto -150 -> 2317
    //   2470: aload_0
    //   2471: getfield 1625	com/android/server/am/ActivityManagerService:mDebugTransient	Z
    //   2474: ifne -363 -> 2111
    //   2477: iload 15
    //   2479: istore 16
    //   2481: aload_0
    //   2482: getfield 1629	com/android/server/am/ActivityManagerService:mOrigWaitForDebugger	Z
    //   2485: ifeq -259 -> 2226
    //   2488: goto -377 -> 2111
    //   2491: iload 4
    //   2493: iconst_1
    //   2494: iadd
    //   2495: istore 4
    //   2497: goto -213 -> 2284
    //   2500: aload_2
    //   2501: ldc_w 8370
    //   2504: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2507: aload_2
    //   2508: aload_0
    //   2509: getfield 8372	com/android/server/am/ActivityManagerService:mMemWatchDumpProcName	Ljava/lang/String;
    //   2512: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2515: aload_2
    //   2516: ldc_w 8374
    //   2519: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2522: aload_2
    //   2523: aload_0
    //   2524: getfield 8162	com/android/server/am/ActivityManagerService:mMemWatchDumpFile	Ljava/lang/String;
    //   2527: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2530: aload_2
    //   2531: ldc_w 8376
    //   2534: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2537: aload_2
    //   2538: aload_0
    //   2539: getfield 8156	com/android/server/am/ActivityManagerService:mMemWatchDumpPid	I
    //   2542: invokevirtual 4190	java/io/PrintWriter:print	(I)V
    //   2545: aload_2
    //   2546: ldc_w 8378
    //   2549: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2552: aload_2
    //   2553: aload_0
    //   2554: getfield 8380	com/android/server/am/ActivityManagerService:mMemWatchDumpUid	I
    //   2557: invokevirtual 4092	java/io/PrintWriter:println	(I)V
    //   2560: iload 15
    //   2562: istore 16
    //   2564: aload_0
    //   2565: getfield 1651	com/android/server/am/ActivityManagerService:mTrackAllocationApp	Ljava/lang/String;
    //   2568: ifnull +67 -> 2635
    //   2571: aload 6
    //   2573: ifnull +19 -> 2592
    //   2576: iload 15
    //   2578: istore 16
    //   2580: aload 6
    //   2582: aload_0
    //   2583: getfield 1651	com/android/server/am/ActivityManagerService:mTrackAllocationApp	Ljava/lang/String;
    //   2586: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2589: ifeq +46 -> 2635
    //   2592: iload 15
    //   2594: istore 16
    //   2596: iload 15
    //   2598: ifeq +10 -> 2608
    //   2601: aload_2
    //   2602: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   2605: iconst_0
    //   2606: istore 16
    //   2608: aload_2
    //   2609: new 1066	java/lang/StringBuilder
    //   2612: dup
    //   2613: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2616: ldc_w 8382
    //   2619: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2622: aload_0
    //   2623: getfield 1651	com/android/server/am/ActivityManagerService:mTrackAllocationApp	Ljava/lang/String;
    //   2626: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2629: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2632: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2635: aload_0
    //   2636: getfield 1639	com/android/server/am/ActivityManagerService:mProfileApp	Ljava/lang/String;
    //   2639: ifnonnull +10 -> 2649
    //   2642: aload_0
    //   2643: getfield 1641	com/android/server/am/ActivityManagerService:mProfileProc	Lcom/android/server/am/ProcessRecord;
    //   2646: ifnull +843 -> 3489
    //   2649: aload 6
    //   2651: ifnull +19 -> 2670
    //   2654: iload 16
    //   2656: istore 15
    //   2658: aload 6
    //   2660: aload_0
    //   2661: getfield 1639	com/android/server/am/ActivityManagerService:mProfileApp	Ljava/lang/String;
    //   2664: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2667: ifeq +166 -> 2833
    //   2670: iload 16
    //   2672: istore 15
    //   2674: iload 16
    //   2676: ifeq +10 -> 2686
    //   2679: aload_2
    //   2680: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   2683: iconst_0
    //   2684: istore 15
    //   2686: aload_2
    //   2687: new 1066	java/lang/StringBuilder
    //   2690: dup
    //   2691: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2694: ldc_w 8384
    //   2697: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2700: aload_0
    //   2701: getfield 1639	com/android/server/am/ActivityManagerService:mProfileApp	Ljava/lang/String;
    //   2704: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2707: ldc_w 8386
    //   2710: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2713: aload_0
    //   2714: getfield 1641	com/android/server/am/ActivityManagerService:mProfileProc	Lcom/android/server/am/ProcessRecord;
    //   2717: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2720: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2723: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2726: aload_2
    //   2727: new 1066	java/lang/StringBuilder
    //   2730: dup
    //   2731: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2734: ldc_w 8388
    //   2737: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2740: aload_0
    //   2741: getfield 2876	com/android/server/am/ActivityManagerService:mProfileFile	Ljava/lang/String;
    //   2744: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2747: ldc_w 8390
    //   2750: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2753: aload_0
    //   2754: getfield 2878	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
    //   2757: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2760: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2763: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2766: aload_2
    //   2767: new 1066	java/lang/StringBuilder
    //   2770: dup
    //   2771: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2774: ldc_w 8392
    //   2777: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2780: aload_0
    //   2781: getfield 1643	com/android/server/am/ActivityManagerService:mSamplingInterval	I
    //   2784: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   2787: ldc_w 8394
    //   2790: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2793: aload_0
    //   2794: getfield 1645	com/android/server/am/ActivityManagerService:mAutoStopProfiler	Z
    //   2797: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2800: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2803: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2806: aload_2
    //   2807: new 1066	java/lang/StringBuilder
    //   2810: dup
    //   2811: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2814: ldc_w 8396
    //   2817: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2820: aload_0
    //   2821: getfield 1647	com/android/server/am/ActivityManagerService:mProfileType	I
    //   2824: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   2827: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2830: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2833: aload_0
    //   2834: getfield 1653	com/android/server/am/ActivityManagerService:mNativeDebuggingApp	Ljava/lang/String;
    //   2837: ifnull +56 -> 2893
    //   2840: aload 6
    //   2842: ifnull +15 -> 2857
    //   2845: aload 6
    //   2847: aload_0
    //   2848: getfield 1653	com/android/server/am/ActivityManagerService:mNativeDebuggingApp	Ljava/lang/String;
    //   2851: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2854: ifeq +39 -> 2893
    //   2857: iload 15
    //   2859: ifeq +7 -> 2866
    //   2862: aload_2
    //   2863: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   2866: aload_2
    //   2867: new 1066	java/lang/StringBuilder
    //   2870: dup
    //   2871: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2874: ldc_w 8398
    //   2877: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2880: aload_0
    //   2881: getfield 1653	com/android/server/am/ActivityManagerService:mNativeDebuggingApp	Ljava/lang/String;
    //   2884: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2887: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2890: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2893: aload 6
    //   2895: ifnonnull +581 -> 3476
    //   2898: aload_0
    //   2899: getfield 1631	com/android/server/am/ActivityManagerService:mAlwaysFinishActivities	Z
    //   2902: ifne +10 -> 2912
    //   2905: aload_0
    //   2906: getfield 1633	com/android/server/am/ActivityManagerService:mLenientBackgroundCheck	Z
    //   2909: ifeq +43 -> 2952
    //   2912: aload_2
    //   2913: new 1066	java/lang/StringBuilder
    //   2916: dup
    //   2917: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2920: ldc_w 8400
    //   2923: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2926: aload_0
    //   2927: getfield 1631	com/android/server/am/ActivityManagerService:mAlwaysFinishActivities	Z
    //   2930: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2933: ldc_w 8402
    //   2936: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2939: aload_0
    //   2940: getfield 1633	com/android/server/am/ActivityManagerService:mLenientBackgroundCheck	Z
    //   2943: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2946: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2949: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2952: aload_0
    //   2953: getfield 1635	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
    //   2956: ifnull +43 -> 2999
    //   2959: aload_2
    //   2960: new 1066	java/lang/StringBuilder
    //   2963: dup
    //   2964: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   2967: ldc_w 8404
    //   2970: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2973: aload_0
    //   2974: getfield 1635	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
    //   2977: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2980: ldc_w 8406
    //   2983: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2986: aload_0
    //   2987: getfield 1637	com/android/server/am/ActivityManagerService:mControllerIsAMonkey	Z
    //   2990: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   2993: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2996: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2999: iload 5
    //   3001: ifeq +475 -> 3476
    //   3004: aload_2
    //   3005: new 1066	java/lang/StringBuilder
    //   3008: dup
    //   3009: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3012: ldc_w 8408
    //   3015: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3018: iload 10
    //   3020: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3023: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3026: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3029: aload_2
    //   3030: new 1066	java/lang/StringBuilder
    //   3033: dup
    //   3034: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3037: ldc_w 8410
    //   3040: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3043: aload_0
    //   3044: getfield 1563	com/android/server/am/ActivityManagerService:mProcessesReady	Z
    //   3047: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   3050: ldc_w 8412
    //   3053: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3056: aload_0
    //   3057: getfield 1565	com/android/server/am/ActivityManagerService:mSystemReady	Z
    //   3060: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   3063: ldc_w 8414
    //   3066: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3069: aload_0
    //   3070: getfield 1704	com/android/server/am/ActivityManagerService:mBooted	Z
    //   3073: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   3076: ldc_w 8416
    //   3079: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3082: aload_0
    //   3083: getfield 1782	com/android/server/am/ActivityManagerService:mFactoryTest	I
    //   3086: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3089: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3092: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3095: aload_2
    //   3096: new 1066	java/lang/StringBuilder
    //   3099: dup
    //   3100: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3103: ldc_w 8418
    //   3106: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3109: aload_0
    //   3110: getfield 1569	com/android/server/am/ActivityManagerService:mBooting	Z
    //   3113: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   3116: ldc_w 8420
    //   3119: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3122: aload_0
    //   3123: getfield 1571	com/android/server/am/ActivityManagerService:mCallFinishBooting	Z
    //   3126: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   3129: ldc_w 8422
    //   3132: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3135: aload_0
    //   3136: getfield 1573	com/android/server/am/ActivityManagerService:mBootAnimationComplete	Z
    //   3139: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   3142: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3145: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3148: aload_2
    //   3149: ldc_w 8424
    //   3152: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3155: aload_0
    //   3156: getfield 4233	com/android/server/am/ActivityManagerService:mLastPowerCheckRealtime	J
    //   3159: aload_2
    //   3160: invokestatic 4312	android/util/TimeUtils:formatDuration	(JLjava/io/PrintWriter;)V
    //   3163: aload_2
    //   3164: ldc_w 1270
    //   3167: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3170: aload_2
    //   3171: ldc_w 8426
    //   3174: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3177: aload_0
    //   3178: getfield 4235	com/android/server/am/ActivityManagerService:mLastPowerCheckUptime	J
    //   3181: aload_2
    //   3182: invokestatic 4312	android/util/TimeUtils:formatDuration	(JLjava/io/PrintWriter;)V
    //   3185: aload_2
    //   3186: ldc_w 1270
    //   3189: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3192: aload_2
    //   3193: new 1066	java/lang/StringBuilder
    //   3196: dup
    //   3197: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3200: ldc_w 8428
    //   3203: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3206: aload_0
    //   3207: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   3210: getfield 8431	com/android/server/am/ActivityStackSupervisor:mGoingToSleep	Landroid/os/PowerManager$WakeLock;
    //   3213: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   3216: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3219: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3222: aload_2
    //   3223: new 1066	java/lang/StringBuilder
    //   3226: dup
    //   3227: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3230: ldc_w 8433
    //   3233: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3236: aload_0
    //   3237: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   3240: getfield 8436	com/android/server/am/ActivityStackSupervisor:mLaunchingActivity	Landroid/os/PowerManager$WakeLock;
    //   3243: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   3246: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3249: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3252: aload_2
    //   3253: new 1066	java/lang/StringBuilder
    //   3256: dup
    //   3257: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3260: ldc_w 8438
    //   3263: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3266: aload_0
    //   3267: getfield 1589	com/android/server/am/ActivityManagerService:mAdjSeq	I
    //   3270: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3273: ldc_w 8440
    //   3276: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3279: aload_0
    //   3280: getfield 1591	com/android/server/am/ActivityManagerService:mLruSeq	I
    //   3283: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3286: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3289: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3292: aload_2
    //   3293: new 1066	java/lang/StringBuilder
    //   3296: dup
    //   3297: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3300: ldc_w 8442
    //   3303: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3306: aload_0
    //   3307: getfield 1593	com/android/server/am/ActivityManagerService:mNumNonCachedProcs	I
    //   3310: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3313: ldc_w 2239
    //   3316: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3319: aload_0
    //   3320: getfield 1488	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
    //   3323: invokevirtual 2580	java/util/ArrayList:size	()I
    //   3326: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3329: ldc_w 8444
    //   3332: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3335: ldc_w 8446
    //   3338: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3341: aload_0
    //   3342: getfield 1595	com/android/server/am/ActivityManagerService:mNumCachedHiddenProcs	I
    //   3345: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3348: ldc_w 8448
    //   3351: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3354: aload_0
    //   3355: getfield 1597	com/android/server/am/ActivityManagerService:mNumServiceProcs	I
    //   3358: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3361: ldc_w 8450
    //   3364: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3367: aload_0
    //   3368: getfield 1601	com/android/server/am/ActivityManagerService:mNewNumServiceProcs	I
    //   3371: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3374: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3377: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3380: aload_2
    //   3381: new 1066	java/lang/StringBuilder
    //   3384: dup
    //   3385: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   3388: ldc_w 8452
    //   3391: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3394: aload_0
    //   3395: getfield 1603	com/android/server/am/ActivityManagerService:mAllowLowerMemLevel	Z
    //   3398: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   3401: ldc_w 8454
    //   3404: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3407: aload_0
    //   3408: getfield 1605	com/android/server/am/ActivityManagerService:mLastMemoryLevel	I
    //   3411: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3414: ldc_w 8456
    //   3417: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3420: aload_0
    //   3421: getfield 8458	com/android/server/am/ActivityManagerService:mLastNumProcesses	I
    //   3424: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3427: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3430: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3433: invokestatic 1504	android/os/SystemClock:uptimeMillis	()J
    //   3436: lstore 18
    //   3438: aload_2
    //   3439: ldc_w 8460
    //   3442: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3445: lload 18
    //   3447: aload_0
    //   3448: getfield 1607	com/android/server/am/ActivityManagerService:mLastIdleTime	J
    //   3451: aload_2
    //   3452: invokestatic 8035	android/util/TimeUtils:formatDuration	(JJLjava/io/PrintWriter;)V
    //   3455: aload_2
    //   3456: ldc_w 8462
    //   3459: invokevirtual 4084	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3462: aload_0
    //   3463: lload 18
    //   3465: invokespecial 8464	com/android/server/am/ActivityManagerService:getLowRamTimeSinceIdle	(J)J
    //   3468: aload_2
    //   3469: invokestatic 4312	android/util/TimeUtils:formatDuration	(JLjava/io/PrintWriter;)V
    //   3472: aload_2
    //   3473: invokevirtual 4294	java/io/PrintWriter:println	()V
    //   3476: iload 8
    //   3478: ifne +10 -> 3488
    //   3481: aload_2
    //   3482: ldc_w 7699
    //   3485: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3488: return
    //   3489: aload_0
    //   3490: getfield 2876	com/android/server/am/ActivityManagerService:mProfileFile	Ljava/lang/String;
    //   3493: ifnonnull -844 -> 2649
    //   3496: iload 16
    //   3498: istore 15
    //   3500: aload_0
    //   3501: getfield 2878	com/android/server/am/ActivityManagerService:mProfileFd	Landroid/os/ParcelFileDescriptor;
    //   3504: ifnull -671 -> 2833
    //   3507: goto -858 -> 2649
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	3510	0	this	ActivityManagerService
    //   0	3510	1	paramFileDescriptor	FileDescriptor
    //   0	3510	2	paramPrintWriter	PrintWriter
    //   0	3510	3	paramArrayOfString	String[]
    //   0	3510	4	paramInt	int
    //   0	3510	5	paramBoolean	boolean
    //   0	3510	6	paramString	String
    //   7	2455	7	i	int
    //   16	3461	8	j	int
    //   10	1863	9	k	int
    //   13	3006	10	m	int
    //   43	1094	11	n	int
    //   133	1014	12	i1	int
    //   40	22	13	i2	int
    //   86	22	14	i3	int
    //   1	3498	15	bool1	boolean
    //   4	3493	16	bool2	boolean
    //   129	145	17	bool3	boolean
    //   3436	28	18	l	long
    //   185	2198	20	localObject1	Object
    //   79	2371	21	localObject2	Object
    //   120	2317	22	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   765	791	1153	finally
    //   808	821	1153	finally
    //   839	843	1153	finally
    //   846	853	1153	finally
    //   859	899	1153	finally
    //   964	1003	1888	finally
    //   1037	1050	1888	finally
    //   1068	1072	1888	finally
    //   1075	1082	1888	finally
    //   1088	1128	1888	finally
  }
  
  boolean dumpProcessesToGc(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean1, boolean paramBoolean2, String paramString)
  {
    paramBoolean2 = paramBoolean1;
    if (this.mProcessesToGc.size() > 0)
    {
      paramInt = 0;
      long l = SystemClock.uptimeMillis();
      int j = 0;
      for (;;)
      {
        paramBoolean2 = paramBoolean1;
        if (j >= this.mProcessesToGc.size()) {
          break;
        }
        paramFileDescriptor = (ProcessRecord)this.mProcessesToGc.get(j);
        int i;
        if (paramString != null)
        {
          i = paramInt;
          paramBoolean2 = paramBoolean1;
          if (!paramString.equals(paramFileDescriptor.info.packageName)) {}
        }
        else
        {
          i = paramInt;
          paramBoolean2 = paramBoolean1;
          if (paramInt == 0)
          {
            if (paramBoolean1) {
              paramPrintWriter.println();
            }
            paramBoolean2 = true;
            paramPrintWriter.println("  Processes that are waiting to GC:");
            i = 1;
          }
          paramPrintWriter.print("    Process ");
          paramPrintWriter.println(paramFileDescriptor);
          paramPrintWriter.print("      lowMem=");
          paramPrintWriter.print(paramFileDescriptor.reportLowMemory);
          paramPrintWriter.print(", last gced=");
          paramPrintWriter.print(l - paramFileDescriptor.lastRequestedGc);
          paramPrintWriter.print(" ms ago, last lowMem=");
          paramPrintWriter.print(l - paramFileDescriptor.lastLowMemory);
          paramPrintWriter.println(" ms ago");
        }
        j += 1;
        paramInt = i;
        paramBoolean1 = paramBoolean2;
      }
    }
    return paramBoolean2;
  }
  
  protected boolean dumpProvider(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String paramString, String[] paramArrayOfString, int paramInt, boolean paramBoolean)
  {
    return this.mProviderMap.dumpProvider(paramFileDescriptor, paramPrintWriter, paramString, paramArrayOfString, paramInt, paramBoolean);
  }
  
  void dumpProvidersLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    new ItemMatcher().build(paramArrayOfString, paramInt);
    paramPrintWriter.println("ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers)");
    boolean bool1 = this.mProviderMap.dumpProvidersLocked(paramPrintWriter, paramBoolean, paramString);
    paramBoolean = bool1;
    boolean bool2 = paramBoolean;
    if (this.mLaunchingProviders.size() > 0)
    {
      paramInt = 0;
      int j = this.mLaunchingProviders.size() - 1;
      for (;;)
      {
        bool2 = paramBoolean;
        if (j < 0) {
          break;
        }
        paramFileDescriptor = (ContentProviderRecord)this.mLaunchingProviders.get(j);
        int i;
        boolean bool3;
        if (paramString != null)
        {
          bool2 = bool1;
          i = paramInt;
          bool3 = paramBoolean;
          if (!paramString.equals(paramFileDescriptor.name.getPackageName())) {}
        }
        else
        {
          bool2 = bool1;
          i = paramInt;
          if (paramInt == 0)
          {
            if (bool1) {
              paramPrintWriter.println();
            }
            bool2 = true;
            paramPrintWriter.println("  Launching content providers:");
            i = 1;
            paramBoolean = true;
          }
          paramPrintWriter.print("  Launching #");
          paramPrintWriter.print(j);
          paramPrintWriter.print(": ");
          paramPrintWriter.println(paramFileDescriptor);
          bool3 = paramBoolean;
        }
        j -= 1;
        bool1 = bool2;
        paramInt = i;
        paramBoolean = bool3;
      }
    }
    if (!bool2) {
      paramPrintWriter.println("  (nothing)");
    }
  }
  
  void dumpRecentsLocked(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt, boolean paramBoolean, String paramString)
  {
    paramPrintWriter.println("ACTIVITY MANAGER RECENT TASKS (dumpsys activity recents)");
    int i = 0;
    paramInt = 0;
    int j = i;
    if (this.mRecentTasks != null)
    {
      j = i;
      if (this.mRecentTasks.size() > 0)
      {
        i = 0;
        int i1 = this.mRecentTasks.size();
        int k = 0;
        for (;;)
        {
          j = paramInt;
          if (k >= i1) {
            break;
          }
          paramFileDescriptor = (TaskRecord)this.mRecentTasks.get(k);
          int m;
          int n;
          if (paramString != null)
          {
            m = paramInt;
            n = i;
            if (paramFileDescriptor.realActivity != null)
            {
              m = paramInt;
              n = i;
              if (!paramString.equals(paramFileDescriptor.realActivity)) {}
            }
          }
          else
          {
            j = paramInt;
            paramInt = i;
            if (i == 0)
            {
              paramPrintWriter.println("  Recent tasks:");
              paramInt = 1;
              j = 1;
            }
            paramPrintWriter.print("  * Recent #");
            paramPrintWriter.print(k);
            paramPrintWriter.print(": ");
            paramPrintWriter.println(paramFileDescriptor);
            m = j;
            n = paramInt;
            if (paramBoolean)
            {
              ((TaskRecord)this.mRecentTasks.get(k)).dump(paramPrintWriter, "    ");
              n = paramInt;
              m = j;
            }
          }
          k += 1;
          paramInt = m;
          i = n;
        }
      }
    }
    if (j == 0) {
      paramPrintWriter.println("  (nothing)");
    }
  }
  
  boolean dumpUids(PrintWriter paramPrintWriter, String paramString1, SparseArray<UidRecord> paramSparseArray, String paramString2, boolean paramBoolean)
  {
    boolean bool2 = false;
    int j = -1;
    int i = j;
    if (paramString1 != null) {}
    try
    {
      i = UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(paramString1, 0).uid);
      j = 0;
      for (;;)
      {
        if (j >= paramSparseArray.size()) {
          break label178;
        }
        UidRecord localUidRecord = (UidRecord)paramSparseArray.valueAt(j);
        if ((paramString1 == null) || (UserHandle.getAppId(localUidRecord.uid) == i)) {
          break;
        }
        j += 1;
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        localNameNotFoundException.printStackTrace();
        i = j;
        continue;
        boolean bool3 = bool2;
        boolean bool1 = paramBoolean;
        if (!bool2)
        {
          bool3 = true;
          if (paramBoolean) {
            paramPrintWriter.println();
          }
          paramPrintWriter.print("  ");
          paramPrintWriter.println(paramString2);
          bool1 = true;
        }
        paramPrintWriter.print("    UID ");
        UserHandle.formatUid(paramPrintWriter, localNameNotFoundException.uid);
        paramPrintWriter.print(": ");
        paramPrintWriter.println(localNameNotFoundException);
        bool2 = bool3;
        paramBoolean = bool1;
      }
    }
    label178:
    return bool2;
  }
  
  protected void dynamicallyConfigLogTag(PrintWriter paramPrintWriter, String[] paramArrayOfString, int paramInt)
  {
    paramPrintWriter.println("dynamicallyConfigLogTag, opti:" + paramInt + ", args.length:" + paramArrayOfString.length);
    paramInt = 0;
    while (paramInt < paramArrayOfString.length)
    {
      paramPrintWriter.println("dynamicallyConfigLogTag, args[" + paramInt + "]:" + paramArrayOfString[paramInt]);
      paramInt += 1;
    }
    if (paramArrayOfString.length != 3)
    {
      paramPrintWriter.println("********** Invalid argument! Get detail help as bellow: **********");
      logoutTagConfigHelp(paramPrintWriter);
      return;
    }
    String str = paramArrayOfString[1];
    if ("1".equals(paramArrayOfString[2])) {}
    for (boolean bool = true;; bool = false)
    {
      paramPrintWriter.println("dynamicallyConfigLogTag, tag:" + str + ", on:" + bool);
      if (!"life".equals(str)) {
        break;
      }
      ActivityManagerDebugConfig.DEBUG_SWITCH = bool;
      ActivityManagerDebugConfig.DEBUG_PAUSE = bool;
      ActivityManagerDebugConfig.DEBUG_RESULTS = bool;
      ActivityManagerDebugConfig.DEBUG_CLEANUP = bool;
      ActivityManagerDebugConfig.DEBUG_USER_LEAVING = bool;
      return;
    }
    if ("visibility".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_FOCUS = bool;
      ActivityManagerDebugConfig.DEBUG_VISIBILITY = bool;
      ActivityManagerDebugConfig.DEBUG_VISIBLE_BEHIND = bool;
      ActivityManagerDebugConfig.DEBUG_TRANSITION = bool;
      return;
    }
    if ("config".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_CONFIGURATION = bool;
      return;
    }
    if ("task".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_TASKS = bool;
      ActivityManagerDebugConfig.DEBUG_CLEANUP = bool;
      return;
    }
    if ("broadcast".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_PROCESSES = bool;
      ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS = bool;
      ActivityManagerDebugConfig.DEBUG_CLEANUP = bool;
      ActivityManagerDebugConfig.DEBUG_BROADCAST = bool;
      ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND = bool;
      ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT = bool;
      ActivityManagerDebugConfig.DEBUG_MU = bool;
      return;
    }
    if ("service".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_PROCESSES = bool;
      ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS = bool;
      ActivityManagerDebugConfig.DEBUG_CLEANUP = bool;
      ActivityManagerDebugConfig.DEBUG_SERVICE = bool;
      ActivityManagerDebugConfig.DEBUG_SERVICE_EXECUTING = bool;
      ActivityManagerDebugConfig.DEBUG_MU = bool;
      this.mServices.dynamicallyUpdateLogTag(bool);
      return;
    }
    if ("provider".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_PROCESSES = bool;
      ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS = bool;
      ActivityManagerDebugConfig.DEBUG_CLEANUP = bool;
      ActivityManagerDebugConfig.DEBUG_PROVIDER = bool;
      ActivityManagerDebugConfig.DEBUG_URI_PERMISSION = bool;
      ActivityManagerDebugConfig.DEBUG_MU = bool;
      return;
    }
    if ("backup".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_BACKUP = bool;
      return;
    }
    if ("stack".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_STACK = bool;
      ActivityManagerDebugConfig.DEBUG_ADD_REMOVE = bool;
      ActivityManagerDebugConfig.DEBUG_APP = bool;
      ActivityManagerDebugConfig.DEBUG_CONTAINERS = bool;
      ActivityManagerDebugConfig.DEBUG_IDLE = bool;
      ActivityManagerDebugConfig.DEBUG_RELEASE = bool;
      ActivityManagerDebugConfig.DEBUG_SAVED_STATE = bool;
      ActivityManagerDebugConfig.DEBUG_SCREENSHOTS = bool;
      ActivityManagerDebugConfig.DEBUG_STATES = bool;
      return;
    }
    if ("process".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_PROCESSES = bool;
      ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS = bool;
      return;
    }
    if ("other".equals(str))
    {
      ActivityManagerDebugConfig.DEBUG_POWER = bool;
      ActivityManagerDebugConfig.DEBUG_THUMBNAILS = bool;
      ActivityManagerDebugConfig.DEBUG_OOM_ADJ = bool;
      ActivityManagerDebugConfig.DEBUG_PSS = bool;
      ActivityManagerDebugConfig.DEBUG_LRU = bool;
      ActivityManagerDebugConfig.DEBUG_LOCKSCREEN = bool;
      ActivityManagerDebugConfig.DEBUG_RECENTS = bool;
      return;
    }
    paramPrintWriter.println("Failed! Invalid argument! Type cmd for help: dumpsys activity log");
  }
  
  void enableScreenAfterBoot()
  {
    EventLog.writeEvent(3050, SystemClock.uptimeMillis());
    this.mWindowManager.enableScreenAfterBoot();
    try
    {
      boostPriorityForLockedSection();
      updateEventDispatchingLocked();
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void enforceCallingPermission(String paramString1, String paramString2)
  {
    if (checkCallingPermission(paramString1) == 0) {
      return;
    }
    paramString1 = "Permission Denial: " + paramString2 + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + paramString1;
    Slog.w(TAG, paramString1);
    throw new SecurityException(paramString1);
  }
  
  void enforceNotIsolatedCaller(String paramString)
  {
    if (UserHandle.isIsolated(Binder.getCallingUid())) {
      throw new SecurityException("Isolated process not allowed to call " + paramString);
    }
  }
  
  void enforceShellRestriction(String paramString, int paramInt)
  {
    if ((Binder.getCallingUid() == 2000) && ((paramInt < 0) || (this.mUserController.hasUserRestriction(paramString, paramInt)))) {
      throw new SecurityException("Shell does not have permission to access user " + paramInt);
    }
  }
  
  /* Error */
  final void ensureBootCompleted()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1569	com/android/server/am/ActivityManagerService:mBooting	Z
    //   9: istore_2
    //   10: aload_0
    //   11: iconst_0
    //   12: putfield 1569	com/android/server/am/ActivityManagerService:mBooting	Z
    //   15: aload_0
    //   16: getfield 1704	com/android/server/am/ActivityManagerService:mBooted	Z
    //   19: ifeq +47 -> 66
    //   22: iconst_0
    //   23: istore_1
    //   24: aload_0
    //   25: iconst_1
    //   26: putfield 1704	com/android/server/am/ActivityManagerService:mBooted	Z
    //   29: aload_0
    //   30: monitorexit
    //   31: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   34: iload_2
    //   35: ifeq +22 -> 57
    //   38: ldc2_w 2752
    //   41: ldc_w 6735
    //   44: invokestatic 2761	android/os/Trace:traceBegin	(JLjava/lang/String;)V
    //   47: aload_0
    //   48: invokevirtual 6738	com/android/server/am/ActivityManagerService:finishBooting	()V
    //   51: ldc2_w 2752
    //   54: invokestatic 2766	android/os/Trace:traceEnd	(J)V
    //   57: iload_1
    //   58: ifeq +7 -> 65
    //   61: aload_0
    //   62: invokevirtual 8617	com/android/server/am/ActivityManagerService:enableScreenAfterBoot	()V
    //   65: return
    //   66: iconst_1
    //   67: istore_1
    //   68: goto -44 -> 24
    //   71: astore_3
    //   72: aload_0
    //   73: monitorexit
    //   74: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   77: aload_3
    //   78: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	79	0	this	ActivityManagerService
    //   23	45	1	i	int
    //   9	26	2	bool	boolean
    //   71	7	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	22	71	finally
    //   24	29	71	finally
  }
  
  public void enterPictureInPictureMode(IBinder paramIBinder)
  {
    long l = Binder.clearCallingIdentity();
    try
    {
      try
      {
        boostPriorityForLockedSection();
        if (!this.mSupportsPictureInPicture) {
          throw new IllegalStateException("enterPictureInPictureMode: Device doesn't support picture-in-picture mode.");
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      localActivityRecord = ActivityRecord.forTokenLocked(paramIBinder);
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    ActivityRecord localActivityRecord;
    if (localActivityRecord == null) {
      throw new IllegalStateException("enterPictureInPictureMode: Can't find activity for token=" + paramIBinder);
    }
    if (!localActivityRecord.supportsPictureInPicture()) {
      throw new IllegalArgumentException("enterPictureInPictureMode: Picture-In-Picture not supported for r=" + localActivityRecord);
    }
    paramIBinder = this.mStackSupervisor.getStack(4);
    if (paramIBinder != null) {}
    for (paramIBinder = paramIBinder.mBounds;; paramIBinder = this.mDefaultPinnedStackBounds)
    {
      this.mStackSupervisor.moveActivityToPinnedStackLocked(localActivityRecord, "enterPictureInPictureMode", paramIBinder);
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
    }
  }
  
  /* Error */
  public final void enterSafeMode()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1565	com/android/server/am/ActivityManagerService:mSystemReady	Z
    //   9: istore_1
    //   10: iload_1
    //   11: ifne +11 -> 22
    //   14: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   17: invokeinterface 8640 1 0
    //   22: aload_0
    //   23: iconst_1
    //   24: putfield 5914	com/android/server/am/ActivityManagerService:mSafeMode	Z
    //   27: aload_0
    //   28: monitorexit
    //   29: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   32: return
    //   33: astore_2
    //   34: aload_0
    //   35: monitorexit
    //   36: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   39: aload_2
    //   40: athrow
    //   41: astore_2
    //   42: goto -20 -> 22
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	45	0	this	ActivityManagerService
    //   9	2	1	bool	boolean
    //   33	7	2	localObject	Object
    //   41	1	2	localRemoteException	RemoteException
    // Exception table:
    //   from	to	target	type
    //   2	10	33	finally
    //   14	22	33	finally
    //   22	27	33	finally
    //   14	22	41	android/os/RemoteException
  }
  
  public void exitFreeformMode(IBinder paramIBinder)
    throws RemoteException
  {
    long l;
    ActivityRecord localActivityRecord;
    try
    {
      boostPriorityForLockedSection();
      l = Binder.clearCallingIdentity();
      try
      {
        localActivityRecord = ActivityRecord.forTokenLocked(paramIBinder);
        if (localActivityRecord == null) {
          throw new IllegalArgumentException("exitFreeformMode: No activity record matching token=" + paramIBinder);
        }
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      paramIBinder = ActivityRecord.getStackLocked(paramIBinder);
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if ((paramIBinder == null) || (paramIBinder.mStackId != 2)) {
      throw new IllegalStateException("exitFreeformMode: You can only go fullscreen from freeform.");
    }
    if (ActivityManagerDebugConfig.DEBUG_STACK) {
      Slog.d(TAG_STACK, "exitFreeformMode: " + localActivityRecord);
    }
    this.mStackSupervisor.moveTaskToStackLocked(localActivityRecord.task.taskId, 1, true, false, "exitFreeformMode", true);
    Binder.restoreCallingIdentity(l);
    resetPriorityAfterLockedSection();
  }
  
  public final boolean finishActivity(IBinder paramIBinder, int paramInt1, Intent paramIntent, int paramInt2)
  {
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    ActivityRecord localActivityRecord1;
    TaskRecord localTaskRecord;
    ActivityRecord localActivityRecord2;
    boolean bool1;
    boolean bool2;
    try
    {
      boostPriorityForLockedSection();
      localActivityRecord1 = ActivityRecord.isInStackLocked(paramIBinder);
      if (localActivityRecord1 == null) {
        return true;
      }
      localTaskRecord = localActivityRecord1.task;
      localActivityRecord2 = localTaskRecord.getRootActivity();
      if (localActivityRecord2 == null) {
        Slog.w(TAG, "Finishing task with all activities already finished");
      }
      if ((localTaskRecord.mLockTaskAuth != 4) && (localActivityRecord2 == localActivityRecord1) && (this.mStackSupervisor.isLastLockedTask(localTaskRecord)))
      {
        Slog.i(TAG, "Not finishing task in lock task mode");
        this.mStackSupervisor.showLockTaskToast();
        return false;
      }
      if (this.mController != null)
      {
        ActivityRecord localActivityRecord3 = localActivityRecord1.task.stack.topRunningActivityLocked(paramIBinder, 0);
        if (localActivityRecord3 != null)
        {
          bool1 = true;
          try
          {
            bool2 = this.mController.activityResuming(localActivityRecord3.packageName);
            bool1 = bool2;
          }
          catch (RemoteException localRemoteException)
          {
            for (;;)
            {
              this.mController = null;
              Watchdog.getInstance().setActivityController(null);
            }
          }
          if (!bool1)
          {
            Slog.i(TAG, "Not finishing activity because controller resumed");
            return false;
          }
        }
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    l = Binder.clearCallingIdentity();
    if (paramInt2 == 1)
    {
      bool1 = true;
      if ((paramInt2 != 2) && ((!bool1) || (localActivityRecord1 != localActivityRecord2))) {
        break label311;
      }
    }
    for (;;)
    {
      try
      {
        bool2 = removeTaskByIdLocked(localTaskRecord.taskId, false, bool1);
        bool1 = bool2;
        if (!bool2)
        {
          Slog.i(TAG, "Removing task failed to finish activity");
          bool1 = bool2;
        }
        Binder.restoreCallingIdentity(l);
        resetPriorityAfterLockedSection();
        return bool1;
      }
      finally
      {
        label311:
        Binder.restoreCallingIdentity(l);
      }
      bool1 = false;
      break;
      bool2 = localTaskRecord.stack.requestFinishActivityLocked(paramIBinder, paramInt1, paramIntent, "app-request", true);
      bool1 = bool2;
      if (!bool2)
      {
        Slog.i(TAG, "Failed to finish by app-request");
        bool1 = bool2;
      }
    }
  }
  
  /* Error */
  public boolean finishActivityAffinity(IBinder paramIBinder)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   8: lstore_2
    //   9: aload_1
    //   10: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   13: astore_1
    //   14: aload_1
    //   15: ifnonnull +14 -> 29
    //   18: lload_2
    //   19: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   22: aload_0
    //   23: monitorexit
    //   24: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   27: iconst_0
    //   28: ireturn
    //   29: aload_1
    //   30: getfield 3550	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
    //   33: astore 5
    //   35: aload 5
    //   37: getfield 8662	com/android/server/am/TaskRecord:mLockTaskAuth	I
    //   40: iconst_4
    //   41: if_icmpeq +42 -> 83
    //   44: aload_0
    //   45: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   48: aload 5
    //   50: invokevirtual 8665	com/android/server/am/ActivityStackSupervisor:isLastLockedTask	(Lcom/android/server/am/TaskRecord;)Z
    //   53: ifeq +30 -> 83
    //   56: aload 5
    //   58: invokevirtual 8657	com/android/server/am/TaskRecord:getRootActivity	()Lcom/android/server/am/ActivityRecord;
    //   61: aload_1
    //   62: if_acmpne +21 -> 83
    //   65: aload_0
    //   66: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   69: invokevirtual 8670	com/android/server/am/ActivityStackSupervisor:showLockTaskToast	()V
    //   72: lload_2
    //   73: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   76: aload_0
    //   77: monitorexit
    //   78: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   81: iconst_0
    //   82: ireturn
    //   83: aload 5
    //   85: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   88: aload_1
    //   89: invokevirtual 8699	com/android/server/am/ActivityStack:finishActivityAffinityLocked	(Lcom/android/server/am/ActivityRecord;)Z
    //   92: istore 4
    //   94: lload_2
    //   95: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   98: aload_0
    //   99: monitorexit
    //   100: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   103: iload 4
    //   105: ireturn
    //   106: astore_1
    //   107: lload_2
    //   108: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   111: aload_1
    //   112: athrow
    //   113: astore_1
    //   114: aload_0
    //   115: monitorexit
    //   116: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   119: aload_1
    //   120: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	121	0	this	ActivityManagerService
    //   0	121	1	paramIBinder	IBinder
    //   8	100	2	l	long
    //   92	12	4	bool	boolean
    //   33	51	5	localTaskRecord	TaskRecord
    // Exception table:
    //   from	to	target	type
    //   9	14	106	finally
    //   29	72	106	finally
    //   83	94	106	finally
    //   2	9	113	finally
    //   18	22	113	finally
    //   72	76	113	finally
    //   94	98	113	finally
    //   107	113	113	finally
  }
  
  /* Error */
  final void finishBooting()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1573	com/android/server/am/ActivityManagerService:mBootAnimationComplete	Z
    //   9: ifne +14 -> 23
    //   12: aload_0
    //   13: iconst_1
    //   14: putfield 1571	com/android/server/am/ActivityManagerService:mCallFinishBooting	Z
    //   17: aload_0
    //   18: monitorexit
    //   19: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   22: return
    //   23: aload_0
    //   24: iconst_0
    //   25: putfield 1571	com/android/server/am/ActivityManagerService:mCallFinishBooting	Z
    //   28: aload_0
    //   29: monitorexit
    //   30: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   33: aload_0
    //   34: new 8703	com/oneplus/config/ConfigObserver
    //   37: dup
    //   38: aload_0
    //   39: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   42: aload_0
    //   43: getfield 1818	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
    //   46: new 100	com/android/server/am/ActivityManagerService$EmbryoConfigUpdater
    //   49: dup
    //   50: aload_0
    //   51: invokespecial 8704	com/android/server/am/ActivityManagerService$EmbryoConfigUpdater:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   54: getstatic 882	com/android/server/am/ActivityManagerService:EMBRYO_CONFIG_NAME	Ljava/lang/String;
    //   57: invokespecial 8707	com/oneplus/config/ConfigObserver:<init>	(Landroid/content/Context;Landroid/os/Handler;Lcom/oneplus/config/ConfigObserver$ConfigUpdater;Ljava/lang/String;)V
    //   60: putfield 8709	com/android/server/am/ActivityManagerService:mEmbryoConfigObserver	Lcom/oneplus/config/ConfigObserver;
    //   63: aload_0
    //   64: getfield 8709	com/android/server/am/ActivityManagerService:mEmbryoConfigObserver	Lcom/oneplus/config/ConfigObserver;
    //   67: invokevirtual 8712	com/oneplus/config/ConfigObserver:register	()V
    //   70: aload_0
    //   71: getfield 1759	com/android/server/am/ActivityManagerService:mBgHandler	Landroid/os/Handler;
    //   74: aload_0
    //   75: getfield 1759	com/android/server/am/ActivityManagerService:mBgHandler	Landroid/os/Handler;
    //   78: iconst_2
    //   79: invokevirtual 8713	android/os/Handler:obtainMessage	(I)Landroid/os/Message;
    //   82: invokevirtual 8714	android/os/Handler:sendMessage	(Landroid/os/Message;)Z
    //   85: pop
    //   86: aload_0
    //   87: getfield 1833	com/android/server/am/ActivityManagerService:mFgBroadcastQueue	Lcom/android/server/am/BroadcastQueue;
    //   90: invokevirtual 8717	com/android/server/am/BroadcastQueue:initialOnlineConfig	()V
    //   93: aload_0
    //   94: getfield 1839	com/android/server/am/ActivityManagerService:mBgBroadcastQueue	Lcom/android/server/am/BroadcastQueue;
    //   97: invokevirtual 8717	com/android/server/am/BroadcastQueue:initialOnlineConfig	()V
    //   100: new 3444	android/util/ArraySet
    //   103: dup
    //   104: invokespecial 8718	android/util/ArraySet:<init>	()V
    //   107: astore_3
    //   108: getstatic 5927	android/os/Build:SUPPORTED_ABIS	[Ljava/lang/String;
    //   111: astore 4
    //   113: iconst_0
    //   114: istore_1
    //   115: aload 4
    //   117: arraylength
    //   118: istore_2
    //   119: iload_1
    //   120: iload_2
    //   121: if_icmpge +117 -> 238
    //   124: aload 4
    //   126: iload_1
    //   127: aaload
    //   128: astore 5
    //   130: aload 5
    //   132: invokestatic 8721	android/os/Process:establishZygoteConnectionForAbi	(Ljava/lang/String;)V
    //   135: aload 5
    //   137: invokestatic 5935	dalvik/system/VMRuntime:getInstructionSet	(Ljava/lang/String;)Ljava/lang/String;
    //   140: astore 6
    //   142: aload_3
    //   143: aload 6
    //   145: invokevirtual 5120	android/util/ArraySet:contains	(Ljava/lang/Object;)Z
    //   148: ifne +22 -> 170
    //   151: aload_0
    //   152: getfield 8723	com/android/server/am/ActivityManagerService:mInstaller	Lcom/android/server/pm/Installer;
    //   155: aload 5
    //   157: invokestatic 5935	dalvik/system/VMRuntime:getInstructionSet	(Ljava/lang/String;)Ljava/lang/String;
    //   160: invokevirtual 8728	com/android/server/pm/Installer:markBootComplete	(Ljava/lang/String;)V
    //   163: aload_3
    //   164: aload 6
    //   166: invokevirtual 6546	android/util/ArraySet:add	(Ljava/lang/Object;)Z
    //   169: pop
    //   170: iload_1
    //   171: iconst_1
    //   172: iadd
    //   173: istore_1
    //   174: goto -55 -> 119
    //   177: astore_3
    //   178: aload_0
    //   179: monitorexit
    //   180: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   183: aload_3
    //   184: athrow
    //   185: astore 7
    //   187: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   190: new 1066	java/lang/StringBuilder
    //   193: dup
    //   194: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   197: ldc_w 8730
    //   200: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   203: aload 5
    //   205: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   208: ldc_w 2239
    //   211: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   214: aload 7
    //   216: invokevirtual 8733	com/android/internal/os/InstallerConnection$InstallerException:getMessage	()Ljava/lang/String;
    //   219: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   222: ldc_w 2315
    //   225: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   228: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   231: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   234: pop
    //   235: goto -72 -> 163
    //   238: new 8735	android/content/IntentFilter
    //   241: dup
    //   242: invokespecial 8736	android/content/IntentFilter:<init>	()V
    //   245: astore_3
    //   246: aload_3
    //   247: ldc_w 8738
    //   250: invokevirtual 8741	android/content/IntentFilter:addAction	(Ljava/lang/String;)V
    //   253: aload_3
    //   254: ldc_w 4594
    //   257: invokevirtual 8744	android/content/IntentFilter:addDataScheme	(Ljava/lang/String;)V
    //   260: aload_0
    //   261: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   264: new 21	com/android/server/am/ActivityManagerService$12
    //   267: dup
    //   268: aload_0
    //   269: invokespecial 8745	com/android/server/am/ActivityManagerService$12:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   272: aload_3
    //   273: invokevirtual 8749	android/content/Context:registerReceiver	(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;
    //   276: pop
    //   277: new 8735	android/content/IntentFilter
    //   280: dup
    //   281: invokespecial 8736	android/content/IntentFilter:<init>	()V
    //   284: astore_3
    //   285: aload_3
    //   286: ldc_w 8751
    //   289: invokevirtual 8741	android/content/IntentFilter:addAction	(Ljava/lang/String;)V
    //   292: aload_0
    //   293: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   296: new 23	com/android/server/am/ActivityManagerService$13
    //   299: dup
    //   300: aload_0
    //   301: invokespecial 8752	com/android/server/am/ActivityManagerService$13:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   304: aload_3
    //   305: invokevirtual 8749	android/content/Context:registerReceiver	(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;
    //   308: pop
    //   309: getstatic 1296	com/android/server/am/ActivityManagerService:mEnableNetOpts	Z
    //   312: ifeq +86 -> 398
    //   315: new 8735	android/content/IntentFilter
    //   318: dup
    //   319: invokespecial 8736	android/content/IntentFilter:<init>	()V
    //   322: astore_3
    //   323: aload_3
    //   324: ldc_w 8754
    //   327: invokevirtual 8741	android/content/IntentFilter:addAction	(Ljava/lang/String;)V
    //   330: aload_3
    //   331: ldc_w 8756
    //   334: invokevirtual 8741	android/content/IntentFilter:addAction	(Ljava/lang/String;)V
    //   337: aload_0
    //   338: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   341: new 25	com/android/server/am/ActivityManagerService$14
    //   344: dup
    //   345: aload_0
    //   346: invokespecial 8757	com/android/server/am/ActivityManagerService$14:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   349: aload_3
    //   350: invokevirtual 8749	android/content/Context:registerReceiver	(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;
    //   353: pop
    //   354: aload_0
    //   355: aload_0
    //   356: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   359: ldc_w 8759
    //   362: invokevirtual 5151	android/content/Context:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   365: checkcast 8761	android/net/ConnectivityManager
    //   368: putfield 1740	com/android/server/am/ActivityManagerService:mConnectivityManager	Landroid/net/ConnectivityManager;
    //   371: aload_0
    //   372: getfield 1740	com/android/server/am/ActivityManagerService:mConnectivityManager	Landroid/net/ConnectivityManager;
    //   375: ifnull +23 -> 398
    //   378: aload_0
    //   379: getfield 1740	com/android/server/am/ActivityManagerService:mConnectivityManager	Landroid/net/ConnectivityManager;
    //   382: invokevirtual 8765	android/net/ConnectivityManager:getActiveNetworkInfo	()Landroid/net/NetworkInfo;
    //   385: astore_3
    //   386: aload_3
    //   387: ifnull +11 -> 398
    //   390: aload_0
    //   391: aload_3
    //   392: invokevirtual 8770	android/net/NetworkInfo:getType	()I
    //   395: putfield 1733	com/android/server/am/ActivityManagerService:mActiveType	I
    //   398: aload_0
    //   399: getfield 8772	com/android/server/am/ActivityManagerService:mSystemServiceManager	Lcom/android/server/SystemServiceManager;
    //   402: sipush 1000
    //   405: invokevirtual 8777	com/android/server/SystemServiceManager:startBootPhase	(I)V
    //   408: aload_0
    //   409: monitorenter
    //   410: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   413: aload_0
    //   414: getfield 1482	com/android/server/am/ActivityManagerService:mProcessesOnHold	Ljava/util/ArrayList;
    //   417: invokevirtual 2580	java/util/ArrayList:size	()I
    //   420: istore_2
    //   421: iload_2
    //   422: ifle +82 -> 504
    //   425: new 1242	java/util/ArrayList
    //   428: dup
    //   429: aload_0
    //   430: getfield 1482	com/android/server/am/ActivityManagerService:mProcessesOnHold	Ljava/util/ArrayList;
    //   433: invokespecial 2099	java/util/ArrayList:<init>	(Ljava/util/Collection;)V
    //   436: astore_3
    //   437: iconst_0
    //   438: istore_1
    //   439: iload_1
    //   440: iload_2
    //   441: if_icmpge +63 -> 504
    //   444: getstatic 2973	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PROCESSES	Z
    //   447: ifeq +34 -> 481
    //   450: getstatic 1145	com/android/server/am/ActivityManagerService:TAG_PROCESSES	Ljava/lang/String;
    //   453: new 1066	java/lang/StringBuilder
    //   456: dup
    //   457: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   460: ldc_w 8779
    //   463: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   466: aload_3
    //   467: iload_1
    //   468: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   471: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   474: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   477: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   480: pop
    //   481: aload_0
    //   482: aload_3
    //   483: iload_1
    //   484: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   487: checkcast 2141	com/android/server/am/ProcessRecord
    //   490: ldc_w 8781
    //   493: aconst_null
    //   494: invokespecial 3011	com/android/server/am/ActivityManagerService:startProcessLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;)V
    //   497: iload_1
    //   498: iconst_1
    //   499: iadd
    //   500: istore_1
    //   501: goto -62 -> 439
    //   504: aload_0
    //   505: getfield 1782	com/android/server/am/ActivityManagerService:mFactoryTest	I
    //   508: iconst_1
    //   509: if_icmpeq +100 -> 609
    //   512: aload_0
    //   513: getfield 1818	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
    //   516: bipush 27
    //   518: invokevirtual 2856	com/android/server/am/ActivityManagerService$MainHandler:obtainMessage	(I)Landroid/os/Message;
    //   521: astore_3
    //   522: aload_0
    //   523: getfield 1818	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
    //   526: aload_3
    //   527: getstatic 1216	com/android/server/am/ActivityManagerService:POWER_CHECK_DELAY	I
    //   530: i2l
    //   531: invokevirtual 2863	com/android/server/am/ActivityManagerService$MainHandler:sendMessageDelayed	(Landroid/os/Message;J)Z
    //   534: pop
    //   535: aload_0
    //   536: getfield 1422	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
    //   539: invokevirtual 8784	com/android/server/am/OnePlusHighPowerDetector:startMonitor	()V
    //   542: ldc_w 8786
    //   545: ldc_w 1941
    //   548: invokestatic 5636	android/os/SystemProperties:set	(Ljava/lang/String;Ljava/lang/String;)V
    //   551: ldc_w 8788
    //   554: ldc_w 8790
    //   557: invokestatic 1947	android/os/SystemProperties:get	(Ljava/lang/String;)Ljava/lang/String;
    //   560: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   563: ifeq +18 -> 581
    //   566: ldc_w 1270
    //   569: ldc_w 8792
    //   572: invokestatic 1947	android/os/SystemProperties:get	(Ljava/lang/String;)Ljava/lang/String;
    //   575: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   578: ifeq +12 -> 590
    //   581: ldc_w 8794
    //   584: ldc_w 1941
    //   587: invokestatic 5636	android/os/SystemProperties:set	(Ljava/lang/String;Ljava/lang/String;)V
    //   590: aload_0
    //   591: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   594: new 27	com/android/server/am/ActivityManagerService$15
    //   597: dup
    //   598: aload_0
    //   599: invokespecial 8795	com/android/server/am/ActivityManagerService$15:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   602: invokevirtual 8799	com/android/server/am/UserController:sendBootCompletedLocked	(Landroid/content/IIntentReceiver;)V
    //   605: aload_0
    //   606: invokevirtual 8802	com/android/server/am/ActivityManagerService:scheduleStartProfilesLocked	()V
    //   609: aload_0
    //   610: monitorexit
    //   611: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   614: return
    //   615: astore_3
    //   616: aload_0
    //   617: monitorexit
    //   618: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   621: aload_3
    //   622: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	623	0	this	ActivityManagerService
    //   114	387	1	i	int
    //   118	324	2	j	int
    //   107	57	3	localArraySet	ArraySet
    //   177	7	3	localObject1	Object
    //   245	282	3	localObject2	Object
    //   615	7	3	localObject3	Object
    //   111	14	4	arrayOfString	String[]
    //   128	76	5	str1	String
    //   140	25	6	str2	String
    //   185	30	7	localInstallerException	com.android.internal.os.InstallerConnection.InstallerException
    // Exception table:
    //   from	to	target	type
    //   2	17	177	finally
    //   23	28	177	finally
    //   151	163	185	com/android/internal/os/InstallerConnection$InstallerException
    //   410	421	615	finally
    //   425	437	615	finally
    //   444	481	615	finally
    //   481	497	615	finally
    //   504	581	615	finally
    //   581	590	615	finally
    //   590	609	615	finally
  }
  
  public final void finishHeavyWeightApp()
  {
    Object localObject1;
    if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0)
    {
      localObject1 = "Permission Denial: finishHeavyWeightApp() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
      Slog.w(TAG, (String)localObject1);
      throw new SecurityException((String)localObject1);
    }
    for (;;)
    {
      int i;
      try
      {
        boostPriorityForLockedSection();
        localObject1 = this.mHeavyWeightProcess;
        if (localObject1 == null) {
          return;
        }
        localObject1 = new ArrayList(this.mHeavyWeightProcess.activities);
        i = 0;
        if (i < ((ArrayList)localObject1).size())
        {
          ActivityRecord localActivityRecord = (ActivityRecord)((ArrayList)localObject1).get(i);
          if ((!localActivityRecord.finishing) && (localActivityRecord.isInStackLocked())) {
            localActivityRecord.task.stack.finishActivityLocked(localActivityRecord, 0, null, "finish-heavy", true);
          }
        }
        else
        {
          this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
          this.mHeavyWeightProcess = null;
          return;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      i += 1;
    }
  }
  
  public void finishInstrumentation(IApplicationThread paramIApplicationThread, int paramInt, Bundle paramBundle)
  {
    UserHandle.getCallingUserId();
    if ((paramBundle != null) && (paramBundle.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    try
    {
      boostPriorityForLockedSection();
      ProcessRecord localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
      if (localProcessRecord == null)
      {
        Slog.w(TAG, "finishInstrumentation: no app for " + paramIApplicationThread);
        return;
      }
      long l = Binder.clearCallingIdentity();
      finishInstrumentationLocked(localProcessRecord, paramInt, paramBundle);
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void finishInstrumentationLocked(ProcessRecord paramProcessRecord, int paramInt, Bundle paramBundle)
  {
    if (paramProcessRecord.instrumentationWatcher != null) {
      this.mInstrumentationReporter.reportFinished(paramProcessRecord.instrumentationWatcher, paramProcessRecord.instrumentationClass, paramInt, paramBundle);
    }
    if (paramProcessRecord.instrumentationUiAutomationConnection != null) {
      this.mHandler.obtainMessage(57, paramProcessRecord.instrumentationUiAutomationConnection).sendToTarget();
    }
    paramProcessRecord.instrumentationWatcher = null;
    paramProcessRecord.instrumentationUiAutomationConnection = null;
    paramProcessRecord.instrumentationClass = null;
    paramProcessRecord.instrumentationInfo = null;
    paramProcessRecord.instrumentationProfileFile = null;
    paramProcessRecord.instrumentationArguments = null;
    forceStopPackageLocked(paramProcessRecord.info.packageName, -1, false, false, true, true, false, paramProcessRecord.userId, "finished inst");
  }
  
  public void finishNotOrderReceiver(IBinder paramIBinder, int paramInt1, int paramInt2, String paramString, Bundle paramBundle, boolean paramBoolean)
  {
    if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
      Slog.v(TAG, "Finish not order hasCode: " + paramInt1);
    }
    long l = Binder.clearCallingIdentity();
    for (;;)
    {
      try
      {
        try
        {
          boostPriorityForLockedSection();
          paramIBinder = broadcastRecordForNotOrderReceiverLocked(paramIBinder, paramInt1);
          if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG, "mReceiverRecord: " + paramIBinder);
          }
          if (paramIBinder != null) {
            paramInt1 = 0;
          }
          try
          {
            localObject = paramIBinder.mIntent.getAction();
            bool = paramIBinder.r.queue.getOptimizationIncludingList().contains(localObject);
            if (bool) {
              paramInt1 = 1;
            }
          }
          catch (NullPointerException localNullPointerException)
          {
            Object localObject;
            boolean bool;
            Slog.w(TAG, "can't check if optimized");
            continue;
          }
          if (paramInt1 == 0)
          {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
              Slog.v(TAG, "Finish not optimized non-ordered broadcast : " + paramIBinder);
            }
            bool = false;
            paramIBinder = paramIBinder.r;
            if ((this.mOnePlusProcessManager != null) && (paramIBinder != null) && (paramIBinder.curApp != null))
            {
              localObject = this.mOnePlusProcessManager;
              OnePlusProcessManager.continueSuspendUid(paramIBinder.curApp.uid);
            }
            if (paramIBinder != null) {
              bool = paramIBinder.queue.finishReceiverLocked(paramIBinder, paramInt2, paramString, paramBundle, paramBoolean, true);
            }
            if (bool) {
              paramIBinder.queue.processNextBroadcast(false);
            }
            resetPriorityAfterLockedSection();
            trimApplications();
            return;
          }
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        paramIBinder.cancelBroadcastTimeoutLocked();
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      if ((this.mOnePlusProcessManager != null) && (paramIBinder != null) && (paramIBinder.curApp != null))
      {
        paramString = this.mOnePlusProcessManager;
        OnePlusProcessManager.continueSuspendUid(paramIBinder.curApp.uid);
      }
    }
  }
  
  /* Error */
  public void finishReceiver(IBinder paramIBinder, int paramInt1, String paramString, Bundle paramBundle, boolean paramBoolean, int paramInt2)
  {
    // Byte code:
    //   0: getstatic 7004	com/android/server/am/ActivityManagerDebugConfig:DEBUG_BROADCAST	Z
    //   3: ifeq +30 -> 33
    //   6: getstatic 1088	com/android/server/am/ActivityManagerService:TAG_BROADCAST	Ljava/lang/String;
    //   9: new 1066	java/lang/StringBuilder
    //   12: dup
    //   13: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   16: ldc_w 8862
    //   19: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   22: aload_1
    //   23: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   26: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   29: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   32: pop
    //   33: aload 4
    //   35: ifnull +22 -> 57
    //   38: aload 4
    //   40: invokevirtual 6352	android/os/Bundle:hasFileDescriptors	()Z
    //   43: ifeq +14 -> 57
    //   46: new 2386	java/lang/IllegalArgumentException
    //   49: dup
    //   50: ldc_w 6354
    //   53: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   56: athrow
    //   57: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   60: lstore 8
    //   62: iconst_0
    //   63: istore 7
    //   65: aload_0
    //   66: monitorenter
    //   67: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   70: ldc_w 5890
    //   73: iload 6
    //   75: iand
    //   76: ifeq +99 -> 175
    //   79: aload_0
    //   80: getfield 1833	com/android/server/am/ActivityManagerService:mFgBroadcastQueue	Lcom/android/server/am/BroadcastQueue;
    //   83: astore 10
    //   85: aload 10
    //   87: aload_1
    //   88: invokevirtual 8866	com/android/server/am/BroadcastQueue:getMatchingOrderedReceiver	(Landroid/os/IBinder;)Lcom/android/server/am/BroadcastRecord;
    //   91: astore_1
    //   92: aload_0
    //   93: getfield 7543	com/android/server/am/ActivityManagerService:mOnePlusProcessManager	Lcom/android/server/am/OnePlusProcessManager;
    //   96: ifnull +30 -> 126
    //   99: aload_1
    //   100: ifnull +26 -> 126
    //   103: aload_1
    //   104: getfield 5104	com/android/server/am/BroadcastRecord:curApp	Lcom/android/server/am/ProcessRecord;
    //   107: ifnull +19 -> 126
    //   110: aload_0
    //   111: getfield 7543	com/android/server/am/ActivityManagerService:mOnePlusProcessManager	Lcom/android/server/am/OnePlusProcessManager;
    //   114: astore 10
    //   116: aload_1
    //   117: getfield 5104	com/android/server/am/BroadcastRecord:curApp	Lcom/android/server/am/ProcessRecord;
    //   120: getfield 2147	com/android/server/am/ProcessRecord:uid	I
    //   123: invokestatic 8845	com/android/server/am/OnePlusProcessManager:continueSuspendUid	(I)V
    //   126: aload_1
    //   127: ifnull +20 -> 147
    //   130: aload_1
    //   131: getfield 5098	com/android/server/am/BroadcastRecord:queue	Lcom/android/server/am/BroadcastQueue;
    //   134: aload_1
    //   135: iload_2
    //   136: aload_3
    //   137: aload 4
    //   139: iload 5
    //   141: iconst_1
    //   142: invokevirtual 8849	com/android/server/am/BroadcastQueue:finishReceiverLocked	(Lcom/android/server/am/BroadcastRecord;ILjava/lang/String;Landroid/os/Bundle;ZZ)Z
    //   145: istore 7
    //   147: aload_0
    //   148: monitorexit
    //   149: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   152: iload 7
    //   154: ifeq +11 -> 165
    //   157: aload_1
    //   158: getfield 5098	com/android/server/am/BroadcastRecord:queue	Lcom/android/server/am/BroadcastQueue;
    //   161: iconst_0
    //   162: invokevirtual 8852	com/android/server/am/BroadcastQueue:processNextBroadcast	(Z)V
    //   165: aload_0
    //   166: invokevirtual 6361	com/android/server/am/ActivityManagerService:trimApplications	()V
    //   169: lload 8
    //   171: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   174: return
    //   175: aload_0
    //   176: getfield 1839	com/android/server/am/ActivityManagerService:mBgBroadcastQueue	Lcom/android/server/am/BroadcastQueue;
    //   179: astore 10
    //   181: goto -96 -> 85
    //   184: astore_1
    //   185: aload_0
    //   186: monitorexit
    //   187: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   190: aload_1
    //   191: athrow
    //   192: astore_1
    //   193: lload 8
    //   195: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   198: aload_1
    //   199: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	200	0	this	ActivityManagerService
    //   0	200	1	paramIBinder	IBinder
    //   0	200	2	paramInt1	int
    //   0	200	3	paramString	String
    //   0	200	4	paramBundle	Bundle
    //   0	200	5	paramBoolean	boolean
    //   0	200	6	paramInt2	int
    //   63	90	7	bool	boolean
    //   60	134	8	l	long
    //   83	97	10	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   67	70	184	finally
    //   79	85	184	finally
    //   85	99	184	finally
    //   103	126	184	finally
    //   130	147	184	finally
    //   175	181	184	finally
    //   65	67	192	finally
    //   147	152	192	finally
    //   157	165	192	finally
    //   165	169	192	finally
    //   185	192	192	finally
  }
  
  void finishRunningVoiceLocked()
  {
    if (this.mRunningVoice != null)
    {
      this.mRunningVoice = null;
      this.mVoiceWakeLock.release();
      updateSleepIfNeededLocked();
    }
  }
  
  public final void finishSubActivity(IBinder paramIBinder, String paramString, int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      long l = Binder.clearCallingIdentity();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder != null) {
        paramIBinder.task.stack.finishSubActivityLocked(paramIBinder, paramString, paramInt);
      }
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void finishVoiceTask(IVoiceInteractionSession paramIVoiceInteractionSession)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   8: lstore_2
    //   9: aload_0
    //   10: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   13: aload_1
    //   14: invokevirtual 8885	com/android/server/am/ActivityStackSupervisor:finishVoiceTask	(Landroid/service/voice/IVoiceInteractionSession;)V
    //   17: lload_2
    //   18: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   21: aload_0
    //   22: monitorexit
    //   23: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   26: return
    //   27: astore_1
    //   28: lload_2
    //   29: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   32: aload_1
    //   33: athrow
    //   34: astore_1
    //   35: aload_0
    //   36: monitorexit
    //   37: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   40: aload_1
    //   41: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	42	0	this	ActivityManagerService
    //   0	42	1	paramIVoiceInteractionSession	IVoiceInteractionSession
    //   8	21	2	l	long
    // Exception table:
    //   from	to	target	type
    //   9	17	27	finally
    //   2	9	34	finally
    //   17	21	34	finally
    //   28	34	34	finally
  }
  
  /* Error */
  public void forceStopPackage(String paramString, int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7400
    //   4: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   7: ifeq +67 -> 74
    //   10: new 1066	java/lang/StringBuilder
    //   13: dup
    //   14: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   17: ldc_w 8888
    //   20: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   23: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   26: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   29: ldc_w 3218
    //   32: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   35: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   38: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   41: ldc_w 4435
    //   44: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   47: ldc_w 7400
    //   50: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   53: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   56: astore_1
    //   57: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   60: aload_1
    //   61: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   64: pop
    //   65: new 4439	java/lang/SecurityException
    //   68: dup
    //   69: aload_1
    //   70: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   73: athrow
    //   74: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   77: istore 5
    //   79: aload_0
    //   80: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   83: iload 5
    //   85: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   88: iload_2
    //   89: iconst_1
    //   90: iconst_2
    //   91: ldc_w 8889
    //   94: aconst_null
    //   95: invokevirtual 3187	com/android/server/am/UserController:handleIncomingUser	(IIIZILjava/lang/String;Ljava/lang/String;)I
    //   98: istore_2
    //   99: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   102: lstore 8
    //   104: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   107: astore 11
    //   109: aload_0
    //   110: monitorenter
    //   111: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   114: iload_2
    //   115: iconst_m1
    //   116: if_icmpne +86 -> 202
    //   119: aload_0
    //   120: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   123: invokevirtual 8892	com/android/server/am/UserController:getUsers	()[I
    //   126: astore 10
    //   128: iconst_0
    //   129: istore_2
    //   130: aload 10
    //   132: arraylength
    //   133: istore 6
    //   135: iload_2
    //   136: iload 6
    //   138: if_icmpge +222 -> 360
    //   141: aload 10
    //   143: iload_2
    //   144: iaload
    //   145: istore 7
    //   147: iconst_m1
    //   148: istore_3
    //   149: aload 11
    //   151: aload_1
    //   152: ldc_w 5890
    //   155: iload 7
    //   157: invokeinterface 5426 4 0
    //   162: istore 4
    //   164: iload 4
    //   166: istore_3
    //   167: iload_3
    //   168: iconst_m1
    //   169: if_icmpne +51 -> 220
    //   172: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   175: new 1066	java/lang/StringBuilder
    //   178: dup
    //   179: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   182: ldc_w 7304
    //   185: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   188: aload_1
    //   189: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   192: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   195: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   198: pop
    //   199: goto +187 -> 386
    //   202: iconst_1
    //   203: newarray <illegal type>
    //   205: astore 10
    //   207: aload 10
    //   209: iconst_0
    //   210: iload_2
    //   211: iastore
    //   212: goto -84 -> 128
    //   215: astore 12
    //   217: goto -50 -> 167
    //   220: aload 11
    //   222: aload_1
    //   223: iconst_1
    //   224: iload 7
    //   226: invokeinterface 4862 4 0
    //   231: aload_0
    //   232: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   235: iload 7
    //   237: iconst_0
    //   238: invokevirtual 4809	com/android/server/am/UserController:isUserRunningLocked	(II)Z
    //   241: ifeq +145 -> 386
    //   244: getstatic 4887	com/android/server/am/OnePlusAppBootManager:IN_USING	Z
    //   247: ifeq +13 -> 260
    //   250: aconst_null
    //   251: invokestatic 4890	com/android/server/am/OnePlusAppBootManager:getInstance	(Lcom/android/server/pm/PackageManagerService;)Lcom/android/server/am/OnePlusAppBootManager;
    //   254: aload_1
    //   255: iload 5
    //   257: invokevirtual 8895	com/android/server/am/OnePlusAppBootManager:updateAppStopInfo	(Ljava/lang/String;I)V
    //   260: aload_0
    //   261: aload_1
    //   262: iload_3
    //   263: new 1066	java/lang/StringBuilder
    //   266: dup
    //   267: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   270: ldc_w 8897
    //   273: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   276: iload 5
    //   278: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   281: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   284: invokespecial 7317	com/android/server/am/ActivityManagerService:forceStopPackageLocked	(Ljava/lang/String;ILjava/lang/String;)V
    //   287: aload_0
    //   288: aload_1
    //   289: iload_3
    //   290: invokespecial 969	com/android/server/am/ActivityManagerService:finishForceStopPackageLocked	(Ljava/lang/String;I)V
    //   293: goto +93 -> 386
    //   296: astore_1
    //   297: aload_0
    //   298: monitorexit
    //   299: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   302: aload_1
    //   303: athrow
    //   304: astore_1
    //   305: lload 8
    //   307: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   310: aload_1
    //   311: athrow
    //   312: astore 12
    //   314: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   317: new 1066	java/lang/StringBuilder
    //   320: dup
    //   321: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   324: ldc_w 4901
    //   327: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   330: aload_1
    //   331: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   334: ldc_w 2237
    //   337: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   340: aload 12
    //   342: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   345: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   348: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   351: pop
    //   352: goto -121 -> 231
    //   355: astore 12
    //   357: goto -126 -> 231
    //   360: aload_0
    //   361: monitorexit
    //   362: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   365: lload 8
    //   367: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   370: aload_0
    //   371: getfield 1422	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
    //   374: aload_1
    //   375: invokevirtual 8900	com/android/server/am/OnePlusHighPowerDetector:postProcessOfForceStop	(Ljava/lang/String;)V
    //   378: aload_0
    //   379: getfield 1422	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
    //   382: invokevirtual 6568	com/android/server/am/OnePlusHighPowerDetector:cancelBgDetectNotificationIfNeeded	()V
    //   385: return
    //   386: iload_2
    //   387: iconst_1
    //   388: iadd
    //   389: istore_2
    //   390: goto -255 -> 135
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	393	0	this	ActivityManagerService
    //   0	393	1	paramString	String
    //   0	393	2	paramInt	int
    //   148	142	3	i	int
    //   162	3	4	j	int
    //   77	200	5	k	int
    //   133	6	6	m	int
    //   145	91	7	n	int
    //   102	264	8	l	long
    //   126	82	10	arrayOfInt	int[]
    //   107	114	11	localIPackageManager	IPackageManager
    //   215	1	12	localRemoteException1	RemoteException
    //   312	29	12	localIllegalArgumentException	IllegalArgumentException
    //   355	1	12	localRemoteException2	RemoteException
    // Exception table:
    //   from	to	target	type
    //   149	164	215	android/os/RemoteException
    //   111	114	296	finally
    //   119	128	296	finally
    //   130	135	296	finally
    //   149	164	296	finally
    //   172	199	296	finally
    //   202	207	296	finally
    //   220	231	296	finally
    //   231	260	296	finally
    //   260	293	296	finally
    //   314	352	296	finally
    //   104	111	304	finally
    //   297	304	304	finally
    //   360	365	304	finally
    //   220	231	312	java/lang/IllegalArgumentException
    //   220	231	355	android/os/RemoteException
  }
  
  final boolean forceStopPackageLocked(String paramString1, int paramInt1, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4, boolean paramBoolean5, int paramInt2, String paramString2)
  {
    if ((paramInt2 == -1) && (paramString1 == null)) {
      Slog.w(TAG, "Can't force stop all processes of all users, that is insane!");
    }
    int i = paramInt1;
    if (paramInt1 < 0)
    {
      i = paramInt1;
      if (paramString1 == null) {}
    }
    try
    {
      i = UserHandle.getAppId(AppGlobals.getPackageManager().getPackageUid(paramString1, 268435456, 0));
      if (paramBoolean3)
      {
        if (paramString1 != null)
        {
          Slog.i(TAG, "Force stopping " + paramString1 + " appid=" + i + " user=" + paramInt2 + ": " + paramString2);
          paramString2 = this.mAppErrors;
          if (paramString1 != null) {
            break label260;
          }
          bool = true;
          label134:
          paramString2.resetProcessCrashTimeLocked(bool, i, paramInt2);
        }
      }
      else {
        if (paramString1 != null) {
          break label266;
        }
      }
      label260:
      label266:
      for (paramString2 = "stop user " + paramInt2;; paramString2 = "stop " + paramString1)
      {
        paramBoolean1 = killPackageProcessesLocked(paramString1, i, paramInt2, 55536, paramBoolean1, true, paramBoolean3, paramBoolean4, paramString2);
        if (!this.mStackSupervisor.finishDisabledPackageActivitiesLocked(paramString1, null, paramBoolean3, paramBoolean4, paramInt2)) {
          break label293;
        }
        if (paramBoolean3) {
          break label291;
        }
        return true;
        Slog.i(TAG, "Force stopping u" + paramInt2 + ": " + paramString2);
        break;
        bool = false;
        break label134;
      }
      label291:
      paramBoolean1 = true;
      label293:
      if (this.mServices.bringDownDisabledPackageServicesLocked(paramString1, null, paramInt2, paramBoolean4, true, paramBoolean3))
      {
        if (!paramBoolean3) {
          return true;
        }
        paramBoolean1 = true;
      }
      if (paramString1 == null) {
        this.mStickyBroadcasts.remove(paramInt2);
      }
      paramString2 = new ArrayList();
      boolean bool = paramBoolean1;
      if (this.mProviderMap.collectPackageProvidersLocked(paramString1, null, paramBoolean3, paramBoolean4, paramInt2, paramString2))
      {
        if (!paramBoolean3) {
          return true;
        }
        bool = true;
      }
      paramInt1 = paramString2.size() - 1;
      while (paramInt1 >= 0)
      {
        removeDyingProviderLocked(null, (ContentProviderRecord)paramString2.get(paramInt1), true);
        paramInt1 -= 1;
      }
      removeUriPermissionsForPackageLocked(paramString1, paramInt2, false);
      paramBoolean1 = bool;
      if (paramBoolean3)
      {
        paramInt1 = this.mBroadcastQueues.length - 1;
        for (;;)
        {
          paramBoolean1 = bool;
          if (paramInt1 < 0) {
            break;
          }
          bool |= this.mBroadcastQueues[paramInt1].cleanupDisabledPackageReceiversLocked(paramString1, null, paramInt2, paramBoolean3);
          paramInt1 -= 1;
        }
      }
      if (paramString1 != null)
      {
        paramBoolean4 = paramBoolean1;
        if (!paramBoolean5) {}
      }
      else
      {
        paramBoolean4 = paramBoolean1;
        if (this.mIntentSenderRecords.size() > 0)
        {
          paramString2 = this.mIntentSenderRecords.values().iterator();
          for (;;)
          {
            paramBoolean4 = paramBoolean1;
            if (!paramString2.hasNext()) {
              break;
            }
            Object localObject = (WeakReference)paramString2.next();
            if (localObject == null)
            {
              paramString2.remove();
            }
            else
            {
              localObject = (PendingIntentRecord)((WeakReference)localObject).get();
              if (localObject == null)
              {
                paramString2.remove();
              }
              else if (paramString1 == null)
              {
                if (((PendingIntentRecord)localObject).key.userId != paramInt2) {}
              }
              else
              {
                for (;;)
                {
                  if (!paramBoolean3)
                  {
                    return true;
                    if ((UserHandle.getAppId(((PendingIntentRecord)localObject).uid) != i) || ((paramInt2 != -1) && (((PendingIntentRecord)localObject).key.userId != paramInt2))) {
                      break;
                    }
                    if (!((PendingIntentRecord)localObject).key.packageName.equals(paramString1)) {
                      break;
                    }
                  }
                }
                paramBoolean4 = true;
                paramString2.remove();
                ((PendingIntentRecord)localObject).canceled = true;
                paramBoolean1 = paramBoolean4;
                if (((PendingIntentRecord)localObject).key.activity != null)
                {
                  paramBoolean1 = paramBoolean4;
                  if (((PendingIntentRecord)localObject).key.activity.pendingResults != null)
                  {
                    ((PendingIntentRecord)localObject).key.activity.pendingResults.remove(((PendingIntentRecord)localObject).ref);
                    paramBoolean1 = paramBoolean4;
                  }
                }
              }
            }
          }
        }
      }
      if (paramBoolean3)
      {
        if ((paramBoolean2) && (paramString1 != null))
        {
          paramString2 = AttributeCache.instance();
          if (paramString2 != null) {
            paramString2.removePackage(paramString1);
          }
        }
        if (this.mBooted)
        {
          this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
          this.mStackSupervisor.scheduleIdleLocked();
        }
      }
      return paramBoolean4;
    }
    catch (RemoteException localRemoteException)
    {
      for (;;)
      {
        i = paramInt1;
      }
    }
  }
  
  /* Error */
  void foregroundTokenDied(ForegroundToken paramForegroundToken)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   9: astore_2
    //   10: aload_2
    //   11: monitorenter
    //   12: aload_0
    //   13: getfield 1480	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
    //   16: aload_1
    //   17: getfield 8276	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
    //   20: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   23: checkcast 106	com/android/server/am/ActivityManagerService$ForegroundToken
    //   26: astore_3
    //   27: aload_3
    //   28: aload_1
    //   29: if_acmpeq +11 -> 40
    //   32: aload_2
    //   33: monitorexit
    //   34: aload_0
    //   35: monitorexit
    //   36: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   39: return
    //   40: aload_0
    //   41: getfield 1480	com/android/server/am/ActivityManagerService:mForegroundProcesses	Landroid/util/SparseArray;
    //   44: aload_1
    //   45: getfield 8276	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
    //   48: invokevirtual 3492	android/util/SparseArray:remove	(I)V
    //   51: aload_0
    //   52: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   55: aload_1
    //   56: getfield 8276	com/android/server/am/ActivityManagerService$ForegroundToken:pid	I
    //   59: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   62: checkcast 2141	com/android/server/am/ProcessRecord
    //   65: astore_1
    //   66: aload_1
    //   67: ifnonnull +11 -> 78
    //   70: aload_2
    //   71: monitorexit
    //   72: aload_0
    //   73: monitorexit
    //   74: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   77: return
    //   78: aload_1
    //   79: aconst_null
    //   80: putfield 2829	com/android/server/am/ProcessRecord:forcingToForeground	Landroid/os/IBinder;
    //   83: aload_0
    //   84: aload_1
    //   85: iconst_0
    //   86: iconst_0
    //   87: invokevirtual 2832	com/android/server/am/ActivityManagerService:updateProcessForegroundLocked	(Lcom/android/server/am/ProcessRecord;ZZ)V
    //   90: aload_2
    //   91: monitorexit
    //   92: aload_0
    //   93: invokevirtual 3036	com/android/server/am/ActivityManagerService:updateOomAdjLocked	()V
    //   96: aload_0
    //   97: monitorexit
    //   98: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   101: return
    //   102: astore_1
    //   103: aload_2
    //   104: monitorexit
    //   105: aload_1
    //   106: athrow
    //   107: astore_1
    //   108: aload_0
    //   109: monitorexit
    //   110: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   113: aload_1
    //   114: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	115	0	this	ActivityManagerService
    //   0	115	1	paramForegroundToken	ForegroundToken
    //   26	2	3	localForegroundToken	ForegroundToken
    // Exception table:
    //   from	to	target	type
    //   12	27	102	finally
    //   40	66	102	finally
    //   78	90	102	finally
    //   2	12	107	finally
    //   32	34	107	finally
    //   70	72	107	finally
    //   90	96	107	finally
    //   103	107	107	finally
  }
  
  public ComponentName getActivityClassForToken(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        return null;
      }
      paramIBinder = paramIBinder.intent.getComponent();
      return paramIBinder;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public int getActivityDisplayId(IBinder paramIBinder)
    throws RemoteException
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.getStackLocked(paramIBinder);
      if ((paramIBinder != null) && (paramIBinder.mActivityContainer.isAttachedLocked()))
      {
        int i = paramIBinder.mActivityContainer.getDisplayId();
        return i;
      }
      return 0;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  ActivityInfo getActivityInfoForUser(ActivityInfo paramActivityInfo, int paramInt)
  {
    if ((paramActivityInfo == null) || ((paramInt < 1) && (paramActivityInfo.applicationInfo.uid < 100000))) {
      return paramActivityInfo;
    }
    paramActivityInfo = new ActivityInfo(paramActivityInfo);
    paramActivityInfo.applicationInfo = getAppInfoForUser(paramActivityInfo.applicationInfo, paramInt);
    return paramActivityInfo;
  }
  
  /* Error */
  public ActivityOptions getActivityOptions(IBinder paramIBinder)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore_2
    //   4: aload_0
    //   5: monitorenter
    //   6: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   9: aload_1
    //   10: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   13: astore_1
    //   14: aload_1
    //   15: ifnull +26 -> 41
    //   18: aload_1
    //   19: getfield 8948	com/android/server/am/ActivityRecord:pendingOptions	Landroid/app/ActivityOptions;
    //   22: astore 4
    //   24: aload_1
    //   25: aconst_null
    //   26: putfield 8948	com/android/server/am/ActivityRecord:pendingOptions	Landroid/app/ActivityOptions;
    //   29: aload_0
    //   30: monitorexit
    //   31: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   34: lload_2
    //   35: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   38: aload 4
    //   40: areturn
    //   41: aload_0
    //   42: monitorexit
    //   43: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   46: lload_2
    //   47: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   50: aconst_null
    //   51: areturn
    //   52: astore_1
    //   53: aload_0
    //   54: monitorexit
    //   55: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   58: aload_1
    //   59: athrow
    //   60: astore_1
    //   61: lload_2
    //   62: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   65: aload_1
    //   66: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	67	0	this	ActivityManagerService
    //   0	67	1	paramIBinder	IBinder
    //   3	59	2	l	long
    //   22	17	4	localActivityOptions	ActivityOptions
    // Exception table:
    //   from	to	target	type
    //   6	14	52	finally
    //   18	29	52	finally
    //   4	6	60	finally
    //   29	34	60	finally
    //   41	46	60	finally
    //   53	60	60	finally
  }
  
  public int getActivityStackId(IBinder paramIBinder)
    throws RemoteException
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.getStackLocked(paramIBinder);
      if (paramIBinder == null) {
        return -1;
      }
      int i = paramIBinder.mStackId;
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public List<ActivityManager.AppBootMode> getAllAppBootModes(int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      List localList = OnePlusAppBootManager.getInstance(null).getAllAppBootModes(paramInt);
      return localList;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public List<ActivityManager.AppControlMode> getAllAppControlModes(int paramInt)
  {
    if (DEBUG_ONEPLUS) {
      Slog.i(TAG, "AppControl#getAllAppControlModes # mode=" + paramInt);
    }
    Object localObject1;
    if (paramInt == 0)
    {
      localObject1 = null;
      try
      {
        localObject2 = this.mDeviceIdleService.getUserPowerWhitelist();
        localObject1 = localObject2;
      }
      catch (RemoteException localRemoteException)
      {
        Object localObject3;
        for (;;)
        {
          Object localObject2;
          localRemoteException.printStackTrace();
          continue;
          int i = 0;
          continue;
          j += 1;
          continue;
          boolean bool2 = false;
          continue;
          int j = 1;
        }
        if (!DEBUG_ONEPLUS) {
          break label310;
        }
        localObject1 = localRemoteException.iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject3 = (ActivityManager.AppControlMode)((Iterator)localObject1).next();
          Slog.i(TAG, "AppControl#getAllAppControlModes # c=" + localObject3);
        }
        return localRemoteException;
      }
      localObject3 = OnePlusAppBootManager.getInstance(null).getAllAppBootModes(0);
      localObject2 = new ArrayList();
      if (localObject1 != null)
      {
        i = localObject1.length;
        localObject3 = ((Iterable)localObject3).iterator();
        for (;;)
        {
          if (!((Iterator)localObject3).hasNext()) {
            break label242;
          }
          Object localObject4 = (ActivityManager.AppBootMode)((Iterator)localObject3).next();
          bool2 = false;
          j = 0;
          boolean bool1 = bool2;
          if (j < i)
          {
            if (!((ActivityManager.AppBootMode)localObject4).packageName.equals(localObject1[j])) {
              break;
            }
            bool1 = true;
          }
          if (((ActivityManager.AppBootMode)localObject4).mode != 1) {
            break label231;
          }
          bool2 = true;
          bool1 = getAppControlListMergedBlack(((ActivityManager.AppBootMode)localObject4).packageName, bool2, bool1);
          localObject4 = ((ActivityManager.AppBootMode)localObject4).packageName;
          if (!bool1) {
            break label237;
          }
          j = 0;
          ((List)localObject2).add(new ActivityManager.AppControlMode((String)localObject4, paramInt, j));
        }
      }
    }
    label231:
    label237:
    label242:
    label310:
    return null;
  }
  
  /* Error */
  public List<android.app.ActivityManager.StackInfo> getAllStackInfos()
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 8980
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore_1
    //   14: aload_0
    //   15: monitorenter
    //   16: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   19: aload_0
    //   20: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   23: invokevirtual 8983	com/android/server/am/ActivityStackSupervisor:getAllStackInfosLocked	()Ljava/util/ArrayList;
    //   26: astore_3
    //   27: aload_0
    //   28: monitorexit
    //   29: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   32: lload_1
    //   33: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   36: aload_3
    //   37: areturn
    //   38: astore_3
    //   39: aload_0
    //   40: monitorexit
    //   41: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   44: aload_3
    //   45: athrow
    //   46: astore_3
    //   47: lload_1
    //   48: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   51: aload_3
    //   52: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	53	0	this	ActivityManagerService
    //   13	35	1	l	long
    //   26	11	3	localArrayList	ArrayList
    //   38	7	3	localObject1	Object
    //   46	6	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   16	27	38	finally
    //   14	16	46	finally
    //   27	32	46	finally
    //   39	46	46	finally
  }
  
  public int getAppBootMode(String paramString)
  {
    try
    {
      boostPriorityForLockedSection();
      int i = OnePlusAppBootManager.getInstance(null).getAppBootMode(paramString);
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public boolean getAppBootState()
  {
    try
    {
      boostPriorityForLockedSection();
      boolean bool = OnePlusAppBootManager.getInstance(null).getAppBootState();
      return bool;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public int getAppControlMode(String paramString, int paramInt)
  {
    i = -1;
    if (paramInt == 0) {}
    for (;;)
    {
      try
      {
        boolean bool2 = this.mDeviceIdleService.isPowerSaveWhitelistApp(paramString);
        if (1 != OnePlusAppBootManager.getInstance(null).getAppBootMode(paramString)) {
          continue;
        }
        bool1 = true;
        bool1 = getAppControlListMergedBlack(paramString, bool1, bool2);
        if (!bool1) {
          continue;
        }
        i = 0;
      }
      catch (RemoteException localRemoteException)
      {
        boolean bool1;
        localRemoteException.printStackTrace();
        i = -2;
        continue;
      }
      if (DEBUG_ONEPLUS) {
        Slog.i(TAG, "AppControl#getAppControlMode # packageName=" + paramString + ", mode=" + paramInt + ",ret=" + i);
      }
      return i;
      bool1 = false;
      continue;
      i = 1;
    }
  }
  
  public int getAppControlState(int paramInt)
  {
    boolean bool1 = true;
    if (DEBUG_ONEPLUS) {
      Slog.i(TAG, "AppControl#getAppControlState # mode=" + paramInt);
    }
    int i = -1;
    boolean bool2;
    if (paramInt == 0)
    {
      bool2 = getAppBootState();
      if (Settings.System.getInt(this.mContext.getContentResolver(), "doze_mode_policy", 1) == 1)
      {
        if (bool2 == bool1) {
          break label148;
        }
        int j = 1;
        int k = setAppControlState(paramInt, 1);
        i = j;
        if (k < 0)
        {
          Slog.e(TAG, "AppControl# setAppControlState error # result=" + k + ",mode=" + paramInt + ",on=" + 1);
          i = j;
        }
      }
    }
    label148:
    do
    {
      return i;
      bool1 = false;
      break;
      if (bool2) {
        return 1;
      }
      return 0;
      if (paramInt == 1)
      {
        if (getAppBootState()) {
          return 1;
        }
        return 0;
      }
    } while (paramInt != 2);
    if (Settings.System.getInt(this.mContext.getContentResolver(), "doze_mode_policy", 1) == 1) {
      return 1;
    }
    return 0;
  }
  
  ApplicationInfo getAppInfoForUser(ApplicationInfo paramApplicationInfo, int paramInt)
  {
    if (paramApplicationInfo == null) {
      return null;
    }
    paramApplicationInfo = new ApplicationInfo(paramApplicationInfo);
    paramApplicationInfo.initForUser(paramInt);
    return paramApplicationInfo;
  }
  
  public IAppOpsService getAppOpsService()
  {
    return this.mAppOpsService;
  }
  
  public int getAppStartMode(int paramInt, String paramString)
  {
    try
    {
      boostPriorityForLockedSection();
      paramInt = checkAllowBackgroundLocked(paramInt, paramString, -1, true);
      return paramInt;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public Point getAppTaskThumbnailSize()
  {
    try
    {
      boostPriorityForLockedSection();
      Point localPoint = new Point(this.mThumbnailWidth, this.mThumbnailHeight);
      return localPoint;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public List<IAppTask> getAppTasks(String paramString)
  {
    int j = Binder.getCallingUid();
    long l = Binder.clearCallingIdentity();
    for (;;)
    {
      ArrayList localArrayList;
      int i;
      try
      {
        boostPriorityForLockedSection();
        localArrayList = new ArrayList();
        try
        {
          if (ActivityManagerDebugConfig.DEBUG_ALL) {
            Slog.v(TAG, "getAppTasks");
          }
          int k = this.mRecentTasks.size();
          i = 0;
          if (i < k)
          {
            TaskRecord localTaskRecord = (TaskRecord)this.mRecentTasks.get(i);
            if (localTaskRecord.effectiveUid != j) {
              break label164;
            }
            Intent localIntent = localTaskRecord.getBaseIntent();
            if ((localIntent == null) || (!paramString.equals(localIntent.getComponent().getPackageName()))) {
              break label164;
            }
            localArrayList.add(new AppTaskImpl(createRecentTaskInfoFromTaskRecord(localTaskRecord).persistentId, j));
          }
        }
        finally
        {
          Binder.restoreCallingIdentity(l);
        }
        Binder.restoreCallingIdentity(l);
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      resetPriorityAfterLockedSection();
      return localArrayList;
      label164:
      i += 1;
    }
  }
  
  /* Error */
  public Bundle getAssistContextExtras(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: iload_1
    //   2: aconst_null
    //   3: aconst_null
    //   4: aconst_null
    //   5: aconst_null
    //   6: aconst_null
    //   7: iconst_1
    //   8: iconst_1
    //   9: invokestatic 2297	android/os/UserHandle:getCallingUserId	()I
    //   12: aconst_null
    //   13: ldc2_w 4393
    //   16: invokespecial 9038	com/android/server/am/ActivityManagerService:enqueueAssistContext	(ILandroid/content/Intent;Ljava/lang/String;Lcom/android/internal/os/IResultReceiver;Landroid/os/Bundle;Landroid/os/IBinder;ZZILandroid/os/Bundle;J)Lcom/android/server/am/ActivityManagerService$PendingAssistExtras;
    //   19: astore_3
    //   20: aload_3
    //   21: ifnonnull +5 -> 26
    //   24: aconst_null
    //   25: areturn
    //   26: aload_3
    //   27: monitorenter
    //   28: aload_3
    //   29: getfield 9041	com/android/server/am/ActivityManagerService$PendingAssistExtras:haveResult	Z
    //   32: istore_2
    //   33: iload_2
    //   34: ifne +15 -> 49
    //   37: aload_3
    //   38: invokevirtual 9043	com/android/server/am/ActivityManagerService$PendingAssistExtras:wait	()V
    //   41: goto -13 -> 28
    //   44: astore 4
    //   46: goto -18 -> 28
    //   49: aload_3
    //   50: monitorexit
    //   51: aload_0
    //   52: monitorenter
    //   53: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   56: aload_0
    //   57: aload_3
    //   58: aload_3
    //   59: getfield 9046	com/android/server/am/ActivityManagerService$PendingAssistExtras:result	Landroid/os/Bundle;
    //   62: invokespecial 9048	com/android/server/am/ActivityManagerService:buildAssistBundleLocked	(Lcom/android/server/am/ActivityManagerService$PendingAssistExtras;Landroid/os/Bundle;)V
    //   65: aload_0
    //   66: getfield 1460	com/android/server/am/ActivityManagerService:mPendingAssistExtras	Ljava/util/ArrayList;
    //   69: aload_3
    //   70: invokevirtual 2970	java/util/ArrayList:remove	(Ljava/lang/Object;)Z
    //   73: pop
    //   74: aload_0
    //   75: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   78: aload_3
    //   79: invokevirtual 9051	com/android/server/am/ActivityManagerService$UiHandler:removeCallbacks	(Ljava/lang/Runnable;)V
    //   82: aload_0
    //   83: monitorexit
    //   84: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   87: aload_3
    //   88: getfield 3054	com/android/server/am/ActivityManagerService$PendingAssistExtras:extras	Landroid/os/Bundle;
    //   91: areturn
    //   92: astore 4
    //   94: aload_3
    //   95: monitorexit
    //   96: aload 4
    //   98: athrow
    //   99: astore_3
    //   100: aload_0
    //   101: monitorexit
    //   102: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   105: aload_3
    //   106: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	107	0	this	ActivityManagerService
    //   0	107	1	paramInt	int
    //   32	2	2	bool	boolean
    //   19	76	3	localPendingAssistExtras	PendingAssistExtras
    //   99	7	3	localObject1	Object
    //   44	1	4	localInterruptedException	InterruptedException
    //   92	5	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   37	41	44	java/lang/InterruptedException
    //   28	33	92	finally
    //   37	41	92	finally
    //   53	82	99	finally
  }
  
  public boolean getBgMonitorMode()
  {
    return this.mOHPD.getBgMonitorMode();
  }
  
  public List<ActivityManager.HighPowerApp> getBgPowerHungryList()
  {
    return this.mOHPD.getBgPowerHungryList();
  }
  
  public String[] getCalleePackageArray(String paramString)
  {
    try
    {
      boostPriorityForLockedSection();
      paramString = OnePlusAppBootManager.getInstance(null).getCalleePackageArray(paramString);
      return paramString;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public String[] getCallerPackageArray(String paramString)
  {
    try
    {
      boostPriorityForLockedSection();
      paramString = OnePlusAppBootManager.getInstance(null).getCallerPackageArray(paramString);
      return paramString;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public ComponentName getCallingActivity(IBinder paramIBinder)
  {
    Object localObject = null;
    try
    {
      boostPriorityForLockedSection();
      ActivityRecord localActivityRecord = getCallingRecordLocked(paramIBinder);
      paramIBinder = (IBinder)localObject;
      if (localActivityRecord != null) {
        paramIBinder = localActivityRecord.intent.getComponent();
      }
      return paramIBinder;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public String getCallingPackage(IBinder paramIBinder)
  {
    Object localObject = null;
    try
    {
      boostPriorityForLockedSection();
      ActivityRecord localActivityRecord = getCallingRecordLocked(paramIBinder);
      paramIBinder = (IBinder)localObject;
      if (localActivityRecord != null) {
        paramIBinder = localActivityRecord.info.packageName;
      }
      return paramIBinder;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public Configuration getConfiguration()
  {
    try
    {
      boostPriorityForLockedSection();
      Configuration localConfiguration = new Configuration(this.mConfiguration);
      localConfiguration.userSetLocale = false;
      return localConfiguration;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public final IActivityManager.ContentProviderHolder getContentProvider(IApplicationThread paramIApplicationThread, String paramString, int paramInt, boolean paramBoolean)
  {
    enforceNotIsolatedCaller("getContentProvider");
    if (paramIApplicationThread == null)
    {
      paramIApplicationThread = "null IApplicationThread when getting content provider " + paramString;
      Slog.w(TAG, paramIApplicationThread);
      throw new SecurityException(paramIApplicationThread);
    }
    return getContentProviderImpl(paramIApplicationThread, paramString, null, paramBoolean, paramInt);
  }
  
  public IActivityManager.ContentProviderHolder getContentProviderExternal(String paramString, int paramInt, IBinder paramIBinder)
  {
    enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call getContentProviderExternal()");
    return getContentProviderExternalUnchecked(paramString, paramIBinder, this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt, false, 2, "getContentProvider", null));
  }
  
  public UserInfo getCurrentUser()
  {
    return this.mUserController.getCurrentUser();
  }
  
  public ConfigurationInfo getDeviceConfigurationInfo()
  {
    ConfigurationInfo localConfigurationInfo = new ConfigurationInfo();
    try
    {
      boostPriorityForLockedSection();
      localConfigurationInfo.reqTouchScreen = this.mConfiguration.touchscreen;
      localConfigurationInfo.reqKeyboardType = this.mConfiguration.keyboard;
      localConfigurationInfo.reqNavigation = this.mConfiguration.navigation;
      if ((this.mConfiguration.navigation == 2) || (this.mConfiguration.navigation == 3)) {
        localConfigurationInfo.reqInputFeatures |= 0x2;
      }
      if ((this.mConfiguration.keyboard != 0) && (this.mConfiguration.keyboard != 1)) {
        localConfigurationInfo.reqInputFeatures |= 0x1;
      }
      localConfigurationInfo.reqGlEsVersion = this.GL_ES_VERSION;
      return localConfigurationInfo;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  ActivityStack getFocusedStack()
  {
    return this.mStackSupervisor.getFocusedStack();
  }
  
  public int getFocusedStackId()
    throws RemoteException
  {
    ActivityStack localActivityStack = getFocusedStack();
    if (localActivityStack != null) {
      return localActivityStack.getStackId();
    }
    return -1;
  }
  
  public int getFrontActivityScreenCompatMode()
  {
    enforceNotIsolatedCaller("getFrontActivityScreenCompatMode");
    try
    {
      boostPriorityForLockedSection();
      int i = this.mCompatModePackages.getFrontActivityScreenCompatModeLocked();
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public ParceledListSlice<android.content.UriPermission> getGrantedUriPermissions(String paramString, int paramInt)
  {
    enforceCallingPermission("android.permission.GET_APP_GRANTED_URI_PERMISSIONS", "getGrantedUriPermissions");
    ArrayList localArrayList = Lists.newArrayList();
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        int j = this.mGrantedUriPermissions.size();
        int i = 0;
        if (i >= j) {
          break;
        }
        Iterator localIterator = ((ArrayMap)this.mGrantedUriPermissions.valueAt(i)).values().iterator();
        if (localIterator.hasNext())
        {
          UriPermission localUriPermission = (UriPermission)localIterator.next();
          if ((paramString.equals(localUriPermission.targetPkg)) && (localUriPermission.targetUserId == paramInt) && (localUriPermission.persistedModeFlags != 0)) {
            localArrayList.add(localUriPermission.buildPersistedPublicApiObject());
          }
        }
        else
        {
          i += 1;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
    resetPriorityAfterLockedSection();
    return new ParceledListSlice(localArrayList);
  }
  
  Intent getHomeIntent()
  {
    Object localObject = null;
    String str = this.mTopAction;
    if (this.mTopData != null) {
      localObject = Uri.parse(this.mTopData);
    }
    localObject = new Intent(str, (Uri)localObject);
    ((Intent)localObject).setComponent(this.mTopComponent);
    ((Intent)localObject).addFlags(256);
    if (this.mFactoryTest != 1) {
      ((Intent)localObject).addCategory("android.intent.category.HOME");
    }
    return (Intent)localObject;
  }
  
  public Intent getIntentForIntentSender(IIntentSender paramIIntentSender)
  {
    enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
    if (!(paramIIntentSender instanceof PendingIntentRecord)) {
      return null;
    }
    try
    {
      paramIIntentSender = (PendingIntentRecord)paramIIntentSender;
      if (paramIIntentSender.key.requestIntent != null)
      {
        paramIIntentSender = new Intent(paramIIntentSender.key.requestIntent);
        return paramIIntentSender;
      }
      return null;
    }
    catch (ClassCastException paramIIntentSender) {}
    return null;
  }
  
  public IIntentSender getIntentSender(int paramInt1, String paramString1, IBinder paramIBinder, String paramString2, int paramInt2, Intent[] paramArrayOfIntent, String[] paramArrayOfString, int paramInt3, Bundle paramBundle, int paramInt4)
  {
    enforceNotIsolatedCaller("getIntentSender");
    int i;
    Object localObject;
    if (paramArrayOfIntent != null)
    {
      if (paramArrayOfIntent.length < 1) {
        throw new IllegalArgumentException("Intents array length must be >= 1");
      }
      i = 0;
      while (i < paramArrayOfIntent.length)
      {
        localObject = paramArrayOfIntent[i];
        if (localObject != null)
        {
          if (((Intent)localObject).hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
          }
          if ((paramInt1 == 1) && ((((Intent)localObject).getFlags() & 0x2000000) != 0)) {
            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
          }
          paramArrayOfIntent[i] = new Intent((Intent)localObject);
        }
        i += 1;
      }
      if ((paramArrayOfString != null) && (paramArrayOfString.length != paramArrayOfIntent.length)) {
        throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
      }
    }
    if ((paramBundle != null) && (paramBundle.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in options");
    }
    int j;
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        j = Binder.getCallingUid();
        localObject = this.mUserController;
        i = Binder.getCallingPid();
        if (paramInt1 == 1)
        {
          bool = true;
          i = ((UserController)localObject).handleIncomingUser(i, j, paramInt4, bool, 0, "getIntentSender", null);
          if (paramInt4 == -2) {
            i = -2;
          }
          if ((j == 0) || (j == 1000)) {
            break;
          }
          try
          {
            paramInt4 = AppGlobals.getPackageManager().getPackageUid(paramString1, 268435456, UserHandle.getUserId(j));
            if (UserHandle.isSameApp(j, paramInt4)) {
              break;
            }
            paramString1 = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + ", (need uid=" + paramInt4 + ")" + " is not allowed to send as package " + paramString1;
            Slog.w(TAG, paramString1);
            throw new SecurityException(paramString1);
          }
          catch (RemoteException paramString1)
          {
            throw new SecurityException(paramString1);
          }
        }
        boolean bool = false;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
    paramString1 = getIntentSenderLocked(paramInt1, paramString1, j, i, paramIBinder, paramString2, paramInt2, paramArrayOfIntent, paramArrayOfString, paramInt3, paramBundle);
    resetPriorityAfterLockedSection();
    return paramString1;
  }
  
  IIntentSender getIntentSenderLocked(int paramInt1, String paramString1, int paramInt2, int paramInt3, IBinder paramIBinder, String paramString2, int paramInt4, Intent[] paramArrayOfIntent, String[] paramArrayOfString, int paramInt5, Bundle paramBundle)
  {
    if (ActivityManagerDebugConfig.DEBUG_MU) {
      Slog.v(TAG_MU, "getIntentSenderLocked(): uid=" + paramInt2);
    }
    Object localObject = null;
    if (paramInt1 == 3)
    {
      ActivityRecord localActivityRecord = ActivityRecord.isInStackLocked(paramIBinder);
      if (localActivityRecord == null)
      {
        Slog.w(TAG, "Failed createPendingResult: activity " + paramIBinder + " not in any stack");
        return null;
      }
      localObject = localActivityRecord;
      if (localActivityRecord.finishing)
      {
        Slog.w(TAG, "Failed createPendingResult: activity " + localActivityRecord + " is finishing");
        return null;
      }
    }
    int i;
    if (paramArrayOfIntent != null)
    {
      i = 0;
      while (i < paramArrayOfIntent.length)
      {
        paramArrayOfIntent[i].setDefusable(true);
        i += 1;
      }
    }
    Bundle.setDefusable(paramBundle, true);
    int j;
    label202:
    int k;
    if ((0x20000000 & paramInt5) != 0)
    {
      i = 1;
      if ((0x10000000 & paramInt5) == 0) {
        break label372;
      }
      j = 1;
      if ((0x8000000 & paramInt5) == 0) {
        break label378;
      }
      k = 1;
      label214:
      paramIBinder = new PendingIntentRecord.Key(paramInt1, paramString1, (ActivityRecord)localObject, paramString2, paramInt4, paramArrayOfIntent, paramArrayOfString, paramInt5 & 0xC7FFFFFF, paramBundle, paramInt3);
      paramString1 = (WeakReference)this.mIntentSenderRecords.get(paramIBinder);
      if (paramString1 == null) {
        break label384;
      }
      paramString1 = (PendingIntentRecord)paramString1.get();
      label270:
      if (paramString1 == null) {
        break label428;
      }
      if (j != 0) {
        break label413;
      }
      if (k != 0) {
        if (paramString1.key.requestIntent != null)
        {
          paramString2 = paramString1.key.requestIntent;
          if (paramArrayOfIntent == null) {
            break label389;
          }
        }
      }
    }
    label372:
    label378:
    label384:
    label389:
    for (paramIBinder = paramArrayOfIntent[(paramArrayOfIntent.length - 1)];; paramIBinder = null)
    {
      paramString2.replaceExtras(paramIBinder);
      if (paramArrayOfIntent == null) {
        break label395;
      }
      paramArrayOfIntent[(paramArrayOfIntent.length - 1)] = paramString1.key.requestIntent;
      paramString1.key.allIntents = paramArrayOfIntent;
      paramString1.key.allResolvedTypes = paramArrayOfString;
      return paramString1;
      i = 0;
      break;
      j = 0;
      break label202;
      k = 0;
      break label214;
      paramString1 = null;
      break label270;
    }
    label395:
    paramString1.key.allIntents = null;
    paramString1.key.allResolvedTypes = null;
    return paramString1;
    label413:
    paramString1.canceled = true;
    this.mIntentSenderRecords.remove(paramIBinder);
    label428:
    if (i != 0) {
      return paramString1;
    }
    paramString1 = new PendingIntentRecord(this, paramIBinder, paramInt2);
    this.mIntentSenderRecords.put(paramIBinder, paramString1.ref);
    if (paramInt1 == 3)
    {
      if (((ActivityRecord)localObject).pendingResults == null) {
        ((ActivityRecord)localObject).pendingResults = new HashSet();
      }
      ((ActivityRecord)localObject).pendingResults.add(paramString1.ref);
    }
    return paramString1;
  }
  
  public String getLaunchedFromPackage(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.forTokenLocked(paramIBinder);
      resetPriorityAfterLockedSection();
      if (paramIBinder == null) {
        return null;
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    return paramIBinder.launchedFromPackage;
  }
  
  public int getLaunchedFromUid(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.forTokenLocked(paramIBinder);
      resetPriorityAfterLockedSection();
      if (paramIBinder == null) {
        return -1;
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    return paramIBinder.launchedFromUid;
  }
  
  public int getLockTaskModeState()
  {
    try
    {
      boostPriorityForLockedSection();
      int i = this.mStackSupervisor.getLockTaskModeState();
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void getMemoryInfo(ActivityManager.MemoryInfo paramMemoryInfo)
  {
    long l1 = this.mProcessList.getMemLevel(600);
    long l2 = this.mProcessList.getMemLevel(900);
    paramMemoryInfo.availMem = Process.getFreeMemory();
    paramMemoryInfo.totalMem = Process.getTotalMemory();
    paramMemoryInfo.threshold = l1;
    if (paramMemoryInfo.availMem < (l2 - l1) / 2L + l1) {}
    for (boolean bool = true;; bool = false)
    {
      paramMemoryInfo.lowMemory = bool;
      paramMemoryInfo.hiddenAppThreshold = l2;
      paramMemoryInfo.secondaryServerThreshold = this.mProcessList.getMemLevel(500);
      paramMemoryInfo.visibleAppThreshold = this.mProcessList.getMemLevel(100);
      paramMemoryInfo.foregroundAppThreshold = this.mProcessList.getMemLevel(0);
      return;
    }
  }
  
  public int getMemoryTrimLevel()
  {
    enforceNotIsolatedCaller("getMyMemoryState");
    try
    {
      boostPriorityForLockedSection();
      int i = this.mLastMemoryLevel;
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void getMyMemoryState(ActivityManager.RunningAppProcessInfo paramRunningAppProcessInfo)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 9249
    //   4: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   7: aload_0
    //   8: monitorenter
    //   9: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   12: aload_0
    //   13: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   16: astore_2
    //   17: aload_2
    //   18: monitorenter
    //   19: aload_0
    //   20: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   23: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   26: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   29: checkcast 2141	com/android/server/am/ProcessRecord
    //   32: astore_3
    //   33: aload_2
    //   34: monitorexit
    //   35: aload_0
    //   36: aload_3
    //   37: aload_1
    //   38: invokespecial 9252	com/android/server/am/ActivityManagerService:fillInProcMemInfo	(Lcom/android/server/am/ProcessRecord;Landroid/app/ActivityManager$RunningAppProcessInfo;)V
    //   41: aload_0
    //   42: monitorexit
    //   43: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   46: return
    //   47: astore_1
    //   48: aload_2
    //   49: monitorexit
    //   50: aload_1
    //   51: athrow
    //   52: astore_1
    //   53: aload_0
    //   54: monitorexit
    //   55: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   58: aload_1
    //   59: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	60	0	this	ActivityManagerService
    //   0	60	1	paramRunningAppProcessInfo	ActivityManager.RunningAppProcessInfo
    //   32	5	3	localProcessRecord	ProcessRecord
    // Exception table:
    //   from	to	target	type
    //   19	33	47	finally
    //   9	19	52	finally
    //   33	41	52	finally
    //   48	52	52	finally
  }
  
  /* Error */
  public final void getPCBNumber()
  {
    // Byte code:
    //   0: ldc_w 9265
    //   3: invokestatic 1947	android/os/SystemProperties:get	(Ljava/lang/String;)Ljava/lang/String;
    //   6: astore_1
    //   7: ldc_w 9267
    //   10: invokestatic 9273	java/lang/Class:forName	(Ljava/lang/String;)Ljava/lang/Class;
    //   13: astore_3
    //   14: aload_0
    //   15: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   18: astore_2
    //   19: aload_3
    //   20: iconst_1
    //   21: anewarray 9269	java/lang/Class
    //   24: dup
    //   25: iconst_0
    //   26: ldc_w 2008
    //   29: aastore
    //   30: invokevirtual 9277	java/lang/Class:getConstructor	([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;
    //   33: astore_3
    //   34: aload_0
    //   35: aload_3
    //   36: iconst_1
    //   37: anewarray 1735	java/lang/Object
    //   40: dup
    //   41: iconst_0
    //   42: aload_2
    //   43: aastore
    //   44: invokevirtual 9283	java/lang/reflect/Constructor:newInstance	([Ljava/lang/Object;)Ljava/lang/Object;
    //   47: checkcast 9285	com/qualcomm/qcnvitems/QcNvItems
    //   50: putfield 925	com/android/server/am/ActivityManagerService:items	Lcom/qualcomm/qcnvitems/QcNvItems;
    //   53: aload_1
    //   54: ldc_w 1941
    //   57: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   60: ifne +27 -> 87
    //   63: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   66: ldc_w 9287
    //   69: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   72: pop
    //   73: aload_0
    //   74: getfield 925	com/android/server/am/ActivityManagerService:items	Lcom/qualcomm/qcnvitems/QcNvItems;
    //   77: aload_0
    //   78: getfield 1768	com/android/server/am/ActivityManagerService:qc_handler	Landroid/os/Handler;
    //   81: iconst_1
    //   82: aconst_null
    //   83: invokevirtual 9291	com/qualcomm/qcnvitems/QcNvItems:registerOnServiceConnected	(Landroid/os/Handler;ILjava/lang/Object;)V
    //   86: return
    //   87: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   90: ldc_w 9293
    //   93: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   96: pop
    //   97: aload_0
    //   98: getfield 925	com/android/server/am/ActivityManagerService:items	Lcom/qualcomm/qcnvitems/QcNvItems;
    //   101: aload_0
    //   102: getfield 1768	com/android/server/am/ActivityManagerService:qc_handler	Landroid/os/Handler;
    //   105: iconst_2
    //   106: aconst_null
    //   107: invokevirtual 9291	com/qualcomm/qcnvitems/QcNvItems:registerOnServiceConnected	(Landroid/os/Handler;ILjava/lang/Object;)V
    //   110: return
    //   111: astore_1
    //   112: aload_1
    //   113: invokevirtual 9294	java/lang/InstantiationException:printStackTrace	()V
    //   116: return
    //   117: astore_1
    //   118: aload_1
    //   119: invokevirtual 9295	java/lang/NoSuchMethodException:printStackTrace	()V
    //   122: return
    //   123: astore_1
    //   124: aload_1
    //   125: invokevirtual 9296	java/lang/ClassNotFoundException:printStackTrace	()V
    //   128: return
    //   129: astore_1
    //   130: aload_1
    //   131: invokevirtual 9297	java/lang/reflect/InvocationTargetException:printStackTrace	()V
    //   134: return
    //   135: astore_1
    //   136: aload_1
    //   137: invokevirtual 9298	java/lang/IllegalArgumentException:printStackTrace	()V
    //   140: return
    //   141: astore_1
    //   142: aload_1
    //   143: invokevirtual 9299	java/lang/IllegalAccessException:printStackTrace	()V
    //   146: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	147	0	this	ActivityManagerService
    //   6	48	1	str	String
    //   111	2	1	localInstantiationException	InstantiationException
    //   117	2	1	localNoSuchMethodException	NoSuchMethodException
    //   123	2	1	localClassNotFoundException	ClassNotFoundException
    //   129	2	1	localInvocationTargetException	java.lang.reflect.InvocationTargetException
    //   135	2	1	localIllegalArgumentException	IllegalArgumentException
    //   141	2	1	localIllegalAccessException	IllegalAccessException
    //   18	25	2	localContext	Context
    //   13	23	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   34	86	111	java/lang/InstantiationException
    //   87	110	111	java/lang/InstantiationException
    //   19	34	117	java/lang/NoSuchMethodException
    //   34	86	117	java/lang/NoSuchMethodException
    //   87	110	117	java/lang/NoSuchMethodException
    //   112	116	117	java/lang/NoSuchMethodException
    //   130	134	117	java/lang/NoSuchMethodException
    //   136	140	117	java/lang/NoSuchMethodException
    //   142	146	117	java/lang/NoSuchMethodException
    //   7	19	123	java/lang/ClassNotFoundException
    //   19	34	123	java/lang/ClassNotFoundException
    //   34	86	123	java/lang/ClassNotFoundException
    //   87	110	123	java/lang/ClassNotFoundException
    //   112	116	123	java/lang/ClassNotFoundException
    //   118	122	123	java/lang/ClassNotFoundException
    //   130	134	123	java/lang/ClassNotFoundException
    //   136	140	123	java/lang/ClassNotFoundException
    //   142	146	123	java/lang/ClassNotFoundException
    //   34	86	129	java/lang/reflect/InvocationTargetException
    //   87	110	129	java/lang/reflect/InvocationTargetException
    //   34	86	135	java/lang/IllegalArgumentException
    //   87	110	135	java/lang/IllegalArgumentException
    //   34	86	141	java/lang/IllegalAccessException
    //   87	110	141	java/lang/IllegalAccessException
  }
  
  public boolean getPackageAskScreenCompat(String paramString)
  {
    enforceNotIsolatedCaller("getPackageAskScreenCompat");
    try
    {
      boostPriorityForLockedSection();
      boolean bool = this.mCompatModePackages.getPackageAskCompatModeLocked(paramString);
      return bool;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public String getPackageForIntentSender(IIntentSender paramIIntentSender)
  {
    if (!(paramIIntentSender instanceof PendingIntentRecord)) {
      return null;
    }
    try
    {
      paramIIntentSender = ((PendingIntentRecord)paramIIntentSender).key.packageName;
      return paramIIntentSender;
    }
    catch (ClassCastException paramIIntentSender) {}
    return null;
  }
  
  public String getPackageForToken(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        return null;
      }
      paramIBinder = paramIBinder.packageName;
      return paramIBinder;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  PackageManagerInternal getPackageManagerInternalLocked()
  {
    if (this.mPackageManagerInt == null) {
      this.mPackageManagerInt = ((PackageManagerInternal)LocalServices.getService(PackageManagerInternal.class));
    }
    return this.mPackageManagerInt;
  }
  
  public int getPackageProcessState(String paramString1, String paramString2)
  {
    if (!hasUsageStatsPermission(paramString2)) {
      enforceCallingPermission("android.permission.GET_PACKAGE_IMPORTANCE", "getPackageProcessState");
    }
    int i = -1;
    label87:
    label108:
    label209:
    label222:
    label234:
    label241:
    for (;;)
    {
      int k;
      int j;
      int m;
      try
      {
        boostPriorityForLockedSection();
        k = this.mLruProcesses.size() - 1;
        if (k >= 0)
        {
          paramString2 = (ProcessRecord)this.mLruProcesses.get(k);
          if (i != -1)
          {
            j = i;
            if (i <= paramString2.setProcState) {
              break label222;
            }
          }
          m = 0;
          j = paramString2.pkgList.size() - 1;
          break label209;
          j = i;
          if (paramString2.pkgDeps == null) {
            break label222;
          }
          if (m != 0)
          {
            j = i;
            break label222;
            if (!((String)paramString2.pkgList.keyAt(j)).equals(paramString1)) {
              break label234;
            }
            i = paramString2.setProcState;
            m = 1;
            break label234;
          }
          m = paramString2.pkgDeps.size() - 1;
          j = i;
          if (m < 0) {
            break label222;
          }
          if (((String)paramString2.pkgDeps.valueAt(m)).equals(paramString1))
          {
            j = paramString2.setProcState;
            break label222;
          }
          m -= 1;
          continue;
        }
        else
        {
          return i;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      for (;;)
      {
        if (j < 0) {
          break label241;
        }
        if (m == 0) {
          break label108;
        }
        break label87;
        k -= 1;
        i = j;
        break;
        j -= 1;
      }
    }
  }
  
  public int getPackageScreenCompatMode(String paramString)
  {
    enforceNotIsolatedCaller("getPackageScreenCompatMode");
    try
    {
      boostPriorityForLockedSection();
      int i = this.mCompatModePackages.getPackageScreenCompatModeLocked(paramString);
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public IBinder getPermissionServiceBinderProxy(int paramInt)
    throws RemoteException
  {
    if (!OpFeatures.isSupport(new int[] { 12 })) {
      return null;
    }
    switch (paramInt)
    {
    default: 
      return null;
    case 0: 
      return this.mPermissionRequestServiceBinderProxy;
    }
    return this.mPermissionControlServiceBinderProxy;
  }
  
  public ParceledListSlice<android.content.UriPermission> getPersistedUriPermissions(String paramString, boolean paramBoolean)
  {
    enforceNotIsolatedCaller("getPersistedUriPermissions");
    Preconditions.checkNotNull(paramString, "packageName");
    int i = Binder.getCallingUid();
    int j = UserHandle.getUserId(i);
    Object localObject1 = AppGlobals.getPackageManager();
    try
    {
      if (((IPackageManager)localObject1).getPackageUid(paramString, 786432, j) != i) {
        throw new SecurityException("Package " + paramString + " does not belong to calling UID " + i);
      }
    }
    catch (RemoteException paramString)
    {
      throw new SecurityException("Failed to verify package name ownership");
    }
    localObject1 = Lists.newArrayList();
    for (;;)
    {
      Object localObject2;
      UriPermission localUriPermission;
      try
      {
        boostPriorityForLockedSection();
        if (paramBoolean)
        {
          localObject2 = (ArrayMap)this.mGrantedUriPermissions.get(i);
          if (localObject2 == null)
          {
            Slog.w(TAG, "No permission grants found for " + paramString);
            return new ParceledListSlice((List)localObject1);
          }
          localObject2 = ((ArrayMap)localObject2).values().iterator();
          if (((Iterator)localObject2).hasNext())
          {
            localUriPermission = (UriPermission)((Iterator)localObject2).next();
            if ((!paramString.equals(localUriPermission.targetPkg)) || (localUriPermission.persistedModeFlags == 0)) {
              continue;
            }
            ((ArrayList)localObject1).add(localUriPermission.buildPersistedPublicApiObject());
            continue;
          }
          continue;
        }
        j = this.mGrantedUriPermissions.size();
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      i = 0;
      while (i < j)
      {
        localObject2 = ((ArrayMap)this.mGrantedUriPermissions.valueAt(i)).values().iterator();
        while (((Iterator)localObject2).hasNext())
        {
          localUriPermission = (UriPermission)((Iterator)localObject2).next();
          if ((paramString.equals(localUriPermission.sourcePkg)) && (localUriPermission.persistedModeFlags != 0)) {
            ((ArrayList)localObject1).add(localUriPermission.buildPersistedPublicApiObject());
          }
        }
        i += 1;
      }
    }
  }
  
  public int getProcessLimit()
  {
    try
    {
      boostPriorityForLockedSection();
      int i = this.mProcessLimitOverride;
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public Debug.MemoryInfo[] getProcessMemoryInfo(int[] paramArrayOfInt)
  {
    enforceNotIsolatedCaller("getProcessMemoryInfo");
    arrayOfMemoryInfo = new Debug.MemoryInfo[paramArrayOfInt.length];
    int i = paramArrayOfInt.length - 1;
    for (;;)
    {
      if (i >= 0) {
        try
        {
          boostPriorityForLockedSection();
          synchronized (this.mPidsSelfLocked)
          {
            ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfInt[i]);
            if (localProcessRecord != null)
            {
              j = localProcessRecord.setAdj;
              resetPriorityAfterLockedSection();
              arrayOfMemoryInfo[i] = new Debug.MemoryInfo();
              Debug.getMemoryInfo(paramArrayOfInt[i], arrayOfMemoryInfo[i]);
              if (localProcessRecord == null) {}
            }
            try
            {
              boostPriorityForLockedSection();
              if ((localProcessRecord.thread != null) && (localProcessRecord.setAdj == j)) {
                localProcessRecord.baseProcessTracker.addPss(arrayOfMemoryInfo[i].getTotalPss(), arrayOfMemoryInfo[i].getTotalUss(), false, localProcessRecord.pkgList);
              }
              resetPriorityAfterLockedSection();
              i -= 1;
              continue;
            }
            finally {}
            int j = 0;
          }
          return arrayOfMemoryInfo;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
      }
    }
  }
  
  public long[] getProcessPss(int[] paramArrayOfInt)
  {
    enforceNotIsolatedCaller("getProcessPss");
    arrayOfLong = new long[paramArrayOfInt.length];
    int i = paramArrayOfInt.length - 1;
    for (;;)
    {
      if (i >= 0) {
        try
        {
          boostPriorityForLockedSection();
          synchronized (this.mPidsSelfLocked)
          {
            ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfInt[i]);
            if (localProcessRecord != null)
            {
              j = localProcessRecord.setAdj;
              resetPriorityAfterLockedSection();
              ??? = new long[1];
              arrayOfLong[i] = Debug.getPss(paramArrayOfInt[i], (long[])???, null);
              if (localProcessRecord == null) {}
            }
            try
            {
              boostPriorityForLockedSection();
              if ((localProcessRecord.thread != null) && (localProcessRecord.setAdj == j)) {
                localProcessRecord.baseProcessTracker.addPss(arrayOfLong[i], ???[0], false, localProcessRecord.pkgList);
              }
              resetPriorityAfterLockedSection();
              i -= 1;
              continue;
            }
            finally {}
            int j = 0;
          }
          return arrayOfLong;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
      }
    }
  }
  
  final ProcessRecord getProcessRecordLocked(String paramString, int paramInt, boolean paramBoolean)
  {
    if (paramInt == 1000)
    {
      SparseArray localSparseArray = (SparseArray)this.mProcessNames.getMap().get(paramString);
      if (localSparseArray == null) {
        return null;
      }
      int j = localSparseArray.size();
      int i = 0;
      while (i < j)
      {
        int k = localSparseArray.keyAt(i);
        if ((!UserHandle.isApp(k)) && (UserHandle.isSameUser(k, paramInt))) {
          return (ProcessRecord)localSparseArray.valueAt(i);
        }
        i += 1;
      }
    }
    paramString = (ProcessRecord)this.mProcessNames.get(paramString, paramInt);
    if ((paramString == null) || (paramBoolean)) {}
    do
    {
      do
      {
        return paramString;
      } while ((this.mLastMemoryLevel <= 0) || (paramString.setProcState < 16));
      if (ActivityManagerDebugConfig.DEBUG_PSS) {
        Slog.d(TAG_PSS, "May not keep " + paramString + ": pss=" + paramString.lastCachedPss);
      }
    } while (paramString.lastCachedPss < this.mProcessList.getCachedRestoreThresholdKb());
    if (paramString.baseProcessTracker != null) {
      paramString.baseProcessTracker.reportCachedKill(paramString.pkgList, paramString.lastCachedPss);
    }
    paramString.kill(Long.toString(paramString.lastCachedPss) + "k from cached", true);
    return paramString;
  }
  
  public void getProcessStatesAndOomScoresForPIDs(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3)
  {
    if (paramArrayOfInt3 != null) {
      enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
    }
    if (paramArrayOfInt1 == null) {
      throw new NullPointerException("pids");
    }
    if (paramArrayOfInt2 == null) {
      throw new NullPointerException("states");
    }
    if (paramArrayOfInt1.length != paramArrayOfInt2.length) {
      throw new IllegalArgumentException("pids and states arrays have different lengths!");
    }
    if ((paramArrayOfInt3 != null) && (paramArrayOfInt1.length != paramArrayOfInt3.length)) {
      throw new IllegalArgumentException("pids and scores arrays have different lengths!");
    }
    SparseArray localSparseArray = this.mPidsSelfLocked;
    int i = 0;
    for (;;)
    {
      ProcessRecord localProcessRecord;
      int j;
      try
      {
        if (i < paramArrayOfInt1.length)
        {
          localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfInt1[i]);
          if (localProcessRecord == null)
          {
            j = -1;
          }
          else
          {
            j = localProcessRecord.curProcState;
            break label160;
            j = localProcessRecord.curAdj;
            break label180;
          }
        }
        else
        {
          return;
        }
      }
      finally {}
      label160:
      paramArrayOfInt2[i] = j;
      if (paramArrayOfInt3 != null)
      {
        if (localProcessRecord == null)
        {
          j = 55536;
          label180:
          paramArrayOfInt3[i] = j;
        }
      }
      else {
        i += 1;
      }
    }
  }
  
  public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState()
  {
    enforceNotIsolatedCaller("getProcessesInErrorState");
    if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", Binder.getCallingUid()) == 0) {}
    for (int i = 1;; i = 0)
    {
      int k = UserHandle.getUserId(Binder.getCallingUid());
      int j;
      label166:
      label169:
      label187:
      label262:
      label265:
      for (;;)
      {
        ProcessRecord localProcessRecord;
        ActivityManager.ProcessErrorStateInfo localProcessErrorStateInfo;
        try
        {
          boostPriorityForLockedSection();
          j = this.mLruProcesses.size();
          j -= 1;
          localArrayList = null;
          if (j < 0) {}
        }
        finally
        {
          ArrayList localArrayList;
          resetPriorityAfterLockedSection();
        }
        try
        {
          localProcessRecord = (ProcessRecord)this.mLruProcesses.get(j);
          if ((i == 0) && (localProcessRecord.userId != k)) {
            break label265;
          }
          if (localProcessRecord.thread == null) {
            break label166;
          }
          if ((!localProcessRecord.crashing) && (!localProcessRecord.notResponding)) {
            break label265;
          }
          localProcessErrorStateInfo = null;
          if (!localProcessRecord.crashing) {
            break label169;
          }
          localProcessErrorStateInfo = localProcessRecord.crashingReport;
          if (localProcessErrorStateInfo == null) {
            break label187;
          }
          if (localArrayList != null) {
            break label262;
          }
          localArrayList = new ArrayList(1);
        }
        finally
        {
          continue;
          continue;
          j -= 1;
        }
        localArrayList.add(localProcessErrorStateInfo);
        break label265;
        break label265;
        if (localProcessRecord.notResponding)
        {
          localProcessErrorStateInfo = localProcessRecord.notRespondingReport;
          continue;
          Slog.w(TAG, "Missing app error report, app = " + localProcessRecord.processName + " crashing = " + localProcessRecord.crashing + " notResponding = " + localProcessRecord.notResponding);
          break label265;
          resetPriorityAfterLockedSection();
          return localList;
        }
      }
    }
  }
  
  /* Error */
  public String getProviderMimeType(Uri paramUri, int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 9402
    //   4: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   7: aload_1
    //   8: invokevirtual 5420	android/net/Uri:getAuthority	()Ljava/lang/String;
    //   11: astore 13
    //   13: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   16: istore 4
    //   18: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   21: istore 5
    //   23: lconst_0
    //   24: lstore 7
    //   26: iconst_0
    //   27: istore_3
    //   28: aload_0
    //   29: monitorenter
    //   30: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   33: aload_0
    //   34: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   37: iload_2
    //   38: invokevirtual 3166	com/android/server/am/UserController:unsafeConvertIncomingUserLocked	(I)I
    //   41: istore 6
    //   43: aload_0
    //   44: monitorexit
    //   45: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   48: iload_3
    //   49: istore_2
    //   50: aload_0
    //   51: iload 5
    //   53: iload 4
    //   55: iload 6
    //   57: invokespecial 9404	com/android/server/am/ActivityManagerService:canClearIdentity	(III)Z
    //   60: ifeq +10 -> 70
    //   63: iconst_1
    //   64: istore_2
    //   65: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   68: lstore 7
    //   70: aconst_null
    //   71: astore 11
    //   73: aconst_null
    //   74: astore 9
    //   76: aconst_null
    //   77: astore 10
    //   79: aload_0
    //   80: aload 13
    //   82: aconst_null
    //   83: iload 6
    //   85: invokespecial 9082	com/android/server/am/ActivityManagerService:getContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;I)Landroid/app/IActivityManager$ContentProviderHolder;
    //   88: astore 12
    //   90: aload 12
    //   92: ifnull +75 -> 167
    //   95: aload 12
    //   97: astore 10
    //   99: aload 12
    //   101: astore 11
    //   103: aload 12
    //   105: astore 9
    //   107: aload 12
    //   109: getfield 4744	android/app/IActivityManager$ContentProviderHolder:provider	Landroid/content/IContentProvider;
    //   112: aload_1
    //   113: invokeinterface 9409 2 0
    //   118: astore 14
    //   120: iload_2
    //   121: ifne +8 -> 129
    //   124: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   127: lstore 7
    //   129: aload 12
    //   131: ifnull +12 -> 143
    //   134: aload_0
    //   135: aload 13
    //   137: aconst_null
    //   138: iload 6
    //   140: invokespecial 9411	com/android/server/am/ActivityManagerService:removeContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;I)V
    //   143: lload 7
    //   145: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   148: aload 14
    //   150: areturn
    //   151: astore_1
    //   152: aload_0
    //   153: monitorexit
    //   154: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   157: aload_1
    //   158: athrow
    //   159: astore_1
    //   160: lload 7
    //   162: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   165: aload_1
    //   166: athrow
    //   167: iload_2
    //   168: ifne +8 -> 176
    //   171: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   174: lstore 7
    //   176: aload 12
    //   178: ifnull +12 -> 190
    //   181: aload_0
    //   182: aload 13
    //   184: aconst_null
    //   185: iload 6
    //   187: invokespecial 9411	com/android/server/am/ActivityManagerService:removeContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;I)V
    //   190: lload 7
    //   192: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   195: aconst_null
    //   196: areturn
    //   197: astore_1
    //   198: lload 7
    //   200: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   203: aload_1
    //   204: athrow
    //   205: astore 11
    //   207: aload 10
    //   209: astore 9
    //   211: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   214: new 1066	java/lang/StringBuilder
    //   217: dup
    //   218: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   221: ldc_w 9413
    //   224: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   227: aload_1
    //   228: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   231: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   234: aload 11
    //   236: invokestatic 9414	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   239: pop
    //   240: iload_2
    //   241: ifne +8 -> 249
    //   244: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   247: lstore 7
    //   249: aload 10
    //   251: ifnull +12 -> 263
    //   254: aload_0
    //   255: aload 13
    //   257: aconst_null
    //   258: iload 6
    //   260: invokespecial 9411	com/android/server/am/ActivityManagerService:removeContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;I)V
    //   263: lload 7
    //   265: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   268: aconst_null
    //   269: areturn
    //   270: astore_1
    //   271: lload 7
    //   273: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   276: aload_1
    //   277: athrow
    //   278: astore 10
    //   280: aload 11
    //   282: astore 9
    //   284: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   287: new 1066	java/lang/StringBuilder
    //   290: dup
    //   291: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   294: ldc_w 9416
    //   297: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   300: aload_1
    //   301: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   304: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   307: aload 10
    //   309: invokestatic 9414	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   312: pop
    //   313: iload_2
    //   314: ifne +8 -> 322
    //   317: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   320: lstore 7
    //   322: aload 11
    //   324: ifnull +12 -> 336
    //   327: aload_0
    //   328: aload 13
    //   330: aconst_null
    //   331: iload 6
    //   333: invokespecial 9411	com/android/server/am/ActivityManagerService:removeContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;I)V
    //   336: lload 7
    //   338: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   341: aconst_null
    //   342: areturn
    //   343: astore_1
    //   344: lload 7
    //   346: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   349: aload_1
    //   350: athrow
    //   351: astore_1
    //   352: iload_2
    //   353: ifne +8 -> 361
    //   356: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   359: lstore 7
    //   361: aload 9
    //   363: ifnull +12 -> 375
    //   366: aload_0
    //   367: aload 13
    //   369: aconst_null
    //   370: iload 6
    //   372: invokespecial 9411	com/android/server/am/ActivityManagerService:removeContentProviderExternalUnchecked	(Ljava/lang/String;Landroid/os/IBinder;I)V
    //   375: lload 7
    //   377: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   380: aload_1
    //   381: athrow
    //   382: astore_1
    //   383: lload 7
    //   385: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   388: aload_1
    //   389: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	390	0	this	ActivityManagerService
    //   0	390	1	paramUri	Uri
    //   0	390	2	paramInt	int
    //   27	22	3	i	int
    //   16	38	4	j	int
    //   21	31	5	k	int
    //   41	330	6	m	int
    //   24	360	7	l	long
    //   74	288	9	localObject1	Object
    //   77	173	10	localObject2	Object
    //   278	30	10	localRemoteException	RemoteException
    //   71	31	11	localObject3	Object
    //   205	118	11	localException	Exception
    //   88	89	12	localContentProviderHolder	IActivityManager.ContentProviderHolder
    //   11	357	13	str1	String
    //   118	31	14	str2	String
    // Exception table:
    //   from	to	target	type
    //   30	43	151	finally
    //   134	143	159	finally
    //   181	190	197	finally
    //   79	90	205	java/lang/Exception
    //   107	120	205	java/lang/Exception
    //   254	263	270	finally
    //   79	90	278	android/os/RemoteException
    //   107	120	278	android/os/RemoteException
    //   327	336	343	finally
    //   79	90	351	finally
    //   107	120	351	finally
    //   211	240	351	finally
    //   284	313	351	finally
    //   366	375	382	finally
  }
  
  public ParceledListSlice<ActivityManager.RecentTaskInfo> getRecentTasks(int paramInt1, int paramInt2, int paramInt3)
  {
    int n = Binder.getCallingUid();
    int i1 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), n, paramInt3, false, 2, "getRecentTasks", null);
    int j;
    if ((paramInt2 & 0x4) != 0)
    {
      j = 1;
      if ((paramInt2 & 0x1) == 0) {
        break label138;
      }
      paramInt3 = 1;
    }
    for (;;)
    {
      label43:
      boolean bool;
      int i;
      label138:
      int m;
      ArrayList localArrayList;
      Object localObject3;
      try
      {
        boostPriorityForLockedSection();
        bool = isGetTasksAllowed("getRecentTasks", Binder.getCallingPid(), n);
        Object localObject1;
        if (checkCallingPermission("android.permission.GET_DETAILED_TASKS") == 0)
        {
          i = 1;
          if (isUserRunning(i1, 4)) {
            continue;
          }
          Slog.i(TAG, "user " + i1 + " is still locked. Cannot load recents");
          localObject1 = ParceledListSlice.emptyList();
          return (ParceledListSlice<ActivityManager.RecentTaskInfo>)localObject1;
          j = 0;
          break;
          paramInt3 = 0;
          break label43;
        }
        i = 0;
        continue;
        this.mRecentTasks.loadUserRecentsLocked(i1);
        m = this.mRecentTasks.size();
        if (paramInt1 >= m) {
          break label963;
        }
        k = paramInt1;
        localArrayList = new ArrayList(k);
        if (j != 0)
        {
          localObject1 = this.mUserController.getProfileIds(i1);
          ((Set)localObject1).add(Integer.valueOf(i1));
          k = 0;
          j = paramInt1;
          paramInt1 = k;
          if ((paramInt1 >= m) || (j <= 0)) {
            break label933;
          }
          localObject3 = (TaskRecord)this.mRecentTasks.get(paramInt1);
          if (!((Set)localObject1).contains(Integer.valueOf(((TaskRecord)localObject3).userId)))
          {
            k = j;
            if (!ActivityManagerDebugConfig.DEBUG_RECENTS) {
              break label952;
            }
            Slog.d(TAG_RECENTS, "Skipping, not user: " + localObject3);
            k = j;
            break label952;
          }
        }
        else
        {
          localObject1 = new HashSet();
          continue;
        }
        if (((TaskRecord)localObject3).realActivitySuspended)
        {
          k = j;
          if (!ActivityManagerDebugConfig.DEBUG_RECENTS) {
            break label952;
          }
          Slog.d(TAG_RECENTS, "Skipping, activity suspended: " + localObject3);
          k = j;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if ((paramInt1 == 0) || (paramInt3 != 0) || (((TaskRecord)localObject3).intent == null)) {}
      while ((!bool) && (!((TaskRecord)localObject3).isHomeTask()) && (((TaskRecord)localObject3).effectiveUid != n))
      {
        k = j;
        if (!ActivityManagerDebugConfig.DEBUG_RECENTS) {
          break label952;
        }
        Slog.d(TAG_RECENTS, "Skipping, not allowed: " + localObject3);
        k = j;
        break label952;
        k = j;
        if ((((TaskRecord)localObject3).intent.getFlags() & 0x800000) != 0) {
          break label952;
        }
      }
      if (((paramInt2 & 0x8) != 0) && (((TaskRecord)localObject3).stack != null) && (((TaskRecord)localObject3).stack.isHomeStack()))
      {
        k = j;
        if (ActivityManagerDebugConfig.DEBUG_RECENTS)
        {
          Slog.d(TAG_RECENTS, "Skipping, home stack task: " + localObject3);
          k = j;
        }
      }
      else
      {
        if ((paramInt2 & 0x10) != 0)
        {
          ActivityStack localActivityStack = ((TaskRecord)localObject3).stack;
          if ((localActivityStack != null) && (localActivityStack.isDockedStack()) && (localActivityStack.topTask() == localObject3))
          {
            k = j;
            if (!ActivityManagerDebugConfig.DEBUG_RECENTS) {
              break label952;
            }
            Slog.d(TAG_RECENTS, "Skipping, top task in docked stack: " + localObject3);
            k = j;
            break label952;
          }
        }
        if (((paramInt2 & 0x20) != 0) && (((TaskRecord)localObject3).stack != null) && (((TaskRecord)localObject3).stack.isPinnedStack()))
        {
          k = j;
          if (ActivityManagerDebugConfig.DEBUG_RECENTS)
          {
            Slog.d(TAG_RECENTS, "Skipping, pinned stack task: " + localObject3);
            k = j;
          }
        }
        else if ((((TaskRecord)localObject3).autoRemoveRecents) && (((TaskRecord)localObject3).getTopActivity() == null))
        {
          k = j;
          if (ActivityManagerDebugConfig.DEBUG_RECENTS)
          {
            Slog.d(TAG_RECENTS, "Skipping, auto-remove without activity: " + localObject3);
            k = j;
          }
        }
        else
        {
          if (((paramInt2 & 0x2) == 0) || (((TaskRecord)localObject3).isAvailable))
          {
            if (!((TaskRecord)localObject3).mUserSetupComplete)
            {
              k = j;
              if (!ActivityManagerDebugConfig.DEBUG_RECENTS) {
                break label952;
              }
              Slog.d(TAG_RECENTS, "Skipping, user setup not complete: " + localObject3);
              k = j;
              break label952;
            }
          }
          else
          {
            k = j;
            if (!ActivityManagerDebugConfig.DEBUG_RECENTS) {
              break label952;
            }
            Slog.d(TAG_RECENTS, "Skipping, unavail real act: " + localObject3);
            k = j;
            break label952;
          }
          localObject3 = createRecentTaskInfoFromTaskRecord((TaskRecord)localObject3);
          if (i == 0) {
            ((ActivityManager.RecentTaskInfo)localObject3).baseIntent.replaceExtras((Bundle)null);
          }
          localArrayList.add(localObject3);
          k = j - 1;
          break label952;
          label933:
          ParceledListSlice localParceledListSlice = new ParceledListSlice(localArrayList);
          resetPriorityAfterLockedSection();
          return localParceledListSlice;
        }
      }
      label952:
      paramInt1 += 1;
      j = k;
      continue;
      label963:
      int k = m;
    }
  }
  
  final ProcessRecord getRecordForAppLocked(IApplicationThread paramIApplicationThread)
  {
    Object localObject = null;
    if (paramIApplicationThread == null) {
      return null;
    }
    int i = getLRURecordIndexForAppLocked(paramIApplicationThread);
    paramIApplicationThread = (IApplicationThread)localObject;
    if (i >= 0) {
      paramIApplicationThread = (ProcessRecord)this.mLruProcesses.get(i);
    }
    return paramIApplicationThread;
  }
  
  public int getRequestedOrientation(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        return -1;
      }
      int i = this.mWindowManager.getAppOrientation(paramIBinder.appToken);
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses()
  {
    enforceNotIsolatedCaller("getRunningAppProcesses");
    int k = Binder.getCallingUid();
    int i;
    int j;
    if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", k) == 0)
    {
      i = 1;
      int m = UserHandle.getUserId(k);
      boolean bool = isGetTasksAllowed("getRunningAppProcesses", Binder.getCallingPid(), k);
      label62:
      label270:
      label320:
      label328:
      for (;;)
      {
        try
        {
          boostPriorityForLockedSection();
          j = this.mLruProcesses.size();
          j -= 1;
          ArrayList localArrayList = null;
          if (j < 0) {
            break label320;
          }
          if (!(localProcessRecord.adjSource instanceof ActivityRecord)) {
            continue;
          }
        }
        finally
        {
          try
          {
            localProcessRecord = (ProcessRecord)this.mLruProcesses.get(j);
            if (((i == 0) && (localProcessRecord.userId != m)) || ((!bool) && (localProcessRecord.uid != k))) {
              break;
            }
            if ((localProcessRecord.thread == null) || (localProcessRecord.crashing) || (localProcessRecord.notResponding)) {
              break label343;
            }
            localRunningAppProcessInfo = new ActivityManager.RunningAppProcessInfo(localProcessRecord.processName, localProcessRecord.pid, localProcessRecord.getPackageList());
            fillInProcMemInfo(localProcessRecord, localRunningAppProcessInfo);
            if (!(localProcessRecord.adjSource instanceof ProcessRecord)) {
              break label270;
            }
            localRunningAppProcessInfo.importanceReasonPid = ((ProcessRecord)localProcessRecord.adjSource).pid;
            localRunningAppProcessInfo.importanceReasonImportance = ActivityManager.RunningAppProcessInfo.procStateToImportance(localProcessRecord.adjSourceProcState);
            if ((localProcessRecord.adjTarget instanceof ComponentName)) {
              localRunningAppProcessInfo.importanceReasonComponent = ((ComponentName)localProcessRecord.adjTarget);
            }
            if (localArrayList != null) {
              break label328;
            }
            localArrayList = new ArrayList();
            localArrayList.add(localRunningAppProcessInfo);
          }
          finally
          {
            ProcessRecord localProcessRecord;
            ActivityManager.RunningAppProcessInfo localRunningAppProcessInfo;
            ActivityRecord localActivityRecord;
            continue;
          }
          localObject = finally;
          resetPriorityAfterLockedSection();
        }
        localActivityRecord = (ActivityRecord)localProcessRecord.adjSource;
        if (localActivityRecord.app != null)
        {
          localRunningAppProcessInfo.importanceReasonPid = localActivityRecord.app.pid;
          continue;
          resetPriorityAfterLockedSection();
          return localList;
        }
      }
    }
    label343:
    for (;;)
    {
      j -= 1;
      break label62;
      i = 0;
      break;
    }
  }
  
  public List<ApplicationInfo> getRunningExternalApplications()
  {
    enforceNotIsolatedCaller("getRunningExternalApplications");
    Object localObject2 = getRunningAppProcesses();
    ArrayList localArrayList = new ArrayList();
    if ((localObject2 != null) && (((List)localObject2).size() > 0))
    {
      Object localObject1 = new HashSet();
      localObject2 = ((Iterable)localObject2).iterator();
      Object localObject3;
      while (((Iterator)localObject2).hasNext())
      {
        localObject3 = (ActivityManager.RunningAppProcessInfo)((Iterator)localObject2).next();
        if (((ActivityManager.RunningAppProcessInfo)localObject3).pkgList != null)
        {
          localObject3 = ((ActivityManager.RunningAppProcessInfo)localObject3).pkgList;
          int j = localObject3.length;
          int i = 0;
          while (i < j)
          {
            ((Set)localObject1).add(localObject3[i]);
            i += 1;
          }
        }
      }
      localObject2 = AppGlobals.getPackageManager();
      localObject1 = ((Iterable)localObject1).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject3 = (String)((Iterator)localObject1).next();
        try
        {
          localObject3 = ((IPackageManager)localObject2).getApplicationInfo((String)localObject3, 0, UserHandle.getCallingUserId());
          if ((((ApplicationInfo)localObject3).flags & 0x40000) != 0) {
            localArrayList.add(localObject3);
          }
        }
        catch (RemoteException localRemoteException) {}
      }
    }
    return localArrayList;
  }
  
  public PendingIntent getRunningServiceControlPanel(ComponentName paramComponentName)
  {
    enforceNotIsolatedCaller("getRunningServiceControlPanel");
    try
    {
      boostPriorityForLockedSection();
      paramComponentName = this.mServices.getRunningServiceControlPanelLocked(paramComponentName);
      return paramComponentName;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public int[] getRunningUserIds()
  {
    Object localObject1;
    if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0)
    {
      localObject1 = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.INTERACT_ACROSS_USERS";
      Slog.w(TAG, (String)localObject1);
      throw new SecurityException((String)localObject1);
    }
    try
    {
      boostPriorityForLockedSection();
      localObject1 = this.mUserController.getStartedUserArrayLocked();
      return (int[])localObject1;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public List<ActivityManager.RunningServiceInfo> getServices(int paramInt1, int paramInt2)
  {
    enforceNotIsolatedCaller("getServices");
    try
    {
      boostPriorityForLockedSection();
      List localList = this.mServices.getRunningServiceInfoLocked(paramInt1, paramInt2);
      return localList;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public android.app.ActivityManager.StackInfo getStackInfo(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 9542
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore_2
    //   14: aload_0
    //   15: monitorenter
    //   16: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   19: aload_0
    //   20: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   23: iload_1
    //   24: invokevirtual 9545	com/android/server/am/ActivityStackSupervisor:getStackInfoLocked	(I)Landroid/app/ActivityManager$StackInfo;
    //   27: astore 4
    //   29: aload_0
    //   30: monitorexit
    //   31: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   34: lload_2
    //   35: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   38: aload 4
    //   40: areturn
    //   41: astore 4
    //   43: aload_0
    //   44: monitorexit
    //   45: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   48: aload 4
    //   50: athrow
    //   51: astore 4
    //   53: lload_2
    //   54: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   57: aload 4
    //   59: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	60	0	this	ActivityManagerService
    //   0	60	1	paramInt	int
    //   13	41	2	l	long
    //   27	12	4	localStackInfo	android.app.ActivityManager.StackInfo
    //   41	8	4	localObject1	Object
    //   51	7	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   16	29	41	finally
    //   14	16	51	finally
    //   29	34	51	finally
    //   43	51	51	finally
  }
  
  public String getTagForIntentSender(IIntentSender paramIIntentSender, String paramString)
  {
    if (!(paramIIntentSender instanceof PendingIntentRecord)) {
      return null;
    }
    try
    {
      paramIIntentSender = (PendingIntentRecord)paramIIntentSender;
      try
      {
        boostPriorityForLockedSection();
        paramIIntentSender = getTagForIntentSenderLocked(paramIIntentSender, paramString);
        return paramIIntentSender;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      return null;
    }
    catch (ClassCastException paramIIntentSender) {}
  }
  
  String getTagForIntentSenderLocked(PendingIntentRecord paramPendingIntentRecord, String paramString)
  {
    Intent localIntent = paramPendingIntentRecord.key.requestIntent;
    if (localIntent != null)
    {
      if ((paramPendingIntentRecord.lastTag != null) && (paramPendingIntentRecord.lastTagPrefix == paramString) && ((paramPendingIntentRecord.lastTagPrefix == null) || (paramPendingIntentRecord.lastTagPrefix.equals(paramString)))) {
        return paramPendingIntentRecord.lastTag;
      }
      paramPendingIntentRecord.lastTagPrefix = paramString;
      StringBuilder localStringBuilder = new StringBuilder(128);
      if (paramString != null) {
        localStringBuilder.append(paramString);
      }
      if (localIntent.getAction() != null) {
        localStringBuilder.append(localIntent.getAction());
      }
      for (;;)
      {
        paramString = localStringBuilder.toString();
        paramPendingIntentRecord.lastTag = paramString;
        return paramString;
        if (localIntent.getComponent() != null) {
          localIntent.getComponent().appendShortString(localStringBuilder);
        } else {
          localStringBuilder.append("?");
        }
      }
    }
    return null;
  }
  
  public Rect getTaskBounds(int paramInt)
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getTaskBounds()");
    long l = Binder.clearCallingIdentity();
    Rect localRect = new Rect();
    for (;;)
    {
      TaskRecord localTaskRecord;
      try
      {
        try
        {
          boostPriorityForLockedSection();
          localTaskRecord = this.mStackSupervisor.anyTaskForIdLocked(paramInt, false, -1);
          if (localTaskRecord == null)
          {
            Slog.w(TAG, "getTaskBounds: taskId=" + paramInt + " not found");
            resetPriorityAfterLockedSection();
            return localRect;
          }
          if (localTaskRecord.stack != null)
          {
            this.mWindowManager.getTaskBounds(localTaskRecord.taskId, localRect);
            resetPriorityAfterLockedSection();
            return localRect;
          }
          if (localTaskRecord.mBounds != null)
          {
            localRect.set(localTaskRecord.mBounds);
            continue;
            localObject2 = finally;
          }
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        if (localTaskRecord.mLastNonFullscreenBounds == null) {
          continue;
        }
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      ((Rect)localObject2).set(localTaskRecord.mLastNonFullscreenBounds);
    }
  }
  
  public Bitmap getTaskDescriptionIcon(String paramString, int paramInt)
  {
    if (paramInt != UserHandle.getCallingUserId()) {
      enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "getTaskDescriptionIcon");
    }
    File localFile = new File(paramString);
    new File(TaskPersister.getUserImagesDir(paramInt), localFile.getName());
    if (!paramString.contains("_activity_icon_")) {
      throw new IllegalArgumentException("Bad file path: " + paramString + " passed for userId " + paramInt);
    }
    return this.mRecentTasks.getTaskDescriptionIcon(paramString);
  }
  
  public int getTaskForActivity(IBinder paramIBinder, boolean paramBoolean)
  {
    try
    {
      boostPriorityForLockedSection();
      int i = ActivityRecord.getTaskForActivityLocked(paramIBinder, paramBoolean);
      return i;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public ActivityManager.TaskThumbnail getTaskThumbnail(int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      enforceCallingPermission("android.permission.READ_FRAME_BUFFER", "getTaskThumbnail()");
      Object localObject1 = this.mStackSupervisor.anyTaskForIdLocked(paramInt, false, -1);
      if (localObject1 != null)
      {
        localObject1 = ((TaskRecord)localObject1).getTaskThumbnailLocked();
        return (ActivityManager.TaskThumbnail)localObject1;
      }
      return null;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public List<ActivityManager.RunningTaskInfo> getTasks(int paramInt1, int paramInt2)
  {
    int i = Binder.getCallingUid();
    ArrayList localArrayList = new ArrayList();
    try
    {
      boostPriorityForLockedSection();
      if (ActivityManagerDebugConfig.DEBUG_ALL) {
        Slog.v(TAG, "getTasks: max=" + paramInt1 + ", flags=" + paramInt2);
      }
      boolean bool = isGetTasksAllowed("getTasks", Binder.getCallingPid(), i);
      this.mStackSupervisor.getTasksLocked(paramInt1, localArrayList, i, bool);
      return localArrayList;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public int getUidForIntentSender(IIntentSender paramIIntentSender)
  {
    if ((paramIIntentSender instanceof PendingIntentRecord)) {
      try
      {
        int i = ((PendingIntentRecord)paramIIntentSender).uid;
        return i;
      }
      catch (ClassCastException paramIIntentSender) {}
    }
    return -1;
  }
  
  /* Error */
  int getUidState(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1510	com/android/server/am/ActivityManagerService:mActiveUids	Landroid/util/SparseArray;
    //   9: iload_1
    //   10: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   13: checkcast 2167	com/android/server/am/UidRecord
    //   16: astore_2
    //   17: aload_2
    //   18: ifnonnull +12 -> 30
    //   21: iconst_m1
    //   22: istore_1
    //   23: aload_0
    //   24: monitorexit
    //   25: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   28: iload_1
    //   29: ireturn
    //   30: aload_2
    //   31: getfield 2181	com/android/server/am/UidRecord:curProcState	I
    //   34: istore_1
    //   35: goto -12 -> 23
    //   38: astore_2
    //   39: aload_0
    //   40: monitorexit
    //   41: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   44: aload_2
    //   45: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	46	0	this	ActivityManagerService
    //   0	46	1	paramInt	int
    //   16	15	2	localUidRecord	UidRecord
    //   38	7	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	17	38	finally
    //   30	35	38	finally
  }
  
  public IBinder getUriPermissionOwnerForActivity(IBinder paramIBinder)
  {
    enforceNotIsolatedCaller("getUriPermissionOwnerForActivity");
    ActivityRecord localActivityRecord;
    try
    {
      boostPriorityForLockedSection();
      localActivityRecord = ActivityRecord.isInStackLocked(paramIBinder);
      if (localActivityRecord == null) {
        throw new IllegalArgumentException("Activity does not exist; token=" + paramIBinder);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    paramIBinder = localActivityRecord.getUriPermissionsLocked().getExternalTokenLocked();
    resetPriorityAfterLockedSection();
    return paramIBinder;
  }
  
  public void grantUriPermission(IApplicationThread paramIApplicationThread, String paramString, Uri paramUri, int paramInt1, int paramInt2)
  {
    enforceNotIsolatedCaller("grantUriPermission");
    paramUri = new GrantUri(paramInt2, paramUri, false);
    ProcessRecord localProcessRecord;
    try
    {
      boostPriorityForLockedSection();
      localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
      if (localProcessRecord == null) {
        throw new SecurityException("Unable to find app for caller " + paramIApplicationThread + " when granting permission to uri " + paramUri);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if (paramString == null) {
      throw new IllegalArgumentException("null target");
    }
    if (paramUri == null) {
      throw new IllegalArgumentException("null uri");
    }
    Preconditions.checkFlagsArgument(paramInt1, 195);
    grantUriPermissionLocked(localProcessRecord.uid, paramString, paramUri, paramInt1, null, UserHandle.getUserId(localProcessRecord.uid));
    resetPriorityAfterLockedSection();
  }
  
  void grantUriPermissionFromIntentLocked(int paramInt1, String paramString, Intent paramIntent, UriPermissionOwner paramUriPermissionOwner, int paramInt2)
  {
    if (paramIntent != null) {}
    for (int i = paramIntent.getFlags();; i = 0)
    {
      paramString = checkGrantUriPermissionFromIntentLocked(paramInt1, paramString, paramIntent, i, null, paramInt2);
      if (paramString != null) {
        break;
      }
      return;
    }
    grantUriPermissionUncheckedFromIntentLocked(paramString, paramUriPermissionOwner);
  }
  
  public void grantUriPermissionFromOwner(IBinder paramIBinder, int paramInt1, String paramString, Uri paramUri, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt4 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt4, false, 2, "grantUriPermissionFromOwner", null);
    UriPermissionOwner localUriPermissionOwner;
    try
    {
      boostPriorityForLockedSection();
      localUriPermissionOwner = UriPermissionOwner.fromExternalToken(paramIBinder);
      if (localUriPermissionOwner == null) {
        throw new IllegalArgumentException("Unknown owner: " + paramIBinder);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if ((paramInt1 != Binder.getCallingUid()) && (Binder.getCallingUid() != Process.myUid())) {
      throw new SecurityException("nice try");
    }
    if (paramString == null) {
      throw new IllegalArgumentException("null target");
    }
    if (paramUri == null) {
      throw new IllegalArgumentException("null uri");
    }
    grantUriPermissionLocked(paramInt1, paramString, new GrantUri(paramInt3, paramUri, false), paramInt2, localUriPermissionOwner, paramInt4);
    resetPriorityAfterLockedSection();
  }
  
  void grantUriPermissionLocked(int paramInt1, String paramString, GrantUri paramGrantUri, int paramInt2, UriPermissionOwner paramUriPermissionOwner, int paramInt3)
  {
    if (paramString == null) {
      throw new NullPointerException("targetPkg");
    }
    IPackageManager localIPackageManager = AppGlobals.getPackageManager();
    try
    {
      paramInt3 = localIPackageManager.getPackageUid(paramString, 268435456, paramInt3);
      paramInt1 = checkGrantUriPermissionLocked(paramInt1, paramString, paramGrantUri, paramInt2, paramInt3);
      if (paramInt1 < 0) {
        return;
      }
    }
    catch (RemoteException paramString)
    {
      return;
    }
    grantUriPermissionUncheckedLocked(paramInt1, paramString, paramGrantUri, paramInt2, paramUriPermissionOwner);
  }
  
  void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants paramNeededUriGrants, UriPermissionOwner paramUriPermissionOwner)
  {
    if (paramNeededUriGrants != null)
    {
      int i = 0;
      while (i < paramNeededUriGrants.size())
      {
        GrantUri localGrantUri = (GrantUri)paramNeededUriGrants.get(i);
        grantUriPermissionUncheckedLocked(paramNeededUriGrants.targetUid, paramNeededUriGrants.targetPkg, localGrantUri, paramNeededUriGrants.flags, paramUriPermissionOwner);
        i += 1;
      }
    }
  }
  
  void grantUriPermissionUncheckedLocked(int paramInt1, String paramString, GrantUri paramGrantUri, int paramInt2, UriPermissionOwner paramUriPermissionOwner)
  {
    if (!Intent.isAccessUriMode(paramInt2)) {
      return;
    }
    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
      Slog.v(TAG_URI_PERMISSION, "Granting " + paramString + "/" + paramInt1 + " permission to " + paramGrantUri);
    }
    ProviderInfo localProviderInfo = getProviderInfoLocked(paramGrantUri.uri.getAuthority(), paramGrantUri.sourceUserId, 268435456);
    if (localProviderInfo == null)
    {
      Slog.w(TAG, "No content provider found for grant: " + paramGrantUri.toSafeString());
      return;
    }
    if ((paramInt2 & 0x80) != 0) {
      paramGrantUri.prefix = true;
    }
    findOrCreateUriPermissionLocked(localProviderInfo.packageName, paramString, paramInt1, paramGrantUri).grantModes(paramInt2, paramUriPermissionOwner);
  }
  
  public void handleApplicationCrash(IBinder paramIBinder, ApplicationErrorReport.CrashInfo paramCrashInfo)
  {
    ProcessRecord localProcessRecord = findAppProcess(paramIBinder, "Crash");
    if (paramIBinder == null) {
      paramIBinder = "system_server";
    }
    for (;;)
    {
      handleApplicationCrashInner("crash", localProcessRecord, paramIBinder, paramCrashInfo);
      return;
      if (localProcessRecord == null) {
        paramIBinder = "unknown";
      } else {
        paramIBinder = localProcessRecord.processName;
      }
    }
  }
  
  void handleApplicationCrashInner(String paramString1, ProcessRecord paramProcessRecord, String paramString2, ApplicationErrorReport.CrashInfo paramCrashInfo)
  {
    int j = Binder.getCallingPid();
    int k = UserHandle.getUserId(Binder.getCallingUid());
    if (paramProcessRecord == null) {}
    for (int i = -1;; i = paramProcessRecord.info.flags)
    {
      EventLog.writeEvent(30039, new Object[] { Integer.valueOf(j), Integer.valueOf(k), paramString2, Integer.valueOf(i), paramCrashInfo.exceptionClassName, paramCrashInfo.exceptionMessage, paramCrashInfo.throwFileName, Integer.valueOf(paramCrashInfo.throwLineNumber) });
      addErrorToDropBox(paramString1, paramProcessRecord, paramString2, null, null, null, null, null, paramCrashInfo);
      this.mAppErrors.crashApplication(paramProcessRecord, paramCrashInfo);
      return;
    }
  }
  
  public void handleApplicationStrictModeViolation(IBinder paramIBinder, int paramInt, StrictMode.ViolationInfo paramViolationInfo)
  {
    paramIBinder = findAppProcess(paramIBinder, "StrictMode");
    if (paramIBinder == null) {
      return;
    }
    Object localObject2;
    int i;
    if ((0x200000 & paramInt) != 0)
    {
      localObject2 = Integer.valueOf(paramViolationInfo.hashCode());
      i = 1;
    }
    synchronized (this.mAlreadyLoggedViolatedStacks)
    {
      boolean bool = this.mAlreadyLoggedViolatedStacks.contains(localObject2);
      if (bool)
      {
        i = 0;
        if (i != 0) {
          logStrictModeViolationToDropBox(paramIBinder, paramViolationInfo);
        }
        if ((0x20000 & paramInt) != 0) {
          ??? = new AppErrorResult();
        }
      }
      try
      {
        boostPriorityForLockedSection();
        long l = Binder.clearCallingIdentity();
        localObject2 = Message.obtain();
        ((Message)localObject2).what = 26;
        HashMap localHashMap = new HashMap();
        localHashMap.put("result", ???);
        localHashMap.put("app", paramIBinder);
        localHashMap.put("violationMask", Integer.valueOf(paramInt));
        localHashMap.put("info", paramViolationInfo);
        ((Message)localObject2).obj = localHashMap;
        this.mUiHandler.sendMessage((Message)localObject2);
        Binder.restoreCallingIdentity(l);
        resetPriorityAfterLockedSection();
        paramInt = ((AppErrorResult)???).get();
        Slog.w(TAG, "handleApplicationStrictModeViolation; res=" + paramInt);
        return;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
        this.mAlreadyLoggedViolatedStacks.clear();
      }
      this.mAlreadyLoggedViolatedStacks.add(localObject2);
    }
  }
  
  public boolean handleApplicationWtf(final IBinder paramIBinder, final String paramString, boolean paramBoolean, final ApplicationErrorReport.CrashInfo paramCrashInfo)
  {
    final int i = Binder.getCallingUid();
    final int j = Binder.getCallingPid();
    if (paramBoolean)
    {
      this.mHandler.post(new Runnable()
      {
        public void run()
        {
          ActivityManagerService.this.handleApplicationWtfInner(i, j, paramIBinder, paramString, paramCrashInfo);
        }
      });
      return false;
    }
    paramIBinder = handleApplicationWtfInner(i, j, paramIBinder, paramString, paramCrashInfo);
    if ((paramIBinder != null) && (paramIBinder.pid != Process.myPid()) && (Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0))
    {
      this.mAppErrors.crashApplication(paramIBinder, paramCrashInfo);
      return true;
    }
    return false;
  }
  
  ProcessRecord handleApplicationWtfInner(int paramInt1, int paramInt2, IBinder paramIBinder, String paramString, ApplicationErrorReport.CrashInfo paramCrashInfo)
  {
    ProcessRecord localProcessRecord = findAppProcess(paramIBinder, "WTF");
    int i;
    if (paramIBinder == null)
    {
      paramIBinder = "system_server";
      i = UserHandle.getUserId(paramInt1);
      if (localProcessRecord != null) {
        break label124;
      }
    }
    label124:
    for (paramInt1 = -1;; paramInt1 = localProcessRecord.info.flags)
    {
      EventLog.writeEvent(30040, new Object[] { Integer.valueOf(i), Integer.valueOf(paramInt2), paramIBinder, Integer.valueOf(paramInt1), paramString, paramCrashInfo.exceptionMessage });
      addErrorToDropBox("wtf", localProcessRecord, paramIBinder, null, null, paramString, null, null, paramCrashInfo);
      return localProcessRecord;
      if (localProcessRecord == null)
      {
        paramIBinder = "unknown";
        break;
      }
      paramIBinder = localProcessRecord.processName;
      break;
    }
  }
  
  public int handleIncomingUser(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean1, boolean paramBoolean2, String paramString1, String paramString2)
  {
    UserController localUserController = this.mUserController;
    if (paramBoolean2) {}
    for (int i = 2;; i = 0) {
      return localUserController.handleIncomingUser(paramInt1, paramInt2, paramInt3, paramBoolean1, i, paramString1, paramString2);
    }
  }
  
  /* Error */
  public void hang(IBinder paramIBinder, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 8139
    //   4: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   7: ifeq +14 -> 21
    //   10: new 4439	java/lang/SecurityException
    //   13: dup
    //   14: ldc_w 8141
    //   17: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   20: athrow
    //   21: new 41	com/android/server/am/ActivityManagerService$20
    //   24: dup
    //   25: aload_0
    //   26: invokespecial 9763	com/android/server/am/ActivityManagerService$20:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   29: astore_3
    //   30: aload_1
    //   31: aload_3
    //   32: iconst_0
    //   33: invokeinterface 2808 3 0
    //   38: aload_0
    //   39: monitorenter
    //   40: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   43: invokestatic 2106	com/android/server/Watchdog:getInstance	()Lcom/android/server/Watchdog;
    //   46: iload_2
    //   47: invokevirtual 9766	com/android/server/Watchdog:setAllowRestart	(Z)V
    //   50: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   53: new 1066	java/lang/StringBuilder
    //   56: dup
    //   57: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   60: ldc_w 9768
    //   63: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   66: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   69: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   72: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   75: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   78: pop
    //   79: aload_3
    //   80: monitorenter
    //   81: aload_1
    //   82: invokeinterface 9771 1 0
    //   87: istore_2
    //   88: iload_2
    //   89: ifeq +27 -> 116
    //   92: aload_3
    //   93: invokevirtual 9772	java/lang/Object:wait	()V
    //   96: goto -15 -> 81
    //   99: astore 4
    //   101: goto -20 -> 81
    //   104: astore_1
    //   105: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   108: ldc_w 9774
    //   111: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   114: pop
    //   115: return
    //   116: aload_3
    //   117: monitorexit
    //   118: invokestatic 2106	com/android/server/Watchdog:getInstance	()Lcom/android/server/Watchdog;
    //   121: iconst_1
    //   122: invokevirtual 9766	com/android/server/Watchdog:setAllowRestart	(Z)V
    //   125: aload_0
    //   126: monitorexit
    //   127: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   130: return
    //   131: astore_1
    //   132: aload_3
    //   133: monitorexit
    //   134: aload_1
    //   135: athrow
    //   136: astore_1
    //   137: aload_0
    //   138: monitorexit
    //   139: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   142: aload_1
    //   143: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	144	0	this	ActivityManagerService
    //   0	144	1	paramIBinder	IBinder
    //   0	144	2	paramBoolean	boolean
    //   29	104	3	local20	20
    //   99	1	4	localInterruptedException	InterruptedException
    // Exception table:
    //   from	to	target	type
    //   92	96	99	java/lang/InterruptedException
    //   30	38	104	android/os/RemoteException
    //   81	88	131	finally
    //   92	96	131	finally
    //   40	81	136	finally
    //   116	125	136	finally
    //   132	136	136	finally
  }
  
  final void idleUids()
  {
    for (;;)
    {
      long l4;
      int i;
      long l3;
      long l2;
      try
      {
        boostPriorityForLockedSection();
        l4 = SystemClock.elapsedRealtime();
        l1 = 0L;
        i = this.mActiveUids.size() - 1;
        if (i < 0) {
          break label138;
        }
        UidRecord localUidRecord = (UidRecord)this.mActiveUids.valueAt(i);
        l3 = localUidRecord.lastBackgroundTime;
        l2 = l1;
        if (l3 <= 0L) {
          break label177;
        }
        if (localUidRecord.idle)
        {
          l2 = l1;
        }
        else if (l3 <= l4 - 60000L)
        {
          localUidRecord.idle = true;
          doStopUidLocked(localUidRecord.uid, localUidRecord);
          l2 = l1;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if (l1 != 0L)
      {
        l2 = l1;
        if (l1 <= l3) {}
      }
      else
      {
        l2 = l3;
        break label177;
        label138:
        if (l1 > 0L)
        {
          this.mHandler.removeMessages(60);
          this.mHandler.sendEmptyMessageDelayed(60, 60000L + l1 - l4);
        }
        resetPriorityAfterLockedSection();
        return;
      }
      label177:
      i -= 1;
      long l1 = l2;
    }
  }
  
  ContentProviderConnection incProviderCountLocked(ProcessRecord paramProcessRecord, ContentProviderRecord paramContentProviderRecord, IBinder paramIBinder, boolean paramBoolean)
  {
    if (paramProcessRecord != null)
    {
      int i = 0;
      while (i < paramProcessRecord.conProviders.size())
      {
        paramIBinder = (ContentProviderConnection)paramProcessRecord.conProviders.get(i);
        if (paramIBinder.provider == paramContentProviderRecord)
        {
          if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
            Slog.v(TAG_PROVIDER, "Adding provider requested by " + paramProcessRecord.processName + " from process " + paramContentProviderRecord.info.processName + ": " + paramContentProviderRecord.name.flattenToShortString() + " scnt=" + paramIBinder.stableCount + " uscnt=" + paramIBinder.unstableCount);
          }
          if (paramBoolean)
          {
            paramIBinder.stableCount += 1;
            paramIBinder.numStableIncs += 1;
            return paramIBinder;
          }
          paramIBinder.unstableCount += 1;
          paramIBinder.numUnstableIncs += 1;
          return paramIBinder;
        }
        i += 1;
      }
      paramIBinder = new ContentProviderConnection(paramContentProviderRecord, paramProcessRecord);
      if (paramBoolean)
      {
        paramIBinder.stableCount = 1;
        paramIBinder.numStableIncs = 1;
      }
      for (;;)
      {
        if (paramContentProviderRecord.proc != null) {
          OnePlusProcessManager.resumeProcessByUID_out(paramContentProviderRecord.proc.uid, "incProviderCountLocked");
        }
        paramContentProviderRecord.connections.add(paramIBinder);
        paramProcessRecord.conProviders.add(paramIBinder);
        if ("com.android.providers.contacts/.ContactsProvider2".equals(paramContentProviderRecord.name.flattenToShortString())) {
          paramProcessRecord.lastContactProviderTime = SystemClock.uptimeMillis();
        }
        startAssociationLocked(paramProcessRecord.uid, paramProcessRecord.processName, paramProcessRecord.curProcState, paramContentProviderRecord.uid, paramContentProviderRecord.name, paramContentProviderRecord.info.processName);
        return paramIBinder;
        paramIBinder.unstableCount = 1;
        paramIBinder.numUnstableIncs = 1;
      }
    }
    paramContentProviderRecord.addExternalProcessHandleLocked(paramIBinder);
    return null;
  }
  
  public void initPowerManagement()
  {
    this.mStackSupervisor.initPowerManagement();
    this.mBatteryStatsService.initPowerManagement();
    this.mLocalPowerManager = ((PowerManagerInternal)LocalServices.getService(PowerManagerInternal.class));
    this.mVoiceWakeLock = ((PowerManager)this.mContext.getSystemService("power")).newWakeLock(1, "*voice*");
    this.mVoiceWakeLock.setReferenceCounted(false);
  }
  
  public long inputDispatchingTimedOut(int paramInt, boolean paramBoolean, String paramString)
  {
    if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
      throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }
    try
    {
      boostPriorityForLockedSection();
      long l;
      synchronized (this.mPidsSelfLocked)
      {
        ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramInt);
        l = getInputDispatchingTimeoutLocked(localProcessRecord);
        resetPriorityAfterLockedSection();
        if (!inputDispatchingTimedOut(localProcessRecord, null, null, paramBoolean, paramString)) {
          return -1L;
        }
      }
      return l;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public boolean inputDispatchingTimedOut(final ProcessRecord paramProcessRecord, final ActivityRecord paramActivityRecord1, final ActivityRecord paramActivityRecord2, final boolean paramBoolean, final String paramString)
  {
    if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
      throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }
    if (paramString == null) {
      paramString = "Input dispatching timed out";
    }
    for (;;)
    {
      if (paramProcessRecord != null) {}
      try
      {
        boostPriorityForLockedSection();
        boolean bool = paramProcessRecord.debugging;
        if (bool)
        {
          return false;
          paramString = "Input dispatching timed out (" + paramString + ")";
          continue;
        }
        if (this.mDidDexOpt)
        {
          this.mDidDexOpt = false;
          return false;
        }
        if (paramProcessRecord.instrumentationClass != null)
        {
          paramActivityRecord1 = new Bundle();
          paramActivityRecord1.putString("shortMsg", "keyDispatchingTimedOut");
          paramActivityRecord1.putString("longMsg", paramString);
          finishInstrumentationLocked(paramProcessRecord, 0, paramActivityRecord1);
          return true;
        }
        resetPriorityAfterLockedSection();
        this.mHandler.post(new Runnable()
        {
          public void run()
          {
            new Thread()
            {
              public void run()
              {
                ActivityManagerService.this.mAppErrors.appNotResponding(this.val$proc, this.val$activity, this.val$parent, this.val$aboveSystem, this.val$annotation);
              }
            }.start();
          }
        });
        return true;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
  }
  
  public final void installSystemProviders()
  {
    try
    {
      boostPriorityForLockedSection();
      List localList = generateApplicationProvidersLocked((ProcessRecord)this.mProcessNames.get("system", 1000));
      if (localList != null)
      {
        int i = localList.size() - 1;
        while (i >= 0)
        {
          ProviderInfo localProviderInfo = (ProviderInfo)localList.get(i);
          if ((localProviderInfo.applicationInfo.flags & 0x1) == 0)
          {
            Slog.w(TAG, "Not installing system proc provider " + localProviderInfo.name + ": not system .apk");
            localList.remove(i);
          }
          i -= 1;
        }
      }
      resetPriorityAfterLockedSection();
      if (localList != null) {
        this.mSystemThread.installSystemProviders(localList);
      }
      this.mCoreSettingsObserver = new CoreSettingsObserver(this);
      this.mFontScaleSettingObserver = new FontScaleSettingObserver();
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  boolean isAllowedWhileBooting(ApplicationInfo paramApplicationInfo)
  {
    boolean bool = false;
    if ((paramApplicationInfo.flags & 0x8) != 0) {
      bool = true;
    }
    return bool;
  }
  
  public boolean isAppForeground(int paramInt)
    throws RemoteException
  {
    boolean bool1 = false;
    try
    {
      boostPriorityForLockedSection();
      UidRecord localUidRecord = (UidRecord)this.mActiveUids.get(paramInt);
      if (localUidRecord != null)
      {
        boolean bool2 = localUidRecord.idle;
        if (!bool2) {}
      }
      else
      {
        return false;
      }
      paramInt = localUidRecord.curProcState;
      if (paramInt <= 6) {
        bool1 = true;
      }
      return bool1;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  protected boolean isAppLocked(ActivityRecord paramActivityRecord)
  {
    if (!IS_APP_LOCKER_ENABLED) {
      return false;
    }
    if (paramActivityRecord == null) {
      return false;
    }
    int i;
    if (this.mConfirmResolveInfo == null)
    {
      List localList = this.mContext.getPackageManager().queryIntentActivities(this.mConfirmIntent, 65536);
      i = 0;
      if ((localList != null) && (i < localList.size()))
      {
        if ((((ResolveInfo)localList.get(i)).activityInfo.applicationInfo.flags & 0x1) == 0) {
          break label139;
        }
        this.mConfirmResolveInfo = ((ResolveInfo)localList.get(i));
      }
    }
    if ((!this.mKeyguardDone) || (this.mAppOpsService.checkOperation(63, paramActivityRecord.appInfo.uid, paramActivityRecord.packageName) != 0) || (this.mPassedPackageList.contains(paramActivityRecord.packageName))) {}
    label139:
    while ((paramActivityRecord.realActivity != null) && (this.mAppLockerWhiteList.contains(paramActivityRecord.realActivity.getClassName())))
    {
      return false;
      i += 1;
      break;
    }
    return this.mWindowManager.isKeyguardSecure();
  }
  
  /* Error */
  public boolean isAppLocked(String paramString, int paramInt)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore 4
    //   3: getstatic 1263	com/android/server/am/ActivityManagerService:IS_APP_LOCKER_ENABLED	Z
    //   6: ifne +5 -> 11
    //   9: iconst_0
    //   10: ireturn
    //   11: aload_0
    //   12: monitorenter
    //   13: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   16: iload 4
    //   18: istore_3
    //   19: aload_0
    //   20: getfield 1914	com/android/server/am/ActivityManagerService:mAppOpsService	Lcom/android/server/AppOpsService;
    //   23: bipush 63
    //   25: iload_2
    //   26: aload_1
    //   27: invokevirtual 3978	com/android/server/AppOpsService:checkOperation	(IILjava/lang/String;)I
    //   30: ifne +19 -> 49
    //   33: aload_0
    //   34: getfield 2095	com/android/server/am/ActivityManagerService:mPassedPackageList	Ljava/util/ArrayList;
    //   37: aload_1
    //   38: invokevirtual 2974	java/util/ArrayList:contains	(Ljava/lang/Object;)Z
    //   41: istore_3
    //   42: iload_3
    //   43: ifeq +13 -> 56
    //   46: iload 4
    //   48: istore_3
    //   49: aload_0
    //   50: monitorexit
    //   51: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   54: iload_3
    //   55: ireturn
    //   56: aload_0
    //   57: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   60: invokevirtual 3973	com/android/server/wm/WindowManagerService:isKeyguardSecure	()Z
    //   63: istore_3
    //   64: goto -15 -> 49
    //   67: astore_1
    //   68: aload_0
    //   69: monitorexit
    //   70: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   73: aload_1
    //   74: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	75	0	this	ActivityManagerService
    //   0	75	1	paramString	String
    //   0	75	2	paramInt	int
    //   18	46	3	bool1	boolean
    //   1	46	4	bool2	boolean
    // Exception table:
    //   from	to	target	type
    //   13	16	67	finally
    //   19	42	67	finally
    //   56	64	67	finally
  }
  
  public boolean isAssistDataAllowedOnCurrentActivity()
  {
    boolean bool2 = true;
    try
    {
      boostPriorityForLockedSection();
      this.mUserController.getCurrentUserIdLocked();
      Object localObject1 = getFocusedStack().topActivity();
      if (localObject1 == null) {
        return false;
      }
      int i = ((ActivityRecord)localObject1).userId;
      resetPriorityAfterLockedSection();
      localObject1 = (DevicePolicyManager)this.mContext.getSystemService("device_policy");
      boolean bool1 = bool2;
      if (localObject1 != null)
      {
        bool1 = bool2;
        if (((DevicePolicyManager)localObject1).getScreenCaptureDisabled(null, i)) {
          bool1 = false;
        }
      }
      return bool1;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public boolean isBackgroundVisibleBehind(IBinder paramIBinder)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore_2
    //   4: aload_0
    //   5: monitorenter
    //   6: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   9: aload_1
    //   10: invokestatic 6305	com/android/server/am/ActivityRecord:getStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityStack;
    //   13: astore_1
    //   14: aload_1
    //   15: ifnonnull +62 -> 77
    //   18: iconst_0
    //   19: istore 4
    //   21: getstatic 8541	com/android/server/am/ActivityManagerDebugConfig:DEBUG_VISIBLE_BEHIND	Z
    //   24: ifeq +41 -> 65
    //   27: getstatic 1193	com/android/server/am/ActivityManagerService:TAG_VISIBLE_BEHIND	Ljava/lang/String;
    //   30: new 1066	java/lang/StringBuilder
    //   33: dup
    //   34: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   37: ldc_w 9876
    //   40: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   43: aload_1
    //   44: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   47: ldc_w 9878
    //   50: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   53: iload 4
    //   55: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   58: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   61: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   64: pop
    //   65: aload_0
    //   66: monitorexit
    //   67: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   70: lload_2
    //   71: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   74: iload 4
    //   76: ireturn
    //   77: aload_1
    //   78: invokevirtual 9881	com/android/server/am/ActivityStack:hasVisibleBehindActivity	()Z
    //   81: istore 4
    //   83: goto -62 -> 21
    //   86: astore_1
    //   87: aload_0
    //   88: monitorexit
    //   89: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   92: aload_1
    //   93: athrow
    //   94: astore_1
    //   95: lload_2
    //   96: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   99: aload_1
    //   100: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	101	0	this	ActivityManagerService
    //   0	101	1	paramIBinder	IBinder
    //   3	93	2	l	long
    //   19	63	4	bool	boolean
    // Exception table:
    //   from	to	target	type
    //   6	14	86	finally
    //   21	65	86	finally
    //   77	83	86	finally
    //   4	6	94	finally
    //   65	70	94	finally
    //   87	94	94	finally
  }
  
  public boolean isImmersive(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        throw new IllegalArgumentException();
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    boolean bool = paramIBinder.immersive;
    resetPriorityAfterLockedSection();
    return bool;
  }
  
  /* Error */
  public boolean isInHomeStack(int paramInt)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_3
    //   2: aload_0
    //   3: ldc_w 7409
    //   6: ldc_w 9542
    //   9: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   12: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   15: lstore 4
    //   17: aload_0
    //   18: monitorenter
    //   19: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   22: aload_0
    //   23: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   26: iload_1
    //   27: iconst_0
    //   28: iconst_m1
    //   29: invokevirtual 5476	com/android/server/am/ActivityStackSupervisor:anyTaskForIdLocked	(IZI)Lcom/android/server/am/TaskRecord;
    //   32: astore 6
    //   34: iload_3
    //   35: istore_2
    //   36: aload 6
    //   38: ifnull +22 -> 60
    //   41: iload_3
    //   42: istore_2
    //   43: aload 6
    //   45: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   48: ifnull +12 -> 60
    //   51: aload 6
    //   53: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   56: invokevirtual 9457	com/android/server/am/ActivityStack:isHomeStack	()Z
    //   59: istore_2
    //   60: aload_0
    //   61: monitorexit
    //   62: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   65: lload 4
    //   67: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   70: iload_2
    //   71: ireturn
    //   72: astore 6
    //   74: aload_0
    //   75: monitorexit
    //   76: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   79: aload 6
    //   81: athrow
    //   82: astore 6
    //   84: lload 4
    //   86: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   89: aload 6
    //   91: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	92	0	this	ActivityManagerService
    //   0	92	1	paramInt	int
    //   35	36	2	bool1	boolean
    //   1	41	3	bool2	boolean
    //   15	70	4	l	long
    //   32	20	6	localTaskRecord	TaskRecord
    //   72	8	6	localObject1	Object
    //   82	8	6	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   19	34	72	finally
    //   43	60	72	finally
    //   17	19	82	finally
    //   60	65	82	finally
    //   74	82	82	finally
  }
  
  public boolean isInLockTaskMode()
  {
    boolean bool = false;
    if (getLockTaskModeState() != 0) {
      bool = true;
    }
    return bool;
  }
  
  /* Error */
  public boolean isInMultiWindowMode(IBinder paramIBinder)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_2
    //   2: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   5: lstore 4
    //   7: aload_0
    //   8: monitorenter
    //   9: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   12: aload_1
    //   13: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   16: astore_1
    //   17: aload_1
    //   18: ifnonnull +15 -> 33
    //   21: aload_0
    //   22: monitorexit
    //   23: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   26: lload 4
    //   28: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   31: iconst_0
    //   32: ireturn
    //   33: aload_1
    //   34: getfield 3550	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
    //   37: getfield 9890	com/android/server/am/TaskRecord:mFullscreen	Z
    //   40: istore_3
    //   41: iload_3
    //   42: ifeq +15 -> 57
    //   45: aload_0
    //   46: monitorexit
    //   47: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   50: lload 4
    //   52: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   55: iload_2
    //   56: ireturn
    //   57: iconst_1
    //   58: istore_2
    //   59: goto -14 -> 45
    //   62: astore_1
    //   63: aload_0
    //   64: monitorexit
    //   65: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   68: aload_1
    //   69: athrow
    //   70: astore_1
    //   71: lload 4
    //   73: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   76: aload_1
    //   77: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	78	0	this	ActivityManagerService
    //   0	78	1	paramIBinder	IBinder
    //   1	58	2	bool1	boolean
    //   40	2	3	bool2	boolean
    //   5	67	4	l	long
    // Exception table:
    //   from	to	target	type
    //   9	17	62	finally
    //   33	41	62	finally
    //   7	9	70	finally
    //   21	26	70	finally
    //   45	50	70	finally
    //   63	70	70	finally
  }
  
  /* Error */
  public boolean isInPictureInPictureMode(IBinder paramIBinder)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_3
    //   2: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   5: lstore 4
    //   7: aload_0
    //   8: monitorenter
    //   9: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   12: aload_1
    //   13: invokestatic 6305	com/android/server/am/ActivityRecord:getStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityStack;
    //   16: astore_1
    //   17: aload_1
    //   18: ifnonnull +15 -> 33
    //   21: aload_0
    //   22: monitorexit
    //   23: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   26: lload 4
    //   28: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   31: iconst_0
    //   32: ireturn
    //   33: aload_1
    //   34: getfield 3884	com/android/server/am/ActivityStack:mStackId	I
    //   37: istore_2
    //   38: iload_2
    //   39: iconst_4
    //   40: if_icmpne +5 -> 45
    //   43: iconst_1
    //   44: istore_3
    //   45: aload_0
    //   46: monitorexit
    //   47: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   50: lload 4
    //   52: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   55: iload_3
    //   56: ireturn
    //   57: astore_1
    //   58: aload_0
    //   59: monitorexit
    //   60: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   63: aload_1
    //   64: athrow
    //   65: astore_1
    //   66: lload 4
    //   68: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   71: aload_1
    //   72: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	73	0	this	ActivityManagerService
    //   0	73	1	paramIBinder	IBinder
    //   37	4	2	i	int
    //   1	55	3	bool	boolean
    //   5	62	4	l	long
    // Exception table:
    //   from	to	target	type
    //   9	17	57	finally
    //   33	38	57	finally
    //   7	9	65	finally
    //   21	26	65	finally
    //   45	50	65	finally
    //   58	65	65	finally
  }
  
  public boolean isIntentSenderAnActivity(IIntentSender paramIIntentSender)
  {
    if (!(paramIIntentSender instanceof PendingIntentRecord)) {
      return false;
    }
    try
    {
      int i = ((PendingIntentRecord)paramIIntentSender).key.type;
      return i == 2;
    }
    catch (ClassCastException paramIIntentSender) {}
    return false;
  }
  
  public boolean isIntentSenderTargetedToPackage(IIntentSender paramIIntentSender)
  {
    if (!(paramIIntentSender instanceof PendingIntentRecord)) {
      return false;
    }
    for (;;)
    {
      int i;
      try
      {
        paramIIntentSender = (PendingIntentRecord)paramIIntentSender;
        if (paramIIntentSender.key.allIntents != null) {
          break label78;
        }
        return false;
      }
      catch (ClassCastException paramIIntentSender)
      {
        Object localObject;
        return false;
      }
      if (i < paramIIntentSender.key.allIntents.length)
      {
        localObject = paramIIntentSender.key.allIntents[i];
        if (((Intent)localObject).getPackage() != null)
        {
          localObject = ((Intent)localObject).getComponent();
          if (localObject != null) {
            return false;
          }
        }
        i += 1;
      }
      else
      {
        return true;
        label78:
        i = 0;
      }
    }
  }
  
  public boolean isKeyguardDone()
  {
    try
    {
      boostPriorityForLockedSection();
      boolean bool = this.mKeyguardDone;
      return bool;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  boolean isNextTransitionForward()
  {
    int i = this.mWindowManager.getPendingAppTransition();
    if ((i == 6) || (i == 8)) {}
    while (i == 10) {
      return true;
    }
    return false;
  }
  
  boolean isPendingBroadcastProcessLocked(int paramInt)
  {
    if (!this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(paramInt)) {
      return this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(paramInt);
    }
    return true;
  }
  
  boolean isProcessAliveLocked(ProcessRecord paramProcessRecord)
  {
    boolean bool2 = false;
    if (paramProcessRecord.procStatFile == null) {
      paramProcessRecord.procStatFile = ("/proc/" + paramProcessRecord.pid + "/stat");
    }
    this.mProcessStateStatsLongs[0] = 0L;
    if (!Process.readProcFile(paramProcessRecord.procStatFile, PROCESS_STATE_STATS_FORMAT, null, this.mProcessStateStatsLongs, null))
    {
      if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
        Slog.d(TAG, "UNABLE TO RETRIEVE STATE FOR " + paramProcessRecord.procStatFile);
      }
      return false;
    }
    long l = this.mProcessStateStatsLongs[0];
    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
      Slog.d(TAG, "RETRIEVED STATE FOR " + paramProcessRecord.procStatFile + ": " + (char)(int)l);
    }
    boolean bool1 = bool2;
    if (l != 90L)
    {
      bool1 = bool2;
      if (l != 88L)
      {
        bool1 = bool2;
        if (l != 120L)
        {
          bool1 = bool2;
          if (l != 75L) {
            bool1 = true;
          }
        }
      }
    }
    return bool1;
  }
  
  /* Error */
  public void isRequestPermission(boolean paramBoolean)
  {
    // Byte code:
    //   0: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   3: new 1066	java/lang/StringBuilder
    //   6: dup
    //   7: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   10: ldc_w 9921
    //   13: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   16: iload_1
    //   17: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   20: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   23: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   26: pop
    //   27: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   30: invokestatic 8610	android/os/UserHandle:isIsolated	(I)Z
    //   33: ifeq +14 -> 47
    //   36: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   39: ldc_w 9923
    //   42: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   45: pop
    //   46: return
    //   47: aload_0
    //   48: monitorenter
    //   49: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   52: aload_0
    //   53: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   56: astore_2
    //   57: aload_2
    //   58: monitorenter
    //   59: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   62: new 1066	java/lang/StringBuilder
    //   65: dup
    //   66: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   69: ldc_w 9925
    //   72: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   75: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   78: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   81: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   84: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   87: pop
    //   88: aload_0
    //   89: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   92: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   95: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   98: checkcast 2141	com/android/server/am/ProcessRecord
    //   101: astore_3
    //   102: iload_1
    //   103: ifeq +15 -> 118
    //   106: aload_3
    //   107: invokevirtual 9928	com/android/server/am/ProcessRecord:permRequestInc	()V
    //   110: aload_2
    //   111: monitorexit
    //   112: aload_0
    //   113: monitorexit
    //   114: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   117: return
    //   118: aload_3
    //   119: invokevirtual 9931	com/android/server/am/ProcessRecord:permRequestDec	()V
    //   122: goto -12 -> 110
    //   125: astore_3
    //   126: aload_2
    //   127: monitorexit
    //   128: aload_3
    //   129: athrow
    //   130: astore_2
    //   131: aload_0
    //   132: monitorexit
    //   133: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   136: aload_2
    //   137: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	138	0	this	ActivityManagerService
    //   0	138	1	paramBoolean	boolean
    //   130	7	2	localObject1	Object
    //   101	18	3	localProcessRecord	ProcessRecord
    //   125	4	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   59	102	125	finally
    //   106	110	125	finally
    //   118	122	125	finally
    //   49	59	130	finally
    //   110	112	130	finally
    //   126	130	130	finally
  }
  
  public boolean isRootVoiceInteraction(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        return false;
      }
      boolean bool = paramIBinder.rootVoiceInteraction;
      return bool;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  boolean isShuttingDownLocked()
  {
    return this.mShuttingDown;
  }
  
  boolean isSingleton(String paramString1, ApplicationInfo paramApplicationInfo, String paramString2, int paramInt)
  {
    boolean bool = false;
    if (UserHandle.getAppId(paramApplicationInfo.uid) >= 10000) {
      if ((paramInt & 0x40000000) != 0)
      {
        if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", paramApplicationInfo.uid) != 0)
        {
          paramString1 = new ComponentName(paramApplicationInfo.packageName, paramString2);
          paramString1 = "Permission Denial: Component " + paramString1.flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold " + "android.permission.INTERACT_ACROSS_USERS";
          Slog.w(TAG, paramString1);
          throw new SecurityException(paramString1);
        }
        bool = true;
      }
    }
    for (;;)
    {
      if (ActivityManagerDebugConfig.DEBUG_MU) {
        Slog.v(TAG_MU, "isSingleton(" + paramString1 + ", " + paramApplicationInfo + ", " + paramString2 + ", 0x" + Integer.toHexString(paramInt) + ") = " + bool);
      }
      return bool;
      if ("system".equals(paramString1))
      {
        bool = true;
      }
      else if ((paramInt & 0x40000000) != 0)
      {
        if (!UserHandle.isSameApp(paramApplicationInfo.uid, 1001))
        {
          if ((paramApplicationInfo.flags & 0x8) != 0) {
            bool = true;
          }
        }
        else
        {
          bool = true;
          continue;
        }
        bool = false;
      }
    }
  }
  
  boolean isSleepingLocked()
  {
    return this.mSleeping;
  }
  
  boolean isSleepingOrShuttingDownLocked()
  {
    if (!isSleepingLocked()) {
      return this.mShuttingDown;
    }
    return true;
  }
  
  /* Error */
  public boolean isTopActivityImmersive()
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 9950
    //   4: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   7: aload_0
    //   8: monitorenter
    //   9: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   12: aload_0
    //   13: invokevirtual 4453	com/android/server/am/ActivityManagerService:getFocusedStack	()Lcom/android/server/am/ActivityStack;
    //   16: invokevirtual 6179	com/android/server/am/ActivityStack:topRunningActivityLocked	()Lcom/android/server/am/ActivityRecord;
    //   19: astore_2
    //   20: aload_2
    //   21: ifnull +15 -> 36
    //   24: aload_2
    //   25: getfield 6646	com/android/server/am/ActivityRecord:immersive	Z
    //   28: istore_1
    //   29: aload_0
    //   30: monitorexit
    //   31: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   34: iload_1
    //   35: ireturn
    //   36: iconst_0
    //   37: istore_1
    //   38: goto -9 -> 29
    //   41: astore_2
    //   42: aload_0
    //   43: monitorexit
    //   44: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   47: aload_2
    //   48: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	49	0	this	ActivityManagerService
    //   28	10	1	bool	boolean
    //   19	6	2	localActivityRecord	ActivityRecord
    //   41	7	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   9	20	41	finally
    //   24	29	41	finally
  }
  
  public boolean isTopOfTask(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        throw new IllegalArgumentException();
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    ActivityRecord localActivityRecord = paramIBinder.task.getTopActivity();
    if (localActivityRecord == paramIBinder) {}
    for (boolean bool = true;; bool = false)
    {
      resetPriorityAfterLockedSection();
      return bool;
    }
  }
  
  /* Error */
  public boolean isUserAMonkey()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 952	com/android/server/am/ActivityManagerService:mUserIsMonkey	Z
    //   9: ifne +22 -> 31
    //   12: aload_0
    //   13: getfield 1635	com/android/server/am/ActivityManagerService:mController	Landroid/app/IActivityController;
    //   16: ifnull +20 -> 36
    //   19: aload_0
    //   20: getfield 1637	com/android/server/am/ActivityManagerService:mControllerIsAMonkey	Z
    //   23: istore_1
    //   24: aload_0
    //   25: monitorexit
    //   26: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   29: iload_1
    //   30: ireturn
    //   31: iconst_1
    //   32: istore_1
    //   33: goto -9 -> 24
    //   36: iconst_0
    //   37: istore_1
    //   38: goto -14 -> 24
    //   41: astore_2
    //   42: aload_0
    //   43: monitorexit
    //   44: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   47: aload_2
    //   48: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	49	0	this	ActivityManagerService
    //   23	15	1	bool	boolean
    //   41	7	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	24	41	finally
  }
  
  public boolean isUserRunning(int paramInt1, int paramInt2)
  {
    if ((!this.mUserController.isSameProfileGroup(paramInt1, UserHandle.getCallingUserId())) && (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0))
    {
      String str = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.INTERACT_ACROSS_USERS";
      Slog.w(TAG, str);
      throw new SecurityException(str);
    }
    try
    {
      boostPriorityForLockedSection();
      boolean bool = this.mUserController.isUserRunningLocked(paramInt1, paramInt2);
      return bool;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public boolean isUserStopped(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   9: iload_1
    //   10: invokevirtual 5263	com/android/server/am/UserController:getStartedUserStateLocked	(I)Lcom/android/server/am/UserState;
    //   13: astore_3
    //   14: aload_3
    //   15: ifnonnull +12 -> 27
    //   18: iconst_1
    //   19: istore_2
    //   20: aload_0
    //   21: monitorexit
    //   22: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   25: iload_2
    //   26: ireturn
    //   27: iconst_0
    //   28: istore_2
    //   29: goto -9 -> 20
    //   32: astore_3
    //   33: aload_0
    //   34: monitorexit
    //   35: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   38: aload_3
    //   39: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	40	0	this	ActivityManagerService
    //   0	40	1	paramInt	int
    //   19	10	2	bool	boolean
    //   13	2	3	localUserState	UserState
    //   32	7	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	14	32	finally
  }
  
  boolean isValidSingletonCall(int paramInt1, int paramInt2)
  {
    int i = UserHandle.getAppId(paramInt2);
    if ((UserHandle.isSameApp(paramInt1, paramInt2)) || (i == 1000)) {}
    while ((i == 1001) || (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", paramInt2) == 0)) {
      return true;
    }
    return false;
  }
  
  public boolean isVrModePackageEnabled(ComponentName paramComponentName)
  {
    boolean bool = false;
    if (!this.mContext.getPackageManager().hasSystemFeature("android.software.vr.mode")) {
      throw new UnsupportedOperationException("VR mode not supported on this device!");
    }
    if (((VrManagerInternal)LocalServices.getService(VrManagerInternal.class)).hasVrPackage(paramComponentName, UserHandle.getCallingUserId()) == 0) {
      bool = true;
    }
    return bool;
  }
  
  /* Error */
  public void keyguardGoingAway(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 9970
    //   4: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   7: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   10: lstore_2
    //   11: aload_0
    //   12: monitorenter
    //   13: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   16: getstatic 8594	com/android/server/am/ActivityManagerDebugConfig:DEBUG_LOCKSCREEN	Z
    //   19: ifeq +10 -> 29
    //   22: aload_0
    //   23: ldc_w 1270
    //   26: invokevirtual 9973	com/android/server/am/ActivityManagerService:logLockScreen	(Ljava/lang/String;)V
    //   29: aload_0
    //   30: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   33: iload_1
    //   34: invokevirtual 9975	com/android/server/wm/WindowManagerService:keyguardGoingAway	(I)V
    //   37: aload_0
    //   38: getfield 1585	com/android/server/am/ActivityManagerService:mLockScreenShown	I
    //   41: iconst_2
    //   42: if_icmpne +38 -> 80
    //   45: aload_0
    //   46: iconst_0
    //   47: putfield 1585	com/android/server/am/ActivityManagerService:mLockScreenShown	I
    //   50: aload_0
    //   51: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   54: invokevirtual 9978	com/android/server/wm/WindowManagerService:onKeyguardDone	()V
    //   57: aload_0
    //   58: invokevirtual 8875	com/android/server/am/ActivityManagerService:updateSleepIfNeededLocked	()V
    //   61: aload_0
    //   62: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   65: aconst_null
    //   66: iconst_0
    //   67: iconst_0
    //   68: invokevirtual 5000	com/android/server/am/ActivityStackSupervisor:ensureActivitiesVisibleLocked	(Lcom/android/server/am/ActivityRecord;IZ)V
    //   71: aload_0
    //   72: aload_0
    //   73: getfield 1453	com/android/server/am/ActivityManagerService:mFocusedActivity	Lcom/android/server/am/ActivityRecord;
    //   76: iconst_1
    //   77: invokespecial 9980	com/android/server/am/ActivityManagerService:applyVrModeIfNeededLocked	(Lcom/android/server/am/ActivityRecord;Z)V
    //   80: aload_0
    //   81: monitorexit
    //   82: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   85: lload_2
    //   86: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   89: return
    //   90: astore 4
    //   92: aload_0
    //   93: monitorexit
    //   94: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   97: aload 4
    //   99: athrow
    //   100: astore 4
    //   102: lload_2
    //   103: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   106: aload 4
    //   108: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	109	0	this	ActivityManagerService
    //   0	109	1	paramInt	int
    //   10	93	2	l	long
    //   90	8	4	localObject1	Object
    //   100	7	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   13	29	90	finally
    //   29	80	90	finally
    //   11	13	100	finally
    //   80	85	100	finally
    //   92	100	100	finally
  }
  
  /* Error */
  public void keyguardWaitingForActivityDrawn()
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 9982
    //   4: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   7: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   10: lstore_1
    //   11: aload_0
    //   12: monitorenter
    //   13: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   16: getstatic 8594	com/android/server/am/ActivityManagerDebugConfig:DEBUG_LOCKSCREEN	Z
    //   19: ifeq +10 -> 29
    //   22: aload_0
    //   23: ldc_w 1270
    //   26: invokevirtual 9973	com/android/server/am/ActivityManagerService:logLockScreen	(Ljava/lang/String;)V
    //   29: aload_0
    //   30: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   33: invokevirtual 9984	com/android/server/wm/WindowManagerService:keyguardWaitingForActivityDrawn	()V
    //   36: aload_0
    //   37: getfield 1585	com/android/server/am/ActivityManagerService:mLockScreenShown	I
    //   40: iconst_2
    //   41: if_icmpne +12 -> 53
    //   44: aload_0
    //   45: iconst_1
    //   46: putfield 1585	com/android/server/am/ActivityManagerService:mLockScreenShown	I
    //   49: aload_0
    //   50: invokevirtual 8875	com/android/server/am/ActivityManagerService:updateSleepIfNeededLocked	()V
    //   53: aload_0
    //   54: monitorexit
    //   55: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   58: lload_1
    //   59: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   62: return
    //   63: astore_3
    //   64: aload_0
    //   65: monitorexit
    //   66: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   69: aload_3
    //   70: athrow
    //   71: astore_3
    //   72: lload_1
    //   73: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   76: aload_3
    //   77: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	78	0	this	ActivityManagerService
    //   10	63	1	l	long
    //   63	7	3	localObject1	Object
    //   71	6	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   13	29	63	finally
    //   29	53	63	finally
    //   11	13	71	finally
    //   53	58	71	finally
    //   64	71	71	finally
  }
  
  public void killAllBackgroundProcesses()
  {
    Object localObject1;
    if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0)
    {
      localObject1 = "Permission Denial: killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
      Slog.w(TAG, (String)localObject1);
      throw new SecurityException((String)localObject1);
    }
    Slog.d(TAG, "killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
    long l = Binder.clearCallingIdentity();
    for (;;)
    {
      ProcessRecord localProcessRecord;
      try
      {
        try
        {
          boostPriorityForLockedSection();
          localObject1 = new ArrayList();
          int k = this.mProcessNames.getMap().size();
          i = 0;
          if (i >= k) {
            break label275;
          }
          SparseArray localSparseArray = (SparseArray)this.mProcessNames.getMap().valueAt(i);
          int m = localSparseArray.size();
          j = 0;
          if (j >= m) {
            break label346;
          }
          localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
          if (localProcessRecord.persistent) {
            break label339;
          }
          if (localProcessRecord.removed) {
            ((ArrayList)localObject1).add(localProcessRecord);
          }
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        if (localProcessRecord.setAdj < 900) {
          break label339;
        }
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      localProcessRecord.removed = true;
      ((ArrayList)localObject3).add(localProcessRecord);
      break label339;
      label275:
      int j = ((ArrayList)localObject3).size();
      int i = 0;
      while (i < j)
      {
        removeProcessLocked((ProcessRecord)((ArrayList)localObject3).get(i), false, true, "kill all background");
        i += 1;
      }
      this.mAllowLowerMemLevel = true;
      updateOomAdjLocked();
      doLowMemReportIfNeededLocked(null);
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
      label339:
      j += 1;
      continue;
      label346:
      i += 1;
    }
  }
  
  void killAppAtUsersRequest(ProcessRecord paramProcessRecord, Dialog paramDialog)
  {
    try
    {
      boostPriorityForLockedSection();
      this.mAppErrors.killAppAtUserRequestLocked(paramProcessRecord, paramDialog);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void killApplication(String paramString1, int paramInt1, int paramInt2, String paramString2)
  {
    if (paramString1 == null) {
      return;
    }
    if (paramInt1 < 0)
    {
      Slog.w(TAG, "Invalid appid specified for pkg : " + paramString1);
      return;
    }
    int i = Binder.getCallingUid();
    if (UserHandle.getAppId(i) == 1000)
    {
      Message localMessage = this.mHandler.obtainMessage(22);
      localMessage.arg1 = paramInt1;
      localMessage.arg2 = paramInt2;
      Bundle localBundle = new Bundle();
      localBundle.putString("pkg", paramString1);
      localBundle.putString("reason", paramString2);
      localMessage.obj = localBundle;
      this.mHandler.sendMessage(localMessage);
      return;
    }
    throw new SecurityException(i + " cannot kill pkg: " + paramString1);
  }
  
  /* Error */
  public void killApplicationProcess(String paramString, int paramInt)
  {
    // Byte code:
    //   0: aload_1
    //   1: ifnonnull +4 -> 5
    //   4: return
    //   5: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   8: istore_3
    //   9: iload_3
    //   10: sipush 1000
    //   13: if_icmpne +98 -> 111
    //   16: aload_0
    //   17: monitorenter
    //   18: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   21: aload_0
    //   22: aload_1
    //   23: iload_2
    //   24: iconst_1
    //   25: invokevirtual 4870	com/android/server/am/ActivityManagerService:getProcessRecordLocked	(Ljava/lang/String;IZ)Lcom/android/server/am/ProcessRecord;
    //   28: astore 4
    //   30: aload 4
    //   32: ifnull +31 -> 63
    //   35: aload 4
    //   37: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   40: astore 5
    //   42: aload 5
    //   44: ifnull +19 -> 63
    //   47: aload 4
    //   49: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   52: invokeinterface 10011 1 0
    //   57: aload_0
    //   58: monitorexit
    //   59: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   62: return
    //   63: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   66: new 1066	java/lang/StringBuilder
    //   69: dup
    //   70: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   73: ldc_w 10013
    //   76: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   79: aload_1
    //   80: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   83: ldc_w 10015
    //   86: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   89: iload_2
    //   90: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   93: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   96: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   99: pop
    //   100: goto -43 -> 57
    //   103: astore_1
    //   104: aload_0
    //   105: monitorexit
    //   106: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   109: aload_1
    //   110: athrow
    //   111: new 4439	java/lang/SecurityException
    //   114: dup
    //   115: new 1066	java/lang/StringBuilder
    //   118: dup
    //   119: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   122: iload_3
    //   123: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   126: ldc_w 10017
    //   129: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   132: aload_1
    //   133: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   136: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   139: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   142: athrow
    //   143: astore_1
    //   144: goto -87 -> 57
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	147	0	this	ActivityManagerService
    //   0	147	1	paramString	String
    //   0	147	2	paramInt	int
    //   8	115	3	i	int
    //   28	20	4	localProcessRecord	ProcessRecord
    //   40	3	5	localIApplicationThread	IApplicationThread
    // Exception table:
    //   from	to	target	type
    //   18	30	103	finally
    //   35	42	103	finally
    //   47	57	103	finally
    //   63	100	103	finally
    //   47	57	143	android/os/RemoteException
  }
  
  public void killBackgroundProcesses(String paramString, int paramInt)
  {
    if ((checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0) && (checkCallingPermission("android.permission.RESTART_PACKAGES") != 0))
    {
      paramString = "Permission Denial: killBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
      Slog.w(TAG, paramString);
      throw new SecurityException(paramString);
    }
    Slog.d(TAG, "killBackgroundProcesses() killing " + paramString + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
    int j = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt, true, 2, "killBackgroundProcesses", null);
    l = Binder.clearCallingIdentity();
    try
    {
      IPackageManager localIPackageManager = AppGlobals.getPackageManager();
      try
      {
        boostPriorityForLockedSection();
        paramInt = -1;
      }
      finally
      {
        int i;
        label193:
        resetPriorityAfterLockedSection();
      }
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    try
    {
      i = UserHandle.getAppId(localIPackageManager.getPackageUid(paramString, 268435456, j));
      paramInt = i;
    }
    catch (RemoteException localRemoteException)
    {
      break label193;
    }
    if (paramInt == -1)
    {
      Slog.w(TAG, "Invalid packageName: " + paramString);
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
    }
    killPackageProcessesLocked(paramString, paramInt, j, 500, false, true, true, false, "kill background");
    resetPriorityAfterLockedSection();
    if (OnePlusAppBootManager.IN_USING) {
      OnePlusAppBootManager.getInstance(null).updateAppStopInfo(paramString, Binder.getCallingPid());
    }
    Binder.restoreCallingIdentity(l);
  }
  
  /* Error */
  public void killPackageDependents(String paramString, int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 10030
    //   4: ldc_w 10032
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_1
    //   11: ifnonnull +14 -> 25
    //   14: new 7199	java/lang/NullPointerException
    //   17: dup
    //   18: ldc_w 10034
    //   21: invokespecial 7200	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   24: athrow
    //   25: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   28: lstore 5
    //   30: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   33: astore 7
    //   35: iconst_m1
    //   36: istore_3
    //   37: aload 7
    //   39: aload_1
    //   40: ldc_w 5890
    //   43: iload_2
    //   44: invokeinterface 5426 4 0
    //   49: istore 4
    //   51: iload 4
    //   53: istore_3
    //   54: iload_2
    //   55: iconst_m1
    //   56: if_icmpeq +41 -> 97
    //   59: iload_3
    //   60: iconst_m1
    //   61: if_icmpne +36 -> 97
    //   64: new 2386	java/lang/IllegalArgumentException
    //   67: dup
    //   68: new 1066	java/lang/StringBuilder
    //   71: dup
    //   72: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   75: ldc_w 10036
    //   78: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   81: aload_1
    //   82: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   85: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   88: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   91: athrow
    //   92: astore 7
    //   94: goto -40 -> 54
    //   97: aload_0
    //   98: monitorenter
    //   99: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   102: aload_0
    //   103: aload_1
    //   104: iload_3
    //   105: invokestatic 4626	android/os/UserHandle:getAppId	(I)I
    //   108: iload_2
    //   109: iconst_0
    //   110: iconst_0
    //   111: iconst_1
    //   112: iconst_1
    //   113: iconst_0
    //   114: new 1066	java/lang/StringBuilder
    //   117: dup
    //   118: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   121: ldc_w 10038
    //   124: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   127: aload_1
    //   128: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   131: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   134: invokespecial 6952	com/android/server/am/ActivityManagerService:killPackageProcessesLocked	(Ljava/lang/String;IIIZZZZLjava/lang/String;)Z
    //   137: pop
    //   138: aload_0
    //   139: monitorexit
    //   140: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   143: lload 5
    //   145: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   148: return
    //   149: astore_1
    //   150: aload_0
    //   151: monitorexit
    //   152: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   155: aload_1
    //   156: athrow
    //   157: astore_1
    //   158: lload 5
    //   160: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   163: aload_1
    //   164: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	165	0	this	ActivityManagerService
    //   0	165	1	paramString	String
    //   0	165	2	paramInt	int
    //   36	69	3	i	int
    //   49	3	4	j	int
    //   28	131	5	l	long
    //   33	5	7	localIPackageManager	IPackageManager
    //   92	1	7	localRemoteException	RemoteException
    // Exception table:
    //   from	to	target	type
    //   37	51	92	android/os/RemoteException
    //   99	138	149	finally
    //   97	99	157	finally
    //   138	143	157	finally
    //   150	157	157	finally
  }
  
  public boolean killPids(int[] paramArrayOfInt, String paramString, boolean paramBoolean)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("killPids only available to the system");
    }
    boolean bool;
    SparseArray localSparseArray;
    int i;
    int j;
    label46:
    ProcessRecord localProcessRecord;
    int k;
    if (paramString == null)
    {
      paramString = "Unknown";
      bool = false;
      localSparseArray = this.mPidsSelfLocked;
      i = 0;
      j = 0;
      label103:
      try
      {
        if (j >= paramArrayOfInt.length) {
          break label245;
        }
        localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfInt[j]);
        k = i;
        if (localProcessRecord == null) {
          break label229;
        }
        int m = localProcessRecord.setAdj;
        k = i;
        if (m <= i) {
          break label229;
        }
        k = m;
      }
      finally {}
      Slog.w(TAG, "Killing processes " + paramString + " at adjustment " + i);
      j = 0;
    }
    for (paramBoolean = bool;; paramBoolean = bool)
    {
      if (j < paramArrayOfInt.length)
      {
        localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramArrayOfInt[j]);
        if (localProcessRecord == null)
        {
          bool = paramBoolean;
        }
        else
        {
          bool = paramBoolean;
          if (localProcessRecord.setAdj >= i)
          {
            bool = paramBoolean;
            if (!localProcessRecord.killedByAm)
            {
              localProcessRecord.kill(paramString, true);
              bool = true;
            }
          }
        }
      }
      else
      {
        return paramBoolean;
        label229:
        j += 1;
        i = k;
        break label46;
        break;
        label245:
        j = i;
        if (i < 906)
        {
          j = i;
          if (i > 900) {
            j = 900;
          }
        }
        i = j;
        if (paramBoolean) {
          break label103;
        }
        i = j;
        if (j >= 500) {
          break label103;
        }
        i = 500;
        break label103;
      }
      j += 1;
    }
  }
  
  public boolean killProcessesBelowForeground(String paramString)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("killProcessesBelowForeground() only available to system");
    }
    return killProcessesBelowAdj(0, paramString);
  }
  
  /* Error */
  public void killUid(int paramInt1, int paramInt2, String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 10030
    //   4: ldc_w 10054
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_0
    //   11: monitorenter
    //   12: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   15: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   18: lstore 4
    //   20: aload_3
    //   21: ifnull +30 -> 51
    //   24: aload_0
    //   25: aconst_null
    //   26: iload_1
    //   27: iload_2
    //   28: sipush 64736
    //   31: iconst_0
    //   32: iconst_1
    //   33: iconst_1
    //   34: iconst_1
    //   35: aload_3
    //   36: invokespecial 6952	com/android/server/am/ActivityManagerService:killPackageProcessesLocked	(Ljava/lang/String;IIIZZZZLjava/lang/String;)Z
    //   39: pop
    //   40: lload 4
    //   42: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   45: aload_0
    //   46: monitorexit
    //   47: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   50: return
    //   51: ldc_w 10056
    //   54: astore_3
    //   55: goto -31 -> 24
    //   58: astore_3
    //   59: lload 4
    //   61: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   64: aload_3
    //   65: athrow
    //   66: astore_3
    //   67: aload_0
    //   68: monitorexit
    //   69: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   72: aload_3
    //   73: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	74	0	this	ActivityManagerService
    //   0	74	1	paramInt1	int
    //   0	74	2	paramInt2	int
    //   0	74	3	paramString	String
    //   18	42	4	l	long
    // Exception table:
    //   from	to	target	type
    //   24	40	58	finally
    //   12	20	66	finally
    //   40	45	66	finally
    //   59	66	66	finally
  }
  
  public boolean launchAssistIntent(Intent paramIntent, int paramInt1, String paramString, int paramInt2, Bundle paramBundle)
  {
    return enqueueAssistContext(paramInt1, paramIntent, paramString, null, null, null, true, true, paramInt2, paramBundle, 500L) != null;
  }
  
  final void logAppTooSlow(ProcessRecord paramProcessRecord, long paramLong, String paramString) {}
  
  void logLockScreen(String paramString)
  {
    if (ActivityManagerDebugConfig.DEBUG_LOCKSCREEN) {
      Slog.d(TAG_LOCKSCREEN, Debug.getCallers(2) + ":" + paramString + " mLockScreenShown=" + lockScreenShownToString() + " mWakefulness=" + PowerManagerInternal.wakefulnessToString(this.mWakefulness) + " mSleeping=" + this.mSleeping);
    }
  }
  
  protected void logoutTagConfigHelp(PrintWriter paramPrintWriter)
  {
    paramPrintWriter.println("********************** Help begin:**********************");
    paramPrintWriter.println("1 Activity life circle:DEBUG_SWITCH | DEBUG_PAUSE DEBUG_RESULTS | DEBUG_CLEANUP | DEBUG_STATES");
    paramPrintWriter.println("cmd: dumpsys activity log life 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("2 App visibility:DEBUG_VISIBILITY | DEBUG_TRANSITION | DEBUG_FOCUS");
    paramPrintWriter.println("cmd: dumpsys activity log visibility 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("3 Config process:DEBUG_CONFIGURATION");
    paramPrintWriter.println("cmd: dumpsys activity log config 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("4 Task manage:DEBUG_TASKS | DEBUG_CLEANUP | DEBUG_ADD_REMOVE | DEBUG_SAVED_STATE");
    paramPrintWriter.println("cmd: dumpsys activity log task 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("5 Broadcast manage:DEBUG_BROADCAST | DEBUG_BROADCAST_BACKGROUND | DEBUG_BROADCAST_LIGHT");
    paramPrintWriter.println("cmd: dumpsys activity log broadcast 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("6 Service manage:DEBUG_SERVICE | DEBUG_SERVICE_EXECUTING | DEBUG_MU | ActiveServices's Log");
    paramPrintWriter.println("cmd: dumpsys activity log service 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("7 Provider manage:DEBUG_PROVIDER | DEBUG_URI_PERMISSION | DEBUG_MU");
    paramPrintWriter.println("cmd: dumpsys activity log provider 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("8 backup manage:DEBUG_BACKUP");
    paramPrintWriter.println("cmd: dumpsys activity log backup 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("9 stack manager log:Ams stack & ActivityStackSupervisor & ActivityStack");
    paramPrintWriter.println("cmd: dumpsys activity log stack 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("10 process manage:DEBUG_PROCESSES | DEBUG_PROCESS_OBSERVERS");
    paramPrintWriter.println("cmd: dumpsys activity log process 0/1");
    paramPrintWriter.println("----------------------------------");
    paramPrintWriter.println("11 other not in common use:DEBUG_POWER | DEBUG_THUMBNAILS | DEBUG_OOM_ADJ | DEBUG_LOCKSCREEN | DEBUG_LRU | DEBUG_PSS ");
    paramPrintWriter.println("cmd: dumpsys activity log other 0/1");
    paramPrintWriter.println("********************** Help end.  **********************");
  }
  
  boolean matchesProvider(Uri paramUri, ProviderInfo paramProviderInfo)
  {
    paramUri = paramUri.getAuthority();
    paramProviderInfo = paramProviderInfo.authority;
    if (paramProviderInfo.indexOf(';') == -1) {
      return paramProviderInfo.equals(paramUri);
    }
    paramProviderInfo = paramProviderInfo.split(";");
    int j = paramProviderInfo.length;
    int i = 0;
    while (i < j)
    {
      if (paramProviderInfo[i].equals(paramUri)) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  public void monitor()
  {
    try
    {
      boostPriorityForLockedSection();
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public boolean moveActivityTaskToBack(IBinder paramIBinder, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 10125
    //   4: invokevirtual 6724	com/android/server/am/ActivityManagerService:enforceNotIsolatedCaller	(Ljava/lang/String;)V
    //   7: aload_0
    //   8: monitorenter
    //   9: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   12: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   15: lstore 4
    //   17: iload_2
    //   18: ifeq +57 -> 75
    //   21: iconst_0
    //   22: istore_2
    //   23: aload_1
    //   24: iload_2
    //   25: invokestatic 9602	com/android/server/am/ActivityRecord:getTaskForActivityLocked	(Landroid/os/IBinder;Z)I
    //   28: istore_3
    //   29: aload_0
    //   30: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   33: iload_3
    //   34: invokevirtual 10128	com/android/server/am/ActivityStackSupervisor:anyTaskForIdLocked	(I)Lcom/android/server/am/TaskRecord;
    //   37: astore 6
    //   39: aload 6
    //   41: ifnull +60 -> 101
    //   44: aload_0
    //   45: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   48: aload 6
    //   50: invokevirtual 10131	com/android/server/am/ActivityStackSupervisor:isLockedTask	(Lcom/android/server/am/TaskRecord;)Z
    //   53: ifeq +27 -> 80
    //   56: aload_0
    //   57: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   60: invokevirtual 8670	com/android/server/am/ActivityStackSupervisor:showLockTaskToast	()V
    //   63: lload 4
    //   65: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   68: aload_0
    //   69: monitorexit
    //   70: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   73: iconst_0
    //   74: ireturn
    //   75: iconst_1
    //   76: istore_2
    //   77: goto -54 -> 23
    //   80: aload_1
    //   81: invokestatic 6305	com/android/server/am/ActivityRecord:getStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityStack;
    //   84: iload_3
    //   85: invokevirtual 10134	com/android/server/am/ActivityStack:moveTaskToBackLocked	(I)Z
    //   88: istore_2
    //   89: lload 4
    //   91: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   94: aload_0
    //   95: monitorexit
    //   96: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   99: iload_2
    //   100: ireturn
    //   101: lload 4
    //   103: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   106: aload_0
    //   107: monitorexit
    //   108: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   111: iconst_0
    //   112: ireturn
    //   113: astore_1
    //   114: lload 4
    //   116: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   119: aload_1
    //   120: athrow
    //   121: astore_1
    //   122: aload_0
    //   123: monitorexit
    //   124: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   127: aload_1
    //   128: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	129	0	this	ActivityManagerService
    //   0	129	1	paramIBinder	IBinder
    //   0	129	2	paramBoolean	boolean
    //   28	57	3	i	int
    //   15	100	4	l	long
    //   37	12	6	localTaskRecord	TaskRecord
    // Exception table:
    //   from	to	target	type
    //   23	39	113	finally
    //   44	63	113	finally
    //   80	89	113	finally
    //   9	17	121	finally
    //   63	68	121	finally
    //   89	94	121	finally
    //   101	106	121	finally
    //   114	121	121	finally
  }
  
  public void moveTaskBackwards(int paramInt)
  {
    enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskBackwards()");
    try
    {
      boostPriorityForLockedSection();
      boolean bool = checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), -1, -1, "Task backwards");
      if (!bool) {
        return;
      }
      long l = Binder.clearCallingIdentity();
      moveTaskBackwardsLocked(paramInt);
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public boolean moveTaskToDockedStack(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2, Rect paramRect, boolean paramBoolean3)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 10149
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_0
    //   11: monitorenter
    //   12: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   15: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   18: lstore 7
    //   20: getstatic 8560	com/android/server/am/ActivityManagerDebugConfig:DEBUG_STACK	Z
    //   23: ifeq +50 -> 73
    //   26: getstatic 1168	com/android/server/am/ActivityManagerService:TAG_STACK	Ljava/lang/String;
    //   29: new 1066	java/lang/StringBuilder
    //   32: dup
    //   33: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   36: ldc_w 10151
    //   39: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   42: iload_1
    //   43: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   46: ldc_w 10153
    //   49: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   52: iload_2
    //   53: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   56: ldc_w 10155
    //   59: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   62: iload_3
    //   63: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   66: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   69: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   72: pop
    //   73: aload_0
    //   74: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   77: iload_2
    //   78: aload 5
    //   80: invokevirtual 10158	com/android/server/wm/WindowManagerService:setDockedStackCreateState	(ILandroid/graphics/Rect;)V
    //   83: aload_0
    //   84: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   87: iload_1
    //   88: iconst_3
    //   89: iload_3
    //   90: iconst_0
    //   91: ldc_w 10159
    //   94: iload 4
    //   96: iconst_1
    //   97: invokevirtual 10162	com/android/server/am/ActivityStackSupervisor:moveTaskToStackLocked	(IIZZLjava/lang/String;ZZ)Z
    //   100: istore_3
    //   101: iload_3
    //   102: ifeq +28 -> 130
    //   105: iload 6
    //   107: ifeq +13 -> 120
    //   110: aload_0
    //   111: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   114: ldc_w 10159
    //   117: invokevirtual 10165	com/android/server/am/ActivityStackSupervisor:moveHomeStackToFront	(Ljava/lang/String;)V
    //   120: aload_0
    //   121: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   124: aconst_null
    //   125: iconst_0
    //   126: iconst_0
    //   127: invokevirtual 5000	com/android/server/am/ActivityStackSupervisor:ensureActivitiesVisibleLocked	(Lcom/android/server/am/ActivityRecord;IZ)V
    //   130: lload 7
    //   132: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   135: aload_0
    //   136: monitorexit
    //   137: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   140: iload_3
    //   141: ireturn
    //   142: astore 5
    //   144: lload 7
    //   146: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   149: aload 5
    //   151: athrow
    //   152: astore 5
    //   154: aload_0
    //   155: monitorexit
    //   156: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   159: aload 5
    //   161: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	162	0	this	ActivityManagerService
    //   0	162	1	paramInt1	int
    //   0	162	2	paramInt2	int
    //   0	162	3	paramBoolean1	boolean
    //   0	162	4	paramBoolean2	boolean
    //   0	162	5	paramRect	Rect
    //   0	162	6	paramBoolean3	boolean
    //   18	127	7	l	long
    // Exception table:
    //   from	to	target	type
    //   20	73	142	finally
    //   73	101	142	finally
    //   110	120	142	finally
    //   120	130	142	finally
    //   12	20	152	finally
    //   130	135	152	finally
    //   144	152	152	finally
  }
  
  public void moveTaskToFront(int paramInt1, int paramInt2, Bundle paramBundle)
  {
    enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskToFront()");
    if (ActivityManagerDebugConfig.DEBUG_STACK) {
      Slog.d(TAG_STACK, "moveTaskToFront: moving taskId=" + paramInt1);
    }
    try
    {
      boostPriorityForLockedSection();
      moveTaskToFrontLocked(paramInt1, paramInt2, paramBundle);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void moveTaskToFrontLocked(int paramInt1, int paramInt2, Bundle paramBundle)
  {
    paramBundle = ActivityOptions.fromBundle(paramBundle);
    if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), -1, -1, "Task to front"))
    {
      ActivityOptions.abort(paramBundle);
      return;
    }
    long l = Binder.clearCallingIdentity();
    try
    {
      TaskRecord localTaskRecord = this.mStackSupervisor.anyTaskForIdLocked(paramInt1);
      if (localTaskRecord == null)
      {
        Slog.d(TAG, "Could not find task for id: " + paramInt1);
        return;
      }
      if (this.mStackSupervisor.isLockTaskModeViolation(localTaskRecord))
      {
        this.mStackSupervisor.showLockTaskToast();
        Slog.e(TAG, "moveTaskToFront: Attempt to violate Lock Task Mode");
        return;
      }
      ActivityRecord localActivityRecord = this.mStackSupervisor.topRunningActivityLocked();
      if ((localActivityRecord != null) && (localActivityRecord.isRecentsActivity())) {
        localTaskRecord.setTaskToReturnTo(2);
      }
      this.mStackSupervisor.findTaskToMoveToFrontLocked(localTaskRecord, paramInt2, paramBundle, "moveTaskToFront", false);
      Binder.restoreCallingIdentity(l);
      ActivityOptions.abort(paramBundle);
      return;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  /* Error */
  public void moveTaskToStack(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 10208
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: iload_2
    //   11: ifne +37 -> 48
    //   14: new 2386	java/lang/IllegalArgumentException
    //   17: dup
    //   18: new 1066	java/lang/StringBuilder
    //   21: dup
    //   22: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   25: ldc_w 10210
    //   28: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   31: iload_1
    //   32: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   35: ldc_w 10212
    //   38: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   41: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   44: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   47: athrow
    //   48: aload_0
    //   49: monitorenter
    //   50: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   53: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   56: lstore 4
    //   58: getstatic 8560	com/android/server/am/ActivityManagerDebugConfig:DEBUG_STACK	Z
    //   61: ifeq +50 -> 111
    //   64: getstatic 1168	com/android/server/am/ActivityManagerService:TAG_STACK	Ljava/lang/String;
    //   67: new 1066	java/lang/StringBuilder
    //   70: dup
    //   71: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   74: ldc_w 10214
    //   77: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   80: iload_1
    //   81: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   84: ldc_w 10216
    //   87: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   90: iload_2
    //   91: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   94: ldc_w 10155
    //   97: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   100: iload_3
    //   101: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   104: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   107: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   110: pop
    //   111: iload_2
    //   112: iconst_3
    //   113: if_icmpne +12 -> 125
    //   116: aload_0
    //   117: getfield 3968	com/android/server/am/ActivityManagerService:mWindowManager	Lcom/android/server/wm/WindowManagerService;
    //   120: iconst_0
    //   121: aconst_null
    //   122: invokevirtual 10158	com/android/server/wm/WindowManagerService:setDockedStackCreateState	(ILandroid/graphics/Rect;)V
    //   125: aload_0
    //   126: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   129: iload_1
    //   130: iload_2
    //   131: iload_3
    //   132: iconst_0
    //   133: ldc_w 10217
    //   136: iconst_1
    //   137: invokevirtual 8652	com/android/server/am/ActivityStackSupervisor:moveTaskToStackLocked	(IIZZLjava/lang/String;Z)Z
    //   140: ifeq +20 -> 160
    //   143: iload_2
    //   144: iconst_3
    //   145: if_icmpne +15 -> 160
    //   148: aload_0
    //   149: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   152: iconst_2
    //   153: ldc_w 10159
    //   156: invokevirtual 10220	com/android/server/am/ActivityStackSupervisor:moveHomeStackTaskToTop	(ILjava/lang/String;)Z
    //   159: pop
    //   160: lload 4
    //   162: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   165: aload_0
    //   166: monitorexit
    //   167: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   170: return
    //   171: astore 6
    //   173: lload 4
    //   175: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   178: aload 6
    //   180: athrow
    //   181: astore 6
    //   183: aload_0
    //   184: monitorexit
    //   185: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   188: aload 6
    //   190: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	191	0	this	ActivityManagerService
    //   0	191	1	paramInt1	int
    //   0	191	2	paramInt2	int
    //   0	191	3	paramBoolean	boolean
    //   56	118	4	l	long
    //   171	8	6	localObject1	Object
    //   181	8	6	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   58	111	171	finally
    //   116	125	171	finally
    //   125	143	171	finally
    //   148	160	171	finally
    //   50	58	181	finally
    //   160	165	181	finally
    //   173	181	181	finally
  }
  
  /* Error */
  public void moveTasksToFullscreenStack(int paramInt, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 10224
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: iload_1
    //   11: ifne +14 -> 25
    //   14: new 2386	java/lang/IllegalArgumentException
    //   17: dup
    //   18: ldc_w 10226
    //   21: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   24: athrow
    //   25: aload_0
    //   26: monitorenter
    //   27: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   30: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   33: lstore_3
    //   34: aload_0
    //   35: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   38: iload_1
    //   39: iload_2
    //   40: invokevirtual 10229	com/android/server/am/ActivityStackSupervisor:moveTasksToFullscreenStackLocked	(IZ)V
    //   43: lload_3
    //   44: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   47: aload_0
    //   48: monitorexit
    //   49: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   52: return
    //   53: astore 5
    //   55: lload_3
    //   56: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   59: aload 5
    //   61: athrow
    //   62: astore 5
    //   64: aload_0
    //   65: monitorexit
    //   66: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   69: aload 5
    //   71: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	72	0	this	ActivityManagerService
    //   0	72	1	paramInt	int
    //   0	72	2	paramBoolean	boolean
    //   33	23	3	l	long
    //   53	7	5	localObject1	Object
    //   62	8	5	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   34	43	53	finally
    //   27	34	62	finally
    //   43	47	62	finally
    //   55	62	62	finally
  }
  
  public boolean moveTopActivityToPinnedStack(int paramInt, Rect paramRect)
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "moveTopActivityToPinnedStack()");
    try
    {
      boostPriorityForLockedSection();
      if (!this.mSupportsPictureInPicture) {
        throw new IllegalStateException("moveTopActivityToPinnedStack:Device doesn't support picture-in-pciture mode");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    long l = Binder.clearCallingIdentity();
    try
    {
      boolean bool = this.mStackSupervisor.moveTopStackActivityToPinnedStackLocked(paramInt, paramRect);
      Binder.restoreCallingIdentity(l);
      resetPriorityAfterLockedSection();
      return bool;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  public boolean navigateUpTo(IBinder paramIBinder, Intent paramIntent1, int paramInt, Intent paramIntent2)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.forTokenLocked(paramIBinder);
      if (paramIBinder != null)
      {
        boolean bool = paramIBinder.task.stack.navigateUpToLocked(paramIBinder, paramIntent1, paramInt, paramIntent2);
        return bool;
      }
      return false;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  final ProcessRecord newProcessRecordLocked(ApplicationInfo paramApplicationInfo, String paramString, boolean paramBoolean, int paramInt)
  {
    int j;
    int i;
    if (paramString != null)
    {
      BatteryStatsImpl localBatteryStatsImpl = this.mBatteryStatsService.getActiveStatistics();
      j = UserHandle.getUserId(paramApplicationInfo.uid);
      i = paramApplicationInfo.uid;
      if (paramBoolean)
      {
        if (paramInt != 0) {
          break label183;
        }
        paramInt = 1000;
        label42:
        if ((this.mNextIsolatedProcessUid < 99000) || (this.mNextIsolatedProcessUid > 99999)) {
          this.mNextIsolatedProcessUid = 99000;
        }
        i = UserHandle.getUid(j, this.mNextIsolatedProcessUid);
        this.mNextIsolatedProcessUid += 1;
        if (this.mIsolatedProcesses.indexOfKey(i) >= 0) {
          break label166;
        }
        paramInt = i;
        label106:
        this.mBatteryStatsService.addIsolatedUid(paramInt, paramApplicationInfo.uid);
        i = paramInt;
      }
      paramString = new ProcessRecord(localBatteryStatsImpl, paramApplicationInfo, paramString, i);
      if ((!this.mBooted) && (!this.mBooting)) {
        break label186;
      }
    }
    for (;;)
    {
      addProcessNameLocked(paramString);
      return paramString;
      paramString = paramApplicationInfo.processName;
      break;
      label166:
      i = paramInt - 1;
      paramInt = i;
      if (i > 0) {
        break label42;
      }
      return null;
      label183:
      break label106;
      label186:
      if ((j == 0) && ((paramApplicationInfo.flags & 0x9) == 9)) {
        paramString.persistent = true;
      }
    }
  }
  
  public IBinder newUriPermissionOwner(String paramString)
  {
    enforceNotIsolatedCaller("newUriPermissionOwner");
    try
    {
      boostPriorityForLockedSection();
      paramString = new UriPermissionOwner(this, paramString).getExternalTokenLocked();
      return paramString;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void noteAlarmFinish(IIntentSender paramIIntentSender, int paramInt, String paramString)
  {
    PendingIntentRecord localPendingIntentRecord;
    if ((paramIIntentSender == null) || ((paramIIntentSender instanceof PendingIntentRecord))) {
      localPendingIntentRecord = (PendingIntentRecord)paramIIntentSender;
    }
    synchronized (this.mBatteryStatsService.getActiveStatistics())
    {
      this.mBatteryStatsService.enforceCallingPermission();
      int i = Binder.getCallingUid();
      if (paramIIntentSender == null) {
        i = paramInt;
      }
      for (;;)
      {
        paramIIntentSender = this.mBatteryStatsService;
        if (paramInt < 0) {
          break;
        }
        paramIIntentSender.noteAlarmFinish(paramString, paramInt);
        return;
        return;
        if (localPendingIntentRecord.uid == i) {
          i = 1000;
        } else {
          i = localPendingIntentRecord.uid;
        }
      }
      paramInt = i;
    }
  }
  
  public void noteAlarmStart(IIntentSender paramIIntentSender, int paramInt, String paramString)
  {
    PendingIntentRecord localPendingIntentRecord;
    if ((paramIIntentSender == null) || ((paramIIntentSender instanceof PendingIntentRecord))) {
      localPendingIntentRecord = (PendingIntentRecord)paramIIntentSender;
    }
    synchronized (this.mBatteryStatsService.getActiveStatistics())
    {
      this.mBatteryStatsService.enforceCallingPermission();
      int i = Binder.getCallingUid();
      if (paramIIntentSender == null) {
        i = paramInt;
      }
      for (;;)
      {
        paramIIntentSender = this.mBatteryStatsService;
        if (paramInt < 0) {
          break;
        }
        paramIIntentSender.noteAlarmStart(paramString, paramInt);
        return;
        return;
        if (localPendingIntentRecord.uid == i) {
          i = 1000;
        } else {
          i = localPendingIntentRecord.uid;
        }
      }
      paramInt = i;
    }
  }
  
  public void noteWakeupAlarm(IIntentSender paramIIntentSender, int paramInt, String paramString1, String paramString2)
  {
    PendingIntentRecord localPendingIntentRecord;
    if ((paramIIntentSender == null) || ((paramIIntentSender instanceof PendingIntentRecord))) {
      localPendingIntentRecord = (PendingIntentRecord)paramIIntentSender;
    }
    label124:
    label139:
    for (;;)
    {
      int i;
      synchronized (this.mBatteryStatsService.getActiveStatistics())
      {
        if (this.mBatteryStatsService.isOnBattery())
        {
          this.mBatteryStatsService.enforceCallingPermission();
          i = Binder.getCallingUid();
          if (paramIIntentSender == null)
          {
            i = paramInt;
            break label124;
            ???.getPackageStatsLocked(paramInt, paramString1).noteWakeupAlarmLocked(paramString2);
          }
        }
        else
        {
          return;
          return;
        }
        if (localPendingIntentRecord.uid == i)
        {
          i = 1000;
        }
        else
        {
          i = localPendingIntentRecord.uid;
          break label124;
          paramString1 = localPendingIntentRecord.key.packageName;
        }
      }
      if (paramInt >= 0) {}
      for (;;)
      {
        if (paramString1 == null) {
          break label139;
        }
        break;
        paramInt = i;
      }
    }
  }
  
  public void notifyActivityDrawn(IBinder paramIBinder)
  {
    if (ActivityManagerDebugConfig.DEBUG_VISIBILITY) {
      Slog.d(TAG_VISIBILITY, "notifyActivityDrawn: token=" + paramIBinder);
    }
    try
    {
      boostPriorityForLockedSection();
      ActivityRecord localActivityRecord = this.mStackSupervisor.isInAnyStackLocked(paramIBinder);
      if (localActivityRecord != null) {
        localActivityRecord.task.stack.notifyActivityDrawnLocked(localActivityRecord);
      }
      resetPriorityAfterLockedSection();
      if (Build.AUTO_TEST_ONEPLUS) {
        Slog.d("APP_LAUNCH_END", SystemClock.uptimeMillis() + " AMS: notifyActivityDrawn " + paramIBinder);
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void notifyActivityPinnedLocked()
  {
    this.mHandler.removeMessages(64);
    this.mHandler.obtainMessage(64).sendToTarget();
  }
  
  public void notifyCleartextNetwork(int paramInt, byte[] paramArrayOfByte)
  {
    this.mHandler.obtainMessage(50, paramInt, 0, paramArrayOfByte).sendToTarget();
  }
  
  public final void notifyEnterAnimationComplete(IBinder paramIBinder)
  {
    this.mHandler.sendMessage(this.mHandler.obtainMessage(44, paramIBinder));
  }
  
  public final void notifyLaunchTaskBehindComplete(IBinder paramIBinder)
  {
    this.mStackSupervisor.scheduleLaunchTaskBehindComplete(paramIBinder);
  }
  
  /* Error */
  public void notifyLockedProfile(int paramInt)
  {
    // Byte code:
    //   0: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   3: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   6: invokeinterface 5070 2 0
    //   11: ifne +29 -> 40
    //   14: new 4439	java/lang/SecurityException
    //   17: dup
    //   18: ldc_w 10310
    //   21: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   24: athrow
    //   25: astore 5
    //   27: new 4439	java/lang/SecurityException
    //   30: dup
    //   31: ldc_w 10312
    //   34: aload 5
    //   36: invokespecial 10315	java/lang/SecurityException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   39: athrow
    //   40: aload_0
    //   41: monitorenter
    //   42: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   45: aload_0
    //   46: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   49: iload_1
    //   50: invokevirtual 10318	com/android/server/am/ActivityStackSupervisor:isUserLockedProfile	(I)Z
    //   53: ifeq +46 -> 99
    //   56: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   59: lstore_3
    //   60: aload_0
    //   61: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   64: invokevirtual 6073	com/android/server/am/UserController:getCurrentUserIdLocked	()I
    //   67: istore_2
    //   68: aload_0
    //   69: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   72: iload_1
    //   73: invokevirtual 10321	com/android/server/am/ActivityStackSupervisor:moveProfileTasksFromFreeformToFullscreenStackLocked	(I)V
    //   76: aload_0
    //   77: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   80: iload_2
    //   81: invokevirtual 10324	com/android/server/am/UserController:isLockScreenDisabled	(I)Z
    //   84: ifeq +21 -> 105
    //   87: aload_0
    //   88: getfield 1995	com/android/server/am/ActivityManagerService:mActivityStarter	Lcom/android/server/am/ActivityStarter;
    //   91: iload_1
    //   92: invokevirtual 10327	com/android/server/am/ActivityStarter:showConfirmDeviceCredential	(I)V
    //   95: lload_3
    //   96: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   99: aload_0
    //   100: monitorexit
    //   101: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   104: return
    //   105: aload_0
    //   106: iload_2
    //   107: ldc_w 10328
    //   110: invokevirtual 10331	com/android/server/am/ActivityManagerService:startHomeActivityLocked	(ILjava/lang/String;)Z
    //   113: pop
    //   114: goto -19 -> 95
    //   117: astore 5
    //   119: lload_3
    //   120: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   123: aload 5
    //   125: athrow
    //   126: astore 5
    //   128: aload_0
    //   129: monitorexit
    //   130: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   133: aload 5
    //   135: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	136	0	this	ActivityManagerService
    //   0	136	1	paramInt	int
    //   67	40	2	i	int
    //   59	61	3	l	long
    //   25	10	5	localRemoteException	RemoteException
    //   117	7	5	localObject1	Object
    //   126	8	5	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   0	25	25	android/os/RemoteException
    //   60	95	117	finally
    //   105	114	117	finally
    //   42	60	126	finally
    //   95	99	126	finally
    //   119	126	126	finally
  }
  
  void notifyPackageUse(String paramString, int paramInt)
  {
    IPackageManager localIPackageManager = AppGlobals.getPackageManager();
    try
    {
      localIPackageManager.notifyPackageUse(paramString, paramInt);
      return;
    }
    catch (RemoteException paramString) {}
  }
  
  void notifyPinnedActivityRestartAttemptLocked()
  {
    this.mHandler.removeMessages(65);
    this.mHandler.obtainMessage(65).sendToTarget();
  }
  
  public void notifyPinnedStackAnimationEnded()
  {
    try
    {
      boostPriorityForLockedSection();
      this.mHandler.removeMessages(66);
      this.mHandler.obtainMessage(66).sendToTarget();
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void notifyTaskPersisterLocked(TaskRecord paramTaskRecord, boolean paramBoolean)
  {
    this.mRecentTasks.notifyTaskPersisterLocked(paramTaskRecord, paramBoolean);
  }
  
  void notifyTaskStackChangedLocked()
  {
    this.mHandler.sendEmptyMessage(62);
    this.mHandler.removeMessages(49);
    Message localMessage = this.mHandler.obtainMessage(49);
    this.mHandler.sendMessageDelayed(localMessage, 100L);
  }
  
  protected final int oemStartActivityAsCaller(IApplicationThread paramIApplicationThread, String paramString1, Intent paramIntent, String paramString2, IBinder paramIBinder, String paramString3, int paramInt1, int paramInt2, ProfilerInfo paramProfilerInfo, Bundle paramBundle, boolean paramBoolean, int paramInt3)
  {
    try
    {
      boostPriorityForLockedSection();
      if (paramIBinder == null) {
        throw new SecurityException("Must be called from an activity");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    paramIApplicationThread = this.mStackSupervisor.isInAnyStackLocked(paramIBinder);
    if (paramIApplicationThread == null) {
      throw new SecurityException("Called with bad activity token: " + paramIBinder);
    }
    if (paramIApplicationThread.app == null) {
      throw new SecurityException("Called without a process attached to activity");
    }
    if (paramBoolean)
    {
      if (paramIntent.getComponent() == null) {
        throw new SecurityException("Component must be specified with ignoreTargetSecurity");
      }
      if (paramIntent.getSelector() != null) {
        throw new SecurityException("Selector not allowed with ignoreTargetSecurity");
      }
    }
    int j = paramIApplicationThread.launchedFromUid;
    paramString1 = paramIApplicationThread.launchedFromPackage;
    resetPriorityAfterLockedSection();
    int i = paramInt3;
    if (paramInt3 == 55536) {
      i = UserHandle.getUserId(paramIApplicationThread.app.uid);
    }
    try
    {
      paramInt1 = this.mActivityStarter.startActivityMayWait(null, j, paramString1, paramIntent, paramString2, null, null, paramIBinder, paramString3, paramInt1, paramInt2, null, null, null, paramBundle, paramBoolean, i, null, null);
      return paramInt1;
    }
    catch (SecurityException paramIApplicationThread)
    {
      throw paramIApplicationThread;
    }
  }
  
  void onCoreSettingsChange(Bundle paramBundle)
  {
    int i = this.mLruProcesses.size() - 1;
    for (;;)
    {
      ProcessRecord localProcessRecord;
      if (i >= 0) {
        localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
      }
      try
      {
        if (localProcessRecord.thread != null) {
          localProcessRecord.thread.setCoreSettings(paramBundle);
        }
        i -= 1;
        continue;
        return;
      }
      catch (RemoteException localRemoteException)
      {
        for (;;) {}
      }
    }
  }
  
  void onLocalVoiceInteractionStartedLocked(IBinder paramIBinder, IVoiceInteractionSession paramIVoiceInteractionSession, IVoiceInteractor paramIVoiceInteractor)
  {
    ActivityRecord localActivityRecord = ActivityRecord.forTokenLocked(paramIBinder);
    if (localActivityRecord == null) {
      return;
    }
    localActivityRecord.setVoiceSessionLocked(paramIVoiceInteractionSession);
    try
    {
      localActivityRecord.app.thread.scheduleLocalVoiceInteractionStarted(paramIBinder, paramIVoiceInteractor);
      long l = Binder.clearCallingIdentity();
      try
      {
        startRunningVoiceLocked(paramIVoiceInteractionSession, localActivityRecord.appInfo.uid);
        return;
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      return;
    }
    catch (RemoteException paramIBinder)
    {
      localActivityRecord.clearVoiceSessionLocked();
    }
  }
  
  public void onShellCommand(FileDescriptor paramFileDescriptor1, FileDescriptor paramFileDescriptor2, FileDescriptor paramFileDescriptor3, String[] paramArrayOfString, ResultReceiver paramResultReceiver)
  {
    new ActivityManagerShellCommand(this, false).exec(this, paramFileDescriptor1, paramFileDescriptor2, paramFileDescriptor3, paramArrayOfString, paramResultReceiver);
  }
  
  /* Error */
  public boolean onTransact(int paramInt1, android.os.Parcel paramParcel1, android.os.Parcel paramParcel2, int paramInt2)
    throws RemoteException
  {
    // Byte code:
    //   0: iload_1
    //   1: ldc_w 10377
    //   4: if_icmpne +199 -> 203
    //   7: new 1242	java/util/ArrayList
    //   10: dup
    //   11: invokespecial 1243	java/util/ArrayList:<init>	()V
    //   14: astore 10
    //   16: aload_0
    //   17: monitorenter
    //   18: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   21: aload_0
    //   22: getfield 1470	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/internal/app/ProcessMap;
    //   25: invokevirtual 3535	com/android/internal/app/ProcessMap:getMap	()Landroid/util/ArrayMap;
    //   28: invokevirtual 2287	android/util/ArrayMap:size	()I
    //   31: istore 7
    //   33: iconst_0
    //   34: istore 5
    //   36: iload 5
    //   38: iload 7
    //   40: if_icmpge +91 -> 131
    //   43: aload_0
    //   44: getfield 1470	com/android/server/am/ActivityManagerService:mProcessNames	Lcom/android/internal/app/ProcessMap;
    //   47: invokevirtual 3535	com/android/internal/app/ProcessMap:getMap	()Landroid/util/ArrayMap;
    //   50: iload 5
    //   52: invokevirtual 3320	android/util/ArrayMap:valueAt	(I)Ljava/lang/Object;
    //   55: checkcast 1455	android/util/SparseArray
    //   58: astore 11
    //   60: aload 11
    //   62: invokevirtual 3536	android/util/SparseArray:size	()I
    //   65: istore 8
    //   67: iconst_0
    //   68: istore 6
    //   70: iload 6
    //   72: iload 8
    //   74: if_icmpge +48 -> 122
    //   77: aload 11
    //   79: iload 6
    //   81: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   84: checkcast 2141	com/android/server/am/ProcessRecord
    //   87: astore 12
    //   89: aload 12
    //   91: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   94: ifnull +19 -> 113
    //   97: aload 10
    //   99: aload 12
    //   101: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   104: invokeinterface 2802 1 0
    //   109: invokevirtual 2607	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   112: pop
    //   113: iload 6
    //   115: iconst_1
    //   116: iadd
    //   117: istore 6
    //   119: goto -49 -> 70
    //   122: iload 5
    //   124: iconst_1
    //   125: iadd
    //   126: istore 5
    //   128: goto -92 -> 36
    //   131: aload_0
    //   132: monitorexit
    //   133: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   136: aload 10
    //   138: invokevirtual 2580	java/util/ArrayList:size	()I
    //   141: istore 6
    //   143: iconst_0
    //   144: istore 5
    //   146: iload 5
    //   148: iload 6
    //   150: if_icmpge +53 -> 203
    //   153: invokestatic 10382	android/os/Parcel:obtain	()Landroid/os/Parcel;
    //   156: astore 11
    //   158: aload 10
    //   160: iload 5
    //   162: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   165: checkcast 2804	android/os/IBinder
    //   168: ldc_w 10377
    //   171: aload 11
    //   173: aconst_null
    //   174: iconst_0
    //   175: invokeinterface 10385 5 0
    //   180: pop
    //   181: aload 11
    //   183: invokevirtual 10388	android/os/Parcel:recycle	()V
    //   186: iload 5
    //   188: iconst_1
    //   189: iadd
    //   190: istore 5
    //   192: goto -46 -> 146
    //   195: astore_2
    //   196: aload_0
    //   197: monitorexit
    //   198: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   201: aload_2
    //   202: athrow
    //   203: aload_0
    //   204: iload_1
    //   205: aload_2
    //   206: aload_3
    //   207: iload 4
    //   209: invokespecial 10390	android/app/ActivityManagerNative:onTransact	(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
    //   212: istore 9
    //   214: iload 9
    //   216: ireturn
    //   217: astore_2
    //   218: aload_2
    //   219: instanceof 4439
    //   222: ifne +14 -> 236
    //   225: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   228: ldc_w 10392
    //   231: aload_2
    //   232: invokestatic 3020	android/util/Slog:wtf	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   235: pop
    //   236: aload_2
    //   237: athrow
    //   238: astore 12
    //   240: goto -59 -> 181
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	243	0	this	ActivityManagerService
    //   0	243	1	paramInt1	int
    //   0	243	2	paramParcel1	android.os.Parcel
    //   0	243	3	paramParcel2	android.os.Parcel
    //   0	243	4	paramInt2	int
    //   34	157	5	i	int
    //   68	83	6	j	int
    //   31	10	7	k	int
    //   65	10	8	m	int
    //   212	3	9	bool	boolean
    //   14	145	10	localArrayList	ArrayList
    //   58	124	11	localObject	Object
    //   87	13	12	localProcessRecord	ProcessRecord
    //   238	1	12	localRemoteException	RemoteException
    // Exception table:
    //   from	to	target	type
    //   18	33	195	finally
    //   43	67	195	finally
    //   77	113	195	finally
    //   203	214	217	java/lang/RuntimeException
    //   158	181	238	android/os/RemoteException
  }
  
  void onUserStoppedLocked(int paramInt)
  {
    this.mRecentTasks.unloadUserDataFromMemoryLocked(paramInt);
  }
  
  /* Error */
  void onWakefulnessChanged(int paramInt)
  {
    // Byte code:
    //   0: iconst_1
    //   1: istore_2
    //   2: aload_0
    //   3: monitorenter
    //   4: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   7: aload_0
    //   8: iload_1
    //   9: putfield 1581	com/android/server/am/ActivityManagerService:mWakefulness	I
    //   12: aload_0
    //   13: invokevirtual 8875	com/android/server/am/ActivityManagerService:updateSleepIfNeededLocked	()V
    //   16: aload_0
    //   17: getfield 1581	com/android/server/am/ActivityManagerService:mWakefulness	I
    //   20: iconst_1
    //   21: if_icmpne +13 -> 34
    //   24: iload_2
    //   25: invokestatic 10400	com/android/server/am/OnePlusProcessManager:updateScreenState	(Z)V
    //   28: aload_0
    //   29: monitorexit
    //   30: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   33: return
    //   34: iconst_0
    //   35: istore_2
    //   36: goto -12 -> 24
    //   39: astore_3
    //   40: aload_0
    //   41: monitorexit
    //   42: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   45: aload_3
    //   46: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	47	0	this	ActivityManagerService
    //   0	47	1	paramInt	int
    //   1	35	2	bool	boolean
    //   39	7	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   4	24	39	finally
    //   24	28	39	finally
  }
  
  public ParcelFileDescriptor openContentUri(Uri paramUri)
    throws RemoteException
  {
    enforceNotIsolatedCaller("openContentUri");
    int i = UserHandle.getCallingUserId();
    String str = paramUri.getAuthority();
    IActivityManager.ContentProviderHolder localContentProviderHolder = getContentProviderExternalUnchecked(str, null, i);
    if (localContentProviderHolder != null)
    {
      Binder localBinder = new Binder();
      sCallerIdentity.set(new Identity(localBinder, Binder.getCallingPid(), Binder.getCallingUid()));
      try
      {
        paramUri = localContentProviderHolder.provider.openFile(null, paramUri, "r", null, localBinder);
        sCallerIdentity.remove();
        removeContentProviderExternalUnchecked(str, null, i);
        return paramUri;
      }
      catch (FileNotFoundException paramUri)
      {
        paramUri = paramUri;
        sCallerIdentity.remove();
        removeContentProviderExternalUnchecked(str, null, i);
        return null;
      }
      finally
      {
        paramUri = finally;
        sCallerIdentity.remove();
        removeContentProviderExternalUnchecked(str, null, i);
        throw paramUri;
      }
    }
    Slog.d(TAG, "Failed to get provider for authority '" + str + "'");
    return null;
  }
  
  public void overridePendingTransition(IBinder paramIBinder, String paramString, int paramInt1, int paramInt2)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        return;
      }
      long l = Binder.clearCallingIdentity();
      if ((paramIBinder.state == ActivityStack.ActivityState.RESUMED) || (paramIBinder.state == ActivityStack.ActivityState.PAUSING)) {
        this.mWindowManager.overridePendingAppTransition(paramString, paramInt1, paramInt2, null);
      }
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public IBinder peekService(Intent paramIntent, String paramString1, String paramString2)
  {
    enforceNotIsolatedCaller("peekService");
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    if (paramString2 == null) {
      throw new IllegalArgumentException("callingPackage cannot be null");
    }
    try
    {
      boostPriorityForLockedSection();
      paramIntent = this.mServices.peekServiceLocked(paramIntent, paramString1, paramString2);
      return paramIntent;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void pendingAssistExtrasTimedOut(PendingAssistExtras paramPendingAssistExtras)
  {
    try
    {
      boostPriorityForLockedSection();
      this.mPendingAssistExtras.remove(paramPendingAssistExtras);
      Object localObject = paramPendingAssistExtras.receiver;
      resetPriorityAfterLockedSection();
      if (localObject != null)
      {
        localObject = new Bundle();
        ((Bundle)localObject).putBundle("receiverExtras", paramPendingAssistExtras.receiverExtras);
      }
      return;
    }
    finally
    {
      try
      {
        paramPendingAssistExtras.receiver.send(0, (Bundle)localObject);
        return;
      }
      catch (RemoteException paramPendingAssistExtras) {}
      paramPendingAssistExtras = finally;
      resetPriorityAfterLockedSection();
    }
  }
  
  final void performAppGcLocked(ProcessRecord paramProcessRecord)
  {
    try
    {
      paramProcessRecord.lastRequestedGc = SystemClock.uptimeMillis();
      if (paramProcessRecord.thread != null)
      {
        if (paramProcessRecord.reportLowMemory)
        {
          paramProcessRecord.reportLowMemory = false;
          paramProcessRecord.thread.scheduleLowMemory();
          return;
        }
        paramProcessRecord.thread.processInBackground();
        return;
      }
    }
    catch (Exception paramProcessRecord) {}
  }
  
  final void performAppGcsIfAppropriateLocked()
  {
    if (canGcNowLocked())
    {
      performAppGcsLocked();
      return;
    }
    scheduleAppGcsLocked();
  }
  
  final void performAppGcsLocked()
  {
    if (this.mProcessesToGc.size() <= 0) {
      return;
    }
    if (canGcNowLocked())
    {
      while (this.mProcessesToGc.size() > 0)
      {
        ProcessRecord localProcessRecord = (ProcessRecord)this.mProcessesToGc.remove(0);
        if ((localProcessRecord.curRawAdj > 200) || (localProcessRecord.reportLowMemory))
        {
          if (localProcessRecord.lastRequestedGc + 60000L <= SystemClock.uptimeMillis())
          {
            performAppGcLocked(localProcessRecord);
            scheduleAppGcsLocked();
            return;
          }
          addProcessToGcListLocked(localProcessRecord);
        }
      }
      scheduleAppGcsLocked();
    }
  }
  
  public void performIdleMaintenance()
  {
    if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
      throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }
    for (;;)
    {
      int j;
      try
      {
        boostPriorityForLockedSection();
        long l1 = SystemClock.uptimeMillis();
        long l2 = l1 - this.mLastIdleTime;
        long l3 = getLowRamTimeSinceIdle(l1);
        this.mLastIdleTime = l1;
        this.mLowRamTimeSinceLastIdle = 0L;
        if (this.mLowRamStartTime != 0L) {
          this.mLowRamStartTime = l1;
        }
        Object localObject1 = new StringBuilder(128);
        ((StringBuilder)localObject1).append("Idle maintenance over ");
        TimeUtils.formatDuration(l2, (StringBuilder)localObject1);
        ((StringBuilder)localObject1).append(" low RAM for ");
        TimeUtils.formatDuration(l3, (StringBuilder)localObject1);
        Slog.i(TAG, ((StringBuilder)localObject1).toString());
        if (l3 <= l2 / 3L) {
          break label528;
        }
        i = 1;
        j = this.mLruProcesses.size() - 1;
        if (j >= 0)
        {
          localObject1 = (ProcessRecord)this.mLruProcesses.get(j);
          if (((ProcessRecord)localObject1).notCachedSinceIdle)
          {
            if ((((ProcessRecord)localObject1).setProcState != 5) && (((ProcessRecord)localObject1).setProcState >= 4) && (((ProcessRecord)localObject1).setProcState <= 10) && (i != 0) && (((ProcessRecord)localObject1).initialIdlePss != 0L) && (((ProcessRecord)localObject1).lastPss > ((ProcessRecord)localObject1).initialIdlePss * 3L / 2L))
            {
              StringBuilder localStringBuilder = new StringBuilder(128);
              localStringBuilder.append("Kill");
              localStringBuilder.append(((ProcessRecord)localObject1).processName);
              localStringBuilder.append(" in idle maint: pss=");
              localStringBuilder.append(((ProcessRecord)localObject1).lastPss);
              localStringBuilder.append(", swapPss=");
              localStringBuilder.append(((ProcessRecord)localObject1).lastSwapPss);
              localStringBuilder.append(", initialPss=");
              localStringBuilder.append(((ProcessRecord)localObject1).initialIdlePss);
              localStringBuilder.append(", period=");
              TimeUtils.formatDuration(l2, localStringBuilder);
              localStringBuilder.append(", lowRamPeriod=");
              TimeUtils.formatDuration(l3, localStringBuilder);
              Slog.wtfQuiet(TAG, localStringBuilder.toString());
              ((ProcessRecord)localObject1).kill("idle maint (pss " + ((ProcessRecord)localObject1).lastPss + " from " + ((ProcessRecord)localObject1).initialIdlePss + ")", true);
            }
          }
          else if ((((ProcessRecord)localObject1).setProcState < 12) && (((ProcessRecord)localObject1).setProcState > -1))
          {
            ((ProcessRecord)localObject1).notCachedSinceIdle = true;
            ((ProcessRecord)localObject1).initialIdlePss = 0L;
            ((ProcessRecord)localObject1).nextPssTime = ProcessList.computeNextPssTime(((ProcessRecord)localObject1).setProcState, true, this.mTestPssMode, isSleepingLocked(), l1);
          }
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      this.mHandler.removeMessages(39);
      this.mHandler.sendEmptyMessageDelayed(39, 120000L);
      resetPriorityAfterLockedSection();
      return;
      j -= 1;
      continue;
      label528:
      int i = 0;
    }
  }
  
  /* Error */
  public void positionTaskInStack(int paramInt1, int paramInt2, int paramInt3)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 10491
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: iload_2
    //   11: ifne +37 -> 48
    //   14: new 2386	java/lang/IllegalArgumentException
    //   17: dup
    //   18: new 1066	java/lang/StringBuilder
    //   21: dup
    //   22: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   25: ldc_w 10493
    //   28: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   31: iload_1
    //   32: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   35: ldc_w 10495
    //   38: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   41: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   44: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   47: athrow
    //   48: aload_0
    //   49: monitorenter
    //   50: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   53: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   56: lstore 4
    //   58: getstatic 8560	com/android/server/am/ActivityManagerDebugConfig:DEBUG_STACK	Z
    //   61: ifeq +50 -> 111
    //   64: getstatic 1168	com/android/server/am/ActivityManagerService:TAG_STACK	Ljava/lang/String;
    //   67: new 1066	java/lang/StringBuilder
    //   70: dup
    //   71: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   74: ldc_w 10497
    //   77: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   80: iload_1
    //   81: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   84: ldc_w 10499
    //   87: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   90: iload_2
    //   91: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   94: ldc_w 10501
    //   97: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   100: iload_3
    //   101: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   104: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   107: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   110: pop
    //   111: aload_0
    //   112: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   115: iload_1
    //   116: iload_2
    //   117: iload_3
    //   118: invokevirtual 10504	com/android/server/am/ActivityStackSupervisor:positionTaskInStackLocked	(III)V
    //   121: lload 4
    //   123: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   126: aload_0
    //   127: monitorexit
    //   128: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   131: return
    //   132: astore 6
    //   134: lload 4
    //   136: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   139: aload 6
    //   141: athrow
    //   142: astore 6
    //   144: aload_0
    //   145: monitorexit
    //   146: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   149: aload 6
    //   151: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	152	0	this	ActivityManagerService
    //   0	152	1	paramInt1	int
    //   0	152	2	paramInt2	int
    //   0	152	3	paramInt3	int
    //   56	79	4	l	long
    //   132	8	6	localObject1	Object
    //   142	8	6	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   58	111	132	finally
    //   111	121	132	finally
    //   50	58	142	finally
    //   121	126	142	finally
    //   134	142	142	finally
  }
  
  void postFinishBooting(boolean paramBoolean1, boolean paramBoolean2)
  {
    int j = 1;
    MainHandler localMainHandler1 = this.mHandler;
    MainHandler localMainHandler2 = this.mHandler;
    int i;
    if (paramBoolean1)
    {
      i = 1;
      if (!paramBoolean2) {
        break label47;
      }
    }
    for (;;)
    {
      localMainHandler1.sendMessage(localMainHandler2.obtainMessage(45, i, j));
      return;
      i = 0;
      break;
      label47:
      j = 0;
    }
  }
  
  void printOomLevel(PrintWriter paramPrintWriter, String paramString, int paramInt)
  {
    paramPrintWriter.print("    ");
    if (paramInt >= 0)
    {
      paramPrintWriter.print(' ');
      if (paramInt < 10) {
        paramPrintWriter.print(' ');
      }
    }
    for (;;)
    {
      paramPrintWriter.print(paramInt);
      paramPrintWriter.print(": ");
      paramPrintWriter.print(paramString);
      paramPrintWriter.print(" (");
      paramPrintWriter.print(stringifySize(this.mProcessList.getMemLevel(paramInt), 1024));
      paramPrintWriter.println(")");
      return;
      if (paramInt > -10) {
        paramPrintWriter.print(' ');
      }
    }
  }
  
  public boolean profileControl(String paramString, int paramInt1, boolean paramBoolean, ProfilerInfo paramProfilerInfo, int paramInt2)
    throws RemoteException
  {
    try
    {
      try
      {
        boostPriorityForLockedSection();
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
          throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      ProcessRecord localProcessRecord;
      return true;
    }
    catch (RemoteException paramString)
    {
      throw new IllegalStateException("Process disappeared");
    }
    finally
    {
      if ((paramProfilerInfo != null) && (paramProfilerInfo.profileFd != null)) {}
      try
      {
        paramProfilerInfo.profileFd.close();
        throw paramString;
        if ((paramBoolean) && ((paramProfilerInfo == null) || (paramProfilerInfo.profileFd == null))) {
          throw new IllegalArgumentException("null profile info or fd");
        }
        localProcessRecord = null;
        if (paramString != null) {
          localProcessRecord = findProcessLocked(paramString, paramInt1, "profileControl");
        }
        if ((paramBoolean) && ((localProcessRecord == null) || (localProcessRecord.thread == null))) {
          throw new IllegalArgumentException("Unknown process: " + paramString);
        }
        if (paramBoolean)
        {
          stopProfilerLocked(null, 0);
          setProfileApp(localProcessRecord.info, localProcessRecord.processName, paramProfilerInfo);
          this.mProfileProc = localProcessRecord;
          this.mProfileType = paramInt2;
          paramString = paramProfilerInfo.profileFd;
        }
        for (;;)
        {
          try
          {
            paramString = paramString.dup();
            paramProfilerInfo.profileFd = paramString;
            localProcessRecord.thread.profilerControl(paramBoolean, paramProfilerInfo, paramInt2);
            this.mProfileFd = null;
            resetPriorityAfterLockedSection();
            if ((paramProfilerInfo == null) || (paramProfilerInfo.profileFd == null)) {}
          }
          catch (IOException paramString)
          {
            try
            {
              paramProfilerInfo.profileFd.close();
              return true;
            }
            catch (IOException paramString) {}
            paramString = paramString;
            paramString = null;
            continue;
          }
          stopProfilerLocked(localProcessRecord, paramInt2);
          if (paramProfilerInfo != null)
          {
            paramString = paramProfilerInfo.profileFd;
            if (paramString != null) {
              try
              {
                paramProfilerInfo.profileFd.close();
              }
              catch (IOException paramString) {}
            }
          }
        }
      }
      catch (IOException paramProfilerInfo)
      {
        for (;;) {}
      }
    }
  }
  
  public final void publishContentProviders(IApplicationThread paramIApplicationThread, List<IActivityManager.ContentProviderHolder> paramList)
  {
    if (paramList == null) {
      return;
    }
    enforceNotIsolatedCaller("publishContentProviders");
    ProcessRecord localProcessRecord;
    try
    {
      boostPriorityForLockedSection();
      localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
      if (ActivityManagerDebugConfig.DEBUG_MU) {
        Slog.v(TAG_MU, "ProcessRecord uid = " + localProcessRecord.uid);
      }
      if (localProcessRecord == null) {
        throw new SecurityException("Unable to find app for caller " + paramIApplicationThread + " (pid=" + Binder.getCallingPid() + ") when publishing content providers");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    long l = Binder.clearCallingIdentity();
    int i2 = paramList.size();
    int j = 0;
    IActivityManager.ContentProviderHolder localContentProviderHolder;
    int i;
    int k;
    int i1;
    if (j < i2)
    {
      localContentProviderHolder = (IActivityManager.ContentProviderHolder)paramList.get(j);
      if ((localContentProviderHolder == null) || (localContentProviderHolder.info == null) || (localContentProviderHolder.provider == null)) {
        break label468;
      }
      paramIApplicationThread = (ContentProviderRecord)localProcessRecord.pubProviders.get(localContentProviderHolder.info.name);
      if (ActivityManagerDebugConfig.DEBUG_MU) {
        Slog.v(TAG_MU, "ContentProviderRecord uid = " + paramIApplicationThread.uid);
      }
      if (paramIApplicationThread == null) {
        break label468;
      }
      Object localObject = new ComponentName(paramIApplicationThread.info.packageName, paramIApplicationThread.info.name);
      this.mProviderMap.putProviderByClass((ComponentName)localObject, paramIApplicationThread);
      localObject = paramIApplicationThread.info.authority.split(";");
      i = 0;
      while (i < localObject.length)
      {
        this.mProviderMap.putProviderByName(localObject[i], paramIApplicationThread);
        i += 1;
      }
      k = this.mLaunchingProviders.size();
      i1 = 0;
      i = 0;
    }
    for (;;)
    {
      int m;
      int n;
      if (i < k)
      {
        m = i;
        n = k;
        if (this.mLaunchingProviders.get(i) == paramIApplicationThread)
        {
          this.mLaunchingProviders.remove(i);
          i1 = 1;
          m = i - 1;
          n = k - 1;
        }
      }
      else
      {
        if (i1 != 0) {
          this.mHandler.removeMessages(59, localProcessRecord);
        }
        try
        {
          paramIApplicationThread.provider = localContentProviderHolder.provider;
          paramIApplicationThread.proc = localProcessRecord;
          paramIApplicationThread.notifyAll();
          updateOomAdjLocked(localProcessRecord);
          maybeUpdateProviderUsageStatsLocked(localProcessRecord, localContentProviderHolder.info.packageName, localContentProviderHolder.info.authority);
        }
        finally {}
        resetPriorityAfterLockedSection();
        return;
        label468:
        j += 1;
        break;
      }
      i = m + 1;
      k = n;
    }
  }
  
  public void publishService(IBinder paramIBinder1, Intent paramIntent, IBinder paramIBinder2)
  {
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    try
    {
      boostPriorityForLockedSection();
      if (!(paramIBinder1 instanceof ServiceRecord)) {
        throw new IllegalArgumentException("Invalid service token");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    this.mServices.publishServiceLocked((ServiceRecord)paramIBinder1, paramIntent, paramIBinder2);
    resetPriorityAfterLockedSection();
  }
  
  void recordPssSampleLocked(final ProcessRecord paramProcessRecord, int paramInt, long paramLong1, long paramLong2, long paramLong3, long paramLong4)
  {
    EventLogTags.writeAmPss(paramProcessRecord.pid, paramProcessRecord.uid, paramProcessRecord.processName, 1024L * paramLong1, 1024L * paramLong2, 1024L * paramLong3);
    paramProcessRecord.lastPssTime = paramLong4;
    paramProcessRecord.baseProcessTracker.addPss(paramLong1, paramLong2, true, paramProcessRecord.pkgList);
    if (ActivityManagerDebugConfig.DEBUG_PSS) {
      Slog.d(TAG_PSS, "PSS of " + paramProcessRecord.toShortString() + ": " + paramLong1 + " lastPss=" + paramProcessRecord.lastPss + " state=" + ProcessList.makeProcStateString(paramInt));
    }
    if (paramProcessRecord.initialIdlePss == 0L) {
      paramProcessRecord.initialIdlePss = paramLong1;
    }
    paramProcessRecord.lastPss = paramLong1;
    paramProcessRecord.lastSwapPss = paramLong3;
    if (paramInt >= 12)
    {
      paramProcessRecord.lastCachedPss = paramLong1;
      paramProcessRecord.lastCachedSwapPss = paramLong3;
    }
    SparseArray localSparseArray = (SparseArray)this.mMemWatchProcesses.getMap().get(paramProcessRecord.processName);
    Object localObject3 = null;
    Object localObject2 = localObject3;
    final Object localObject1;
    if (localSparseArray != null)
    {
      localObject2 = (Pair)localSparseArray.get(paramProcessRecord.uid);
      localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = (Pair)localSparseArray.get(0);
      }
      localObject2 = localObject3;
      if (localObject1 != null) {
        localObject2 = (Long)((Pair)localObject1).first;
      }
    }
    if ((localObject2 != null) && (1024L * paramLong1 >= ((Long)localObject2).longValue()) && (paramProcessRecord.thread != null) && (this.mMemWatchDumpProcName == null))
    {
      boolean bool2 = "1".equals(SystemProperties.get("ro.debuggable", "0"));
      boolean bool1 = bool2;
      if (!bool2)
      {
        bool1 = bool2;
        if ((paramProcessRecord.info.flags & 0x2) != 0) {
          bool1 = true;
        }
      }
      if (bool1)
      {
        Slog.w(TAG, "Process " + paramProcessRecord + " exceeded pss limit " + localObject2 + "; reporting");
        localObject1 = DumpHeapProvider.getJavaFile();
        this.mMemWatchDumpProcName = paramProcessRecord.processName;
        this.mMemWatchDumpFile = ((File)localObject1).toString();
        this.mMemWatchDumpPid = paramProcessRecord.pid;
        this.mMemWatchDumpUid = paramProcessRecord.uid;
        BackgroundThread.getHandler().post(new Runnable()
        {
          public void run()
          {
            ActivityManagerService.this.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
            IApplicationThread localIApplicationThread = null;
            ParcelFileDescriptor localParcelFileDescriptor3 = null;
            localParcelFileDescriptor2 = localParcelFileDescriptor3;
            Object localObject1 = localIApplicationThread;
            for (;;)
            {
              try
              {
                localObject1.delete();
                localParcelFileDescriptor2 = localParcelFileDescriptor3;
                localObject1 = localIApplicationThread;
                localParcelFileDescriptor3 = ParcelFileDescriptor.open(localObject1, 771751936);
                localParcelFileDescriptor2 = localParcelFileDescriptor3;
                localObject1 = localParcelFileDescriptor3;
                localIApplicationThread = paramProcessRecord.thread;
                if (localIApplicationThread != null)
                {
                  localParcelFileDescriptor2 = localParcelFileDescriptor3;
                  localObject1 = localParcelFileDescriptor3;
                }
              }
              catch (FileNotFoundException localFileNotFoundException)
              {
                ParcelFileDescriptor localParcelFileDescriptor1 = localParcelFileDescriptor2;
                localFileNotFoundException.printStackTrace();
                if (localParcelFileDescriptor2 == null) {
                  continue;
                }
                try
                {
                  localParcelFileDescriptor2.close();
                  return;
                }
                catch (IOException localIOException2)
                {
                  return;
                }
              }
              finally
              {
                if (localIOException2 != null) {}
                try
                {
                  localIOException2.close();
                  throw ((Throwable)localObject2);
                }
                catch (IOException localIOException3)
                {
                  continue;
                }
              }
              try
              {
                if (ActivityManagerDebugConfig.DEBUG_PSS)
                {
                  localParcelFileDescriptor2 = localParcelFileDescriptor3;
                  localObject1 = localParcelFileDescriptor3;
                  Slog.d(ActivityManagerService.-get3(), "Requesting dump heap from " + paramProcessRecord + " to " + localObject1);
                }
                localParcelFileDescriptor2 = localParcelFileDescriptor3;
                localObject1 = localParcelFileDescriptor3;
                localIApplicationThread.dumpHeap(true, localObject1.toString(), localParcelFileDescriptor3);
              }
              catch (RemoteException localRemoteException) {}
            }
            if (localParcelFileDescriptor3 != null) {}
            try
            {
              localParcelFileDescriptor3.close();
              return;
            }
            catch (IOException localIOException1) {}
          }
        });
      }
    }
    else
    {
      return;
    }
    Slog.w(TAG, "Process " + paramProcessRecord + " exceeded pss limit " + localObject2 + ", but debugging not enabled");
  }
  
  public boolean refContentProvider(IBinder paramIBinder, int paramInt1, int paramInt2)
  {
    boolean bool1 = false;
    try
    {
      ContentProviderConnection localContentProviderConnection = (ContentProviderConnection)paramIBinder;
      if (localContentProviderConnection == null) {
        throw new NullPointerException("connection is null");
      }
    }
    catch (ClassCastException localClassCastException)
    {
      paramIBinder = "refContentProvider: " + paramIBinder + " not a ContentProviderConnection";
      Slog.w(TAG, paramIBinder);
      throw new IllegalArgumentException(paramIBinder);
    }
    try
    {
      boostPriorityForLockedSection();
      if (paramInt1 > 0) {
        localClassCastException.numStableIncs += paramInt1;
      }
      paramInt1 += localClassCastException.stableCount;
      if (paramInt1 < 0) {
        throw new IllegalStateException("stableCount < 0: " + paramInt1);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if (paramInt2 > 0) {
      localClassCastException.numUnstableIncs += paramInt2;
    }
    paramInt2 += localClassCastException.unstableCount;
    if (paramInt2 < 0) {
      throw new IllegalStateException("unstableCount < 0: " + paramInt2);
    }
    if (paramInt1 + paramInt2 <= 0) {
      throw new IllegalStateException("ref counts can't go to zero here: stable=" + paramInt1 + " unstable=" + paramInt2);
    }
    localClassCastException.stableCount = paramInt1;
    localClassCastException.unstableCount = paramInt2;
    boolean bool2 = localClassCastException.dead;
    if (bool2) {}
    for (;;)
    {
      resetPriorityAfterLockedSection();
      return bool1;
      bool1 = true;
    }
  }
  
  public void registerProcessObserver(IProcessObserver paramIProcessObserver)
  {
    enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
    try
    {
      boostPriorityForLockedSection();
      this.mProcessObservers.register(paramIProcessObserver);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public Intent registerReceiver(IApplicationThread paramIApplicationThread, String paramString1, IIntentReceiver paramIIntentReceiver, IntentFilter paramIntentFilter, String paramString2, int paramInt)
  {
    enforceNotIsolatedCaller("registerReceiver");
    Object localObject1 = null;
    ProcessRecord localProcessRecord = null;
    try
    {
      boostPriorityForLockedSection();
      if (paramIApplicationThread == null) {
        break label367;
      }
      localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
      if (localProcessRecord != null) {
        break label92;
      }
      throw new SecurityException("Unable to find app for caller " + paramIApplicationThread + " (pid=" + Binder.getCallingPid() + ") when registering receiver " + paramIIntentReceiver);
    }
    finally {}
    resetPriorityAfterLockedSection();
    throw paramIApplicationThread;
    label92:
    label118:
    int j;
    int i;
    String str;
    label138:
    int k;
    Object localObject2;
    Object localObject3;
    label213:
    Object localObject4;
    int m;
    if ((localProcessRecord.info.uid == 1000) || (localProcessRecord.pkgList.containsKey(paramString1)))
    {
      j = localProcessRecord.info.uid;
      i = localProcessRecord.pid;
      str = paramString1;
      k = this.mUserController.handleIncomingUser(i, j, paramInt, true, 2, "registerReceiver", str);
      paramString1 = paramIntentFilter.actionsIterator();
      localObject2 = paramString1;
      if (paramString1 == null)
      {
        paramString1 = new ArrayList(1);
        paramString1.add(null);
        localObject2 = paramString1.iterator();
      }
      localObject3 = new int[2];
      localObject3[0] = -1;
      localObject3[1] = UserHandle.getUserId(j);
      if (!((Iterator)localObject2).hasNext()) {
        break label389;
      }
      localObject4 = (String)((Iterator)localObject2).next();
      paramInt = 0;
      m = localObject3.length;
      paramString1 = (String)localObject1;
    }
    for (;;)
    {
      int n;
      if (paramInt < m) {
        n = localObject3[paramInt];
      }
      label367:
      label389:
      label1055:
      for (;;)
      {
        try
        {
          localObject1 = (ArrayMap)this.mStickyBroadcasts.get(n);
          if (localObject1 == null) {
            break label1058;
          }
          localObject1 = (ArrayList)((ArrayMap)localObject1).get(localObject4);
          if (localObject1 == null) {
            break label1058;
          }
          if (paramString1 != null) {
            break label1055;
          }
          paramString1 = new ArrayList();
          paramString1.addAll((Collection)localObject1);
          break label1058;
        }
        finally {}
        if ("android".equals(paramString1)) {
          break label118;
        }
        throw new SecurityException("Given caller package " + paramString1 + " is not running in process " + localProcessRecord);
        str = null;
        j = Binder.getCallingUid();
        i = Binder.getCallingPid();
        break label138;
        localObject1 = paramString1;
        break label213;
        resetPriorityAfterLockedSection();
        localObject2 = null;
        paramString1 = null;
        if (localObject1 != null)
        {
          localObject3 = this.mContext.getContentResolver();
          paramInt = 0;
          m = ((ArrayList)localObject1).size();
          localObject2 = paramString1;
          if (paramInt < m)
          {
            localObject4 = (Intent)((ArrayList)localObject1).get(paramInt);
            localObject2 = paramString1;
            if (paramIntentFilter.match((ContentResolver)localObject3, (Intent)localObject4, true, TAG) >= 0)
            {
              localObject2 = paramString1;
              if (paramString1 == null) {
                localObject2 = new ArrayList();
              }
              ((ArrayList)localObject2).add(localObject4);
            }
            paramInt += 1;
            paramString1 = (String)localObject2;
            continue;
          }
        }
        if (localObject2 != null)
        {
          paramString1 = (Intent)((ArrayList)localObject2).get(0);
          if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG_BROADCAST, "Register receiver " + paramIntentFilter + ": " + paramString1);
          }
          if (paramIIntentReceiver == null) {
            return paramString1;
          }
        }
        else
        {
          paramString1 = null;
          continue;
        }
        try
        {
          boostPriorityForLockedSection();
          if (localProcessRecord != null) {
            if (localProcessRecord.thread != null)
            {
              localObject1 = localProcessRecord.thread.asBinder();
              paramIApplicationThread = paramIApplicationThread.asBinder();
              if (localObject1 == paramIApplicationThread) {}
            }
            else
            {
              resetPriorityAfterLockedSection();
              return null;
            }
          }
          localObject1 = (ReceiverList)this.mRegisteredReceivers.get(paramIIntentReceiver.asBinder());
          if (localObject1 != null) {
            continue;
          }
          paramIApplicationThread = new ReceiverList(this, localProcessRecord, i, j, k, paramIIntentReceiver);
          if (paramIApplicationThread.app == null) {
            continue;
          }
          paramIApplicationThread.app.receivers.add(paramIApplicationThread);
        }
        finally
        {
          try
          {
            paramIIntentReceiver.asBinder().linkToDeath(paramIApplicationThread, 0);
            paramIApplicationThread.linkedToDeath = true;
          }
          catch (RemoteException paramIApplicationThread)
          {
            resetPriorityAfterLockedSection();
            return paramString1;
          }
          paramIApplicationThread = finally;
          resetPriorityAfterLockedSection();
        }
        this.mRegisteredReceivers.put(paramIIntentReceiver.asBinder(), paramIApplicationThread);
        paramIIntentReceiver = new BroadcastFilter(paramIntentFilter, paramIApplicationThread, str, paramString2, j, k);
        paramIApplicationThread.add(paramIIntentReceiver);
        if (!paramIIntentReceiver.debugCheck()) {
          Slog.w(TAG, "==> For Dynamic broadcast");
        }
        this.mReceiverResolver.addFilter(paramIIntentReceiver);
        if (localObject2 != null)
        {
          paramIApplicationThread = new ArrayList();
          paramIApplicationThread.add(paramIIntentReceiver);
          i = ((ArrayList)localObject2).size();
          paramInt = 0;
          if (paramInt < i)
          {
            paramIIntentReceiver = (Intent)((ArrayList)localObject2).get(paramInt);
            paramIntentFilter = broadcastQueueForIntent(paramIIntentReceiver);
            paramIntentFilter.enqueueParallelBroadcastLocked(new BroadcastRecord(paramIntentFilter, paramIIntentReceiver, null, null, -1, -1, null, null, -1, null, paramIApplicationThread, null, 0, null, null, false, true, true, -1));
            paramIntentFilter.scheduleBroadcastsLocked();
            paramInt += 1;
            continue;
            if (((ReceiverList)localObject1).uid != j) {
              throw new IllegalArgumentException("Receiver requested to register for uid " + j + " was previously registered for uid " + ((ReceiverList)localObject1).uid);
            }
            if (((ReceiverList)localObject1).pid != i) {
              throw new IllegalArgumentException("Receiver requested to register for pid " + i + " was previously registered for pid " + ((ReceiverList)localObject1).pid);
            }
            paramIApplicationThread = (IApplicationThread)localObject1;
            if (((ReceiverList)localObject1).userId == k) {
              continue;
            }
            throw new IllegalArgumentException("Receiver requested to register for user " + k + " was previously registered for user " + ((ReceiverList)localObject1).userId);
          }
        }
        resetPriorityAfterLockedSection();
        return paramString1;
        break;
      }
      label1058:
      paramInt += 1;
    }
  }
  
  public void registerTaskStackListener(ITaskStackListener paramITaskStackListener)
    throws RemoteException
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "registerTaskStackListener()");
    try
    {
      boostPriorityForLockedSection();
      if (paramITaskStackListener != null) {
        this.mTaskStackListeners.register(paramITaskStackListener);
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void registerUidObserver(IUidObserver paramIUidObserver, int paramInt)
  {
    enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerUidObserver()");
    try
    {
      boostPriorityForLockedSection();
      this.mUidObservers.register(paramIUidObserver, Integer.valueOf(paramInt));
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void registerUserSwitchObserver(IUserSwitchObserver paramIUserSwitchObserver, String paramString)
  {
    this.mUserController.registerUserSwitchObserver(paramIUserSwitchObserver, paramString);
  }
  
  /* Error */
  public boolean releaseActivityInstance(IBinder paramIBinder)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   8: lstore_2
    //   9: aload_1
    //   10: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   13: astore_1
    //   14: aload_1
    //   15: ifnonnull +14 -> 29
    //   18: lload_2
    //   19: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   22: aload_0
    //   23: monitorexit
    //   24: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   27: iconst_0
    //   28: ireturn
    //   29: aload_1
    //   30: getfield 3550	com/android/server/am/ActivityRecord:task	Lcom/android/server/am/TaskRecord;
    //   33: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   36: aload_1
    //   37: ldc_w 10670
    //   40: invokevirtual 10674	com/android/server/am/ActivityStack:safelyDestroyActivityLocked	(Lcom/android/server/am/ActivityRecord;Ljava/lang/String;)Z
    //   43: istore 4
    //   45: lload_2
    //   46: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   49: aload_0
    //   50: monitorexit
    //   51: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   54: iload 4
    //   56: ireturn
    //   57: astore_1
    //   58: lload_2
    //   59: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   62: aload_1
    //   63: athrow
    //   64: astore_1
    //   65: aload_0
    //   66: monitorexit
    //   67: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   70: aload_1
    //   71: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	72	0	this	ActivityManagerService
    //   0	72	1	paramIBinder	IBinder
    //   8	51	2	l	long
    //   43	12	4	bool	boolean
    // Exception table:
    //   from	to	target	type
    //   9	14	57	finally
    //   29	45	57	finally
    //   2	9	64	finally
    //   18	22	64	finally
    //   45	49	64	finally
    //   58	64	64	finally
  }
  
  public void releasePersistableUriPermission(Uri paramUri, int paramInt1, int paramInt2)
  {
    enforceNotIsolatedCaller("releasePersistableUriPermission");
    Preconditions.checkFlagsArgument(paramInt1, 3);
    boolean bool1;
    UriPermission localUriPermission1;
    UriPermission localUriPermission2;
    try
    {
      boostPriorityForLockedSection();
      int i = Binder.getCallingUid();
      bool1 = false;
      localUriPermission1 = findUriPermissionLocked(i, new GrantUri(paramInt2, paramUri, false));
      localUriPermission2 = findUriPermissionLocked(i, new GrantUri(paramInt2, paramUri, true));
      if ((localUriPermission1 == null) && (localUriPermission2 == null)) {
        throw new SecurityException("No permission grants found for UID " + i + " and Uri " + paramUri.toSafeString());
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if (localUriPermission1 != null)
    {
      bool1 = localUriPermission1.releasePersistableModes(paramInt1);
      removeUriPermissionIfNeededLocked(localUriPermission1);
    }
    boolean bool2 = bool1;
    if (localUriPermission2 != null)
    {
      bool2 = bool1 | localUriPermission2.releasePersistableModes(paramInt1);
      removeUriPermissionIfNeededLocked(localUriPermission2);
    }
    if (bool2) {
      schedulePersistUriGrants();
    }
    resetPriorityAfterLockedSection();
  }
  
  /* Error */
  public void releaseSomeActivities(IApplicationThread paramIApplicationThread)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   8: lstore_2
    //   9: aload_0
    //   10: aload_1
    //   11: invokevirtual 4710	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
    //   14: astore_1
    //   15: aload_0
    //   16: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   19: aload_1
    //   20: ldc_w 10686
    //   23: invokevirtual 10690	com/android/server/am/ActivityStackSupervisor:releaseSomeActivitiesLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;)V
    //   26: lload_2
    //   27: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   30: aload_0
    //   31: monitorexit
    //   32: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   35: return
    //   36: astore_1
    //   37: lload_2
    //   38: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   41: aload_1
    //   42: athrow
    //   43: astore_1
    //   44: aload_0
    //   45: monitorexit
    //   46: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   49: aload_1
    //   50: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	51	0	this	ActivityManagerService
    //   0	51	1	paramIApplicationThread	IApplicationThread
    //   8	30	2	l	long
    // Exception table:
    //   from	to	target	type
    //   9	26	36	finally
    //   2	9	43	finally
    //   26	30	43	finally
    //   37	43	43	finally
  }
  
  public void removeContentProvider(IBinder paramIBinder, boolean paramBoolean)
  {
    enforceNotIsolatedCaller("removeContentProvider");
    long l = Binder.clearCallingIdentity();
    try
    {
      try
      {
        boostPriorityForLockedSection();
        ContentProviderConnection localContentProviderConnection;
        paramIBinder = finally;
      }
      finally
      {
        try
        {
          localContentProviderConnection = (ContentProviderConnection)paramIBinder;
          if (localContentProviderConnection != null) {
            break label99;
          }
          throw new NullPointerException("connection is null");
        }
        catch (ClassCastException localClassCastException)
        {
          paramIBinder = "removeContentProvider: " + paramIBinder + " not a ContentProviderConnection";
          Slog.w(TAG, paramIBinder);
          throw new IllegalArgumentException(paramIBinder);
        }
        paramIBinder = finally;
        resetPriorityAfterLockedSection();
      }
      if (!decProviderCountLocked(localClassCastException, null, null, paramBoolean)) {
        break label115;
      }
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    label99:
    updateOomAdjLocked();
    label115:
    resetPriorityAfterLockedSection();
    Binder.restoreCallingIdentity(l);
  }
  
  public void removeContentProviderExternal(String paramString, IBinder paramIBinder)
  {
    enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call removeContentProviderExternal()");
    int i = UserHandle.getCallingUserId();
    long l = Binder.clearCallingIdentity();
    try
    {
      removeContentProviderExternalUnchecked(paramString, paramIBinder, i);
      return;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  final boolean removeDyingProviderLocked(ProcessRecord paramProcessRecord, ContentProviderRecord paramContentProviderRecord, boolean paramBoolean)
  {
    boolean bool = this.mLaunchingProviders.contains(paramContentProviderRecord);
    if ((!bool) || (paramBoolean)) {}
    int i;
    try
    {
      paramContentProviderRecord.launchingApp = null;
      paramContentProviderRecord.notifyAll();
      this.mProviderMap.removeProviderByClass(paramContentProviderRecord.name, UserHandle.getUserId(paramContentProviderRecord.uid));
      localObject = paramContentProviderRecord.info.authority.split(";");
      i = 0;
      while (i < localObject.length)
      {
        this.mProviderMap.removeProviderByName(localObject[i], UserHandle.getUserId(paramContentProviderRecord.uid));
        i += 1;
      }
      if (i < 0) {
        break label421;
      }
    }
    finally {}
    Object localObject = (ContentProviderConnection)paramContentProviderRecord.connections.get(i);
    ProcessRecord localProcessRecord;
    if ((!((ContentProviderConnection)localObject).waiting) || (!bool) || (paramBoolean))
    {
      localProcessRecord = ((ContentProviderConnection)localObject).client;
      ((ContentProviderConnection)localObject).dead = true;
      if (((ContentProviderConnection)localObject).stableCount <= 0) {
        break label328;
      }
      if ((!localProcessRecord.persistent) && (localProcessRecord.thread != null) && (localProcessRecord.pid != 0) && (localProcessRecord.pid != MY_PID))
      {
        StringBuilder localStringBuilder = new StringBuilder().append("depends on provider ").append(paramContentProviderRecord.name.flattenToShortString()).append(" in dying proc ");
        if (paramProcessRecord == null) {
          break label312;
        }
        localObject = paramProcessRecord.processName;
        label253:
        localStringBuilder = localStringBuilder.append((String)localObject).append(" (adj ");
        if (paramProcessRecord == null) {
          break label320;
        }
        localObject = Integer.valueOf(paramProcessRecord.setAdj);
        label281:
        localProcessRecord.kill(localObject + ")", true);
      }
    }
    for (;;)
    {
      i -= 1;
      break;
      label312:
      localObject = "??";
      break label253;
      label320:
      localObject = "??";
      break label281;
      label328:
      if ((localProcessRecord.thread == null) || (((ContentProviderConnection)localObject).provider.provider == null)) {
        continue;
      }
      try
      {
        localProcessRecord.thread.unstableProviderDied(((ContentProviderConnection)localObject).provider.provider.asBinder());
        paramContentProviderRecord.connections.remove(i);
        if (!((ContentProviderConnection)localObject).client.conProviders.remove(localObject)) {
          continue;
        }
        stopAssociationLocked(localProcessRecord.uid, localProcessRecord.processName, paramContentProviderRecord.uid, paramContentProviderRecord.name);
        continue;
        label421:
        if ((bool) && (paramBoolean)) {
          this.mLaunchingProviders.remove(paramContentProviderRecord);
        }
        return bool;
      }
      catch (RemoteException localRemoteException)
      {
        for (;;) {}
      }
    }
  }
  
  final void removeLruProcessLocked(ProcessRecord paramProcessRecord)
  {
    int i = this.mLruProcesses.lastIndexOf(paramProcessRecord);
    if (i >= 0)
    {
      if (!paramProcessRecord.killed)
      {
        Slog.wtfStack(TAG, "Removing process that hasn't been killed: " + paramProcessRecord);
        Process.killProcessQuiet(paramProcessRecord.pid);
        killProcessGroup(paramProcessRecord.uid, paramProcessRecord.pid);
      }
      if (i <= this.mLruProcessActivityStart) {
        this.mLruProcessActivityStart -= 1;
      }
      if (i <= this.mLruProcessServiceStart) {
        this.mLruProcessServiceStart -= 1;
      }
      this.mLruProcesses.remove(i);
    }
  }
  
  boolean removeProcessLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2, String paramString)
  {
    ??? = paramProcessRecord.processName;
    int i = paramProcessRecord.uid;
    if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
      Slog.d(TAG_PROCESSES, "Force removing proc " + paramProcessRecord.toShortString() + " (" + (String)??? + "/" + i + ")");
    }
    if ((ProcessRecord)this.mProcessNames.get((String)???, i) != paramProcessRecord)
    {
      Slog.w(TAG, "Ignoring remove of inactive process: " + paramProcessRecord);
      return false;
    }
    removeProcessNameLocked((String)???, i);
    if (this.mHeavyWeightProcess == paramProcessRecord)
    {
      this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
      this.mHeavyWeightProcess = null;
    }
    boolean bool1 = false;
    boolean bool3 = false;
    if ((paramProcessRecord.pid > 0) && (paramProcessRecord.pid != MY_PID)) {
      i = paramProcessRecord.pid;
    }
    do
    {
      for (;;)
      {
        boolean bool4;
        boolean bool2;
        synchronized (this.mPidsSelfLocked)
        {
          this.mPidsSelfLocked.remove(i);
          this.mHandler.removeMessages(20, paramProcessRecord);
          this.mBatteryStatsService.noteProcessFinish(paramProcessRecord.processName, paramProcessRecord.info.uid);
          if (paramProcessRecord.isolated) {
            this.mBatteryStatsService.removeIsolatedUid(paramProcessRecord.uid, paramProcessRecord.info.uid);
          }
          bool4 = false;
          bool1 = bool3;
          bool2 = bool4;
          if (paramProcessRecord.persistent)
          {
            if (paramProcessRecord.isolated)
            {
              bool2 = bool4;
              bool1 = bool3;
            }
          }
          else
          {
            paramProcessRecord.kill(paramString, true);
            handleAppDiedLocked(paramProcessRecord, bool2, paramBoolean2);
            paramBoolean2 = bool1;
            if (bool2)
            {
              removeLruProcessLocked(paramProcessRecord);
              addAppLocked(paramProcessRecord.info, false, null);
              paramBoolean2 = bool1;
            }
            if ((!paramBoolean2) && (!paramBoolean1)) {
              break;
            }
            return paramBoolean2;
          }
        }
        if (!paramBoolean1)
        {
          bool2 = true;
          bool1 = bool3;
        }
        else
        {
          bool1 = true;
          bool2 = bool4;
          continue;
          this.mRemovedProcesses.add(paramProcessRecord);
          paramBoolean2 = bool1;
        }
      }
    } while (!this.mEmbryoManager.checkBackgroundLevel(this.mLruProcesses));
    this.mEmbryoManager.prepare(paramProcessRecord);
    return paramBoolean2;
  }
  
  void removeReceiverLocked(ReceiverList paramReceiverList)
  {
    this.mRegisteredReceivers.remove(paramReceiverList.receiver.asBinder());
    int i = paramReceiverList.size() - 1;
    while (i >= 0)
    {
      this.mReceiverResolver.removeFilter((BroadcastFilter)paramReceiverList.get(i));
      i -= 1;
    }
  }
  
  protected void removeRestartWhitelist(String paramString)
  {
    synchronized (sRestartWhiteList)
    {
      sRestartWhiteList.remove(paramString);
      return;
    }
  }
  
  /* Error */
  public void removeStack(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 10737
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: iload_1
    //   11: ifne +14 -> 25
    //   14: new 2386	java/lang/IllegalArgumentException
    //   17: dup
    //   18: ldc_w 10739
    //   21: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   24: athrow
    //   25: aload_0
    //   26: monitorenter
    //   27: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   30: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   33: lstore_2
    //   34: aload_0
    //   35: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   38: iload_1
    //   39: invokevirtual 8631	com/android/server/am/ActivityStackSupervisor:getStack	(I)Lcom/android/server/am/ActivityStack;
    //   42: astore 4
    //   44: aload 4
    //   46: ifnonnull +13 -> 59
    //   49: lload_2
    //   50: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   53: aload_0
    //   54: monitorexit
    //   55: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   58: return
    //   59: aload 4
    //   61: invokevirtual 10742	com/android/server/am/ActivityStack:getAllTasks	()Ljava/util/ArrayList;
    //   64: astore 4
    //   66: aload 4
    //   68: invokevirtual 2580	java/util/ArrayList:size	()I
    //   71: iconst_1
    //   72: isub
    //   73: istore_1
    //   74: iload_1
    //   75: iflt +29 -> 104
    //   78: aload_0
    //   79: aload 4
    //   81: iload_1
    //   82: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   85: checkcast 3516	com/android/server/am/TaskRecord
    //   88: getfield 3553	com/android/server/am/TaskRecord:taskId	I
    //   91: iconst_1
    //   92: iconst_1
    //   93: invokespecial 1021	com/android/server/am/ActivityManagerService:removeTaskByIdLocked	(IZZ)Z
    //   96: pop
    //   97: iload_1
    //   98: iconst_1
    //   99: isub
    //   100: istore_1
    //   101: goto -27 -> 74
    //   104: lload_2
    //   105: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   108: aload_0
    //   109: monitorexit
    //   110: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   113: return
    //   114: astore 4
    //   116: lload_2
    //   117: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   120: aload 4
    //   122: athrow
    //   123: astore 4
    //   125: aload_0
    //   126: monitorexit
    //   127: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   130: aload 4
    //   132: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	133	0	this	ActivityManagerService
    //   0	133	1	paramInt	int
    //   33	84	2	l	long
    //   42	38	4	localObject1	Object
    //   114	7	4	localObject2	Object
    //   123	8	4	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   34	44	114	finally
    //   59	74	114	finally
    //   78	97	114	finally
    //   27	34	123	finally
    //   49	53	123	finally
    //   104	108	123	finally
    //   116	123	123	finally
  }
  
  /* Error */
  public boolean removeTask(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 6635
    //   4: ldc_w 10745
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_0
    //   11: monitorenter
    //   12: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   15: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   18: lstore_2
    //   19: aload_0
    //   20: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   23: iload_1
    //   24: iconst_0
    //   25: iconst_m1
    //   26: invokevirtual 5476	com/android/server/am/ActivityStackSupervisor:anyTaskForIdLocked	(IZI)Lcom/android/server/am/TaskRecord;
    //   29: astore 5
    //   31: aload 5
    //   33: ifnonnull +41 -> 74
    //   36: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   39: new 1066	java/lang/StringBuilder
    //   42: dup
    //   43: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   46: ldc_w 5490
    //   49: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   52: iload_1
    //   53: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   56: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   59: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   62: pop
    //   63: lload_2
    //   64: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   67: aload_0
    //   68: monitorexit
    //   69: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   72: iconst_0
    //   73: ireturn
    //   74: aload_0
    //   75: aload 5
    //   77: invokespecial 10747	com/android/server/am/ActivityManagerService:removeTaskByRecordLocked	(Lcom/android/server/am/TaskRecord;)Z
    //   80: istore 4
    //   82: lload_2
    //   83: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   86: aload_0
    //   87: monitorexit
    //   88: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   91: iload 4
    //   93: ireturn
    //   94: astore 5
    //   96: lload_2
    //   97: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   100: aload 5
    //   102: athrow
    //   103: astore 5
    //   105: aload_0
    //   106: monitorexit
    //   107: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   110: aload 5
    //   112: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	113	0	this	ActivityManagerService
    //   0	113	1	paramInt	int
    //   18	79	2	l	long
    //   80	12	4	bool	boolean
    //   29	47	5	localTaskRecord	TaskRecord
    //   94	7	5	localObject1	Object
    //   103	8	5	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   19	31	94	finally
    //   36	63	94	finally
    //   74	82	94	finally
    //   12	19	103	finally
    //   63	67	103	finally
    //   82	86	103	finally
    //   96	103	103	finally
  }
  
  void removeUriPermissionIfNeededLocked(UriPermission paramUriPermission)
  {
    if (paramUriPermission.modeFlags == 0)
    {
      ArrayMap localArrayMap = (ArrayMap)this.mGrantedUriPermissions.get(paramUriPermission.targetUid);
      if (localArrayMap != null)
      {
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
          Slog.v(TAG_URI_PERMISSION, "Removing " + paramUriPermission.targetUid + " permission to " + paramUriPermission.uri);
        }
        localArrayMap.remove(paramUriPermission.uri);
        if (localArrayMap.isEmpty()) {
          this.mGrantedUriPermissions.remove(paramUriPermission.targetUid);
        }
      }
    }
  }
  
  public void reportActivityFullyDrawn(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        return;
      }
      paramIBinder.reportFullyDrawnLocked();
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void reportAssistContextExtras(IBinder paramIBinder, Bundle paramBundle, AssistStructure paramAssistStructure, AssistContent paramAssistContent, Uri paramUri)
  {
    // Byte code:
    //   0: aload_1
    //   1: checkcast 147	com/android/server/am/ActivityManagerService$PendingAssistExtras
    //   4: astore 9
    //   6: aload 9
    //   8: monitorenter
    //   9: aload 9
    //   11: aload_2
    //   12: putfield 9046	com/android/server/am/ActivityManagerService$PendingAssistExtras:result	Landroid/os/Bundle;
    //   15: aload 9
    //   17: aload_3
    //   18: putfield 10762	com/android/server/am/ActivityManagerService$PendingAssistExtras:structure	Landroid/app/assist/AssistStructure;
    //   21: aload 9
    //   23: aload 4
    //   25: putfield 10765	com/android/server/am/ActivityManagerService$PendingAssistExtras:content	Landroid/app/assist/AssistContent;
    //   28: aload 5
    //   30: ifnull +16 -> 46
    //   33: aload 9
    //   35: getfield 3054	com/android/server/am/ActivityManagerService$PendingAssistExtras:extras	Landroid/os/Bundle;
    //   38: ldc_w 10767
    //   41: aload 5
    //   43: invokevirtual 10771	android/os/Bundle:putParcelable	(Ljava/lang/String;Landroid/os/Parcelable;)V
    //   46: aload 9
    //   48: iconst_1
    //   49: putfield 9041	com/android/server/am/ActivityManagerService$PendingAssistExtras:haveResult	Z
    //   52: aload 9
    //   54: invokevirtual 10772	com/android/server/am/ActivityManagerService$PendingAssistExtras:notifyAll	()V
    //   57: aload 9
    //   59: getfield 10773	com/android/server/am/ActivityManagerService$PendingAssistExtras:intent	Landroid/content/Intent;
    //   62: ifnonnull +17 -> 79
    //   65: aload 9
    //   67: getfield 10436	com/android/server/am/ActivityManagerService$PendingAssistExtras:receiver	Lcom/android/internal/os/IResultReceiver;
    //   70: astore_1
    //   71: aload_1
    //   72: ifnonnull +7 -> 79
    //   75: aload 9
    //   77: monitorexit
    //   78: return
    //   79: aload 9
    //   81: monitorexit
    //   82: aconst_null
    //   83: astore_1
    //   84: aload_0
    //   85: monitorenter
    //   86: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   89: aload_0
    //   90: aload 9
    //   92: aload_2
    //   93: invokespecial 9048	com/android/server/am/ActivityManagerService:buildAssistBundleLocked	(Lcom/android/server/am/ActivityManagerService$PendingAssistExtras;Landroid/os/Bundle;)V
    //   96: aload_0
    //   97: getfield 1460	com/android/server/am/ActivityManagerService:mPendingAssistExtras	Ljava/util/ArrayList;
    //   100: aload 9
    //   102: invokevirtual 2970	java/util/ArrayList:remove	(Ljava/lang/Object;)Z
    //   105: istore 6
    //   107: aload_0
    //   108: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   111: aload 9
    //   113: invokevirtual 9051	com/android/server/am/ActivityManagerService$UiHandler:removeCallbacks	(Ljava/lang/Runnable;)V
    //   116: iload 6
    //   118: ifne +15 -> 133
    //   121: aload_0
    //   122: monitorexit
    //   123: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   126: return
    //   127: astore_1
    //   128: aload 9
    //   130: monitorexit
    //   131: aload_1
    //   132: athrow
    //   133: aload 9
    //   135: getfield 10436	com/android/server/am/ActivityManagerService$PendingAssistExtras:receiver	Lcom/android/internal/os/IResultReceiver;
    //   138: astore_2
    //   139: aload_2
    //   140: ifnull +59 -> 199
    //   143: new 3058	android/os/Bundle
    //   146: dup
    //   147: invokespecial 4472	android/os/Bundle:<init>	()V
    //   150: astore_1
    //   151: aload_1
    //   152: ldc_w 10775
    //   155: aload 9
    //   157: getfield 3054	com/android/server/am/ActivityManagerService$PendingAssistExtras:extras	Landroid/os/Bundle;
    //   160: invokevirtual 3062	android/os/Bundle:putBundle	(Ljava/lang/String;Landroid/os/Bundle;)V
    //   163: aload_1
    //   164: ldc_w 10776
    //   167: aload 9
    //   169: getfield 10762	com/android/server/am/ActivityManagerService$PendingAssistExtras:structure	Landroid/app/assist/AssistStructure;
    //   172: invokevirtual 10771	android/os/Bundle:putParcelable	(Ljava/lang/String;Landroid/os/Parcelable;)V
    //   175: aload_1
    //   176: ldc_w 7241
    //   179: aload 9
    //   181: getfield 10765	com/android/server/am/ActivityManagerService$PendingAssistExtras:content	Landroid/app/assist/AssistContent;
    //   184: invokevirtual 10771	android/os/Bundle:putParcelable	(Ljava/lang/String;Landroid/os/Parcelable;)V
    //   187: aload_1
    //   188: ldc_w 10438
    //   191: aload 9
    //   193: getfield 10440	com/android/server/am/ActivityManagerService$PendingAssistExtras:receiverExtras	Landroid/os/Bundle;
    //   196: invokevirtual 3062	android/os/Bundle:putBundle	(Ljava/lang/String;Landroid/os/Bundle;)V
    //   199: aload_0
    //   200: monitorexit
    //   201: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   204: aload_2
    //   205: ifnull +22 -> 227
    //   208: aload_2
    //   209: iconst_0
    //   210: aload_1
    //   211: invokeinterface 10446 3 0
    //   216: return
    //   217: astore_1
    //   218: aload_0
    //   219: monitorexit
    //   220: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   223: aload_1
    //   224: athrow
    //   225: astore_1
    //   226: return
    //   227: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   230: lstore 7
    //   232: aload 9
    //   234: getfield 10773	com/android/server/am/ActivityManagerService$PendingAssistExtras:intent	Landroid/content/Intent;
    //   237: aload 9
    //   239: getfield 3054	com/android/server/am/ActivityManagerService$PendingAssistExtras:extras	Landroid/os/Bundle;
    //   242: invokevirtual 9491	android/content/Intent:replaceExtras	(Landroid/os/Bundle;)Landroid/content/Intent;
    //   245: pop
    //   246: aload 9
    //   248: getfield 10773	com/android/server/am/ActivityManagerService$PendingAssistExtras:intent	Landroid/content/Intent;
    //   251: ldc_w 10777
    //   254: invokevirtual 10780	android/content/Intent:setFlags	(I)Landroid/content/Intent;
    //   257: pop
    //   258: aload_0
    //   259: ldc_w 10782
    //   262: invokevirtual 10783	com/android/server/am/ActivityManagerService:closeSystemDialogs	(Ljava/lang/String;)V
    //   265: aload_0
    //   266: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   269: aload 9
    //   271: getfield 10773	com/android/server/am/ActivityManagerService$PendingAssistExtras:intent	Landroid/content/Intent;
    //   274: new 2294	android/os/UserHandle
    //   277: dup
    //   278: aload 9
    //   280: getfield 10785	com/android/server/am/ActivityManagerService$PendingAssistExtras:userHandle	I
    //   283: invokespecial 5561	android/os/UserHandle:<init>	(I)V
    //   286: invokevirtual 10789	android/content/Context:startActivityAsUser	(Landroid/content/Intent;Landroid/os/UserHandle;)V
    //   289: lload 7
    //   291: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   294: return
    //   295: astore_1
    //   296: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   299: ldc_w 10791
    //   302: aload_1
    //   303: invokestatic 4351	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   306: pop
    //   307: goto -18 -> 289
    //   310: astore_1
    //   311: lload 7
    //   313: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   316: aload_1
    //   317: athrow
    //   318: astore_1
    //   319: goto -101 -> 218
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	322	0	this	ActivityManagerService
    //   0	322	1	paramIBinder	IBinder
    //   0	322	2	paramBundle	Bundle
    //   0	322	3	paramAssistStructure	AssistStructure
    //   0	322	4	paramAssistContent	AssistContent
    //   0	322	5	paramUri	Uri
    //   105	12	6	bool	boolean
    //   230	82	7	l	long
    //   4	275	9	localPendingAssistExtras	PendingAssistExtras
    // Exception table:
    //   from	to	target	type
    //   9	28	127	finally
    //   33	46	127	finally
    //   46	71	127	finally
    //   86	116	217	finally
    //   133	139	217	finally
    //   143	151	217	finally
    //   208	216	225	android/os/RemoteException
    //   265	289	295	android/content/ActivityNotFoundException
    //   232	265	310	finally
    //   265	289	310	finally
    //   296	307	310	finally
    //   151	199	318	finally
  }
  
  void reportMemUsage(ArrayList<ProcessMemInfo> paramArrayList)
  {
    Object localObject1 = new SparseArray(paramArrayList.size());
    int i = 0;
    int j = paramArrayList.size();
    while (i < j)
    {
      localObject2 = (ProcessMemInfo)paramArrayList.get(i);
      ((SparseArray)localObject1).put(((ProcessMemInfo)localObject2).pid, localObject2);
      i += 1;
    }
    updateCpuStatsNow();
    Object localObject2 = new long[1];
    long l4;
    synchronized (this.mProcessCpuTracker)
    {
      localObject3 = this.mProcessCpuTracker.getStats(new -void_reportMemUsage_java_util_ArrayList_memInfos_LambdaImpl0());
      j = ((List)localObject3).size();
      i = 0;
      if (i < j)
      {
        ??? = (ProcessCpuTracker.Stats)((List)localObject3).get(i);
        l1 = Debug.getPss(((ProcessCpuTracker.Stats)???).pid, null, (long[])localObject2);
        if ((l1 > 0L) && (((SparseArray)localObject1).indexOfKey(((ProcessCpuTracker.Stats)???).pid) < 0))
        {
          ??? = new ProcessMemInfo(((ProcessCpuTracker.Stats)???).name, ((ProcessCpuTracker.Stats)???).pid, 64536, -1, "native", null);
          ((ProcessMemInfo)???).pss = l1;
          ((ProcessMemInfo)???).memtrack = localObject2[0];
          paramArrayList.add(???);
        }
        i += 1;
      }
    }
    long l3 = 0L;
    i = 0;
    j = paramArrayList.size();
    while (i < j)
    {
      localObject1 = (ProcessMemInfo)paramArrayList.get(i);
      if (((ProcessMemInfo)localObject1).pss == 0L)
      {
        ((ProcessMemInfo)localObject1).pss = Debug.getPss(((ProcessMemInfo)localObject1).pid, null, (long[])localObject2);
        ((ProcessMemInfo)localObject1).memtrack = localObject2[0];
      }
      l4 += ((ProcessMemInfo)localObject1).pss;
      l3 += ((ProcessMemInfo)localObject1).memtrack;
      i += 1;
    }
    Collections.sort(paramArrayList, new Comparator()
    {
      public int compare(ProcessMemInfo paramAnonymousProcessMemInfo1, ProcessMemInfo paramAnonymousProcessMemInfo2)
      {
        if (paramAnonymousProcessMemInfo1.oomAdj != paramAnonymousProcessMemInfo2.oomAdj)
        {
          if (paramAnonymousProcessMemInfo1.oomAdj < paramAnonymousProcessMemInfo2.oomAdj) {
            return -1;
          }
          return 1;
        }
        if (paramAnonymousProcessMemInfo1.pss != paramAnonymousProcessMemInfo2.pss)
        {
          if (paramAnonymousProcessMemInfo1.pss < paramAnonymousProcessMemInfo2.pss) {
            return 1;
          }
          return -1;
        }
        return 0;
      }
    });
    localObject1 = new StringBuilder(128);
    localObject2 = new StringBuilder(128);
    ((StringBuilder)localObject1).append("Low on memory -- ");
    appendMemBucket((StringBuilder)localObject1, l4, "total", false);
    appendMemBucket((StringBuilder)localObject2, l4, "total", true);
    Object localObject3 = new StringBuilder(1024);
    StringBuilder localStringBuilder = new StringBuilder(1024);
    ??? = new StringBuilder(1024);
    i = 1;
    j = Integer.MIN_VALUE;
    long l1 = 0L;
    long l5 = 0L;
    long l2 = 0L;
    int m = 0;
    int i1 = paramArrayList.size();
    if (m < i1)
    {
      localObject5 = (ProcessMemInfo)paramArrayList.get(m);
      long l6 = l2;
      if (((ProcessMemInfo)localObject5).oomAdj >= 900) {
        l6 = l2 + ((ProcessMemInfo)localObject5).pss;
      }
      int k = i;
      int n = j;
      if (((ProcessMemInfo)localObject5).oomAdj != 64536)
      {
        if ((((ProcessMemInfo)localObject5).oomAdj < 500) || (((ProcessMemInfo)localObject5).oomAdj == 600)) {}
        label585:
        while (((ProcessMemInfo)localObject5).oomAdj == 700)
        {
          if (j == ((ProcessMemInfo)localObject5).oomAdj) {
            break label836;
          }
          j = ((ProcessMemInfo)localObject5).oomAdj;
          if (((ProcessMemInfo)localObject5).oomAdj <= 0) {
            ((StringBuilder)localObject1).append(" / ");
          }
          if (((ProcessMemInfo)localObject5).oomAdj < 0) {
            break label824;
          }
          k = i;
          if (i != 0)
          {
            ((StringBuilder)localObject2).append(":");
            k = 0;
          }
          ((StringBuilder)localObject2).append("\n\t at ");
          i = k;
          if (((ProcessMemInfo)localObject5).oomAdj <= 0) {
            appendMemBucket((StringBuilder)localObject1, ((ProcessMemInfo)localObject5).pss, ((ProcessMemInfo)localObject5).name, false);
          }
          appendMemBucket((StringBuilder)localObject2, ((ProcessMemInfo)localObject5).pss, ((ProcessMemInfo)localObject5).name, true);
          k = i;
          n = j;
          if (((ProcessMemInfo)localObject5).oomAdj < 0) {
            break;
          }
          if (m + 1 < i1)
          {
            k = i;
            n = j;
            if (((ProcessMemInfo)paramArrayList.get(m + 1)).oomAdj == j) {
              break;
            }
          }
          ((StringBuilder)localObject2).append("(");
          k = 0;
          while (k < DUMP_MEM_OOM_ADJ.length)
          {
            if (DUMP_MEM_OOM_ADJ[k] == ((ProcessMemInfo)localObject5).oomAdj)
            {
              ((StringBuilder)localObject2).append(DUMP_MEM_OOM_LABEL[k]);
              ((StringBuilder)localObject2).append(":");
              ((StringBuilder)localObject2).append(DUMP_MEM_OOM_ADJ[k]);
            }
            k += 1;
          }
        }
        n = j;
        k = i;
      }
      label766:
      appendMemInfo((StringBuilder)localObject3, (ProcessMemInfo)localObject5);
      if (((ProcessMemInfo)localObject5).oomAdj == 64536) {
        if (((ProcessMemInfo)localObject5).pss >= 512L) {
          appendMemInfo(localStringBuilder, (ProcessMemInfo)localObject5);
        }
      }
      for (;;)
      {
        m += 1;
        l2 = l6;
        i = k;
        j = n;
        break;
        label824:
        ((StringBuilder)localObject2).append("$");
        break label585;
        label836:
        ((StringBuilder)localObject1).append(" ");
        ((StringBuilder)localObject2).append("$");
        break label585;
        ((StringBuilder)localObject2).append(")");
        k = i;
        n = j;
        break label766;
        l1 += ((ProcessMemInfo)localObject5).pss;
        l5 += ((ProcessMemInfo)localObject5).memtrack;
        continue;
        l2 = l1;
        if (l1 > 0L)
        {
          appendBasicMemEntry(localStringBuilder, 64536, -1, l1, l5, "(Other native)");
          localStringBuilder.append('\n');
          l2 = 0L;
        }
        appendMemInfo((StringBuilder)???, (ProcessMemInfo)localObject5);
        l1 = l2;
      }
    }
    ((StringBuilder)???).append("           ");
    ProcessList.appendRamKb((StringBuilder)???, l4);
    ((StringBuilder)???).append(": TOTAL");
    if (l3 > 0L)
    {
      ((StringBuilder)???).append(" (");
      ((StringBuilder)???).append(stringifyKBSize(l3));
      ((StringBuilder)???).append(" memtrack)");
    }
    ((StringBuilder)???).append("\n");
    Object localObject5 = new MemInfoReader();
    ((MemInfoReader)localObject5).readMemInfo();
    long[] arrayOfLong = ((MemInfoReader)localObject5).getRawInfo();
    paramArrayList = new StringBuilder(1024);
    Debug.getMemInfo(arrayOfLong);
    paramArrayList.append("  MemInfo: ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[5])).append(" slab, ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[4])).append(" shmem, ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[10])).append(" vm alloc, ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[11])).append(" page tables ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[12])).append(" kernel stack\n");
    paramArrayList.append("           ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[2])).append(" buffers, ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[3])).append(" cached, ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[9])).append(" mapped, ");
    paramArrayList.append(stringifyKBSize(arrayOfLong[1])).append(" free\n");
    if (arrayOfLong[8] != 0L)
    {
      paramArrayList.append("  ZRAM: ");
      paramArrayList.append(stringifyKBSize(arrayOfLong[8]));
      paramArrayList.append(" RAM, ");
      paramArrayList.append(stringifyKBSize(arrayOfLong[6]));
      paramArrayList.append(" swap total, ");
      paramArrayList.append(stringifyKBSize(arrayOfLong[7]));
      paramArrayList.append(" swap free\n");
    }
    arrayOfLong = getKsmInfo();
    if ((arrayOfLong[1] != 0L) || (arrayOfLong[0] != 0L)) {}
    for (;;)
    {
      paramArrayList.append("  KSM: ");
      paramArrayList.append(stringifyKBSize(arrayOfLong[1]));
      paramArrayList.append(" saved from shared ");
      paramArrayList.append(stringifyKBSize(arrayOfLong[0]));
      paramArrayList.append("\n       ");
      paramArrayList.append(stringifyKBSize(arrayOfLong[2]));
      paramArrayList.append(" unshared; ");
      paramArrayList.append(stringifyKBSize(arrayOfLong[3]));
      paramArrayList.append(" volatile\n");
      do
      {
        paramArrayList.append("  Free RAM: ");
        paramArrayList.append(stringifyKBSize(((MemInfoReader)localObject5).getCachedSizeKb() + l2 + ((MemInfoReader)localObject5).getFreeSizeKb()));
        paramArrayList.append("\n");
        paramArrayList.append("  Used RAM: ");
        paramArrayList.append(stringifyKBSize(l4 - l2 + ((MemInfoReader)localObject5).getKernelUsedSizeKb()));
        paramArrayList.append("\n");
        paramArrayList.append("  Lost RAM: ");
        paramArrayList.append(stringifyKBSize(((MemInfoReader)localObject5).getTotalSizeKb() - l4 - ((MemInfoReader)localObject5).getFreeSizeKb() - ((MemInfoReader)localObject5).getCachedSizeKb() - ((MemInfoReader)localObject5).getKernelUsedSizeKb() - ((MemInfoReader)localObject5).getZramTotalSizeKb()));
        paramArrayList.append("\n");
        Slog.i(TAG, "Low on memory:");
        Slog.i(TAG, localStringBuilder.toString());
        Slog.i(TAG, ((StringBuilder)???).toString());
        Slog.i(TAG, paramArrayList.toString());
        localStringBuilder = new StringBuilder(1024);
        localStringBuilder.append("Low on memory:");
        localStringBuilder.append((CharSequence)localObject2);
        localStringBuilder.append('\n');
        localStringBuilder.append((CharSequence)localObject3);
        localStringBuilder.append((CharSequence)???);
        localStringBuilder.append('\n');
        localStringBuilder.append(paramArrayList);
        localStringBuilder.append('\n');
        paramArrayList = new StringWriter();
        try
        {
          boostPriorityForLockedSection();
          localObject2 = new FastPrintWriter(paramArrayList, false, 256);
          localObject3 = new String[0];
          ((PrintWriter)localObject2).println();
          dumpProcessesLocked(null, (PrintWriter)localObject2, (String[])localObject3, 0, false, null);
          ((PrintWriter)localObject2).println();
          this.mServices.newServiceDumperLocked(null, (PrintWriter)localObject2, (String[])localObject3, 0, false, null).dumpLocked();
          ((PrintWriter)localObject2).println();
          dumpActivitiesLocked(null, (PrintWriter)localObject2, (String[])localObject3, 0, false, false, null);
          ((PrintWriter)localObject2).flush();
          resetPriorityAfterLockedSection();
          localStringBuilder.append(paramArrayList.toString());
          addErrorToDropBox("lowmem", null, "system_server", null, null, ((StringBuilder)localObject1).toString(), localStringBuilder.toString(), null, null);
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        try
        {
          boostPriorityForLockedSection();
          l1 = SystemClock.uptimeMillis();
          if (this.mLastMemUsageReportTime < l1) {
            this.mLastMemUsageReportTime = l1;
          }
          resetPriorityAfterLockedSection();
          return;
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        if (arrayOfLong[2] != 0L) {
          break;
        }
      } while (arrayOfLong[3] == 0L);
    }
  }
  
  public void reportSizeConfigurations(IBinder paramIBinder, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3)
  {
    if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
      Slog.v(TAG, "Report configuration: " + paramIBinder + " " + paramArrayOfInt1 + " " + paramArrayOfInt2);
    }
    ActivityRecord localActivityRecord;
    try
    {
      boostPriorityForLockedSection();
      localActivityRecord = ActivityRecord.isInStackLocked(paramIBinder);
      if (localActivityRecord == null) {
        throw new IllegalArgumentException("reportSizeConfigurations: ActivityRecord not found for: " + paramIBinder);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    localActivityRecord.setSizeConfigurations(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    resetPriorityAfterLockedSection();
  }
  
  public boolean requestAssistContextExtras(int paramInt, IResultReceiver paramIResultReceiver, Bundle paramBundle, IBinder paramIBinder, boolean paramBoolean1, boolean paramBoolean2)
  {
    return enqueueAssistContext(paramInt, null, null, paramIResultReceiver, paramBundle, paramIBinder, paramBoolean1, paramBoolean2, UserHandle.getCallingUserId(), null, 2000L) != null;
  }
  
  public void requestBugReport(int paramInt)
  {
    String str = null;
    switch (paramInt)
    {
    }
    while (str == null)
    {
      throw new IllegalArgumentException("Provided bugreport type is not correct, value: " + paramInt);
      str = "bugreport";
      continue;
      str = "bugreportplus";
      continue;
      str = "bugreportremote";
      continue;
      str = "bugreportwear";
    }
    enforceCallingPermission("android.permission.DUMP", "requestBugReport");
    SystemProperties.set("ctl.start", str);
  }
  
  void requestPssAllProcsLocked(long paramLong, boolean paramBoolean1, boolean paramBoolean2)
  {
    if (!paramBoolean1)
    {
      long l = this.mLastFullPssTime;
      if (paramBoolean2) {}
      for (i = 120000; paramLong < l + i; i = 600000) {
        return;
      }
    }
    if (ActivityManagerDebugConfig.DEBUG_PSS) {
      Slog.d(TAG_PSS, "Requesting PSS of all procs!  memLowered=" + paramBoolean2);
    }
    this.mLastFullPssTime = paramLong;
    this.mFullPssPending = true;
    this.mPendingPssProcesses.ensureCapacity(this.mLruProcesses.size());
    this.mPendingPssProcesses.clear();
    int i = this.mLruProcesses.size() - 1;
    if (i >= 0)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
      if ((localProcessRecord.thread == null) || (localProcessRecord.curProcState == -1)) {}
      for (;;)
      {
        i -= 1;
        break;
        if ((paramBoolean2) || (paramLong > localProcessRecord.lastStateTime + 600000L))
        {
          localProcessRecord.pssProcState = localProcessRecord.setProcState;
          localProcessRecord.nextPssTime = ProcessList.computeNextPssTime(localProcessRecord.curProcState, true, this.mTestPssMode, isSleepingLocked(), paramLong);
          this.mPendingPssProcesses.add(localProcessRecord);
        }
      }
    }
    this.mBgHandler.sendEmptyMessage(1);
  }
  
  void requestPssLocked(ProcessRecord paramProcessRecord, int paramInt)
  {
    if (this.mPendingPssProcesses.contains(paramProcessRecord)) {
      return;
    }
    if (this.mPendingPssProcesses.size() == 0) {
      this.mBgHandler.sendEmptyMessage(1);
    }
    if (ActivityManagerDebugConfig.DEBUG_PSS) {
      Slog.d(TAG_PSS, "Requesting PSS of: " + paramProcessRecord);
    }
    paramProcessRecord.pssProcState = paramInt;
    this.mPendingPssProcesses.add(paramProcessRecord);
  }
  
  /* Error */
  public boolean requestVisibleBehind(IBinder paramIBinder, boolean paramBoolean)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore_3
    //   4: aload_0
    //   5: monitorenter
    //   6: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   9: aload_1
    //   10: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   13: astore_1
    //   14: aload_1
    //   15: ifnull +24 -> 39
    //   18: aload_0
    //   19: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   22: aload_1
    //   23: iload_2
    //   24: invokevirtual 10919	com/android/server/am/ActivityStackSupervisor:requestVisibleBehindLocked	(Lcom/android/server/am/ActivityRecord;Z)Z
    //   27: istore_2
    //   28: aload_0
    //   29: monitorexit
    //   30: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   33: lload_3
    //   34: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   37: iload_2
    //   38: ireturn
    //   39: aload_0
    //   40: monitorexit
    //   41: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   44: lload_3
    //   45: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   48: iconst_0
    //   49: ireturn
    //   50: astore_1
    //   51: aload_0
    //   52: monitorexit
    //   53: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   56: aload_1
    //   57: athrow
    //   58: astore_1
    //   59: lload_3
    //   60: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   63: aload_1
    //   64: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	65	0	this	ActivityManagerService
    //   0	65	1	paramIBinder	IBinder
    //   0	65	2	paramBoolean	boolean
    //   3	57	3	l	long
    // Exception table:
    //   from	to	target	type
    //   6	14	50	finally
    //   18	28	50	finally
    //   4	6	58	finally
    //   28	33	58	finally
    //   39	44	58	finally
    //   51	58	58	finally
  }
  
  final void resetFocusedActivityIfNeededLocked(ActivityRecord paramActivityRecord)
  {
    if (this.mFocusedActivity != paramActivityRecord) {
      return;
    }
    ActivityStack localActivityStack = this.mStackSupervisor.getFocusedStack();
    if (localActivityStack != null)
    {
      ActivityRecord localActivityRecord = localActivityStack.topActivity();
      if ((localActivityRecord != null) && (localActivityRecord.userId != this.mLastFocusedUserId))
      {
        this.mHandler.removeMessages(53);
        this.mHandler.sendMessage(this.mHandler.obtainMessage(53, localActivityRecord.userId, 0));
        this.mLastFocusedUserId = localActivityRecord.userId;
      }
    }
    if (setFocusedActivityLocked(localActivityStack.topRunningActivityLocked(), "resetFocusedActivityIfNeeded")) {
      return;
    }
    if (ActivityManagerDebugConfig.DEBUG_FOCUS) {
      Slog.d(TAG_FOCUS, "resetFocusedActivityIfNeeded: Setting focus to NULL prev mFocusedActivity=" + this.mFocusedActivity + " goingAway=" + paramActivityRecord);
    }
    this.mFocusedActivity = null;
    EventLogTags.writeAmFocusedActivity(-1, "NULL", "resetFocusedActivityIfNeeded");
  }
  
  /* Error */
  public void resizeDockedStack(Rect paramRect1, Rect paramRect2, Rect paramRect3, Rect paramRect4, Rect paramRect5)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 10941
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore 6
    //   15: aload_0
    //   16: monitorenter
    //   17: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   20: aload_0
    //   21: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   24: aload_1
    //   25: aload_2
    //   26: aload_3
    //   27: aload 4
    //   29: aload 5
    //   31: iconst_1
    //   32: invokevirtual 10945	com/android/server/am/ActivityStackSupervisor:resizeDockedStackLocked	(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Z)V
    //   35: aload_0
    //   36: monitorexit
    //   37: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   40: lload 6
    //   42: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   45: return
    //   46: astore_1
    //   47: aload_0
    //   48: monitorexit
    //   49: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   52: aload_1
    //   53: athrow
    //   54: astore_1
    //   55: lload 6
    //   57: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   60: aload_1
    //   61: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	62	0	this	ActivityManagerService
    //   0	62	1	paramRect1	Rect
    //   0	62	2	paramRect2	Rect
    //   0	62	3	paramRect3	Rect
    //   0	62	4	paramRect4	Rect
    //   0	62	5	paramRect5	Rect
    //   13	43	6	l	long
    // Exception table:
    //   from	to	target	type
    //   17	35	46	finally
    //   15	17	54	finally
    //   35	40	54	finally
    //   47	54	54	finally
  }
  
  /* Error */
  public void resizePinnedStack(Rect paramRect1, Rect paramRect2)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 10949
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore_3
    //   14: aload_0
    //   15: monitorenter
    //   16: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   19: aload_0
    //   20: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   23: aload_1
    //   24: aload_2
    //   25: invokevirtual 10952	com/android/server/am/ActivityStackSupervisor:resizePinnedStackLocked	(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
    //   28: aload_0
    //   29: monitorexit
    //   30: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   33: lload_3
    //   34: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   37: return
    //   38: astore_1
    //   39: aload_0
    //   40: monitorexit
    //   41: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   44: aload_1
    //   45: athrow
    //   46: astore_1
    //   47: lload_3
    //   48: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   51: aload_1
    //   52: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	53	0	this	ActivityManagerService
    //   0	53	1	paramRect1	Rect
    //   0	53	2	paramRect2	Rect
    //   13	35	3	l	long
    // Exception table:
    //   from	to	target	type
    //   16	28	38	finally
    //   14	16	46	finally
    //   28	33	46	finally
    //   39	46	46	finally
  }
  
  public void resizeStack(int paramInt1, Rect paramRect, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, int paramInt2)
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeStack()");
    long l = Binder.clearCallingIdentity();
    for (;;)
    {
      try
      {
        try
        {
          boostPriorityForLockedSection();
          if (paramBoolean3)
          {
            if (paramInt1 == 4)
            {
              this.mWindowManager.animateResizePinnedStack(paramRect, paramInt2);
              resetPriorityAfterLockedSection();
              return;
            }
            throw new IllegalArgumentException("Stack: " + paramInt1 + " doesn't support animated resize.");
          }
        }
        finally
        {
          resetPriorityAfterLockedSection();
        }
        this.mStackSupervisor.resizeStackLocked(paramInt1, paramRect, null, null, paramBoolean2, paramBoolean1, false);
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
    }
  }
  
  public void resizeTask(int paramInt1, Rect paramRect, int paramInt2)
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeTask()");
    long l = Binder.clearCallingIdentity();
    TaskRecord localTaskRecord;
    int i;
    try
    {
      try
      {
        boostPriorityForLockedSection();
        localTaskRecord = this.mStackSupervisor.anyTaskForIdLocked(paramInt1);
        if (localTaskRecord == null)
        {
          Slog.w(TAG, "resizeTask: taskId=" + paramInt1 + " not found");
          resetPriorityAfterLockedSection();
          return;
        }
        i = localTaskRecord.stack.mStackId;
        if ((paramRect != null) && (localTaskRecord.inCropWindowsResizeMode()) && (this.mStackSupervisor.isStackDockedInEffect(i)))
        {
          this.mWindowManager.scrollTask(localTaskRecord.taskId, paramRect);
          resetPriorityAfterLockedSection();
          return;
        }
        if (!ActivityManager.StackId.isTaskResizeAllowed(i)) {
          throw new IllegalArgumentException("resizeTask not allowed on task=" + localTaskRecord);
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      if (paramRect != null) {
        break label268;
      }
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    if (i == 2)
    {
      paramInt1 = 1;
      if ((paramInt2 & 0x1) == 0) {
        break label289;
      }
    }
    label268:
    label289:
    for (boolean bool = true;; bool = false)
    {
      if (paramInt1 != localTaskRecord.stack.mStackId)
      {
        this.mStackSupervisor.moveTaskToStackUncheckedLocked(localTaskRecord, paramInt1, true, false, "resizeTask");
        bool = false;
      }
      this.mStackSupervisor.resizeTaskLocked(localTaskRecord, paramRect, paramInt2, bool, false);
      resetPriorityAfterLockedSection();
      Binder.restoreCallingIdentity(l);
      return;
      paramInt1 = i;
      if (paramRect == null) {
        break;
      }
      paramInt1 = i;
      if (i == 2) {
        break;
      }
      paramInt1 = 2;
      break;
    }
  }
  
  public void restart()
  {
    if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
      throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }
    Log.i(TAG, "Sending shutdown broadcast...");
    BroadcastReceiver local21 = new BroadcastReceiver()
    {
      public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
      {
        Log.i(ActivityManagerService.-get1(), "Shutting down activity manager...");
        ActivityManagerService.this.shutdown(10000);
        Log.i(ActivityManagerService.-get1(), "Shutdown complete, restarting!");
        Process.killProcess(Process.myPid());
        System.exit(10);
      }
    };
    Intent localIntent = new Intent("android.intent.action.ACTION_SHUTDOWN");
    localIntent.addFlags(268435456);
    localIntent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
    local21.onReceive(this.mContext, localIntent);
  }
  
  public void resumeAppSwitches()
  {
    if (checkCallingPermission("android.permission.STOP_APP_SWITCHES") != 0) {
      throw new SecurityException("Requires permission android.permission.STOP_APP_SWITCHES");
    }
    try
    {
      boostPriorityForLockedSection();
      this.mAppSwitchesAllowedTime = 0L;
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void revokeUriPermission(IApplicationThread paramIApplicationThread, Uri paramUri, int paramInt1, int paramInt2)
  {
    enforceNotIsolatedCaller("revokeUriPermission");
    ProcessRecord localProcessRecord;
    try
    {
      boostPriorityForLockedSection();
      localProcessRecord = getRecordForAppLocked(paramIApplicationThread);
      if (localProcessRecord == null) {
        throw new SecurityException("Unable to find app for caller " + paramIApplicationThread + " when revoking permission to uri " + paramUri);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if (paramUri == null)
    {
      Slog.w(TAG, "revokeUriPermission: null uri");
      resetPriorityAfterLockedSection();
      return;
    }
    boolean bool = Intent.isAccessUriMode(paramInt1);
    if (!bool)
    {
      resetPriorityAfterLockedSection();
      return;
    }
    if (getProviderInfoLocked(paramUri.getAuthority(), paramInt2, 786432) == null)
    {
      Slog.w(TAG, "No content provider found for permission revoke: " + paramUri.toSafeString());
      resetPriorityAfterLockedSection();
      return;
    }
    revokeUriPermissionLocked(localProcessRecord.uid, new GrantUri(paramInt2, paramUri, false), paramInt1);
    resetPriorityAfterLockedSection();
  }
  
  public void revokeUriPermissionFromOwner(IBinder paramIBinder, Uri paramUri, int paramInt1, int paramInt2)
  {
    UriPermissionOwner localUriPermissionOwner;
    try
    {
      boostPriorityForLockedSection();
      localUriPermissionOwner = UriPermissionOwner.fromExternalToken(paramIBinder);
      if (localUriPermissionOwner == null) {
        throw new IllegalArgumentException("Unknown owner: " + paramIBinder);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if (paramUri == null)
    {
      localUriPermissionOwner.removeUriPermissionsLocked(paramInt1);
      resetPriorityAfterLockedSection();
      return;
    }
    if ((paramInt1 & 0x80) != 0) {}
    for (boolean bool = true;; bool = false)
    {
      localUriPermissionOwner.removeUriPermissionLocked(new GrantUri(paramInt2, paramUri, bool), paramInt1);
      break;
    }
  }
  
  /* Error */
  final void runInBackgroundDisabled(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1510	com/android/server/am/ActivityManagerService:mActiveUids	Landroid/util/SparseArray;
    //   9: iload_1
    //   10: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   13: checkcast 2167	com/android/server/am/UidRecord
    //   16: astore_2
    //   17: aload_2
    //   18: ifnull +25 -> 43
    //   21: aload_2
    //   22: getfield 4061	com/android/server/am/UidRecord:idle	Z
    //   25: ifeq +12 -> 37
    //   28: aload_0
    //   29: aload_2
    //   30: getfield 2178	com/android/server/am/UidRecord:uid	I
    //   33: aload_2
    //   34: invokevirtual 9780	com/android/server/am/ActivityManagerService:doStopUidLocked	(ILcom/android/server/am/UidRecord;)V
    //   37: aload_0
    //   38: monitorexit
    //   39: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   42: return
    //   43: aload_0
    //   44: iload_1
    //   45: aconst_null
    //   46: invokevirtual 9780	com/android/server/am/ActivityManagerService:doStopUidLocked	(ILcom/android/server/am/UidRecord;)V
    //   49: goto -12 -> 37
    //   52: astore_2
    //   53: aload_0
    //   54: monitorexit
    //   55: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   58: aload_2
    //   59: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	60	0	this	ActivityManagerService
    //   0	60	1	paramInt	int
    //   16	18	2	localUidRecord	UidRecord
    //   52	7	2	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	17	52	finally
    //   21	37	52	finally
    //   43	49	52	finally
  }
  
  final void scheduleAppGcLocked(ProcessRecord paramProcessRecord)
  {
    long l = SystemClock.uptimeMillis();
    if (paramProcessRecord.lastRequestedGc + 60000L > l) {
      return;
    }
    if (!this.mProcessesToGc.contains(paramProcessRecord))
    {
      addProcessToGcListLocked(paramProcessRecord);
      scheduleAppGcsLocked();
    }
  }
  
  final void scheduleAppGcsLocked()
  {
    this.mHandler.removeMessages(5);
    if (this.mProcessesToGc.size() > 0)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mProcessesToGc.get(0);
      Message localMessage = this.mHandler.obtainMessage(5);
      long l2 = localProcessRecord.lastRequestedGc + 60000L;
      long l3 = SystemClock.uptimeMillis();
      long l1 = l2;
      if (l2 < l3 + 5000L) {
        l1 = l3 + 5000L;
      }
      this.mHandler.sendMessageAtTime(localMessage, l1);
    }
  }
  
  void scheduleStartProfilesLocked()
  {
    if (!this.mHandler.hasMessages(40)) {
      this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(40), 1000L);
    }
  }
  
  public void sendIdleJobTrigger()
  {
    if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
      throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }
    long l = Binder.clearCallingIdentity();
    try
    {
      broadcastIntent(null, new Intent("com.android.server.ACTION_TRIGGER_IDLE").setPackage("android").addFlags(1073741824), null, null, 0, null, null, null, -1, null, true, false, -1);
      return;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  public int sendIntentSender(IIntentSender paramIIntentSender, int paramInt, Intent paramIntent, String paramString1, IIntentReceiver paramIIntentReceiver, String paramString2, Bundle paramBundle)
  {
    if ((paramIIntentSender instanceof PendingIntentRecord)) {
      return ((PendingIntentRecord)paramIIntentSender).sendWithResult(paramInt, paramIntent, paramString1, paramIIntentReceiver, paramString2, paramBundle);
    }
    Intent localIntent = paramIntent;
    if (paramIntent == null)
    {
      Slog.wtf(TAG, "Can't use null intent with direct IIntentSender call");
      localIntent = new Intent("android.intent.action.MAIN");
    }
    try
    {
      paramIIntentSender.send(paramInt, localIntent, paramString1, null, paramString2, paramBundle);
      if (paramIIntentReceiver == null) {}
    }
    catch (RemoteException paramIIntentSender)
    {
      try
      {
        paramIIntentReceiver.performReceive(localIntent, 0, null, null, false, false, UserHandle.getCallingUserId());
        return 0;
        paramIIntentSender = paramIIntentSender;
      }
      catch (RemoteException paramIIntentSender)
      {
        for (;;) {}
      }
    }
  }
  
  boolean sendPendingBroadcastsLocked(ProcessRecord paramProcessRecord)
  {
    boolean bool = false;
    BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
    int i = 0;
    int j = arrayOfBroadcastQueue.length;
    while (i < j)
    {
      bool |= arrayOfBroadcastQueue[i].sendPendingBroadcastsLocked(paramProcessRecord);
      i += 1;
    }
    return bool;
  }
  
  public void serviceDoneExecuting(IBinder paramIBinder, int paramInt1, int paramInt2, int paramInt3)
  {
    try
    {
      boostPriorityForLockedSection();
      if (!(paramIBinder instanceof ServiceRecord))
      {
        Slog.e(TAG, "serviceDoneExecuting: Invalid service token=" + paramIBinder);
        throw new IllegalArgumentException("Invalid service token");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    this.mServices.serviceDoneExecutingLocked((ServiceRecord)paramIBinder, paramInt1, paramInt2, paramInt3);
    resetPriorityAfterLockedSection();
  }
  
  public void setActivityController(IActivityController paramIActivityController, boolean paramBoolean)
  {
    enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "setActivityController()");
    try
    {
      boostPriorityForLockedSection();
      this.mController = paramIActivityController;
      this.mControllerIsAMonkey = paramBoolean;
      Watchdog.getInstance().setActivityController(paramIActivityController);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void setAlwaysFinish(boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11070
    //   4: ldc_w 11072
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore_3
    //   14: aload_0
    //   15: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   18: invokevirtual 5043	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
    //   21: astore 5
    //   23: iload_1
    //   24: ifeq +35 -> 59
    //   27: iconst_1
    //   28: istore_2
    //   29: aload 5
    //   31: ldc_w 5625
    //   34: iload_2
    //   35: invokestatic 11075	android/provider/Settings$Global:putInt	(Landroid/content/ContentResolver;Ljava/lang/String;I)Z
    //   38: pop
    //   39: aload_0
    //   40: monitorenter
    //   41: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   44: aload_0
    //   45: iload_1
    //   46: putfield 1631	com/android/server/am/ActivityManagerService:mAlwaysFinishActivities	Z
    //   49: aload_0
    //   50: monitorexit
    //   51: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   54: lload_3
    //   55: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   58: return
    //   59: iconst_0
    //   60: istore_2
    //   61: goto -32 -> 29
    //   64: astore 5
    //   66: aload_0
    //   67: monitorexit
    //   68: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   71: aload 5
    //   73: athrow
    //   74: astore 5
    //   76: lload_3
    //   77: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   80: aload 5
    //   82: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	83	0	this	ActivityManagerService
    //   0	83	1	paramBoolean	boolean
    //   28	33	2	i	int
    //   13	64	3	l	long
    //   21	9	5	localContentResolver	ContentResolver
    //   64	8	5	localObject1	Object
    //   74	7	5	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   41	49	64	finally
    //   14	23	74	finally
    //   29	41	74	finally
    //   49	54	74	finally
    //   66	74	74	finally
  }
  
  public int setAppBootMode(String paramString, int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      paramInt = OnePlusAppBootManager.getInstance(null).setAppBootMode(paramString, paramInt);
      return paramInt;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void setAppBootState(boolean paramBoolean)
  {
    try
    {
      boostPriorityForLockedSection();
      OnePlusAppBootManager.getInstance(null).setAppBootState(paramBoolean);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public int setAppControlMode(String paramString, int paramInt1, int paramInt2)
  {
    if (DEBUG_ONEPLUS) {
      Slog.i(TAG, "AppControl#setAppControlMode # packageName=" + paramString + ", mode=" + paramInt1 + ", value=" + paramInt2);
    }
    if (paramInt1 == 0)
    {
      if (paramInt2 == 0)
      {
        OnePlusAppBootManager.getInstance(null).setAppBootMode(paramString, 2);
        try
        {
          this.mDeviceIdleService.removePowerSaveWhitelistApp(paramString);
          return 0;
        }
        catch (RemoteException paramString)
        {
          paramString.printStackTrace();
          return -2;
        }
      }
      if (paramInt2 == 1)
      {
        OnePlusAppBootManager.getInstance(null).setAppBootMode(paramString, 1);
        try
        {
          this.mDeviceIdleService.addPowerSaveWhitelistApp(paramString);
          return 0;
        }
        catch (RemoteException paramString)
        {
          paramString.printStackTrace();
          return -2;
        }
      }
      return -1;
    }
    return 0;
  }
  
  public int setAppControlState(int paramInt1, int paramInt2)
  {
    int j = 1;
    boolean bool = true;
    if (DEBUG_ONEPLUS) {
      Slog.i(TAG, "AppControl#setAppControlState # mode=" + paramInt1 + ", on=" + paramInt2);
    }
    int i = -1;
    if (paramInt1 == 0) {
      if (paramInt2 == 1)
      {
        OnePlusAppBootManager.getInstance(null).setAppBootState(true);
        Settings.System.putInt(this.mContext.getContentResolver(), "doze_mode_policy", 1);
        i = 1;
      }
    }
    do
    {
      return i;
      if (paramInt2 == 0)
      {
        OnePlusAppBootManager.getInstance(null).setAppBootState(false);
        Settings.System.putInt(this.mContext.getContentResolver(), "doze_mode_policy", 0);
        return 0;
      }
      return -2;
      if (paramInt1 == 1)
      {
        localObject = OnePlusAppBootManager.getInstance(null);
        if (paramInt2 == 1) {}
        for (;;)
        {
          ((OnePlusAppBootManager)localObject).setAppBootState(bool);
          return 2;
          bool = false;
        }
      }
    } while (paramInt1 != 2);
    Object localObject = this.mContext.getContentResolver();
    if (paramInt2 == 1) {}
    for (paramInt1 = j;; paramInt1 = 0)
    {
      Settings.System.putInt((ContentResolver)localObject, "doze_mode_policy", paramInt1);
      return 3;
    }
  }
  
  public void setBgMonitorMode(boolean paramBoolean)
  {
    this.mOHPD.setBgMonitorMode(paramBoolean);
  }
  
  /* Error */
  public void setDebugApp(String paramString, boolean paramBoolean1, boolean paramBoolean2)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11104
    //   4: ldc_w 11106
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore 5
    //   15: iload_3
    //   16: ifeq +40 -> 56
    //   19: aload_0
    //   20: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   23: invokevirtual 5043	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
    //   26: astore 7
    //   28: aload 7
    //   30: ldc_w 5617
    //   33: aload_1
    //   34: invokestatic 11109	android/provider/Settings$Global:putString	(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z
    //   37: pop
    //   38: iload_2
    //   39: ifeq +94 -> 133
    //   42: iconst_1
    //   43: istore 4
    //   45: aload 7
    //   47: ldc_w 5623
    //   50: iload 4
    //   52: invokestatic 11075	android/provider/Settings$Global:putInt	(Landroid/content/ContentResolver;Ljava/lang/String;I)Z
    //   55: pop
    //   56: aload_0
    //   57: monitorenter
    //   58: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   61: iload_3
    //   62: ifne +19 -> 81
    //   65: aload_0
    //   66: aload_0
    //   67: getfield 1621	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
    //   70: putfield 1627	com/android/server/am/ActivityManagerService:mOrigDebugApp	Ljava/lang/String;
    //   73: aload_0
    //   74: aload_0
    //   75: getfield 1623	com/android/server/am/ActivityManagerService:mWaitForDebugger	Z
    //   78: putfield 1629	com/android/server/am/ActivityManagerService:mOrigWaitForDebugger	Z
    //   81: aload_0
    //   82: aload_1
    //   83: putfield 1621	com/android/server/am/ActivityManagerService:mDebugApp	Ljava/lang/String;
    //   86: aload_0
    //   87: iload_2
    //   88: putfield 1623	com/android/server/am/ActivityManagerService:mWaitForDebugger	Z
    //   91: iload_3
    //   92: ifeq +47 -> 139
    //   95: iconst_0
    //   96: istore_2
    //   97: aload_0
    //   98: iload_2
    //   99: putfield 1625	com/android/server/am/ActivityManagerService:mDebugTransient	Z
    //   102: aload_1
    //   103: ifnull +19 -> 122
    //   106: aload_0
    //   107: aload_1
    //   108: iconst_m1
    //   109: iconst_0
    //   110: iconst_0
    //   111: iconst_1
    //   112: iconst_1
    //   113: iconst_0
    //   114: iconst_m1
    //   115: ldc_w 11111
    //   118: invokevirtual 4629	com/android/server/am/ActivityManagerService:forceStopPackageLocked	(Ljava/lang/String;IZZZZZILjava/lang/String;)Z
    //   121: pop
    //   122: aload_0
    //   123: monitorexit
    //   124: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   127: lload 5
    //   129: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   132: return
    //   133: iconst_0
    //   134: istore 4
    //   136: goto -91 -> 45
    //   139: iconst_1
    //   140: istore_2
    //   141: goto -44 -> 97
    //   144: astore_1
    //   145: aload_0
    //   146: monitorexit
    //   147: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   150: aload_1
    //   151: athrow
    //   152: astore_1
    //   153: lload 5
    //   155: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   158: aload_1
    //   159: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	160	0	this	ActivityManagerService
    //   0	160	1	paramString	String
    //   0	160	2	paramBoolean1	boolean
    //   0	160	3	paramBoolean2	boolean
    //   43	92	4	i	int
    //   13	141	5	l	long
    //   26	20	7	localContentResolver	ContentResolver
    // Exception table:
    //   from	to	target	type
    //   58	61	144	finally
    //   65	81	144	finally
    //   81	91	144	finally
    //   97	102	144	finally
    //   106	122	144	finally
    //   19	38	152	finally
    //   45	56	152	finally
    //   56	58	152	finally
    //   122	127	152	finally
    //   145	152	152	finally
  }
  
  public void setDumpHeapDebugLimit(String paramString1, int paramInt, long paramLong, String paramString2)
  {
    if (paramString1 != null) {
      enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
    }
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        if (paramLong > 0L)
        {
          this.mMemWatchProcesses.put(paramString1, paramInt, new Pair(Long.valueOf(paramLong), paramString2));
          return;
          ProcessRecord localProcessRecord;
          synchronized (this.mPidsSelfLocked)
          {
            localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(Binder.getCallingPid());
            if (localProcessRecord == null) {
              throw new SecurityException("No process found for calling pid " + Binder.getCallingPid());
            }
          }
          if ((!Build.IS_DEBUGGABLE) && ((localProcessRecord.info.flags & 0x2) == 0)) {
            throw new SecurityException("Not running a debuggable build");
          }
          paramString1 = localProcessRecord.processName;
          paramInt = localProcessRecord.uid;
          if (paramString2 != null)
          {
            boolean bool = localProcessRecord.pkgList.containsKey(paramString2);
            if (!bool) {}
          }
          else
          {
            break;
          }
          throw new SecurityException("Package " + paramString2 + " is not running in " + localProcessRecord);
        }
        if (paramInt != 0) {
          this.mMemWatchProcesses.remove(paramString1, paramInt);
        } else {
          this.mMemWatchProcesses.getMap().remove(paramString1);
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
  }
  
  boolean setFocusedActivityLocked(ActivityRecord paramActivityRecord, String paramString)
  {
    if ((paramActivityRecord == null) || (this.mFocusedActivity == paramActivityRecord)) {
      return false;
    }
    if (!paramActivityRecord.isFocusable())
    {
      if (ActivityManagerDebugConfig.DEBUG_FOCUS) {
        Slog.d(TAG_FOCUS, "setFocusedActivityLocked: unfocusable r=" + paramActivityRecord);
      }
      return false;
    }
    if (ActivityManagerDebugConfig.DEBUG_FOCUS) {
      Slog.d(TAG_FOCUS, "setFocusedActivityLocked: r=" + paramActivityRecord);
    }
    boolean bool = this.mDoingSetFocusedActivity;
    if (bool) {
      Slog.w(TAG, "setFocusedActivityLocked: called recursively, r=" + paramActivityRecord + ", reason=" + paramString);
    }
    this.mDoingSetFocusedActivity = true;
    ActivityRecord localActivityRecord = this.mFocusedActivity;
    this.mFocusedActivity = paramActivityRecord;
    if (mEnableNetOpts) {
      networkOptsCheck(0, paramActivityRecord.processName);
    }
    label285:
    int i;
    if (paramActivityRecord.task.isApplicationTask()) {
      if (this.mCurAppTimeTracker != paramActivityRecord.appTimeTracker)
      {
        if (this.mCurAppTimeTracker != null)
        {
          this.mCurAppTimeTracker.stop();
          this.mHandler.obtainMessage(55, this.mCurAppTimeTracker).sendToTarget();
          this.mStackSupervisor.clearOtherAppTimeTrackers(paramActivityRecord.appTimeTracker);
          this.mCurAppTimeTracker = null;
        }
        if (paramActivityRecord.appTimeTracker != null)
        {
          this.mCurAppTimeTracker = paramActivityRecord.appTimeTracker;
          startTimeTrackingFocusedActivityLocked();
        }
        if (paramActivityRecord.task.voiceInteractor == null) {
          break label489;
        }
        startRunningVoiceLocked(paramActivityRecord.task.voiceSession, paramActivityRecord.info.applicationInfo.uid);
        if (this.mStackSupervisor.moveActivityStackToFront(paramActivityRecord, paramString + " setFocusedActivity")) {
          this.mWindowManager.setFocusedApp(paramActivityRecord.appToken, true);
        }
        applyUpdateLockStateLocked(paramActivityRecord);
        applyUpdateVrModeLocked(paramActivityRecord);
        if (this.mFocusedActivity.userId != this.mLastFocusedUserId)
        {
          this.mHandler.removeMessages(53);
          this.mHandler.obtainMessage(53, this.mFocusedActivity.userId, 0).sendToTarget();
          this.mLastFocusedUserId = this.mFocusedActivity.userId;
        }
        if (this.mFocusedActivity != paramActivityRecord) {
          Slog.w(TAG, "setFocusedActivityLocked: r=" + paramActivityRecord + " but focused to " + this.mFocusedActivity);
        }
        this.mDoingSetFocusedActivity = bool;
        if (this.mFocusedActivity != null) {
          break label538;
        }
        i = -1;
        label455:
        if (this.mFocusedActivity != null) {
          break label549;
        }
      }
    }
    label489:
    label538:
    label549:
    for (paramActivityRecord = "NULL";; paramActivityRecord = this.mFocusedActivity.shortComponentName)
    {
      EventLogTags.writeAmFocusedActivity(i, paramActivityRecord, paramString);
      return true;
      startTimeTrackingFocusedActivityLocked();
      break;
      paramActivityRecord.appTimeTracker = null;
      break;
      finishRunningVoiceLocked();
      if (localActivityRecord == null) {
        break label285;
      }
      IVoiceInteractionSession localIVoiceInteractionSession2 = localActivityRecord.task.voiceSession;
      IVoiceInteractionSession localIVoiceInteractionSession1 = localIVoiceInteractionSession2;
      if (localIVoiceInteractionSession2 == null)
      {
        localIVoiceInteractionSession1 = localActivityRecord.voiceSession;
        if (localIVoiceInteractionSession1 == null) {
          break label285;
        }
      }
      finishVoiceTask(localIVoiceInteractionSession1);
      break label285;
      i = this.mFocusedActivity.userId;
      break label455;
    }
  }
  
  /* Error */
  public void setFocusedStack(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 11182
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: getstatic 8535	com/android/server/am/ActivityManagerDebugConfig:DEBUG_FOCUS	Z
    //   13: ifeq +30 -> 43
    //   16: getstatic 1103	com/android/server/am/ActivityManagerService:TAG_FOCUS	Ljava/lang/String;
    //   19: new 1066	java/lang/StringBuilder
    //   22: dup
    //   23: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   26: ldc_w 11184
    //   29: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   32: iload_1
    //   33: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   36: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   39: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   42: pop
    //   43: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   46: lstore_2
    //   47: aload_0
    //   48: monitorenter
    //   49: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   52: aload_0
    //   53: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   56: iload_1
    //   57: invokevirtual 8631	com/android/server/am/ActivityStackSupervisor:getStack	(I)Lcom/android/server/am/ActivityStack;
    //   60: astore 4
    //   62: aload 4
    //   64: ifnonnull +13 -> 77
    //   67: aload_0
    //   68: monitorexit
    //   69: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   72: lload_2
    //   73: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   76: return
    //   77: aload_0
    //   78: aload 4
    //   80: invokevirtual 6179	com/android/server/am/ActivityStack:topRunningActivityLocked	()Lcom/android/server/am/ActivityRecord;
    //   83: ldc_w 11185
    //   86: invokevirtual 10927	com/android/server/am/ActivityManagerService:setFocusedActivityLocked	(Lcom/android/server/am/ActivityRecord;Ljava/lang/String;)Z
    //   89: ifeq +11 -> 100
    //   92: aload_0
    //   93: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   96: invokevirtual 3581	com/android/server/am/ActivityStackSupervisor:resumeFocusedStackTopActivityLocked	()Z
    //   99: pop
    //   100: aload_0
    //   101: monitorexit
    //   102: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   105: lload_2
    //   106: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   109: return
    //   110: astore 4
    //   112: aload_0
    //   113: monitorexit
    //   114: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   117: aload 4
    //   119: athrow
    //   120: astore 4
    //   122: lload_2
    //   123: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   126: aload 4
    //   128: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	129	0	this	ActivityManagerService
    //   0	129	1	paramInt	int
    //   46	77	2	l	long
    //   60	19	4	localActivityStack	ActivityStack
    //   110	8	4	localObject1	Object
    //   120	7	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   49	62	110	finally
    //   77	100	110	finally
    //   47	49	120	finally
    //   67	72	120	finally
    //   100	105	120	finally
    //   112	120	120	finally
  }
  
  /* Error */
  public void setFocusedTask(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 11188
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: getstatic 8535	com/android/server/am/ActivityManagerDebugConfig:DEBUG_FOCUS	Z
    //   13: ifeq +30 -> 43
    //   16: getstatic 1103	com/android/server/am/ActivityManagerService:TAG_FOCUS	Ljava/lang/String;
    //   19: new 1066	java/lang/StringBuilder
    //   22: dup
    //   23: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   26: ldc_w 11190
    //   29: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   32: iload_1
    //   33: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   36: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   39: invokestatic 2558	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   42: pop
    //   43: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   46: lstore_2
    //   47: aload_0
    //   48: monitorenter
    //   49: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   52: aload_0
    //   53: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   56: iload_1
    //   57: invokevirtual 10128	com/android/server/am/ActivityStackSupervisor:anyTaskForIdLocked	(I)Lcom/android/server/am/TaskRecord;
    //   60: astore 4
    //   62: aload 4
    //   64: ifnonnull +13 -> 77
    //   67: aload_0
    //   68: monitorexit
    //   69: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   72: lload_2
    //   73: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   76: return
    //   77: aload_0
    //   78: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   81: aload 4
    //   83: getfield 3538	com/android/server/am/TaskRecord:userId	I
    //   86: invokevirtual 11193	com/android/server/am/UserController:shouldConfirmCredentials	(I)Z
    //   89: ifeq +65 -> 154
    //   92: aload_0
    //   93: getfield 1995	com/android/server/am/ActivityManagerService:mActivityStarter	Lcom/android/server/am/ActivityStarter;
    //   96: aload 4
    //   98: getfield 3538	com/android/server/am/TaskRecord:userId	I
    //   101: invokevirtual 10327	com/android/server/am/ActivityStarter:showConfirmDeviceCredential	(I)V
    //   104: aload 4
    //   106: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   109: ifnull +35 -> 144
    //   112: aload 4
    //   114: getfield 3879	com/android/server/am/TaskRecord:stack	Lcom/android/server/am/ActivityStack;
    //   117: getfield 3884	com/android/server/am/ActivityStack:mStackId	I
    //   120: iconst_2
    //   121: if_icmpne +23 -> 144
    //   124: aload_0
    //   125: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   128: aload 4
    //   130: getfield 3553	com/android/server/am/TaskRecord:taskId	I
    //   133: iconst_1
    //   134: iconst_0
    //   135: iconst_0
    //   136: ldc_w 11194
    //   139: iconst_1
    //   140: invokevirtual 8652	com/android/server/am/ActivityStackSupervisor:moveTaskToStackLocked	(IIZZLjava/lang/String;Z)Z
    //   143: pop
    //   144: aload_0
    //   145: monitorexit
    //   146: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   149: lload_2
    //   150: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   153: return
    //   154: aload_0
    //   155: aload 4
    //   157: invokevirtual 11195	com/android/server/am/TaskRecord:topRunningActivityLocked	()Lcom/android/server/am/ActivityRecord;
    //   160: ldc_w 11194
    //   163: invokevirtual 10927	com/android/server/am/ActivityManagerService:setFocusedActivityLocked	(Lcom/android/server/am/ActivityRecord;Ljava/lang/String;)Z
    //   166: ifeq +11 -> 177
    //   169: aload_0
    //   170: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   173: invokevirtual 3581	com/android/server/am/ActivityStackSupervisor:resumeFocusedStackTopActivityLocked	()Z
    //   176: pop
    //   177: aload_0
    //   178: monitorexit
    //   179: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   182: lload_2
    //   183: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   186: return
    //   187: astore 4
    //   189: aload_0
    //   190: monitorexit
    //   191: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   194: aload 4
    //   196: athrow
    //   197: astore 4
    //   199: lload_2
    //   200: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   203: aload 4
    //   205: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	206	0	this	ActivityManagerService
    //   0	206	1	paramInt	int
    //   46	154	2	l	long
    //   60	96	4	localTaskRecord	TaskRecord
    //   187	8	4	localObject1	Object
    //   197	7	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   49	62	187	finally
    //   77	144	187	finally
    //   154	177	187	finally
    //   47	49	197	finally
    //   67	72	197	finally
    //   144	149	197	finally
    //   177	182	197	finally
    //   189	197	197	finally
  }
  
  public void setFrontActivityScreenCompatMode(int paramInt)
  {
    enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setFrontActivityScreenCompatMode");
    try
    {
      boostPriorityForLockedSection();
      this.mCompatModePackages.setFrontActivityScreenCompatModeLocked(paramInt);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void setHasTopUi(boolean paramBoolean)
    throws RemoteException
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11205
    //   4: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   7: ifeq +70 -> 77
    //   10: new 1066	java/lang/StringBuilder
    //   13: dup
    //   14: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   17: ldc_w 11207
    //   20: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   23: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   26: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   29: ldc_w 3218
    //   32: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   35: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   38: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   41: ldc_w 4435
    //   44: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   47: ldc_w 11205
    //   50: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   53: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   56: astore 6
    //   58: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   61: aload 6
    //   63: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   66: pop
    //   67: new 4439	java/lang/SecurityException
    //   70: dup
    //   71: aload 6
    //   73: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   76: athrow
    //   77: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   80: istore_3
    //   81: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   84: lstore 4
    //   86: aload_0
    //   87: monitorenter
    //   88: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   91: iconst_0
    //   92: istore_2
    //   93: aload_0
    //   94: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   97: astore 6
    //   99: aload 6
    //   101: monitorenter
    //   102: aload_0
    //   103: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   106: iload_3
    //   107: invokevirtual 2165	android/util/SparseArray:get	(I)Ljava/lang/Object;
    //   110: checkcast 2141	com/android/server/am/ProcessRecord
    //   113: astore 7
    //   115: aload 7
    //   117: ifnonnull +44 -> 161
    //   120: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   123: new 1066	java/lang/StringBuilder
    //   126: dup
    //   127: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   130: ldc_w 11209
    //   133: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   136: iload_3
    //   137: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   140: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   143: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   146: pop
    //   147: aload 6
    //   149: monitorexit
    //   150: aload_0
    //   151: monitorexit
    //   152: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   155: lload 4
    //   157: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   160: return
    //   161: aload 7
    //   163: getfield 3671	com/android/server/am/ProcessRecord:hasTopUi	Z
    //   166: iload_1
    //   167: if_icmpeq +48 -> 215
    //   170: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   173: new 1066	java/lang/StringBuilder
    //   176: dup
    //   177: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   180: ldc_w 11211
    //   183: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   186: iload_1
    //   187: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   190: ldc_w 11213
    //   193: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   196: iload_3
    //   197: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   200: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   203: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   206: pop
    //   207: aload 7
    //   209: iload_1
    //   210: putfield 3671	com/android/server/am/ProcessRecord:hasTopUi	Z
    //   213: iconst_1
    //   214: istore_2
    //   215: aload 6
    //   217: monitorexit
    //   218: iload_2
    //   219: ifeq +10 -> 229
    //   222: aload_0
    //   223: aload 7
    //   225: invokevirtual 4764	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
    //   228: pop
    //   229: aload_0
    //   230: monitorexit
    //   231: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   234: lload 4
    //   236: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   239: return
    //   240: astore 7
    //   242: aload 6
    //   244: monitorexit
    //   245: aload 7
    //   247: athrow
    //   248: astore 6
    //   250: aload_0
    //   251: monitorexit
    //   252: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   255: aload 6
    //   257: athrow
    //   258: astore 6
    //   260: lload 4
    //   262: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   265: aload 6
    //   267: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	268	0	this	ActivityManagerService
    //   0	268	1	paramBoolean	boolean
    //   92	127	2	i	int
    //   80	117	3	j	int
    //   84	177	4	l	long
    //   248	8	6	localObject2	Object
    //   258	8	6	localObject3	Object
    //   113	111	7	localProcessRecord	ProcessRecord
    //   240	6	7	localObject4	Object
    // Exception table:
    //   from	to	target	type
    //   102	115	240	finally
    //   120	147	240	finally
    //   161	213	240	finally
    //   88	91	248	finally
    //   93	102	248	finally
    //   147	150	248	finally
    //   215	218	248	finally
    //   222	229	248	finally
    //   242	248	248	finally
    //   86	88	258	finally
    //   150	155	258	finally
    //   229	234	258	finally
    //   250	258	258	finally
  }
  
  public void setIgnoredAnrProcess(String paramString)
  {
    this.mHandler.removeMessages(54088);
    if (paramString == null)
    {
      mIgnoredAnrProcess = "";
      return;
    }
    Slog.i(TAG, "setIgnoredAnrProcess " + paramString);
    mIgnoredAnrProcess = new String(paramString);
    paramString = this.mHandler.obtainMessage(54088);
    this.mHandler.sendMessageDelayed(paramString, 20000L);
  }
  
  public void setImmersive(IBinder paramIBinder, boolean paramBoolean)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder == null) {
        throw new IllegalArgumentException();
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    paramIBinder.immersive = paramBoolean;
    if (paramIBinder == this.mFocusedActivity)
    {
      if (ActivityManagerDebugConfig.DEBUG_IMMERSIVE) {
        Slog.d(TAG_IMMERSIVE, "Frontmost changed immersion: " + paramIBinder);
      }
      applyUpdateLockStateLocked(paramIBinder);
    }
    resetPriorityAfterLockedSection();
  }
  
  public void setInstaller(Installer paramInstaller)
  {
    this.mInstaller = paramInstaller;
  }
  
  /* Error */
  public void setKeyguardDone(boolean paramBoolean)
  {
    // Byte code:
    //   0: getstatic 1263	com/android/server/am/ActivityManagerService:IS_APP_LOCKER_ENABLED	Z
    //   3: ifne +4 -> 7
    //   6: return
    //   7: aload_0
    //   8: ldc_w 11228
    //   11: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   14: ifeq +14 -> 28
    //   17: new 4439	java/lang/SecurityException
    //   20: dup
    //   21: ldc_w 11230
    //   24: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   27: athrow
    //   28: aload_0
    //   29: monitorenter
    //   30: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   33: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   36: new 1066	java/lang/StringBuilder
    //   39: dup
    //   40: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   43: ldc_w 11232
    //   46: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   49: iload_1
    //   50: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   53: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   56: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   59: pop
    //   60: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   63: lstore_2
    //   64: iload_1
    //   65: ifne +198 -> 263
    //   68: aload_0
    //   69: getfield 2095	com/android/server/am/ActivityManagerService:mPassedPackageList	Ljava/util/ArrayList;
    //   72: invokevirtual 3435	java/util/ArrayList:clear	()V
    //   75: aload_0
    //   76: invokevirtual 4453	com/android/server/am/ActivityManagerService:getFocusedStack	()Lcom/android/server/am/ActivityStack;
    //   79: astore 4
    //   81: aload 4
    //   83: ifnull +165 -> 248
    //   86: aload 4
    //   88: invokevirtual 6179	com/android/server/am/ActivityStack:topRunningActivityLocked	()Lcom/android/server/am/ActivityRecord;
    //   91: astore 5
    //   93: aload_0
    //   94: aload 5
    //   96: invokevirtual 11234	com/android/server/am/ActivityManagerService:isAppLocked	(Lcom/android/server/am/ActivityRecord;)Z
    //   99: ifeq +149 -> 248
    //   102: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   105: new 1066	java/lang/StringBuilder
    //   108: dup
    //   109: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   112: ldc_w 11236
    //   115: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   118: aload 5
    //   120: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   123: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   126: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   129: pop
    //   130: new 2070	android/content/Intent
    //   133: dup
    //   134: aload_0
    //   135: getfield 2073	com/android/server/am/ActivityManagerService:mConfirmIntent	Landroid/content/Intent;
    //   138: invokespecial 3528	android/content/Intent:<init>	(Landroid/content/Intent;)V
    //   141: astore 6
    //   143: aload 6
    //   145: ldc_w 369
    //   148: aload 5
    //   150: getfield 3974	com/android/server/am/ActivityRecord:appInfo	Landroid/content/pm/ApplicationInfo;
    //   153: getfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   156: invokevirtual 4607	android/content/Intent:putExtra	(Ljava/lang/String;I)Landroid/content/Intent;
    //   159: pop
    //   160: aload 5
    //   162: getfield 3957	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
    //   165: invokevirtual 3126	android/content/Intent:getComponent	()Landroid/content/ComponentName;
    //   168: ifnull +159 -> 327
    //   171: aload 5
    //   173: getfield 3957	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
    //   176: invokevirtual 3126	android/content/Intent:getComponent	()Landroid/content/ComponentName;
    //   179: invokevirtual 11239	android/content/ComponentName:flattenToString	()Ljava/lang/String;
    //   182: astore 4
    //   184: aload 6
    //   186: ldc_w 371
    //   189: aload 4
    //   191: invokevirtual 5553	android/content/Intent:putExtra	(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
    //   194: pop
    //   195: aload 5
    //   197: getfield 3679	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
    //   200: ifnonnull +135 -> 335
    //   203: aload_0
    //   204: getfield 1995	com/android/server/am/ActivityManagerService:mActivityStarter	Lcom/android/server/am/ActivityStarter;
    //   207: aconst_null
    //   208: aload 6
    //   210: aconst_null
    //   211: aconst_null
    //   212: aload_0
    //   213: getfield 9859	com/android/server/am/ActivityManagerService:mConfirmResolveInfo	Landroid/content/pm/ResolveInfo;
    //   216: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   219: aconst_null
    //   220: aconst_null
    //   221: aconst_null
    //   222: aload 5
    //   224: getfield 4113	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
    //   227: aconst_null
    //   228: aload_0
    //   229: getfield 2093	com/android/server/am/ActivityManagerService:mRequestHashCode	I
    //   232: iconst_0
    //   233: iconst_0
    //   234: aconst_null
    //   235: iconst_0
    //   236: iconst_0
    //   237: iconst_0
    //   238: aconst_null
    //   239: iconst_0
    //   240: iconst_0
    //   241: aconst_null
    //   242: aconst_null
    //   243: aconst_null
    //   244: invokevirtual 11243	com/android/server/am/ActivityStarter:startActivityLocked	(Landroid/app/IApplicationThread;Landroid/content/Intent;Landroid/content/Intent;Ljava/lang/String;Landroid/content/pm/ActivityInfo;Landroid/content/pm/ResolveInfo;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;Landroid/os/IBinder;Ljava/lang/String;IIILjava/lang/String;IIILandroid/app/ActivityOptions;ZZ[Lcom/android/server/am/ActivityRecord;Lcom/android/server/am/ActivityStackSupervisor$ActivityContainer;Lcom/android/server/am/TaskRecord;)I
    //   247: pop
    //   248: aload_0
    //   249: iload_1
    //   250: putfield 1451	com/android/server/am/ActivityManagerService:mKeyguardDone	Z
    //   253: lload_2
    //   254: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   257: aload_0
    //   258: monitorexit
    //   259: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   262: return
    //   263: aload_0
    //   264: iload_1
    //   265: putfield 1451	com/android/server/am/ActivityManagerService:mKeyguardDone	Z
    //   268: goto -193 -> 75
    //   271: astore 4
    //   273: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   276: new 1066	java/lang/StringBuilder
    //   279: dup
    //   280: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   283: ldc_w 11245
    //   286: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   289: aload_0
    //   290: getfield 2073	com/android/server/am/ActivityManagerService:mConfirmIntent	Landroid/content/Intent;
    //   293: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   296: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   299: aload 4
    //   301: invokestatic 4351	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   304: pop
    //   305: aload_0
    //   306: iload_1
    //   307: putfield 1451	com/android/server/am/ActivityManagerService:mKeyguardDone	Z
    //   310: lload_2
    //   311: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   314: goto -57 -> 257
    //   317: astore 4
    //   319: aload_0
    //   320: monitorexit
    //   321: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   324: aload 4
    //   326: athrow
    //   327: ldc_w 1270
    //   330: astore 4
    //   332: goto -148 -> 184
    //   335: aload_0
    //   336: aload 5
    //   338: getfield 3679	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
    //   341: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   344: aload 5
    //   346: getfield 3956	com/android/server/am/ActivityRecord:packageName	Ljava/lang/String;
    //   349: aload 6
    //   351: ldc_w 1270
    //   354: aload 5
    //   356: getfield 4113	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
    //   359: aload 5
    //   361: getfield 11248	com/android/server/am/ActivityRecord:resultWho	Ljava/lang/String;
    //   364: aload_0
    //   365: getfield 2093	com/android/server/am/ActivityManagerService:mRequestHashCode	I
    //   368: iconst_0
    //   369: aconst_null
    //   370: aconst_null
    //   371: iconst_0
    //   372: sipush 55536
    //   375: invokevirtual 11250	com/android/server/am/ActivityManagerService:oemStartActivityAsCaller	(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;ZI)I
    //   378: pop
    //   379: goto -131 -> 248
    //   382: astore 4
    //   384: aload_0
    //   385: iload_1
    //   386: putfield 1451	com/android/server/am/ActivityManagerService:mKeyguardDone	Z
    //   389: lload_2
    //   390: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   393: aload 4
    //   395: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	396	0	this	ActivityManagerService
    //   0	396	1	paramBoolean	boolean
    //   63	327	2	l	long
    //   79	111	4	localObject1	Object
    //   271	29	4	localException	Exception
    //   317	8	4	localObject2	Object
    //   330	1	4	str	String
    //   382	12	4	localObject3	Object
    //   91	269	5	localActivityRecord	ActivityRecord
    //   141	209	6	localIntent	Intent
    // Exception table:
    //   from	to	target	type
    //   68	75	271	java/lang/Exception
    //   75	81	271	java/lang/Exception
    //   86	184	271	java/lang/Exception
    //   184	248	271	java/lang/Exception
    //   263	268	271	java/lang/Exception
    //   335	379	271	java/lang/Exception
    //   30	64	317	finally
    //   248	257	317	finally
    //   305	314	317	finally
    //   384	396	317	finally
    //   68	75	382	finally
    //   75	81	382	finally
    //   86	184	382	finally
    //   184	248	382	finally
    //   263	268	382	finally
    //   273	305	382	finally
    //   335	379	382	finally
  }
  
  /* Error */
  public void setLenientBackgroundCheck(boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11253
    //   4: ldc_w 11255
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore_3
    //   14: aload_0
    //   15: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   18: invokevirtual 5043	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
    //   21: astore 5
    //   23: iload_1
    //   24: ifeq +35 -> 59
    //   27: iconst_1
    //   28: istore_2
    //   29: aload 5
    //   31: ldc_w 5627
    //   34: iload_2
    //   35: invokestatic 11075	android/provider/Settings$Global:putInt	(Landroid/content/ContentResolver;Ljava/lang/String;I)Z
    //   38: pop
    //   39: aload_0
    //   40: monitorenter
    //   41: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   44: aload_0
    //   45: iload_1
    //   46: putfield 1633	com/android/server/am/ActivityManagerService:mLenientBackgroundCheck	Z
    //   49: aload_0
    //   50: monitorexit
    //   51: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   54: lload_3
    //   55: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   58: return
    //   59: iconst_0
    //   60: istore_2
    //   61: goto -32 -> 29
    //   64: astore 5
    //   66: aload_0
    //   67: monitorexit
    //   68: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   71: aload 5
    //   73: athrow
    //   74: astore 5
    //   76: lload_3
    //   77: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   80: aload 5
    //   82: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	83	0	this	ActivityManagerService
    //   0	83	1	paramBoolean	boolean
    //   28	33	2	i	int
    //   13	64	3	l	long
    //   21	9	5	localContentResolver	ContentResolver
    //   64	8	5	localObject1	Object
    //   74	7	5	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   41	49	64	finally
    //   14	23	74	finally
    //   29	41	74	finally
    //   49	54	74	finally
    //   66	74	74	finally
  }
  
  /* Error */
  public void setLockScreenShown(boolean paramBoolean1, boolean paramBoolean2)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11228
    //   4: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   7: ifeq +14 -> 21
    //   10: new 4439	java/lang/SecurityException
    //   13: dup
    //   14: ldc_w 11230
    //   17: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   20: athrow
    //   21: aload_0
    //   22: monitorenter
    //   23: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   26: invokestatic 3173	android/os/Binder:getCallingPid	()I
    //   29: istore 4
    //   31: iload_1
    //   32: ifeq +216 -> 248
    //   35: bipush -2
    //   37: istore_3
    //   38: iload 4
    //   40: iload_3
    //   41: invokestatic 2683	android/os/Process:setThreadPriority	(II)V
    //   44: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   47: lstore 6
    //   49: getstatic 8594	com/android/server/am/ActivityManagerDebugConfig:DEBUG_LOCKSCREEN	Z
    //   52: ifeq +290 -> 342
    //   55: aload_0
    //   56: new 1066	java/lang/StringBuilder
    //   59: dup
    //   60: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   63: ldc_w 11258
    //   66: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   69: iload_1
    //   70: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   73: ldc_w 11260
    //   76: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   79: iload_2
    //   80: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   83: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   86: invokevirtual 9973	com/android/server/am/ActivityManagerService:logLockScreen	(Ljava/lang/String;)V
    //   89: goto +253 -> 342
    //   92: aload_0
    //   93: iload_3
    //   94: putfield 1585	com/android/server/am/ActivityManagerService:mLockScreenShown	I
    //   97: iload_1
    //   98: ifeq +38 -> 136
    //   101: iload_2
    //   102: ifeq +34 -> 136
    //   105: aload_0
    //   106: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   109: astore 8
    //   111: aload_0
    //   112: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   115: getfield 11263	com/android/server/am/ActivityStackSupervisor:mFocusedStack	Lcom/android/server/am/ActivityStack;
    //   118: invokevirtual 9110	com/android/server/am/ActivityStack:getStackId	()I
    //   121: iconst_3
    //   122: if_icmpne +166 -> 288
    //   125: iconst_1
    //   126: istore 5
    //   128: aload 8
    //   130: iconst_3
    //   131: iload 5
    //   133: invokevirtual 10229	com/android/server/am/ActivityStackSupervisor:moveTasksToFullscreenStackLocked	(IZ)V
    //   136: aload_0
    //   137: invokevirtual 8875	com/android/server/am/ActivityManagerService:updateSleepIfNeededLocked	()V
    //   140: lload 6
    //   142: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   145: aload_0
    //   146: monitorexit
    //   147: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   150: getstatic 1265	com/android/server/am/ActivityManagerService:IS_SCENE_MODES_FEATURED	Z
    //   153: ifeq +94 -> 247
    //   156: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   159: new 1066	java/lang/StringBuilder
    //   162: dup
    //   163: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   166: ldc_w 11265
    //   169: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   172: iload_1
    //   173: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   176: ldc_w 11267
    //   179: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   182: iload_2
    //   183: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   186: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   189: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   192: pop
    //   193: aload_0
    //   194: getfield 11269	com/android/server/am/ActivityManagerService:mOemExSvc	Lcom/oem/os/IOemExService;
    //   197: ifnonnull +16 -> 213
    //   200: aload_0
    //   201: ldc_w 11271
    //   204: invokestatic 3468	android/os/ServiceManager:getService	(Ljava/lang/String;)Landroid/os/IBinder;
    //   207: invokestatic 11276	com/oem/os/IOemExService$Stub:asInterface	(Landroid/os/IBinder;)Lcom/oem/os/IOemExService;
    //   210: putfield 11269	com/android/server/am/ActivityManagerService:mOemExSvc	Lcom/oem/os/IOemExService;
    //   213: aload_0
    //   214: getfield 11269	com/android/server/am/ActivityManagerService:mOemExSvc	Lcom/oem/os/IOemExService;
    //   217: astore 8
    //   219: iload_1
    //   220: ifeq +84 -> 304
    //   223: aload 8
    //   225: iload_2
    //   226: invokeinterface 11281 2 0
    //   231: aload_0
    //   232: getfield 1585	com/android/server/am/ActivityManagerService:mLockScreenShown	I
    //   235: iconst_2
    //   236: if_icmpne +11 -> 247
    //   239: aload_0
    //   240: invokevirtual 4453	com/android/server/am/ActivityManagerService:getFocusedStack	()Lcom/android/server/am/ActivityStack;
    //   243: iconst_0
    //   244: invokevirtual 11284	com/android/server/am/ActivityStack:updateSceneScreenEffectFlag	(I)V
    //   247: return
    //   248: iconst_0
    //   249: istore_3
    //   250: goto -212 -> 38
    //   253: astore 8
    //   255: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   258: ldc_w 11286
    //   261: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   264: pop
    //   265: aload 8
    //   267: invokevirtual 2680	java/lang/Exception:printStackTrace	()V
    //   270: goto -226 -> 44
    //   273: astore 8
    //   275: aload_0
    //   276: monitorexit
    //   277: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   280: aload 8
    //   282: athrow
    //   283: iconst_2
    //   284: istore_3
    //   285: goto -193 -> 92
    //   288: iconst_0
    //   289: istore 5
    //   291: goto -163 -> 128
    //   294: astore 8
    //   296: lload 6
    //   298: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   301: aload 8
    //   303: athrow
    //   304: iconst_1
    //   305: istore_2
    //   306: goto -83 -> 223
    //   309: astore 8
    //   311: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   314: new 1066	java/lang/StringBuilder
    //   317: dup
    //   318: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   321: ldc_w 11288
    //   324: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   327: aload 8
    //   329: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   332: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   335: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   338: pop
    //   339: goto -108 -> 231
    //   342: iload_1
    //   343: ifeq +7 -> 350
    //   346: iload_2
    //   347: ifeq -64 -> 283
    //   350: iconst_0
    //   351: istore_3
    //   352: goto -260 -> 92
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	355	0	this	ActivityManagerService
    //   0	355	1	paramBoolean1	boolean
    //   0	355	2	paramBoolean2	boolean
    //   37	315	3	i	int
    //   29	10	4	j	int
    //   126	164	5	bool	boolean
    //   47	250	6	l	long
    //   109	115	8	localObject1	Object
    //   253	13	8	localException	Exception
    //   273	8	8	localObject2	Object
    //   294	8	8	localObject3	Object
    //   309	19	8	localRemoteException	RemoteException
    // Exception table:
    //   from	to	target	type
    //   38	44	253	java/lang/Exception
    //   23	31	273	finally
    //   38	44	273	finally
    //   44	49	273	finally
    //   140	145	273	finally
    //   255	270	273	finally
    //   296	304	273	finally
    //   49	89	294	finally
    //   92	97	294	finally
    //   105	125	294	finally
    //   128	136	294	finally
    //   136	140	294	finally
    //   193	213	309	android/os/RemoteException
    //   213	219	309	android/os/RemoteException
    //   223	231	309	android/os/RemoteException
  }
  
  void setNativeDebuggingAppLocked(ApplicationInfo paramApplicationInfo, String paramString)
  {
    if ((!"1".equals(SystemProperties.get("ro.debuggable", "0"))) && ((paramApplicationInfo.flags & 0x2) == 0)) {
      throw new SecurityException("Process not debuggable: " + paramApplicationInfo.packageName);
    }
    this.mNativeDebuggingApp = paramString;
  }
  
  public void setPackageAskScreenCompat(String paramString, boolean paramBoolean)
  {
    enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageAskScreenCompat");
    try
    {
      boostPriorityForLockedSection();
      this.mCompatModePackages.setPackageAskCompatModeLocked(paramString, paramBoolean);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void setPackageScreenCompatMode(String paramString, int paramInt)
  {
    enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageScreenCompatMode");
    try
    {
      boostPriorityForLockedSection();
      this.mCompatModePackages.setPackageScreenCompatModeLocked(paramString, paramInt);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void setPermissionServiceBinderProxy(IBinder paramIBinder, int paramInt)
    throws RemoteException
  {
    if (!OpFeatures.isSupport(new int[] { 12 })) {
      return;
    }
    int i = Binder.getCallingUid();
    if ((i != 0) && (i != 1000)) {
      throw new SecurityException("setPermissionServiceBinderProxy called from non-system process");
    }
    switch (paramInt)
    {
    default: 
      return;
    case 0: 
      this.mPermissionRequestServiceBinderProxy = paramIBinder;
      Slog.i(TAG, "[CTAPermission] set request service proxy done");
      return;
    }
    this.mPermissionControlServiceBinderProxy = paramIBinder;
    Slog.i(TAG, "[CTAPermission] set control service proxy done");
  }
  
  public void setProcessForeground(IBinder paramIBinder, int paramInt, boolean paramBoolean)
  {
    enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessForeground()");
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        int i = 0;
        int j;
        synchronized (this.mPidsSelfLocked)
        {
          ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramInt);
          if ((localProcessRecord == null) && (paramBoolean))
          {
            Slog.w(TAG, "setProcessForeground called on unknown pid: " + paramInt);
            return;
          }
          Object localObject = (ForegroundToken)this.mForegroundProcesses.get(paramInt);
          if (localObject != null)
          {
            ((ForegroundToken)localObject).token.unlinkToDeath((IBinder.DeathRecipient)localObject, 0);
            this.mForegroundProcesses.remove(paramInt);
            if (localProcessRecord != null) {
              localProcessRecord.forcingToForeground = null;
            }
          }
          else
          {
            j = i;
            if (paramBoolean)
            {
              j = i;
              if (paramIBinder != null)
              {
                localObject = new ForegroundToken(this)
                {
                  public void binderDied()
                  {
                    jdField_this.foregroundTokenDied(this);
                  }
                };
                ((ForegroundToken)localObject).pid = paramInt;
                ((ForegroundToken)localObject).token = paramIBinder;
              }
            }
            try
            {
              paramIBinder.linkToDeath((IBinder.DeathRecipient)localObject, 0);
              this.mForegroundProcesses.put(paramInt, localObject);
              localProcessRecord.forcingToForeground = paramIBinder;
              j = 1;
            }
            catch (RemoteException paramIBinder)
            {
              j = i;
              continue;
            }
            if (j != 0) {
              updateOomAdjLocked();
            }
            return;
          }
        }
        i = 1;
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
  }
  
  /* Error */
  public void setProcessLimit(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11253
    //   4: ldc_w 11325
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_0
    //   11: monitorenter
    //   12: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   15: iload_1
    //   16: ifge +27 -> 43
    //   19: getstatic 1707	com/android/server/am/ProcessList:MAX_CACHED_APPS	I
    //   22: istore_2
    //   23: aload_0
    //   24: iload_2
    //   25: putfield 1709	com/android/server/am/ActivityManagerService:mProcessLimit	I
    //   28: aload_0
    //   29: iload_1
    //   30: putfield 1711	com/android/server/am/ActivityManagerService:mProcessLimitOverride	I
    //   33: aload_0
    //   34: monitorexit
    //   35: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   38: aload_0
    //   39: invokevirtual 6361	com/android/server/am/ActivityManagerService:trimApplications	()V
    //   42: return
    //   43: iload_1
    //   44: istore_2
    //   45: goto -22 -> 23
    //   48: astore_3
    //   49: aload_0
    //   50: monitorexit
    //   51: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   54: aload_3
    //   55: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	56	0	this	ActivityManagerService
    //   0	56	1	paramInt	int
    //   22	23	2	i	int
    //   48	7	3	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   12	15	48	finally
    //   19	23	48	finally
    //   23	33	48	finally
  }
  
  public boolean setProcessMemoryTrimLevel(String paramString, int paramInt1, int paramInt2)
  {
    try
    {
      boostPriorityForLockedSection();
      paramString = findProcessLocked(paramString, paramInt1, "setProcessMemoryTrimLevel");
      if (paramString == null) {
        return false;
      }
      if ((paramString.trimMemoryLevel < paramInt2) && (paramString.thread != null)) {
        if (paramInt2 >= 20)
        {
          paramInt1 = paramString.curProcState;
          if (paramInt1 < 7) {}
        }
        else
        {
          try
          {
            paramString.thread.scheduleTrimMemory(paramInt2);
            paramString.trimMemoryLevel = paramInt2;
            return true;
          }
          catch (RemoteException paramString) {}
        }
      }
      return false;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void setProfileApp(ApplicationInfo paramApplicationInfo, String paramString, ProfilerInfo paramProfilerInfo)
  {
    try
    {
      boostPriorityForLockedSection();
      if ((!"1".equals(SystemProperties.get("ro.debuggable", "0"))) && ((paramApplicationInfo.flags & 0x2) == 0)) {
        throw new SecurityException("Process not debuggable: " + paramApplicationInfo.packageName);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    this.mProfileApp = paramString;
    this.mProfileFile = paramProfilerInfo.profileFile;
    paramApplicationInfo = this.mProfileFd;
    if (paramApplicationInfo != null) {}
    try
    {
      this.mProfileFd.close();
      this.mProfileFd = null;
      this.mProfileFd = paramProfilerInfo.profileFd;
      this.mSamplingInterval = paramProfilerInfo.samplingInterval;
      this.mAutoStopProfiler = paramProfilerInfo.autoStopProfiler;
      this.mProfileType = 0;
      resetPriorityAfterLockedSection();
      return;
    }
    catch (IOException paramApplicationInfo)
    {
      for (;;) {}
    }
  }
  
  public void setRenderThread(int paramInt)
  {
    int i;
    try
    {
      boostPriorityForLockedSection();
      synchronized (this.mPidsSelfLocked)
      {
        i = Binder.getCallingPid();
        ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(i);
        if ((localProcessRecord == null) || (localProcessRecord.renderThreadTid != 0) || (paramInt <= 0)) {
          break label217;
        }
        if (!Process.isThreadInProcess(i, paramInt)) {
          throw new IllegalArgumentException("Render thread does not belong to process");
        }
      }
      ((ProcessRecord)localObject2).renderThreadTid = paramInt;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
      Slog.d("UI_FIFO", "Set RenderThread tid " + paramInt + " for pid " + i);
    }
    if (((ProcessRecord)localObject2).curSchedGroup == 2)
    {
      if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
        Slog.d("UI_FIFO", "Promoting " + paramInt + "out of band");
      }
      if (!this.mUseFifoUiScheduling) {
        break label204;
      }
      Process.setThreadScheduler(((ProcessRecord)localObject2).renderThreadTid, 1073741825, 1);
    }
    for (;;)
    {
      resetPriorityAfterLockedSection();
      return;
      label204:
      Process.setThreadPriority(((ProcessRecord)localObject2).renderThreadTid, -10);
      continue;
      label217:
      if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
        Slog.d("UI_FIFO", "Didn't set thread from setRenderThread? PID: " + i + ", TID: " + paramInt + " FIFO: " + this.mUseFifoUiScheduling);
      }
    }
  }
  
  public void setRequestedOrientation(IBinder paramIBinder, int paramInt)
  {
    Object localObject = null;
    try
    {
      boostPriorityForLockedSection();
      ActivityRecord localActivityRecord = ActivityRecord.isInStackLocked(paramIBinder);
      if (localActivityRecord == null) {
        return;
      }
      paramIBinder = localActivityRecord.task;
      if ((paramIBinder == null) || ((paramIBinder.mFullscreen) && (paramIBinder.stack.mFullscreen)))
      {
        long l = Binder.clearCallingIdentity();
        this.mWindowManager.setAppOrientation(localActivityRecord.appToken, paramInt);
        WindowManagerService localWindowManagerService = this.mWindowManager;
        Configuration localConfiguration = this.mConfiguration;
        paramIBinder = (IBinder)localObject;
        if (localActivityRecord.mayFreezeScreenLocked(localActivityRecord.app)) {
          paramIBinder = localActivityRecord.appToken;
        }
        paramIBinder = localWindowManagerService.updateOrientationFromAppTokens(localConfiguration, paramIBinder);
        if (paramIBinder != null)
        {
          localActivityRecord.frozenBeforeDestroy = true;
          if (!updateConfigurationLocked(paramIBinder, localActivityRecord, false)) {
            this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
          }
        }
        Binder.restoreCallingIdentity(l);
        return;
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void setServiceForeground(ComponentName paramComponentName, IBinder paramIBinder, int paramInt1, Notification paramNotification, int paramInt2)
  {
    try
    {
      boostPriorityForLockedSection();
      this.mServices.setServiceForegroundLocked(paramComponentName, paramIBinder, paramInt1, paramNotification, paramInt2);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void setSystemProcess()
  {
    // Byte code:
    //   0: ldc_w 4541
    //   3: aload_0
    //   4: iconst_1
    //   5: invokestatic 11384	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;Z)V
    //   8: ldc_w 1902
    //   11: aload_0
    //   12: getfield 1907	com/android/server/am/ActivityManagerService:mProcessStats	Lcom/android/server/am/ProcessStatsService;
    //   15: invokestatic 11386	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;)V
    //   18: ldc_w 11388
    //   21: new 138	com/android/server/am/ActivityManagerService$MemBinder
    //   24: dup
    //   25: aload_0
    //   26: invokespecial 11389	com/android/server/am/ActivityManagerService$MemBinder:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   29: invokestatic 11386	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;)V
    //   32: ldc_w 11391
    //   35: new 112	com/android/server/am/ActivityManagerService$GraphicsBinder
    //   38: dup
    //   39: aload_0
    //   40: invokespecial 11392	com/android/server/am/ActivityManagerService$GraphicsBinder:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   43: invokestatic 11386	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;)V
    //   46: ldc_w 11394
    //   49: new 94	com/android/server/am/ActivityManagerService$DbBinder
    //   52: dup
    //   53: aload_0
    //   54: invokespecial 11395	com/android/server/am/ActivityManagerService$DbBinder:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   57: invokestatic 11386	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;)V
    //   60: ldc_w 11397
    //   63: new 91	com/android/server/am/ActivityManagerService$CpuBinder
    //   66: dup
    //   67: aload_0
    //   68: invokespecial 11398	com/android/server/am/ActivityManagerService$CpuBinder:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   71: invokestatic 11386	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;)V
    //   74: ldc_w 11399
    //   77: new 150	com/android/server/am/ActivityManagerService$PermissionController
    //   80: dup
    //   81: aload_0
    //   82: invokespecial 11400	com/android/server/am/ActivityManagerService$PermissionController:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   85: invokestatic 11386	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;)V
    //   88: ldc_w 11402
    //   91: new 159	com/android/server/am/ActivityManagerService$ProcessInfoService
    //   94: dup
    //   95: aload_0
    //   96: invokespecial 11403	com/android/server/am/ActivityManagerService$ProcessInfoService:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   99: invokestatic 11386	android/os/ServiceManager:addService	(Ljava/lang/String;Landroid/os/IBinder;)V
    //   102: aload_0
    //   103: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   106: invokevirtual 5598	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
    //   109: ldc_w 4667
    //   112: ldc_w 11404
    //   115: invokevirtual 8498	android/content/pm/PackageManager:getApplicationInfo	(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
    //   118: astore_1
    //   119: aload_0
    //   120: getfield 1790	com/android/server/am/ActivityManagerService:mSystemThread	Landroid/app/ActivityThread;
    //   123: aload_1
    //   124: aload_0
    //   125: invokevirtual 11408	com/android/server/am/ActivityManagerService:getClass	()Ljava/lang/Class;
    //   128: invokevirtual 11412	java/lang/Class:getClassLoader	()Ljava/lang/ClassLoader;
    //   131: invokevirtual 11416	android/app/ActivityThread:installSystemApplicationInfo	(Landroid/content/pm/ApplicationInfo;Ljava/lang/ClassLoader;)V
    //   134: aload_0
    //   135: monitorenter
    //   136: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   139: aload_0
    //   140: aload_1
    //   141: aload_1
    //   142: getfield 6327	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
    //   145: iconst_0
    //   146: iconst_0
    //   147: invokevirtual 6370	com/android/server/am/ActivityManagerService:newProcessRecordLocked	(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;ZI)Lcom/android/server/am/ProcessRecord;
    //   150: astore_2
    //   151: aload_2
    //   152: iconst_1
    //   153: putfield 2154	com/android/server/am/ProcessRecord:persistent	Z
    //   156: aload_2
    //   157: getstatic 1232	com/android/server/am/ActivityManagerService:MY_PID	I
    //   160: putfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   163: aload_2
    //   164: sipush 64636
    //   167: putfield 3664	com/android/server/am/ProcessRecord:maxAdj	I
    //   170: aload_2
    //   171: aload_0
    //   172: getfield 1790	com/android/server/am/ActivityManagerService:mSystemThread	Landroid/app/ActivityThread;
    //   175: invokevirtual 11420	android/app/ActivityThread:getApplicationThread	()Landroid/app/ActivityThread$ApplicationThread;
    //   178: aload_0
    //   179: getfield 1907	com/android/server/am/ActivityManagerService:mProcessStats	Lcom/android/server/am/ProcessStatsService;
    //   182: invokevirtual 2826	com/android/server/am/ProcessRecord:makeActive	(Landroid/app/IApplicationThread;Lcom/android/server/am/ProcessStatsService;)V
    //   185: aload_0
    //   186: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   189: astore_1
    //   190: aload_1
    //   191: monitorenter
    //   192: aload_0
    //   193: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   196: aload_2
    //   197: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   200: aload_2
    //   201: invokevirtual 2177	android/util/SparseArray:put	(ILjava/lang/Object;)V
    //   204: aload_1
    //   205: monitorexit
    //   206: aload_0
    //   207: aload_2
    //   208: iconst_0
    //   209: aconst_null
    //   210: invokevirtual 2962	com/android/server/am/ActivityManagerService:updateLruProcessLocked	(Lcom/android/server/am/ProcessRecord;ZLcom/android/server/am/ProcessRecord;)V
    //   213: aload_0
    //   214: invokevirtual 3036	com/android/server/am/ActivityManagerService:updateOomAdjLocked	()V
    //   217: aload_0
    //   218: monitorexit
    //   219: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   222: return
    //   223: astore_2
    //   224: aload_1
    //   225: monitorexit
    //   226: aload_2
    //   227: athrow
    //   228: astore_1
    //   229: aload_0
    //   230: monitorexit
    //   231: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   234: aload_1
    //   235: athrow
    //   236: astore_1
    //   237: new 5856	java/lang/RuntimeException
    //   240: dup
    //   241: ldc_w 11422
    //   244: aload_1
    //   245: invokespecial 11423	java/lang/RuntimeException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   248: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	249	0	this	ActivityManagerService
    //   228	7	1	localObject2	Object
    //   236	9	1	localNameNotFoundException	PackageManager.NameNotFoundException
    //   150	58	2	localProcessRecord	ProcessRecord
    //   223	4	2	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   192	204	223	finally
    //   136	192	228	finally
    //   204	217	228	finally
    //   224	228	228	finally
    //   0	136	236	android/content/pm/PackageManager$NameNotFoundException
    //   217	222	236	android/content/pm/PackageManager$NameNotFoundException
    //   229	236	236	android/content/pm/PackageManager$NameNotFoundException
  }
  
  public void setSystemServiceManager(SystemServiceManager paramSystemServiceManager)
  {
    this.mSystemServiceManager = paramSystemServiceManager;
  }
  
  public void setTaskDescription(IBinder paramIBinder, ActivityManager.TaskDescription paramTaskDescription)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.isInStackLocked(paramIBinder);
      if (paramIBinder != null)
      {
        paramIBinder.setTaskDescription(paramTaskDescription);
        paramIBinder.task.updateTaskDescription();
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void setTaskResizeable(int paramInt1, int paramInt2)
  {
    try
    {
      boostPriorityForLockedSection();
      TaskRecord localTaskRecord = this.mStackSupervisor.anyTaskForIdLocked(paramInt1, false, -1);
      if (localTaskRecord == null)
      {
        Slog.w(TAG, "setTaskResizeable: taskId=" + paramInt1 + " not found");
        return;
      }
      if (localTaskRecord.mResizeMode != paramInt2)
      {
        localTaskRecord.mResizeMode = paramInt2;
        this.mWindowManager.setTaskResizeable(paramInt1, paramInt2);
        this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
        this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void setTestPssMode(boolean paramBoolean)
  {
    try
    {
      boostPriorityForLockedSection();
      this.mTestPssMode = paramBoolean;
      if (paramBoolean) {
        requestPssAllProcsLocked(SystemClock.uptimeMillis(), true, true);
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void setTrackAllocationApp(ApplicationInfo paramApplicationInfo, String paramString)
  {
    try
    {
      boostPriorityForLockedSection();
      if ((!"1".equals(SystemProperties.get("ro.debuggable", "0"))) && ((paramApplicationInfo.flags & 0x2) == 0)) {
        throw new SecurityException("Process not debuggable: " + paramApplicationInfo.packageName);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    this.mTrackAllocationApp = paramString;
    resetPriorityAfterLockedSection();
  }
  
  public void setUsageStatsManager(UsageStatsManagerInternal paramUsageStatsManagerInternal)
  {
    this.mUsageStatsService = paramUsageStatsManagerInternal;
  }
  
  public void setUserIsMonkey(boolean paramBoolean)
  {
    try
    {
      boostPriorityForLockedSection();
      synchronized (this.mPidsSelfLocked)
      {
        int i = Binder.getCallingPid();
        ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(i);
        if (localProcessRecord == null) {
          throw new SecurityException("Unknown process: " + i);
        }
      }
      if (((ProcessRecord)localObject2).instrumentationUiAutomationConnection != null) {
        break label96;
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
    label96:
    this.mUserIsMonkey = paramBoolean;
    resetPriorityAfterLockedSection();
  }
  
  /* Error */
  public void setVoiceKeepAwake(IVoiceInteractionSession paramIVoiceInteractionSession, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 5760	com/android/server/am/ActivityManagerService:mRunningVoice	Landroid/service/voice/IVoiceInteractionSession;
    //   9: ifnull +32 -> 41
    //   12: aload_0
    //   13: getfield 5760	com/android/server/am/ActivityManagerService:mRunningVoice	Landroid/service/voice/IVoiceInteractionSession;
    //   16: invokeinterface 11448 1 0
    //   21: aload_1
    //   22: invokeinterface 11448 1 0
    //   27: if_acmpne +14 -> 41
    //   30: iload_2
    //   31: ifeq +16 -> 47
    //   34: aload_0
    //   35: getfield 8344	com/android/server/am/ActivityManagerService:mVoiceWakeLock	Landroid/os/PowerManager$WakeLock;
    //   38: invokevirtual 11451	android/os/PowerManager$WakeLock:acquire	()V
    //   41: aload_0
    //   42: monitorexit
    //   43: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   46: return
    //   47: aload_0
    //   48: getfield 8344	com/android/server/am/ActivityManagerService:mVoiceWakeLock	Landroid/os/PowerManager$WakeLock;
    //   51: invokevirtual 8872	android/os/PowerManager$WakeLock:release	()V
    //   54: goto -13 -> 41
    //   57: astore_1
    //   58: aload_0
    //   59: monitorexit
    //   60: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   63: aload_1
    //   64: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	65	0	this	ActivityManagerService
    //   0	65	1	paramIVoiceInteractionSession	IVoiceInteractionSession
    //   0	65	2	paramBoolean	boolean
    // Exception table:
    //   from	to	target	type
    //   2	30	57	finally
    //   34	41	57	finally
    //   47	54	57	finally
  }
  
  /* Error */
  public int setVrMode(IBinder paramIBinder, boolean paramBoolean, ComponentName paramComponentName)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   4: invokevirtual 5598	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
    //   7: ldc_w 9960
    //   10: invokevirtual 5605	android/content/pm/PackageManager:hasSystemFeature	(Ljava/lang/String;)Z
    //   13: ifne +14 -> 27
    //   16: new 9962	java/lang/UnsupportedOperationException
    //   19: dup
    //   20: ldc_w 9964
    //   23: invokespecial 9965	java/lang/UnsupportedOperationException:<init>	(Ljava/lang/String;)V
    //   26: athrow
    //   27: ldc_w 2727
    //   30: invokestatic 2733	com/android/server/LocalServices:getService	(Ljava/lang/Class;)Ljava/lang/Object;
    //   33: checkcast 2727	com/android/server/vr/VrManagerInternal
    //   36: astore 5
    //   38: aload_0
    //   39: monitorenter
    //   40: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   43: aload_1
    //   44: invokestatic 4687	com/android/server/am/ActivityRecord:isInStackLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   47: astore_1
    //   48: aload_0
    //   49: monitorexit
    //   50: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   53: aload_1
    //   54: ifnonnull +19 -> 73
    //   57: new 2386	java/lang/IllegalArgumentException
    //   60: dup
    //   61: invokespecial 9883	java/lang/IllegalArgumentException:<init>	()V
    //   64: athrow
    //   65: astore_1
    //   66: aload_0
    //   67: monitorexit
    //   68: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   71: aload_1
    //   72: athrow
    //   73: aload 5
    //   75: aload_3
    //   76: aload_1
    //   77: getfield 6450	com/android/server/am/ActivityRecord:userId	I
    //   80: invokevirtual 9968	com/android/server/vr/VrManagerInternal:hasVrPackage	(Landroid/content/ComponentName;I)I
    //   83: istore 4
    //   85: iload 4
    //   87: ifeq +6 -> 93
    //   90: iload 4
    //   92: ireturn
    //   93: aload_0
    //   94: monitorenter
    //   95: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   98: iload_2
    //   99: ifeq +28 -> 127
    //   102: aload_1
    //   103: aload_3
    //   104: putfield 11455	com/android/server/am/ActivityRecord:requestedVrComponent	Landroid/content/ComponentName;
    //   107: aload_1
    //   108: aload_0
    //   109: getfield 1453	com/android/server/am/ActivityManagerService:mFocusedActivity	Lcom/android/server/am/ActivityRecord;
    //   112: if_acmpne +8 -> 120
    //   115: aload_0
    //   116: aload_1
    //   117: invokevirtual 11173	com/android/server/am/ActivityManagerService:applyUpdateVrModeLocked	(Lcom/android/server/am/ActivityRecord;)V
    //   120: aload_0
    //   121: monitorexit
    //   122: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   125: iconst_0
    //   126: ireturn
    //   127: aconst_null
    //   128: astore_3
    //   129: goto -27 -> 102
    //   132: astore_1
    //   133: aload_0
    //   134: monitorexit
    //   135: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   138: aload_1
    //   139: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	140	0	this	ActivityManagerService
    //   0	140	1	paramIBinder	IBinder
    //   0	140	2	paramBoolean	boolean
    //   0	140	3	paramComponentName	ComponentName
    //   83	8	4	i	int
    //   36	38	5	localVrManagerInternal	VrManagerInternal
    // Exception table:
    //   from	to	target	type
    //   40	48	65	finally
    //   95	98	132	finally
    //   102	120	132	finally
  }
  
  public void setVrThread(int paramInt)
  {
    if (!this.mContext.getPackageManager().hasSystemFeature("android.software.vr.mode")) {
      throw new UnsupportedOperationException("VR mode not supported on this device!");
    }
    int i;
    try
    {
      boostPriorityForLockedSection();
      synchronized (this.mPidsSelfLocked)
      {
        i = Binder.getCallingPid();
        ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(i);
        if ((localProcessRecord == null) || (!this.mInVrMode) || (paramInt < 0)) {
          break label178;
        }
        if (!Process.isThreadInProcess(i, paramInt)) {
          throw new IllegalArgumentException("VR thread does not belong to process");
        }
      }
      if (((ProcessRecord)localObject2).vrThreadTid == 0) {
        break label143;
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    boolean bool = Process.isThreadInProcess(i, ((ProcessRecord)localObject2).vrThreadTid);
    if (bool) {}
    try
    {
      Process.setThreadScheduler(((ProcessRecord)localObject2).vrThreadTid, 0, 0);
      label143:
      ((ProcessRecord)localObject2).vrThreadTid = paramInt;
      try
      {
        if ((((ProcessRecord)localObject2).curSchedGroup == 2) && (((ProcessRecord)localObject2).vrThreadTid > 0)) {
          Process.setThreadScheduler(((ProcessRecord)localObject2).vrThreadTid, 1073741825, 1);
        }
        label178:
        resetPriorityAfterLockedSection();
        return;
      }
      catch (IllegalArgumentException localIllegalArgumentException1)
      {
        for (;;)
        {
          Slog.e(TAG, "Failed to set scheduling policy, thread does not exist:\n" + localIllegalArgumentException1);
        }
      }
    }
    catch (IllegalArgumentException localIllegalArgumentException2)
    {
      for (;;) {}
    }
  }
  
  public void setWindowManager(WindowManagerService paramWindowManagerService)
  {
    this.mWindowManager = paramWindowManagerService;
    this.mStackSupervisor.setWindowManager(paramWindowManagerService);
    this.mActivityStarter.setWindowManager(paramWindowManagerService);
  }
  
  public boolean shouldUpRecreateTask(IBinder paramIBinder, String paramString)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.forTokenLocked(paramIBinder);
      if (paramIBinder != null)
      {
        boolean bool = paramIBinder.task.stack.shouldUpRecreateTaskLocked(paramIBinder, paramString);
        return bool;
      }
      return false;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  final void showAskCompatModeDialogLocked(ActivityRecord paramActivityRecord)
  {
    Message localMessage = Message.obtain();
    localMessage.what = 30;
    ActivityRecord localActivityRecord = paramActivityRecord;
    if (paramActivityRecord.task.askedCompatMode) {
      localActivityRecord = null;
    }
    localMessage.obj = localActivityRecord;
    this.mUiHandler.sendMessage(localMessage);
  }
  
  /* Error */
  public boolean showAssistFromActivity(IBinder paramIBinder, Bundle paramBundle)
  {
    // Byte code:
    //   0: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore_3
    //   4: aload_0
    //   5: monitorenter
    //   6: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   9: aload_1
    //   10: invokestatic 4463	com/android/server/am/ActivityRecord:forTokenLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
    //   13: astore 6
    //   15: aload_0
    //   16: invokevirtual 4453	com/android/server/am/ActivityManagerService:getFocusedStack	()Lcom/android/server/am/ActivityStack;
    //   19: invokevirtual 4455	com/android/server/am/ActivityStack:topActivity	()Lcom/android/server/am/ActivityRecord;
    //   22: astore 7
    //   24: aload 7
    //   26: aload 6
    //   28: if_acmpeq +53 -> 81
    //   31: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   34: new 1066	java/lang/StringBuilder
    //   37: dup
    //   38: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   41: ldc_w 11478
    //   44: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   47: aload 6
    //   49: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   52: ldc_w 4467
    //   55: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   58: aload 7
    //   60: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   63: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   66: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   69: pop
    //   70: aload_0
    //   71: monitorexit
    //   72: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   75: lload_3
    //   76: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   79: iconst_0
    //   80: ireturn
    //   81: aload 7
    //   83: getfield 11481	com/android/server/am/ActivityRecord:nowVisible	Z
    //   86: ifne +48 -> 134
    //   89: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   92: new 1066	java/lang/StringBuilder
    //   95: dup
    //   96: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   99: ldc_w 11478
    //   102: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   105: aload 6
    //   107: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   110: ldc_w 11483
    //   113: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   116: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   119: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   122: pop
    //   123: aload_0
    //   124: monitorexit
    //   125: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   128: lload_3
    //   129: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   132: iconst_0
    //   133: ireturn
    //   134: aload_0
    //   135: monitorexit
    //   136: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   139: new 11485	com/android/internal/app/AssistUtils
    //   142: dup
    //   143: aload_0
    //   144: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   147: invokespecial 11487	com/android/internal/app/AssistUtils:<init>	(Landroid/content/Context;)V
    //   150: aload_2
    //   151: bipush 8
    //   153: aconst_null
    //   154: aload_1
    //   155: invokevirtual 11491	com/android/internal/app/AssistUtils:showSessionForActiveService	(Landroid/os/Bundle;ILcom/android/internal/app/IVoiceInteractionSessionShowCallback;Landroid/os/IBinder;)Z
    //   158: istore 5
    //   160: lload_3
    //   161: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   164: iload 5
    //   166: ireturn
    //   167: astore_1
    //   168: aload_0
    //   169: monitorexit
    //   170: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   173: aload_1
    //   174: athrow
    //   175: astore_1
    //   176: lload_3
    //   177: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   180: aload_1
    //   181: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	182	0	this	ActivityManagerService
    //   0	182	1	paramIBinder	IBinder
    //   0	182	2	paramBundle	Bundle
    //   3	174	3	l	long
    //   158	7	5	bool	boolean
    //   13	93	6	localActivityRecord1	ActivityRecord
    //   22	60	7	localActivityRecord2	ActivityRecord
    // Exception table:
    //   from	to	target	type
    //   6	24	167	finally
    //   31	70	167	finally
    //   81	123	167	finally
    //   4	6	175	finally
    //   70	75	175	finally
    //   123	128	175	finally
    //   134	160	175	finally
    //   168	175	175	finally
  }
  
  public void showBootMessage(CharSequence paramCharSequence, boolean paramBoolean)
  {
    if (Binder.getCallingUid() != Process.myUid()) {
      throw new SecurityException();
    }
    this.mWindowManager.showBootMessage(paramCharSequence, paramBoolean);
  }
  
  final void showLaunchWarningLocked(final ActivityRecord paramActivityRecord1, final ActivityRecord paramActivityRecord2)
  {
    if (!this.mLaunchWarningShown)
    {
      this.mLaunchWarningShown = true;
      this.mUiHandler.post(new Runnable()
      {
        public void run()
        {
          synchronized (ActivityManagerService.this)
          {
            ActivityManagerService.boostPriorityForLockedSection();
            final LaunchWarningWindow localLaunchWarningWindow = new LaunchWarningWindow(ActivityManagerService.this.mContext, paramActivityRecord1, paramActivityRecord2);
            localLaunchWarningWindow.show();
            ActivityManagerService.this.mUiHandler.postDelayed(new Runnable()
            {
              public void run()
              {
                synchronized (ActivityManagerService.this)
                {
                  ActivityManagerService.boostPriorityForLockedSection();
                  localLaunchWarningWindow.dismiss();
                  ActivityManagerService.this.mLaunchWarningShown = false;
                  ActivityManagerService.resetPriorityAfterLockedSection();
                  return;
                }
              }
            }, 4000L);
            ActivityManagerService.resetPriorityAfterLockedSection();
            return;
          }
        }
      });
    }
  }
  
  public void showLockTaskEscapeMessage(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.forTokenLocked(paramIBinder);
      if (paramIBinder == null) {
        return;
      }
      this.mStackSupervisor.showLockTaskEscapeMessageLocked(paramIBinder.task);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public final void showSafeModeOverlay()
  {
    View localView = LayoutInflater.from(this.mContext).inflate(17367245, null);
    WindowManager.LayoutParams localLayoutParams = new WindowManager.LayoutParams();
    localLayoutParams.type = 2015;
    localLayoutParams.width = -2;
    localLayoutParams.height = -2;
    localLayoutParams.gravity = 8388691;
    localLayoutParams.format = localView.getBackground().getOpacity();
    localLayoutParams.flags = 24;
    localLayoutParams.privateFlags |= 0x10;
    ((WindowManager)this.mContext.getSystemService("window")).addView(localView, localLayoutParams);
  }
  
  final void showUnsupportedZoomDialogIfNeededLocked(ActivityRecord paramActivityRecord)
  {
    if ((this.mConfiguration.densityDpi != DisplayMetrics.DENSITY_DEVICE_STABLE) && (paramActivityRecord.appInfo.requiresSmallestWidthDp > this.mConfiguration.smallestScreenWidthDp))
    {
      Message localMessage = Message.obtain();
      localMessage.what = 70;
      localMessage.obj = paramActivityRecord;
      this.mUiHandler.sendMessage(localMessage);
    }
  }
  
  /* Error */
  public void showWaitingForDebugger(IApplicationThread paramIApplicationThread, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_1
    //   6: ifnull +19 -> 25
    //   9: aload_0
    //   10: aload_1
    //   11: invokevirtual 4710	com/android/server/am/ActivityManagerService:getRecordForAppLocked	(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
    //   14: astore_1
    //   15: aload_1
    //   16: ifnonnull +14 -> 30
    //   19: aload_0
    //   20: monitorexit
    //   21: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   24: return
    //   25: aconst_null
    //   26: astore_1
    //   27: goto -12 -> 15
    //   30: invokestatic 9734	android/os/Message:obtain	()Landroid/os/Message;
    //   33: astore 4
    //   35: aload 4
    //   37: bipush 6
    //   39: putfield 3288	android/os/Message:what	I
    //   42: aload 4
    //   44: aload_1
    //   45: putfield 2859	android/os/Message:obj	Ljava/lang/Object;
    //   48: iload_2
    //   49: ifeq +27 -> 76
    //   52: iconst_1
    //   53: istore_3
    //   54: aload 4
    //   56: iload_3
    //   57: putfield 6095	android/os/Message:arg1	I
    //   60: aload_0
    //   61: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   64: aload 4
    //   66: invokevirtual 9740	com/android/server/am/ActivityManagerService$UiHandler:sendMessage	(Landroid/os/Message;)Z
    //   69: pop
    //   70: aload_0
    //   71: monitorexit
    //   72: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   75: return
    //   76: iconst_0
    //   77: istore_3
    //   78: goto -24 -> 54
    //   81: astore_1
    //   82: aload_0
    //   83: monitorexit
    //   84: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   87: aload_1
    //   88: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	89	0	this	ActivityManagerService
    //   0	89	1	paramIApplicationThread	IApplicationThread
    //   0	89	2	paramBoolean	boolean
    //   53	25	3	i	int
    //   33	32	4	localMessage	Message
    // Exception table:
    //   from	to	target	type
    //   2	5	81	finally
    //   9	15	81	finally
    //   30	48	81	finally
    //   54	70	81	finally
  }
  
  /* Error */
  public boolean shutdown(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11534
    //   4: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   7: ifeq +14 -> 21
    //   10: new 4439	java/lang/SecurityException
    //   13: dup
    //   14: ldc_w 11536
    //   17: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   20: athrow
    //   21: aload_0
    //   22: monitorenter
    //   23: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   26: aload_0
    //   27: iconst_1
    //   28: putfield 1587	com/android/server/am/ActivityManagerService:mShuttingDown	Z
    //   31: aload_0
    //   32: invokespecial 8607	com/android/server/am/ActivityManagerService:updateEventDispatchingLocked	()V
    //   35: aload_0
    //   36: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   39: iload_1
    //   40: invokevirtual 11539	com/android/server/am/ActivityStackSupervisor:shutdownLocked	(I)Z
    //   43: istore_2
    //   44: aload_0
    //   45: monitorexit
    //   46: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   49: aload_0
    //   50: getfield 1914	com/android/server/am/ActivityManagerService:mAppOpsService	Lcom/android/server/AppOpsService;
    //   53: invokevirtual 11541	com/android/server/AppOpsService:shutdown	()V
    //   56: aload_0
    //   57: getfield 5273	com/android/server/am/ActivityManagerService:mUsageStatsService	Landroid/app/usage/UsageStatsManagerInternal;
    //   60: ifnull +10 -> 70
    //   63: aload_0
    //   64: getfield 5273	com/android/server/am/ActivityManagerService:mUsageStatsService	Landroid/app/usage/UsageStatsManagerInternal;
    //   67: invokevirtual 11544	android/app/usage/UsageStatsManagerInternal:prepareShutdown	()V
    //   70: aload_0
    //   71: getfield 1879	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
    //   74: invokevirtual 11545	com/android/server/am/BatteryStatsService:shutdown	()V
    //   77: aload_0
    //   78: monitorenter
    //   79: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   82: aload_0
    //   83: getfield 1907	com/android/server/am/ActivityManagerService:mProcessStats	Lcom/android/server/am/ProcessStatsService;
    //   86: invokevirtual 11547	com/android/server/am/ProcessStatsService:shutdownLocked	()V
    //   89: aload_0
    //   90: aconst_null
    //   91: iconst_1
    //   92: invokevirtual 5488	com/android/server/am/ActivityManagerService:notifyTaskPersisterLocked	(Lcom/android/server/am/TaskRecord;Z)V
    //   95: aload_0
    //   96: monitorexit
    //   97: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   100: aload_0
    //   101: getfield 936	com/android/server/am/ActivityManagerService:mEmbryoManager	Lcom/android/server/am/IEmbryoManager;
    //   104: invokeinterface 11548 1 0
    //   109: iload_2
    //   110: ireturn
    //   111: astore_3
    //   112: aload_0
    //   113: monitorexit
    //   114: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   117: aload_3
    //   118: athrow
    //   119: astore_3
    //   120: aload_0
    //   121: monitorexit
    //   122: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   125: aload_3
    //   126: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	127	0	this	ActivityManagerService
    //   0	127	1	paramInt	int
    //   43	67	2	bool	boolean
    //   111	7	3	localObject1	Object
    //   119	7	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   23	44	111	finally
    //   79	95	119	finally
  }
  
  public void signalPersistentProcesses(int paramInt)
    throws RemoteException
  {
    if (paramInt != 10) {
      throw new SecurityException("Only SIGNAL_USR1 is allowed");
    }
    try
    {
      boostPriorityForLockedSection();
      if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") != 0) {
        throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    int i = this.mLruProcesses.size() - 1;
    while (i >= 0)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
      if ((localProcessRecord.thread != null) && (localProcessRecord.persistent)) {
        Process.sendSignal(localProcessRecord.pid, paramInt);
      }
      i -= 1;
    }
    resetPriorityAfterLockedSection();
  }
  
  void skipCurrentReceiverLocked(ProcessRecord paramProcessRecord)
  {
    BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
    int i = 0;
    int j = arrayOfBroadcastQueue.length;
    while (i < j)
    {
      arrayOfBroadcastQueue[i].skipCurrentReceiverLocked(paramProcessRecord);
      i += 1;
    }
  }
  
  void skipPendingBroadcastLocked(int paramInt)
  {
    Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
    BroadcastQueue[] arrayOfBroadcastQueue = this.mBroadcastQueues;
    int i = 0;
    int j = arrayOfBroadcastQueue.length;
    while (i < j)
    {
      arrayOfBroadcastQueue[i].skipPendingBroadcastLocked(paramInt);
      i += 1;
    }
  }
  
  public final int startActivities(IApplicationThread paramIApplicationThread, String paramString, Intent[] paramArrayOfIntent, String[] paramArrayOfString, IBinder paramIBinder, Bundle paramBundle, int paramInt)
  {
    enforceNotIsolatedCaller("startActivities");
    paramInt = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt, false, 2, "startActivity", null);
    return this.mActivityStarter.startActivities(paramIApplicationThread, -1, paramString, paramArrayOfIntent, paramArrayOfString, paramIBinder, paramBundle, paramInt);
  }
  
  final int startActivitiesInPackage(int paramInt1, String paramString, Intent[] paramArrayOfIntent, String[] paramArrayOfString, IBinder paramIBinder, Bundle paramBundle, int paramInt2)
  {
    paramInt2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt2, false, 2, "startActivityInPackage", null);
    return this.mActivityStarter.startActivities(null, paramInt1, paramString, paramArrayOfIntent, paramArrayOfString, paramIBinder, paramBundle, paramInt2);
  }
  
  public final int startActivity(IApplicationThread paramIApplicationThread, String paramString1, Intent paramIntent, String paramString2, IBinder paramIBinder, String paramString3, int paramInt1, int paramInt2, ProfilerInfo paramProfilerInfo, Bundle paramBundle)
  {
    return startActivityAsUser(paramIApplicationThread, paramString1, paramIntent, paramString2, paramIBinder, paramString3, paramInt1, paramInt2, paramProfilerInfo, paramBundle, UserHandle.getCallingUserId());
  }
  
  final int startActivity(Intent paramIntent, ActivityStackSupervisor.ActivityContainer paramActivityContainer)
  {
    enforceNotIsolatedCaller("ActivityContainer.startActivity");
    int i = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), this.mStackSupervisor.mCurrentUser, false, 2, "ActivityContainer", null);
    String str2 = paramIntent.getType();
    Uri localUri = paramIntent.getData();
    String str1 = str2;
    if (str2 == null)
    {
      str1 = str2;
      if (localUri != null)
      {
        str1 = str2;
        if ("content".equals(localUri.getScheme())) {
          str1 = getProviderMimeType(localUri, i);
        }
      }
    }
    paramActivityContainer.checkEmbeddedAllowedInner(i, paramIntent, str1);
    paramIntent.addFlags(402718720);
    return this.mActivityStarter.startActivityMayWait(null, -1, null, paramIntent, str1, null, null, null, null, 0, 0, null, null, null, null, false, i, paramActivityContainer, null);
  }
  
  public final IActivityManager.WaitResult startActivityAndWait(IApplicationThread paramIApplicationThread, String paramString1, Intent paramIntent, String paramString2, IBinder paramIBinder, String paramString3, int paramInt1, int paramInt2, ProfilerInfo paramProfilerInfo, Bundle paramBundle, int paramInt3)
  {
    enforceNotIsolatedCaller("startActivityAndWait");
    paramInt3 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt3, false, 2, "startActivityAndWait", null);
    IActivityManager.WaitResult localWaitResult = new IActivityManager.WaitResult();
    this.mActivityStarter.startActivityMayWait(paramIApplicationThread, -1, paramString1, paramIntent, paramString2, null, null, paramIBinder, paramString3, paramInt1, paramInt2, paramProfilerInfo, localWaitResult, null, paramBundle, false, paramInt3, null, null);
    return localWaitResult;
  }
  
  public final int startActivityAsCaller(IApplicationThread paramIApplicationThread, String paramString1, Intent paramIntent, String paramString2, IBinder paramIBinder, String paramString3, int paramInt1, int paramInt2, ProfilerInfo paramProfilerInfo, Bundle paramBundle, boolean paramBoolean, int paramInt3)
  {
    try
    {
      boostPriorityForLockedSection();
      if (paramIBinder == null) {
        throw new SecurityException("Must be called from an activity");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    paramIApplicationThread = this.mStackSupervisor.isInAnyStackLocked(paramIBinder);
    if (paramIApplicationThread == null) {
      throw new SecurityException("Called with bad activity token: " + paramIBinder);
    }
    if (!paramIApplicationThread.info.packageName.equals("android")) {
      throw new SecurityException("Must be called from an activity that is declared in the android package");
    }
    if (paramIApplicationThread.app == null) {
      throw new SecurityException("Called without a process attached to activity");
    }
    if ((UserHandle.getAppId(paramIApplicationThread.app.uid) != 1000) && (paramIApplicationThread.app.uid != paramIApplicationThread.launchedFromUid)) {
      throw new SecurityException("Calling activity in uid " + paramIApplicationThread.app.uid + " must be system uid or original calling uid " + paramIApplicationThread.launchedFromUid);
    }
    if (paramBoolean)
    {
      if (paramIntent.getComponent() == null) {
        throw new SecurityException("Component must be specified with ignoreTargetSecurity");
      }
      if (paramIntent.getSelector() != null) {
        throw new SecurityException("Selector not allowed with ignoreTargetSecurity");
      }
    }
    int j = paramIApplicationThread.launchedFromUid;
    paramString1 = paramIApplicationThread.launchedFromPackage;
    resetPriorityAfterLockedSection();
    int i = paramInt3;
    if (paramInt3 == 55536) {
      i = UserHandle.getUserId(paramIApplicationThread.app.uid);
    }
    try
    {
      paramInt1 = this.mActivityStarter.startActivityMayWait(null, j, paramString1, paramIntent, paramString2, null, null, paramIBinder, paramString3, paramInt1, paramInt2, null, null, null, paramBundle, paramBoolean, i, null, null);
      return paramInt1;
    }
    catch (SecurityException paramIApplicationThread)
    {
      throw paramIApplicationThread;
    }
  }
  
  public final int startActivityAsUser(IApplicationThread paramIApplicationThread, String paramString1, Intent paramIntent, String paramString2, IBinder paramIBinder, String paramString3, int paramInt1, int paramInt2, ProfilerInfo paramProfilerInfo, Bundle paramBundle, int paramInt3)
  {
    enforceNotIsolatedCaller("startActivity");
    paramInt3 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt3, false, 2, "startActivity", null);
    return this.mActivityStarter.startActivityMayWait(paramIApplicationThread, -1, paramString1, paramIntent, paramString2, null, null, paramIBinder, paramString3, paramInt1, paramInt2, paramProfilerInfo, null, null, paramBundle, false, paramInt3, null, null);
  }
  
  /* Error */
  public final int startActivityFromRecents(int paramInt, Bundle paramBundle)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 11608
    //   4: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   7: ifeq +24 -> 31
    //   10: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   13: ldc_w 11610
    //   16: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   19: pop
    //   20: new 4439	java/lang/SecurityException
    //   23: dup
    //   24: ldc_w 11610
    //   27: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   30: athrow
    //   31: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   34: lstore_3
    //   35: aload_0
    //   36: monitorenter
    //   37: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   40: aload_0
    //   41: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   44: iload_1
    //   45: aload_2
    //   46: invokevirtual 11613	com/android/server/am/ActivityStackSupervisor:startActivityFromRecentsInner	(ILandroid/os/Bundle;)I
    //   49: istore_1
    //   50: aload_0
    //   51: monitorexit
    //   52: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   55: lload_3
    //   56: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   59: iload_1
    //   60: ireturn
    //   61: astore_2
    //   62: aload_0
    //   63: monitorexit
    //   64: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   67: aload_2
    //   68: athrow
    //   69: astore_2
    //   70: lload_3
    //   71: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   74: aload_2
    //   75: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	76	0	this	ActivityManagerService
    //   0	76	1	paramInt	int
    //   0	76	2	paramBundle	Bundle
    //   34	37	3	l	long
    // Exception table:
    //   from	to	target	type
    //   37	50	61	finally
    //   35	37	69	finally
    //   50	55	69	finally
    //   62	69	69	finally
  }
  
  final int startActivityInPackage(int paramInt1, String paramString1, Intent paramIntent, String paramString2, IBinder paramIBinder, String paramString3, int paramInt2, int paramInt3, Bundle paramBundle, int paramInt4, IActivityContainer paramIActivityContainer, TaskRecord paramTaskRecord)
  {
    paramInt4 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt4, false, 2, "startActivityInPackage", null);
    return this.mActivityStarter.startActivityMayWait(null, paramInt1, paramString1, paramIntent, paramString2, null, null, paramIBinder, paramString3, paramInt2, paramInt3, null, null, null, paramBundle, false, paramInt4, paramIActivityContainer, paramTaskRecord);
  }
  
  public int startActivityIntentSender(IApplicationThread paramIApplicationThread, IntentSender paramIntentSender, Intent paramIntent, String paramString1, IBinder paramIBinder, String paramString2, int paramInt1, int paramInt2, int paramInt3, Bundle paramBundle)
    throws TransactionTooLargeException
  {
    enforceNotIsolatedCaller("startActivityIntentSender");
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    paramIApplicationThread = paramIntentSender.getTarget();
    if (!(paramIApplicationThread instanceof PendingIntentRecord)) {
      throw new IllegalArgumentException("Bad PendingIntent object");
    }
    paramIApplicationThread = (PendingIntentRecord)paramIApplicationThread;
    try
    {
      boostPriorityForLockedSection();
      paramIntentSender = getFocusedStack();
      if ((paramIntentSender.mResumedActivity != null) && (paramIntentSender.mResumedActivity.info.applicationInfo.uid == Binder.getCallingUid())) {
        this.mAppSwitchesAllowedTime = 0L;
      }
      return paramIApplicationThread.sendInner(0, paramIntent, paramString1, null, null, paramIBinder, paramString2, paramInt1, paramInt2, paramInt3, paramBundle, null);
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public final int startActivityWithConfig(IApplicationThread paramIApplicationThread, String paramString1, Intent paramIntent, String paramString2, IBinder paramIBinder, String paramString3, int paramInt1, int paramInt2, Configuration paramConfiguration, Bundle paramBundle, int paramInt3)
  {
    enforceNotIsolatedCaller("startActivityWithConfig");
    paramInt3 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt3, false, 2, "startActivityWithConfig", null);
    return this.mActivityStarter.startActivityMayWait(paramIApplicationThread, -1, paramString1, paramIntent, paramString2, null, null, paramIBinder, paramString3, paramInt1, paramInt2, null, null, paramConfiguration, paramBundle, false, paramInt3, null, null);
  }
  
  Association startAssociationLocked(int paramInt1, String paramString1, int paramInt2, int paramInt3, ComponentName paramComponentName, String paramString2)
  {
    if (!this.mTrackingAssociations) {
      return null;
    }
    Object localObject1 = (ArrayMap)this.mAssociations.get(paramInt3);
    Object localObject2 = localObject1;
    if (localObject1 == null)
    {
      localObject2 = new ArrayMap();
      this.mAssociations.put(paramInt3, localObject2);
    }
    Object localObject3 = (SparseArray)((ArrayMap)localObject2).get(paramComponentName);
    localObject1 = localObject3;
    if (localObject3 == null)
    {
      localObject1 = new SparseArray();
      ((ArrayMap)localObject2).put(paramComponentName, localObject1);
    }
    localObject3 = (ArrayMap)((SparseArray)localObject1).get(paramInt1);
    localObject2 = localObject3;
    if (localObject3 == null)
    {
      localObject2 = new ArrayMap();
      ((SparseArray)localObject1).put(paramInt1, localObject2);
    }
    localObject3 = (Association)((ArrayMap)localObject2).get(paramString1);
    localObject1 = localObject3;
    if (localObject3 == null)
    {
      localObject1 = new Association(paramInt1, paramString1, paramInt3, paramComponentName, paramString2);
      ((ArrayMap)localObject2).put(paramString1, localObject1);
    }
    ((Association)localObject1).mCount += 1;
    ((Association)localObject1).mNesting += 1;
    if (((Association)localObject1).mNesting == 1)
    {
      long l = SystemClock.uptimeMillis();
      ((Association)localObject1).mLastStateUptime = l;
      ((Association)localObject1).mStartTime = l;
      ((Association)localObject1).mLastState = paramInt2;
    }
    return (Association)localObject1;
  }
  
  public boolean startBinderTracking()
    throws RemoteException
  {
    try
    {
      boostPriorityForLockedSection();
      this.mBinderTransactionTrackingEnabled = true;
      if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    int i = 0;
    if (i < this.mLruProcesses.size())
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mLruProcesses.get(i);
      boolean bool = processSanityChecksLocked(localProcessRecord);
      if (!bool) {}
      for (;;)
      {
        i += 1;
        break;
        try
        {
          localProcessRecord.thread.startBinderTracking();
        }
        catch (RemoteException localRemoteException)
        {
          Log.v(TAG, "Process disappared");
        }
      }
    }
    resetPriorityAfterLockedSection();
    return true;
  }
  
  /* Error */
  public void startConfirmDeviceCredentialIntent(Intent paramIntent)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 11644
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_0
    //   11: monitorenter
    //   12: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   15: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   18: lstore_2
    //   19: aload_0
    //   20: getfield 1995	com/android/server/am/ActivityManagerService:mActivityStarter	Lcom/android/server/am/ActivityStarter;
    //   23: aload_1
    //   24: invokevirtual 11647	com/android/server/am/ActivityStarter:startConfirmCredentialIntent	(Landroid/content/Intent;)V
    //   27: lload_2
    //   28: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   31: aload_0
    //   32: monitorexit
    //   33: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   36: return
    //   37: astore_1
    //   38: lload_2
    //   39: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   42: aload_1
    //   43: athrow
    //   44: astore_1
    //   45: aload_0
    //   46: monitorexit
    //   47: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   50: aload_1
    //   51: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	52	0	this	ActivityManagerService
    //   0	52	1	paramIntent	Intent
    //   18	21	2	l	long
    // Exception table:
    //   from	to	target	type
    //   19	27	37	finally
    //   12	19	44	finally
    //   27	31	44	finally
    //   38	44	44	finally
  }
  
  boolean startHomeActivityLocked(int paramInt, String paramString)
  {
    if ((this.mFactoryTest == 1) && (this.mTopAction == null)) {
      return false;
    }
    Intent localIntent = getHomeIntent();
    ActivityInfo localActivityInfo = resolveActivityInfo(localIntent, 1024, paramInt);
    if (localActivityInfo != null)
    {
      localIntent.setComponent(new ComponentName(localActivityInfo.applicationInfo.packageName, localActivityInfo.name));
      localActivityInfo = new ActivityInfo(localActivityInfo);
      localActivityInfo.applicationInfo = getAppInfoForUser(localActivityInfo.applicationInfo, paramInt);
      ProcessRecord localProcessRecord = getProcessRecordLocked(localActivityInfo.processName, localActivityInfo.applicationInfo.uid, true);
      if ((localProcessRecord == null) || (localProcessRecord.instrumentationClass == null))
      {
        localIntent.setFlags(localIntent.getFlags() | 0x10000000);
        this.mActivityStarter.startHomeActivityLocked(localIntent, localActivityInfo, paramString);
        if (isDeviceProvisioned()) {
          break label334;
        }
        if (!this.mPointerEventListenerRegistered) {}
      }
      try
      {
        this.mWindowManager.unregisterPointerEventListener(this.mPointerEventListener);
        this.mPointerEventListenerRegistered = false;
        if (this.mAutoShutdownWakelock == null)
        {
          this.mAutoShutdownWakelock = ((PowerManager)this.mContext.getSystemService("power")).newWakeLock(1, "auto_shutdown");
          this.mAutoShutdownWakelock.setReferenceCounted(false);
        }
        this.mAutoShutdownWakelock.acquire(1805000L);
        this.mLastInputEvent = SystemClock.elapsedRealtime();
        this.mWindowManager.registerPointerEventListener(this.mPointerEventListener);
        this.mPointerEventListenerRegistered = true;
        this.mHandler.postDelayed(this.mTurnOffScreenIfSetupIdle, 180000L);
        return true;
        return true;
      }
      catch (Exception paramString)
      {
        for (;;)
        {
          Slog.w(TAG, "Error in pointer handler. " + paramString);
        }
      }
    }
    else
    {
      Slog.wtf(TAG, "No home screen found for " + localIntent, new Throwable());
      return true;
    }
    label334:
    return true;
  }
  
  public void startInPlaceAnimationOnFrontMostApplication(ActivityOptions paramActivityOptions)
    throws RemoteException
  {
    if ((paramActivityOptions.getAnimationType() != 10) || (paramActivityOptions.getCustomInPlaceResId() == 0)) {
      throw new IllegalArgumentException("Expected in-place ActivityOption with valid animation");
    }
    this.mWindowManager.prepareAppTransition(17, false);
    this.mWindowManager.overridePendingAppTransitionInPlace(paramActivityOptions.getPackageName(), paramActivityOptions.getCustomInPlaceResId());
    this.mWindowManager.executeAppTransition();
  }
  
  public boolean startInstrumentation(ComponentName paramComponentName, String paramString1, int paramInt1, Bundle paramBundle, IInstrumentationWatcher paramIInstrumentationWatcher, IUiAutomationConnection paramIUiAutomationConnection, int paramInt2, String paramString2)
  {
    enforceNotIsolatedCaller("startInstrumentation");
    paramInt1 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt2, false, 2, "startInstrumentation", null);
    if ((paramBundle != null) && (paramBundle.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Bundle");
    }
    Object localObject1;
    try
    {
      boostPriorityForLockedSection();
      localObject2 = null;
      localObject1 = null;
      localObject4 = null;
    }
    finally
    {
      Object localObject2;
      ApplicationInfo localApplicationInfo;
      label122:
      resetPriorityAfterLockedSection();
    }
    try
    {
      localObject3 = this.mContext.getPackageManager().getInstrumentationInfo(paramComponentName, 1024);
      localObject1 = localObject3;
      localObject2 = localObject3;
      localApplicationInfo = AppGlobals.getPackageManager().getApplicationInfo(((InstrumentationInfo)localObject3).targetPackage, 1024, paramInt1);
      localObject2 = localApplicationInfo;
      localObject1 = localObject3;
      localObject3 = localObject2;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException2)
    {
      int i;
      long l;
      localObject3 = localObject4;
      break label122;
    }
    catch (RemoteException localRemoteException)
    {
      localObject3 = localObject4;
      PackageManager.NameNotFoundException localNameNotFoundException1 = localNameNotFoundException2;
      break label122;
    }
    if (localObject1 == null)
    {
      reportStartInstrumentationFailureLocked(paramIInstrumentationWatcher, paramComponentName, "Unable to find instrumentation info for: " + paramComponentName);
      resetPriorityAfterLockedSection();
      return false;
    }
    if (localObject3 == null)
    {
      reportStartInstrumentationFailureLocked(paramIInstrumentationWatcher, paramComponentName, "Unable to find instrumentation target package: " + ((InstrumentationInfo)localObject1).targetPackage);
      resetPriorityAfterLockedSection();
      return false;
    }
    if (!((ApplicationInfo)localObject3).hasCode())
    {
      reportStartInstrumentationFailureLocked(paramIInstrumentationWatcher, paramComponentName, "Instrumentation target has no code: " + ((InstrumentationInfo)localObject1).targetPackage);
      resetPriorityAfterLockedSection();
      return false;
    }
    paramInt2 = this.mContext.getPackageManager().checkSignatures(((InstrumentationInfo)localObject1).targetPackage, ((InstrumentationInfo)localObject1).packageName);
    if ((paramInt2 < 0) && (paramInt2 != -1))
    {
      paramString1 = "Permission Denial: starting instrumentation " + paramComponentName + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingPid() + " not allowed because package " + ((InstrumentationInfo)localObject1).packageName + " does not have a signature matching the target " + ((InstrumentationInfo)localObject1).targetPackage;
      reportStartInstrumentationFailureLocked(paramIInstrumentationWatcher, paramComponentName, paramString1);
      throw new SecurityException(paramString1);
    }
    if (OnePlusAppBootManager.DEBUG) {
      OnePlusAppBootManager.myLog("# startInstrumentation # className=" + paramComponentName + ", callingPid=" + Binder.getCallingPid() + ", callingUid=" + Binder.getCallingUid());
    }
    if (OnePlusAppBootManager.IN_USING)
    {
      paramInt2 = Binder.getCallingPid();
      i = Binder.getCallingUid();
      if (!OnePlusAppBootManager.getInstance(null).canInstrumentationGo(paramComponentName, paramInt2, i))
      {
        reportStartInstrumentationFailureLocked(paramIInstrumentationWatcher, paramComponentName, "AppBoot forbid it.");
        resetPriorityAfterLockedSection();
        return false;
      }
    }
    l = Binder.clearCallingIdentity();
    forceStopPackageLocked(((InstrumentationInfo)localObject1).targetPackage, -1, true, false, true, true, false, paramInt1, "start instr");
    paramString2 = addAppLocked((ApplicationInfo)localObject3, false, paramString2);
    paramString2.instrumentationClass = paramComponentName;
    paramString2.instrumentationInfo = ((ApplicationInfo)localObject3);
    paramString2.instrumentationProfileFile = paramString1;
    paramString2.instrumentationArguments = paramBundle;
    paramString2.instrumentationWatcher = paramIInstrumentationWatcher;
    paramString2.instrumentationUiAutomationConnection = paramIUiAutomationConnection;
    paramString2.instrumentationResultClass = paramComponentName;
    Binder.restoreCallingIdentity(l);
    resetPriorityAfterLockedSection();
    return true;
  }
  
  /* Error */
  int startIsolatedProcess(String paramString1, String[] paramArrayOfString, String paramString2, String paramString3, int paramInt, Runnable paramRunnable)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: new 2262	android/content/pm/ApplicationInfo
    //   8: dup
    //   9: invokespecial 11744	android/content/pm/ApplicationInfo:<init>	()V
    //   12: astore 7
    //   14: aload 7
    //   16: sipush 1000
    //   19: putfield 2474	android/content/pm/ApplicationInfo:uid	I
    //   22: aload 7
    //   24: aload_3
    //   25: putfield 6327	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
    //   28: aload 7
    //   30: aload_1
    //   31: putfield 11747	android/content/pm/ApplicationInfo:className	Ljava/lang/String;
    //   34: aload 7
    //   36: ldc_w 4667
    //   39: putfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   42: aload_0
    //   43: aload_3
    //   44: aload 7
    //   46: iconst_0
    //   47: iconst_0
    //   48: ldc_w 1270
    //   51: aconst_null
    //   52: iconst_1
    //   53: iconst_1
    //   54: iload 5
    //   56: iconst_1
    //   57: aload 4
    //   59: aload_1
    //   60: aload_2
    //   61: aload 6
    //   63: invokevirtual 11750	com/android/server/am/ActivityManagerService:startProcessLocked	(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZIZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Runnable;)Lcom/android/server/am/ProcessRecord;
    //   66: astore_1
    //   67: aload_1
    //   68: ifnull +17 -> 85
    //   71: aload_1
    //   72: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   75: istore 5
    //   77: aload_0
    //   78: monitorexit
    //   79: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   82: iload 5
    //   84: ireturn
    //   85: iconst_0
    //   86: istore 5
    //   88: goto -11 -> 77
    //   91: astore_1
    //   92: aload_0
    //   93: monitorexit
    //   94: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   97: aload_1
    //   98: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	99	0	this	ActivityManagerService
    //   0	99	1	paramString1	String
    //   0	99	2	paramArrayOfString	String[]
    //   0	99	3	paramString2	String
    //   0	99	4	paramString3	String
    //   0	99	5	paramInt	int
    //   0	99	6	paramRunnable	Runnable
    //   12	33	7	localApplicationInfo	ApplicationInfo
    // Exception table:
    //   from	to	target	type
    //   2	67	91	finally
    //   71	77	91	finally
  }
  
  public void startLocalVoiceInteraction(IBinder paramIBinder, Bundle paramBundle)
    throws RemoteException
  {
    Slog.i(TAG, "Activity tried to startVoiceInteraction");
    ActivityRecord localActivityRecord;
    try
    {
      boostPriorityForLockedSection();
      localActivityRecord = getFocusedStack().topActivity();
      if (ActivityRecord.forTokenLocked(paramIBinder) != localActivityRecord) {
        throw new SecurityException("Only focused activity can call startVoiceInteraction");
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    if ((this.mRunningVoice != null) || (localActivityRecord.task.voiceSession != null)) {}
    while (localActivityRecord.voiceSession != null)
    {
      Slog.w(TAG, "Already in a voice interaction, cannot start new voice interaction");
      resetPriorityAfterLockedSection();
      return;
    }
    if (localActivityRecord.pendingVoiceInteractionStart)
    {
      Slog.w(TAG, "Pending start of voice interaction already.");
      resetPriorityAfterLockedSection();
      return;
    }
    localActivityRecord.pendingVoiceInteractionStart = true;
    resetPriorityAfterLockedSection();
    ((VoiceInteractionManagerInternal)LocalServices.getService(VoiceInteractionManagerInternal.class)).startLocalVoiceInteraction(paramIBinder, paramBundle);
  }
  
  public void startLockTaskMode(int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      TaskRecord localTaskRecord = this.mStackSupervisor.anyTaskForIdLocked(paramInt);
      if (localTaskRecord != null) {
        startLockTaskModeLocked(localTaskRecord);
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void startLockTaskMode(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      paramIBinder = ActivityRecord.forTokenLocked(paramIBinder);
      if (paramIBinder == null) {
        return;
      }
      paramIBinder = paramIBinder.task;
      if (paramIBinder != null) {
        startLockTaskModeLocked(paramIBinder);
      }
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void startLockTaskModeLocked(TaskRecord paramTaskRecord)
  {
    int j = 1;
    if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
      Slog.w(TAG_LOCKTASK, "startLockTaskModeLocked: " + paramTaskRecord);
    }
    if (paramTaskRecord.mLockTaskAuth == 0) {
      return;
    }
    int k = Binder.getCallingUid();
    int i;
    if (k == 1000) {
      i = 1;
    }
    long l;
    for (;;)
    {
      l = Binder.clearCallingIdentity();
      if (i == 0) {
        try
        {
          paramTaskRecord.mLockTaskUid = k;
          if (paramTaskRecord.mLockTaskAuth == 1)
          {
            if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
              Slog.w(TAG_LOCKTASK, "Mode default, asking user");
            }
            localObject = (StatusBarManagerInternal)LocalServices.getService(StatusBarManagerInternal.class);
            if (localObject != null) {
              ((StatusBarManagerInternal)localObject).showScreenPinningRequest(paramTaskRecord.taskId);
            }
            return;
            i = 0;
          }
          else
          {
            localObject = this.mStackSupervisor.getFocusedStack();
            if ((localObject == null) || (paramTaskRecord != ((ActivityStack)localObject).topTask())) {
              throw new IllegalArgumentException("Invalid task, not in foreground");
            }
          }
        }
        finally
        {
          Binder.restoreCallingIdentity(l);
        }
      }
    }
    String str;
    if (ActivityManagerDebugConfig.DEBUG_LOCKTASK)
    {
      str = TAG_LOCKTASK;
      if (i == 0) {
        break label234;
      }
    }
    label234:
    for (Object localObject = "Locking pinned";; localObject = "Locking fully")
    {
      Slog.w(str, (String)localObject);
      localObject = this.mStackSupervisor;
      if (i != 0) {
        j = 2;
      }
      ((ActivityStackSupervisor)localObject).setLockTaskModeLocked(paramTaskRecord, j, "startLockTask", true);
      Binder.restoreCallingIdentity(l);
      return;
    }
  }
  
  public boolean startNextMatchingActivity(IBinder paramIBinder, Intent paramIntent, Bundle paramBundle)
  {
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    ActivityOptions localActivityOptions = ActivityOptions.fromBundle(paramBundle);
    for (;;)
    {
      try
      {
        boostPriorityForLockedSection();
        localActivityRecord = ActivityRecord.isInStackLocked(paramIBinder);
        if (localActivityRecord == null)
        {
          ActivityOptions.abort(localActivityOptions);
          return false;
        }
        if ((localActivityRecord.app == null) || (localActivityRecord.app.thread == null))
        {
          ActivityOptions.abort(localActivityOptions);
          return false;
        }
        localIntent = new Intent(paramIntent);
      }
      finally
      {
        ActivityRecord localActivityRecord;
        Intent localIntent;
        int i;
        Object localObject1;
        Object localObject2;
        int j;
        Object localObject3;
        boolean bool;
        long l;
        resetPriorityAfterLockedSection();
      }
      try
      {
        localIntent.setDataAndType(localActivityRecord.intent.getData(), localActivityRecord.intent.getType());
        localIntent.setComponent(null);
        i = localIntent.getFlags();
        if ((i & 0x8) != 0)
        {
          i = 1;
          localObject1 = null;
          paramBundle = null;
          paramIBinder = null;
          paramIntent = paramBundle;
        }
      }
      finally
      {
        continue;
      }
      try
      {
        localObject2 = AppGlobals.getPackageManager().queryIntentActivities(localIntent, localActivityRecord.resolvedType, 66560, UserHandle.getCallingUserId()).getList();
        if (localObject2 == null) {
          continue;
        }
        paramIntent = paramBundle;
        j = ((List)localObject2).size();
      }
      catch (RemoteException paramIBinder)
      {
        continue;
        k = 0;
        continue;
      }
      paramIntent = (Intent)localObject1;
      if (k < j)
      {
        paramIntent = paramBundle;
        localObject3 = (ResolveInfo)((List)localObject2).get(k);
        paramIntent = paramBundle;
        if (!((ResolveInfo)localObject3).activityInfo.packageName.equals(localActivityRecord.packageName)) {
          continue;
        }
        paramIntent = paramBundle;
        if (!((ResolveInfo)localObject3).activityInfo.name.equals(localActivityRecord.info.name)) {
          continue;
        }
        k += 1;
        if (k < j)
        {
          paramIntent = paramBundle;
          paramIBinder = ((ResolveInfo)((List)localObject2).get(k)).activityInfo;
        }
        paramIntent = paramIBinder;
        if (i != 0)
        {
          paramIntent = paramIBinder;
          Slog.v(TAG, "Next matching activity: found current " + localActivityRecord.packageName + "/" + localActivityRecord.info.name);
          paramIntent = paramIBinder;
          localObject1 = TAG;
          paramIntent = paramIBinder;
          localObject2 = new StringBuilder().append("Next matching activity: next is ");
          if (paramIBinder != null) {
            continue;
          }
          paramBundle = "null";
          paramIntent = paramIBinder;
          Slog.v((String)localObject1, paramBundle);
          paramIntent = paramIBinder;
        }
      }
      if (paramIntent != null) {
        continue;
      }
      ActivityOptions.abort(localActivityOptions);
      if (i != 0) {
        Slog.d(TAG, "Next matching activity: nothing found");
      }
      resetPriorityAfterLockedSection();
      return false;
      i = 0;
      continue;
      j = 0;
      break label722;
      paramIntent = paramIBinder;
      paramBundle = paramIBinder.packageName + "/" + paramIBinder.name;
      continue;
      k += 1;
    }
    localIntent.setComponent(new ComponentName(paramIntent.applicationInfo.packageName, paramIntent.name));
    localIntent.setFlags(localIntent.getFlags() & 0xE1FFFFFF);
    bool = localActivityRecord.finishing;
    localActivityRecord.finishing = true;
    paramIBinder = localActivityRecord.resultTo;
    paramBundle = localActivityRecord.resultWho;
    i = localActivityRecord.requestCode;
    localActivityRecord.resultTo = null;
    if (paramIBinder != null) {
      paramIBinder.removeResultsLocked(localActivityRecord, paramBundle, i);
    }
    l = Binder.clearCallingIdentity();
    localObject1 = this.mActivityStarter;
    localObject2 = localActivityRecord.app.thread;
    localObject3 = localActivityRecord.resolvedType;
    if (paramIBinder != null) {}
    for (paramIBinder = paramIBinder.appToken;; paramIBinder = null)
    {
      i = ((ActivityStarter)localObject1).startActivityLocked((IApplicationThread)localObject2, localIntent, null, (String)localObject3, paramIntent, null, null, null, paramIBinder, paramBundle, i, -1, localActivityRecord.launchedFromUid, localActivityRecord.launchedFromPackage, -1, localActivityRecord.launchedFromUid, 0, localActivityOptions, false, false, null, null, null);
      Binder.restoreCallingIdentity(l);
      localActivityRecord.finishing = bool;
      if (i == 0) {
        break;
      }
      resetPriorityAfterLockedSection();
      return false;
    }
    resetPriorityAfterLockedSection();
    return true;
  }
  
  public void startObservingNativeCrashes()
  {
    new NativeCrashListener(this).start();
  }
  
  final ProcessRecord startProcessLocked(String paramString1, ApplicationInfo paramApplicationInfo, boolean paramBoolean1, int paramInt1, String paramString2, ComponentName paramComponentName, boolean paramBoolean2, boolean paramBoolean3, int paramInt2, boolean paramBoolean4, String paramString3, String paramString4, String[] paramArrayOfString, Runnable paramRunnable)
  {
    long l = SystemClock.elapsedRealtime();
    Object localObject2;
    Object localObject1;
    String str;
    if (!paramBoolean3)
    {
      localObject2 = getProcessRecordLocked(paramString1, paramApplicationInfo.uid, paramBoolean4);
      checkTime(l, "startProcess: after getProcessRecord");
      if ((paramInt1 & 0x4) != 0)
      {
        localObject1 = localObject2;
        if (this.mAppErrors.isBadProcessLocked(paramApplicationInfo))
        {
          if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            Slog.v(TAG, "Bad process: " + paramApplicationInfo.uid + "/" + paramApplicationInfo.processName);
          }
          return null;
        }
      }
      else
      {
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
          Slog.v(TAG, "Clearing bad process: " + paramApplicationInfo.uid + "/" + paramApplicationInfo.processName);
        }
        this.mAppErrors.resetProcessCrashTimeLocked(paramApplicationInfo);
        localObject1 = localObject2;
        if (this.mAppErrors.isBadProcessLocked(paramApplicationInfo))
        {
          EventLog.writeEvent(30016, new Object[] { Integer.valueOf(UserHandle.getUserId(paramApplicationInfo.uid)), Integer.valueOf(paramApplicationInfo.uid), paramApplicationInfo.processName });
          this.mAppErrors.clearBadProcessLocked(paramApplicationInfo);
          localObject1 = localObject2;
          if (localObject2 != null)
          {
            ((ProcessRecord)localObject2).bad = false;
            localObject1 = localObject2;
          }
        }
      }
      nativeMigrateToBoost();
      this.mIsBoosted = true;
      this.mBoostStartTime = SystemClock.uptimeMillis();
      localObject2 = this.mHandler.obtainMessage(58);
      this.mHandler.sendMessageDelayed((Message)localObject2, 3000L);
      if (ActivityManagerDebugConfig.DEBUG_PROCESSES)
      {
        str = TAG_PROCESSES;
        StringBuilder localStringBuilder = new StringBuilder().append("startProcess: name=").append(paramString1).append(" app=").append(localObject1).append(" knownToBeDead=").append(paramBoolean1).append(" thread=");
        if (localObject1 == null) {
          break label500;
        }
        localObject2 = ((ProcessRecord)localObject1).thread;
        label354:
        localObject2 = localStringBuilder.append(localObject2).append(" pid=");
        if (localObject1 == null) {
          break label506;
        }
      }
    }
    label500:
    label506:
    for (paramInt1 = ((ProcessRecord)localObject1).pid;; paramInt1 = -1)
    {
      Slog.v(str, paramInt1);
      if ((localObject1 == null) || (((ProcessRecord)localObject1).pid <= 0)) {
        break label591;
      }
      if (((paramBoolean1) || (((ProcessRecord)localObject1).killed)) && (((ProcessRecord)localObject1).thread != null)) {
        break label512;
      }
      if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
        Slog.v(TAG_PROCESSES, "App already running: " + localObject1);
      }
      ((ProcessRecord)localObject1).addPackage(paramApplicationInfo.packageName, paramApplicationInfo.versionCode, this.mProcessStats);
      checkTime(l, "startProcess: done, added package to proc");
      return (ProcessRecord)localObject1;
      localObject1 = null;
      break;
      localObject2 = null;
      break label354;
    }
    label512:
    if ((ActivityManagerDebugConfig.DEBUG_PROCESSES) || (ActivityManagerDebugConfig.DEBUG_CLEANUP)) {
      Slog.v(TAG_PROCESSES, "App died: " + localObject1);
    }
    checkTime(l, "startProcess: bad proc running, killing");
    killProcessGroup(((ProcessRecord)localObject1).uid, ((ProcessRecord)localObject1).pid);
    handleAppDiedLocked((ProcessRecord)localObject1, true, true);
    checkTime(l, "startProcess: done killing old proc");
    label591:
    if (paramComponentName != null) {
      paramComponentName = paramComponentName.flattenToShortString();
    }
    while (localObject1 == null)
    {
      checkTime(l, "startProcess: creating new process record");
      localObject1 = newProcessRecordLocked(paramApplicationInfo, paramString1, paramBoolean3, paramInt2);
      if (localObject1 == null)
      {
        Slog.w(TAG, "Failed making new process record for " + paramString1 + "/" + paramApplicationInfo.uid + " isolated=" + paramBoolean3);
        return null;
        paramComponentName = null;
      }
      else
      {
        ((ProcessRecord)localObject1).crashHandler = paramRunnable;
        checkTime(l, "startProcess: done creating new process record");
        if ((!this.mProcessesReady) && (!isAllowedWhileBooting(paramApplicationInfo))) {
          break label799;
        }
      }
    }
    label799:
    while (paramBoolean2)
    {
      checkTime(l, "startProcess: stepping in to startProcess");
      startProcessLocked((ProcessRecord)localObject1, paramString2, paramComponentName, paramString3, paramString4, paramArrayOfString);
      checkTime(l, "startProcess: done starting proc!");
      if (((ProcessRecord)localObject1).pid == 0) {
        break label872;
      }
      return (ProcessRecord)localObject1;
      ((ProcessRecord)localObject1).addPackage(paramApplicationInfo.packageName, paramApplicationInfo.versionCode, this.mProcessStats);
      checkTime(l, "startProcess: added package to existing proc");
      break;
    }
    if (!this.mProcessesOnHold.contains(localObject1)) {
      this.mProcessesOnHold.add(localObject1);
    }
    if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
      Slog.v(TAG_PROCESSES, "System not ready, putting on hold: " + localObject1);
    }
    checkTime(l, "startProcess: returning with proc on hold");
    return (ProcessRecord)localObject1;
    label872:
    return null;
  }
  
  final ProcessRecord startProcessLocked(String paramString1, ApplicationInfo paramApplicationInfo, boolean paramBoolean1, int paramInt, String paramString2, ComponentName paramComponentName, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4)
  {
    return startProcessLocked(paramString1, paramApplicationInfo, paramBoolean1, paramInt, paramString2, paramComponentName, paramBoolean2, paramBoolean3, 0, paramBoolean4, null, null, null, null);
  }
  
  void startRunningVoiceLocked(IVoiceInteractionSession paramIVoiceInteractionSession, int paramInt)
  {
    Slog.d(TAG, "<<<  startRunningVoiceLocked()");
    this.mVoiceWakeLock.setWorkSource(new WorkSource(paramInt));
    if ((this.mRunningVoice == null) || (this.mRunningVoice.asBinder() != paramIVoiceInteractionSession.asBinder())) {
      if (this.mRunningVoice == null) {
        break label80;
      }
    }
    label80:
    for (paramInt = 1;; paramInt = 0)
    {
      this.mRunningVoice = paramIVoiceInteractionSession;
      if (paramInt == 0)
      {
        this.mVoiceWakeLock.acquire();
        updateSleepIfNeededLocked();
      }
      return;
    }
  }
  
  public ComponentName startService(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString1, String paramString2, int paramInt)
    throws TransactionTooLargeException
  {
    enforceNotIsolatedCaller("startService");
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    if (paramString2 == null) {
      throw new IllegalArgumentException("callingPackage cannot be null");
    }
    if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
      Slog.v(TAG_SERVICE, "startService: " + paramIntent + " type=" + paramString1);
    }
    try
    {
      boostPriorityForLockedSection();
      int i = Binder.getCallingPid();
      int j = Binder.getCallingUid();
      long l = Binder.clearCallingIdentity();
      paramIApplicationThread = this.mServices.startServiceLocked(paramIApplicationThread, paramIntent, paramString1, i, j, paramString2, paramInt);
      Binder.restoreCallingIdentity(l);
      return paramIApplicationThread;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  ComponentName startServiceInPackage(int paramInt1, Intent paramIntent, String paramString1, String paramString2, int paramInt2)
    throws TransactionTooLargeException
  {
    try
    {
      boostPriorityForLockedSection();
      if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
        Slog.v(TAG_SERVICE, "startServiceInPackage: " + paramIntent + " type=" + paramString1);
      }
      long l = Binder.clearCallingIdentity();
      paramIntent = this.mServices.startServiceLocked(null, paramIntent, paramString1, -1, paramInt1, paramString2, paramInt2);
      Binder.restoreCallingIdentity(l);
      return paramIntent;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void startSetupActivityLocked()
  {
    if (this.mCheckedForSetup) {
      return;
    }
    ContentResolver localContentResolver = this.mContext.getContentResolver();
    Intent localIntent;
    ResolveInfo localResolveInfo;
    if ((this.mFactoryTest != 1) && (Settings.Global.getInt(localContentResolver, "device_provisioned", 0) != 0))
    {
      this.mCheckedForSetup = true;
      localIntent = new Intent("android.intent.action.UPGRADE_SETUP");
      localObject1 = this.mContext.getPackageManager().queryIntentActivities(localIntent, 1048704);
      if (!((List)localObject1).isEmpty())
      {
        localResolveInfo = (ResolveInfo)((List)localObject1).get(0);
        if (localResolveInfo.activityInfo.metaData == null) {
          break label177;
        }
      }
    }
    label177:
    for (Object localObject1 = localResolveInfo.activityInfo.metaData.getString("android.SETUP_VERSION");; localObject1 = null)
    {
      Object localObject2 = localObject1;
      if (localObject1 == null)
      {
        localObject2 = localObject1;
        if (localResolveInfo.activityInfo.applicationInfo.metaData != null) {
          localObject2 = localResolveInfo.activityInfo.applicationInfo.metaData.getString("android.SETUP_VERSION");
        }
      }
      localObject1 = Settings.Secure.getString(localContentResolver, "last_setup_shown");
      if ((localObject2 != null) && (!((String)localObject2).equals(localObject1))) {
        break;
      }
      return;
    }
    localIntent.setFlags(268435456);
    localIntent.setComponent(new ComponentName(localResolveInfo.activityInfo.packageName, localResolveInfo.activityInfo.name));
    this.mActivityStarter.startActivityLocked(null, localIntent, null, null, localResolveInfo.activityInfo, null, null, null, null, null, 0, 0, 0, null, 0, 0, 0, null, false, false, null, null, null);
  }
  
  /* Error */
  public void startSystemLockTaskMode(int paramInt)
    throws RemoteException
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 7409
    //   4: ldc_w 11925
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   13: lstore_2
    //   14: aload_0
    //   15: monitorenter
    //   16: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   19: aload_0
    //   20: iload_1
    //   21: invokevirtual 11927	com/android/server/am/ActivityManagerService:startLockTaskMode	(I)V
    //   24: aload_0
    //   25: monitorexit
    //   26: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   29: lload_2
    //   30: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   33: return
    //   34: astore 4
    //   36: aload_0
    //   37: monitorexit
    //   38: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   41: aload 4
    //   43: athrow
    //   44: astore 4
    //   46: lload_2
    //   47: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   50: aload 4
    //   52: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	53	0	this	ActivityManagerService
    //   0	53	1	paramInt	int
    //   13	34	2	l	long
    //   34	8	4	localObject1	Object
    //   44	7	4	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   16	24	34	finally
    //   14	16	44	finally
    //   24	29	44	finally
    //   36	44	44	finally
  }
  
  void startTimeTrackingFocusedActivityLocked()
  {
    if ((!this.mSleeping) && (this.mCurAppTimeTracker != null) && (this.mFocusedActivity != null)) {
      this.mCurAppTimeTracker.start(this.mFocusedActivity.packageName);
    }
  }
  
  public boolean startUserInBackground(int paramInt)
  {
    return this.mUserController.startUser(paramInt, false);
  }
  
  public int startVoiceActivity(String paramString1, int paramInt1, int paramInt2, Intent paramIntent, String paramString2, IVoiceInteractionSession paramIVoiceInteractionSession, IVoiceInteractor paramIVoiceInteractor, int paramInt3, ProfilerInfo paramProfilerInfo, Bundle paramBundle, int paramInt4)
  {
    if (checkCallingPermission("android.permission.BIND_VOICE_INTERACTION") != 0)
    {
      paramString1 = "Permission Denial: startVoiceActivity() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.BIND_VOICE_INTERACTION";
      Slog.w(TAG, paramString1);
      throw new SecurityException(paramString1);
    }
    if ((paramIVoiceInteractionSession == null) || (paramIVoiceInteractor == null)) {
      throw new NullPointerException("null session or interactor");
    }
    paramInt1 = this.mUserController.handleIncomingUser(paramInt1, paramInt2, paramInt4, false, 2, "startVoiceActivity", null);
    return this.mActivityStarter.startActivityMayWait(null, paramInt2, paramString1, paramIntent, paramString2, paramIVoiceInteractionSession, paramIVoiceInteractor, null, null, 0, paramInt3, paramProfilerInfo, null, null, paramBundle, false, paramInt1, null, null);
  }
  
  public void stopAppSwitches()
  {
    if (checkCallingPermission("android.permission.STOP_APP_SWITCHES") != 0) {
      throw new SecurityException("viewquires permission android.permission.STOP_APP_SWITCHES");
    }
    try
    {
      boostPriorityForLockedSection();
      this.mAppSwitchesAllowedTime = (SystemClock.uptimeMillis() + 5000L);
      this.mDidAppSwitch = false;
      this.mHandler.removeMessages(21);
      Message localMessage = this.mHandler.obtainMessage(21);
      this.mHandler.sendMessageDelayed(localMessage, 5000L);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  void stopAssociationLocked(int paramInt1, String paramString, int paramInt2, ComponentName paramComponentName)
  {
    if (!this.mTrackingAssociations) {
      return;
    }
    ArrayMap localArrayMap = (ArrayMap)this.mAssociations.get(paramInt2);
    if (localArrayMap == null) {
      return;
    }
    paramComponentName = (SparseArray)localArrayMap.get(paramComponentName);
    if (paramComponentName == null) {
      return;
    }
    paramComponentName = (ArrayMap)paramComponentName.get(paramInt1);
    if (paramComponentName == null) {
      return;
    }
    paramString = (Association)paramComponentName.get(paramString);
    if ((paramString == null) || (paramString.mNesting <= 0)) {
      return;
    }
    paramString.mNesting -= 1;
    if (paramString.mNesting == 0)
    {
      long l = SystemClock.uptimeMillis();
      paramString.mTime += l - paramString.mStartTime;
      paramComponentName = paramString.mStateTimes;
      paramInt1 = paramString.mLastState + 1;
      paramComponentName[paramInt1] += l - paramString.mLastStateUptime;
      paramString.mLastState = 18;
    }
  }
  
  public void stopBgPowerHungryApp(String paramString, int paramInt)
  {
    this.mOHPD.stopBgPowerHungryApp(paramString, paramInt);
  }
  
  /* Error */
  public boolean stopBinderTrackingAndDump(ParcelFileDescriptor paramParcelFileDescriptor)
    throws RemoteException
  {
    // Byte code:
    //   0: aload_1
    //   1: astore_2
    //   2: aload_0
    //   3: monitorenter
    //   4: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   7: aload_0
    //   8: iconst_0
    //   9: putfield 1498	com/android/server/am/ActivityManagerService:mBinderTransactionTrackingEnabled	Z
    //   12: aload_0
    //   13: ldc_w 8139
    //   16: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   19: ifeq +39 -> 58
    //   22: new 4439	java/lang/SecurityException
    //   25: dup
    //   26: ldc_w 8141
    //   29: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   32: athrow
    //   33: astore_3
    //   34: aload_1
    //   35: astore_2
    //   36: aload_0
    //   37: monitorexit
    //   38: aload_1
    //   39: astore_2
    //   40: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   43: aload_1
    //   44: astore_2
    //   45: aload_3
    //   46: athrow
    //   47: astore_1
    //   48: aload_2
    //   49: ifnull +7 -> 56
    //   52: aload_2
    //   53: invokevirtual 3617	android/os/ParcelFileDescriptor:close	()V
    //   56: aload_1
    //   57: athrow
    //   58: aload_1
    //   59: ifnonnull +14 -> 73
    //   62: new 2386	java/lang/IllegalArgumentException
    //   65: dup
    //   66: ldc_w 8143
    //   69: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   72: athrow
    //   73: new 10868	com/android/internal/util/FastPrintWriter
    //   76: dup
    //   77: new 11954	java/io/FileOutputStream
    //   80: dup
    //   81: aload_1
    //   82: invokevirtual 4109	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
    //   85: invokespecial 11956	java/io/FileOutputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   88: invokespecial 11959	com/android/internal/util/FastPrintWriter:<init>	(Ljava/io/OutputStream;)V
    //   91: astore_2
    //   92: aload_2
    //   93: ldc_w 11961
    //   96: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   99: aload_0
    //   100: getfield 1488	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
    //   103: invokeinterface 2040 1 0
    //   108: astore_3
    //   109: aload_3
    //   110: invokeinterface 2045 1 0
    //   115: ifeq +199 -> 314
    //   118: aload_3
    //   119: invokeinterface 2049 1 0
    //   124: checkcast 2141	com/android/server/am/ProcessRecord
    //   127: astore 4
    //   129: aload_0
    //   130: aload 4
    //   132: invokespecial 11638	com/android/server/am/ActivityManagerService:processSanityChecksLocked	(Lcom/android/server/am/ProcessRecord;)Z
    //   135: ifeq -26 -> 109
    //   138: aload_2
    //   139: new 1066	java/lang/StringBuilder
    //   142: dup
    //   143: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   146: ldc_w 11963
    //   149: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   152: aload 4
    //   154: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   157: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   160: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   163: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   166: aload_2
    //   167: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   170: new 4101	com/android/internal/os/TransferPipe
    //   173: dup
    //   174: invokespecial 4102	com/android/internal/os/TransferPipe:<init>	()V
    //   177: astore 5
    //   179: aload 4
    //   181: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   184: aload 5
    //   186: invokevirtual 4105	com/android/internal/os/TransferPipe:getWriteFd	()Landroid/os/ParcelFileDescriptor;
    //   189: invokevirtual 4109	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
    //   192: invokeinterface 11965 2 0
    //   197: aload 5
    //   199: aload_1
    //   200: invokevirtual 4109	android/os/ParcelFileDescriptor:getFileDescriptor	()Ljava/io/FileDescriptor;
    //   203: invokevirtual 4120	com/android/internal/os/TransferPipe:go	(Ljava/io/FileDescriptor;)V
    //   206: aload 5
    //   208: invokevirtual 4122	com/android/internal/os/TransferPipe:kill	()V
    //   211: goto -102 -> 109
    //   214: astore 5
    //   216: aload_2
    //   217: new 1066	java/lang/StringBuilder
    //   220: dup
    //   221: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   224: ldc_w 11967
    //   227: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   230: aload 4
    //   232: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   235: ldc_w 11969
    //   238: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   241: aload 5
    //   243: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   246: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   249: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   252: aload_2
    //   253: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   256: goto -147 -> 109
    //   259: astore 6
    //   261: aload 5
    //   263: invokevirtual 4122	com/android/internal/os/TransferPipe:kill	()V
    //   266: aload 6
    //   268: athrow
    //   269: astore 5
    //   271: aload_2
    //   272: new 1066	java/lang/StringBuilder
    //   275: dup
    //   276: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   279: ldc_w 11971
    //   282: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   285: aload 4
    //   287: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   290: ldc_w 11969
    //   293: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   296: aload 5
    //   298: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   301: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   304: invokevirtual 4126	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   307: aload_2
    //   308: invokevirtual 4099	java/io/PrintWriter:flush	()V
    //   311: goto -202 -> 109
    //   314: aconst_null
    //   315: astore_1
    //   316: aload_1
    //   317: astore_2
    //   318: aload_0
    //   319: monitorexit
    //   320: aload_1
    //   321: astore_2
    //   322: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   325: iconst_1
    //   326: ireturn
    //   327: astore_2
    //   328: goto -272 -> 56
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	331	0	this	ActivityManagerService
    //   0	331	1	paramParcelFileDescriptor	ParcelFileDescriptor
    //   1	321	2	localObject1	Object
    //   327	1	2	localIOException1	IOException
    //   33	13	3	localObject2	Object
    //   108	11	3	localIterator	Iterator
    //   127	159	4	localProcessRecord	ProcessRecord
    //   177	30	5	localTransferPipe	TransferPipe
    //   214	48	5	localIOException2	IOException
    //   269	28	5	localRemoteException	RemoteException
    //   259	8	6	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   4	33	33	finally
    //   62	73	33	finally
    //   73	109	33	finally
    //   109	170	33	finally
    //   170	179	33	finally
    //   206	211	33	finally
    //   216	256	33	finally
    //   261	269	33	finally
    //   271	311	33	finally
    //   2	4	47	finally
    //   36	38	47	finally
    //   40	43	47	finally
    //   45	47	47	finally
    //   318	320	47	finally
    //   322	325	47	finally
    //   170	179	214	java/io/IOException
    //   206	211	214	java/io/IOException
    //   261	269	214	java/io/IOException
    //   179	206	259	finally
    //   170	179	269	android/os/RemoteException
    //   206	211	269	android/os/RemoteException
    //   261	269	269	android/os/RemoteException
    //   52	56	327	java/io/IOException
  }
  
  public void stopLocalVoiceInteraction(IBinder paramIBinder)
    throws RemoteException
  {
    ((VoiceInteractionManagerInternal)LocalServices.getService(VoiceInteractionManagerInternal.class)).stopLocalVoiceInteraction(paramIBinder);
  }
  
  /* Error */
  public void stopLockTaskMode()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   4: invokevirtual 11978	com/android/server/am/ActivityStackSupervisor:getLockedTaskLocked	()Lcom/android/server/am/TaskRecord;
    //   7: astore 5
    //   9: aload 5
    //   11: ifnonnull +4 -> 15
    //   14: return
    //   15: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   18: istore_1
    //   19: aload 5
    //   21: getfield 11779	com/android/server/am/TaskRecord:mLockTaskUid	I
    //   24: istore_2
    //   25: aload_0
    //   26: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   29: invokevirtual 9211	com/android/server/am/ActivityStackSupervisor:getLockTaskModeState	()I
    //   32: ifne +4 -> 36
    //   35: return
    //   36: aload_0
    //   37: ldc_w 7409
    //   40: invokevirtual 5017	com/android/server/am/ActivityManagerService:checkCallingPermission	(Ljava/lang/String;)I
    //   43: ifeq +73 -> 116
    //   46: iload_1
    //   47: iload_2
    //   48: if_icmpeq +68 -> 116
    //   51: iload_2
    //   52: ifne +12 -> 64
    //   55: iload_1
    //   56: aload 5
    //   58: getfield 3987	com/android/server/am/TaskRecord:effectiveUid	I
    //   61: if_icmpeq +55 -> 116
    //   64: new 4439	java/lang/SecurityException
    //   67: dup
    //   68: new 1066	java/lang/StringBuilder
    //   71: dup
    //   72: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   75: ldc_w 11980
    //   78: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   81: iload_2
    //   82: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   85: ldc_w 11982
    //   88: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: iload_1
    //   92: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   95: ldc_w 11984
    //   98: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   101: aload 5
    //   103: getfield 3987	com/android/server/am/TaskRecord:effectiveUid	I
    //   106: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   109: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   112: invokespecial 4440	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   115: athrow
    //   116: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   119: lstore_3
    //   120: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   123: ldc_w 11985
    //   126: invokestatic 2057	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   129: pop
    //   130: aload_0
    //   131: monitorenter
    //   132: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   135: aload_0
    //   136: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   139: aconst_null
    //   140: iconst_0
    //   141: ldc_w 11987
    //   144: iconst_1
    //   145: invokevirtual 11796	com/android/server/am/ActivityStackSupervisor:setLockTaskModeLocked	(Lcom/android/server/am/TaskRecord;ILjava/lang/String;Z)V
    //   148: aload_0
    //   149: monitorexit
    //   150: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   153: aload_0
    //   154: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   157: ldc_w 11989
    //   160: invokevirtual 5151	android/content/Context:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   163: checkcast 11991	android/telecom/TelecomManager
    //   166: astore 5
    //   168: aload 5
    //   170: ifnull +9 -> 179
    //   173: aload 5
    //   175: iconst_0
    //   176: invokevirtual 11994	android/telecom/TelecomManager:showInCallScreen	(Z)V
    //   179: lload_3
    //   180: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   183: return
    //   184: astore 5
    //   186: aload_0
    //   187: monitorexit
    //   188: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   191: aload 5
    //   193: athrow
    //   194: astore 5
    //   196: lload_3
    //   197: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   200: aload 5
    //   202: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	203	0	this	ActivityManagerService
    //   18	74	1	i	int
    //   24	58	2	j	int
    //   119	78	3	l	long
    //   7	167	5	localObject1	Object
    //   184	8	5	localObject2	Object
    //   194	7	5	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   132	148	184	finally
    //   120	132	194	finally
    //   148	168	194	finally
    //   173	179	194	finally
    //   186	194	194	finally
  }
  
  public int stopService(IApplicationThread paramIApplicationThread, Intent paramIntent, String paramString, int paramInt)
  {
    enforceNotIsolatedCaller("stopService");
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    try
    {
      boostPriorityForLockedSection();
      paramInt = this.mServices.stopServiceLocked(paramIApplicationThread, paramIntent, paramString, paramInt);
      return paramInt;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public boolean stopServiceToken(ComponentName paramComponentName, IBinder paramIBinder, int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      boolean bool = this.mServices.stopServiceTokenLocked(paramComponentName, paramIBinder, paramInt);
      return bool;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void stopSystemLockTaskMode()
    throws RemoteException
  {
    if (this.mStackSupervisor.getLockTaskModeState() == 2)
    {
      stopLockTaskMode();
      return;
    }
    this.mStackSupervisor.showLockTaskToast();
  }
  
  public int stopUser(int paramInt, boolean paramBoolean, IStopUserCallback paramIStopUserCallback)
  {
    return this.mUserController.stopUser(paramInt, paramBoolean, paramIStopUserCallback);
  }
  
  public boolean supportsLocalVoiceInteraction()
    throws RemoteException
  {
    return ((VoiceInteractionManagerInternal)LocalServices.getService(VoiceInteractionManagerInternal.class)).supportsLocalVoiceInteraction();
  }
  
  public void suppressResizeConfigChanges(boolean paramBoolean)
    throws RemoteException
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "suppressResizeConfigChanges()");
    try
    {
      boostPriorityForLockedSection();
      this.mSuppressResizeConfigChanges = paramBoolean;
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void swapDockedAndFullscreenStack()
    throws RemoteException
  {
    enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "swapDockedAndFullscreenStack()");
    for (;;)
    {
      long l;
      Object localObject4;
      int i;
      try
      {
        boostPriorityForLockedSection();
        l = Binder.clearCallingIdentity();
        try
        {
          localObject1 = this.mStackSupervisor.getStack(1);
          if (localObject1 != null)
          {
            localObject1 = ((ActivityStack)localObject1).topTask();
            localObject4 = this.mStackSupervisor.getStack(3);
            if (localObject4 != null)
            {
              localObject4 = ((ActivityStack)localObject4).getAllTasks();
              break label253;
              Slog.w(TAG, "Unable to swap tasks, either docked or fullscreen stack is empty.");
              Binder.restoreCallingIdentity(l);
            }
          }
          else
          {
            localObject1 = null;
            continue;
          }
          localObject4 = null;
        }
        finally
        {
          Object localObject1;
          int j;
          int k;
          Binder.restoreCallingIdentity(l);
        }
        if (((ArrayList)localObject4).size() == 0) {
          continue;
        }
        this.mWindowManager.prepareAppTransition(18, false);
        this.mStackSupervisor.moveTaskToStackLocked(((TaskRecord)localObject1).taskId, 3, false, false, "swapDockedAndFullscreenStack", true, true);
        j = ((ArrayList)localObject4).size();
        i = 0;
        if (i < j)
        {
          k = ((TaskRecord)((ArrayList)localObject4).get(i)).taskId;
          if (k == ((TaskRecord)localObject1).taskId) {
            break label266;
          }
          this.mStackSupervisor.moveTaskToStackLocked(k, 1, true, false, "swapDockedAndFullscreenStack", true, true);
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
      this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
      this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
      this.mWindowManager.executeAppTransition();
      Binder.restoreCallingIdentity(l);
      resetPriorityAfterLockedSection();
      return;
      label253:
      if (localObject3 != null) {
        if (localObject4 == null)
        {
          continue;
          label266:
          i += 1;
        }
      }
    }
  }
  
  public boolean switchUser(int paramInt)
  {
    enforceShellRestriction("no_debugging_features", paramInt);
    try
    {
      boostPriorityForLockedSection();
      int i = this.mUserController.getCurrentUserIdLocked();
      Object localObject1 = this.mUserController.getUserInfo(i);
      UserInfo localUserInfo = this.mUserController.getUserInfo(paramInt);
      if (localUserInfo == null)
      {
        Slog.w(TAG, "No user info for user #" + paramInt);
        return false;
      }
      if ((!localUserInfo.isDemo()) && (UserManager.isDeviceInDemoMode(this.mContext)))
      {
        Slog.w(TAG, "Cannot switch to non-demo user #" + paramInt + " when device is in demo mode");
        return false;
      }
      if (!localUserInfo.supportsSwitchTo())
      {
        Slog.w(TAG, "Cannot switch to User #" + paramInt + ": not supported");
        return false;
      }
      if (localUserInfo.isManagedProfile())
      {
        Slog.w(TAG, "Cannot switch to User #" + paramInt + ": not a full user");
        return false;
      }
      this.mUserController.setTargetUserIdLocked(paramInt);
      resetPriorityAfterLockedSection();
      localObject1 = new Pair(localObject1, localUserInfo);
      this.mUiHandler.removeMessages(46);
      this.mUiHandler.sendMessage(this.mUiHandler.obtainMessage(46, localObject1));
      return true;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void systemReady(Runnable paramRunnable)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   5: aload_0
    //   6: getfield 1565	com/android/server/am/ActivityManagerService:mSystemReady	Z
    //   9: ifeq +19 -> 28
    //   12: aload_1
    //   13: ifnull +9 -> 22
    //   16: aload_1
    //   17: invokeinterface 12069 1 0
    //   22: aload_0
    //   23: monitorexit
    //   24: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   27: return
    //   28: aload_0
    //   29: ldc_w 12071
    //   32: invokestatic 2733	com/android/server/LocalServices:getService	(Ljava/lang/Class;)Ljava/lang/Object;
    //   35: checkcast 12071	com/android/server/DeviceIdleController$LocalService
    //   38: putfield 12073	com/android/server/am/ActivityManagerService:mLocalDeviceIdleController	Lcom/android/server/DeviceIdleController$LocalService;
    //   41: aload_0
    //   42: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   45: invokevirtual 12076	com/android/server/am/UserController:onSystemReady	()V
    //   48: aload_0
    //   49: getfield 2000	com/android/server/am/ActivityManagerService:mRecentTasks	Lcom/android/server/am/RecentTasks;
    //   52: invokevirtual 12079	com/android/server/am/RecentTasks:onSystemReadyLocked	()V
    //   55: aload_0
    //   56: getfield 1914	com/android/server/am/ActivityManagerService:mAppOpsService	Lcom/android/server/AppOpsService;
    //   59: invokevirtual 12081	com/android/server/AppOpsService:systemReady	()V
    //   62: aload_0
    //   63: iconst_1
    //   64: putfield 1565	com/android/server/am/ActivityManagerService:mSystemReady	Z
    //   67: aload_0
    //   68: monitorexit
    //   69: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   72: aload_0
    //   73: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   76: astore 7
    //   78: aload 7
    //   80: monitorenter
    //   81: aload_0
    //   82: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   85: invokevirtual 3536	android/util/SparseArray:size	()I
    //   88: istore_2
    //   89: iload_2
    //   90: iconst_1
    //   91: isub
    //   92: istore_2
    //   93: aconst_null
    //   94: astore 6
    //   96: iload_2
    //   97: iflt +65 -> 162
    //   100: aload_0
    //   101: getfield 1478	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
    //   104: iload_2
    //   105: invokevirtual 3537	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   108: checkcast 2141	com/android/server/am/ProcessRecord
    //   111: astore 8
    //   113: aload_0
    //   114: aload 8
    //   116: getfield 2260	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
    //   119: invokevirtual 2847	com/android/server/am/ActivityManagerService:isAllowedWhileBooting	(Landroid/content/pm/ApplicationInfo;)Z
    //   122: ifne +947 -> 1069
    //   125: aload 6
    //   127: ifnonnull +939 -> 1066
    //   130: new 1242	java/util/ArrayList
    //   133: dup
    //   134: invokespecial 1243	java/util/ArrayList:<init>	()V
    //   137: astore 6
    //   139: aload 6
    //   141: aload 8
    //   143: invokevirtual 2607	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   146: pop
    //   147: iload_2
    //   148: iconst_1
    //   149: isub
    //   150: istore_2
    //   151: goto -55 -> 96
    //   154: astore_1
    //   155: aload_0
    //   156: monitorexit
    //   157: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   160: aload_1
    //   161: athrow
    //   162: aload 7
    //   164: monitorexit
    //   165: aload_0
    //   166: monitorenter
    //   167: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   170: aload 6
    //   172: ifnull +79 -> 251
    //   175: aload 6
    //   177: invokevirtual 2580	java/util/ArrayList:size	()I
    //   180: iconst_1
    //   181: isub
    //   182: istore_2
    //   183: iload_2
    //   184: iflt +67 -> 251
    //   187: aload 6
    //   189: iload_2
    //   190: invokevirtual 2581	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   193: checkcast 2141	com/android/server/am/ProcessRecord
    //   196: astore 7
    //   198: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   201: new 1066	java/lang/StringBuilder
    //   204: dup
    //   205: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   208: ldc_w 12083
    //   211: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   214: aload 7
    //   216: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   219: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   222: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   225: pop
    //   226: aload_0
    //   227: aload 7
    //   229: iconst_1
    //   230: iconst_0
    //   231: ldc_w 12085
    //   234: invokevirtual 4949	com/android/server/am/ActivityManagerService:removeProcessLocked	(Lcom/android/server/am/ProcessRecord;ZZLjava/lang/String;)Z
    //   237: pop
    //   238: iload_2
    //   239: iconst_1
    //   240: isub
    //   241: istore_2
    //   242: goto -59 -> 183
    //   245: astore_1
    //   246: aload 7
    //   248: monitorexit
    //   249: aload_1
    //   250: athrow
    //   251: aload_0
    //   252: iconst_1
    //   253: putfield 1563	com/android/server/am/ActivityManagerService:mProcessesReady	Z
    //   256: aload_0
    //   257: monitorexit
    //   258: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   261: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   264: ldc_w 12087
    //   267: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   270: pop
    //   271: sipush 3040
    //   274: invokestatic 1504	android/os/SystemClock:uptimeMillis	()J
    //   277: invokestatic 8603	android/util/EventLog:writeEvent	(IJ)I
    //   280: pop
    //   281: getstatic 4887	com/android/server/am/OnePlusAppBootManager:IN_USING	Z
    //   284: ifeq +15 -> 299
    //   287: aconst_null
    //   288: invokestatic 4890	com/android/server/am/OnePlusAppBootManager:getInstance	(Lcom/android/server/pm/PackageManagerService;)Lcom/android/server/am/OnePlusAppBootManager;
    //   291: aload_0
    //   292: aload_0
    //   293: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   296: invokevirtual 12091	com/android/server/am/OnePlusAppBootManager:initEnv	(Lcom/android/server/am/ActivityManagerService;Landroid/content/Context;)V
    //   299: aload_0
    //   300: ldc_w 12093
    //   303: invokestatic 3468	android/os/ServiceManager:getService	(Ljava/lang/String;)Landroid/os/IBinder;
    //   306: invokestatic 12098	android/os/IDeviceIdleController$Stub:asInterface	(Landroid/os/IBinder;)Landroid/os/IDeviceIdleController;
    //   309: putfield 1765	com/android/server/am/ActivityManagerService:mDeviceIdleService	Landroid/os/IDeviceIdleController;
    //   312: new 12100	com/android/server/am/OnePlusPowerConsumptionDetector
    //   315: dup
    //   316: aload_0
    //   317: aload_0
    //   318: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   321: aload_0
    //   322: getfield 1879	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
    //   325: invokespecial 12103	com/android/server/am/OnePlusPowerConsumptionDetector:<init>	(Lcom/android/server/am/ActivityManagerService;Landroid/content/Context;Lcom/android/server/am/BatteryStatsService;)V
    //   328: pop
    //   329: aload_0
    //   330: new 1220	com/android/server/am/OnePlusHighPowerDetector
    //   333: dup
    //   334: aload_0
    //   335: aload_0
    //   336: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   339: aload_0
    //   340: getfield 1818	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
    //   343: aload_0
    //   344: getfield 1879	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
    //   347: invokespecial 12106	com/android/server/am/OnePlusHighPowerDetector:<init>	(Lcom/android/server/am/ActivityManagerService;Landroid/content/Context;Landroid/os/Handler;Lcom/android/server/am/BatteryStatsService;)V
    //   350: putfield 1422	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
    //   353: aload_0
    //   354: monitorenter
    //   355: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   358: aload_0
    //   359: getfield 1782	com/android/server/am/ActivityManagerService:mFactoryTest	I
    //   362: iconst_1
    //   363: if_icmpne +147 -> 510
    //   366: aload_0
    //   367: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   370: invokevirtual 5598	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
    //   373: new 2070	android/content/Intent
    //   376: dup
    //   377: ldc_w 12108
    //   380: invokespecial 5548	android/content/Intent:<init>	(Ljava/lang/String;)V
    //   383: sipush 1024
    //   386: invokevirtual 12111	android/content/pm/PackageManager:resolveActivity	(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;
    //   389: astore 7
    //   391: aconst_null
    //   392: astore 6
    //   394: aload 7
    //   396: ifnull +586 -> 982
    //   399: aload 7
    //   401: getfield 3132	android/content/pm/ResolveInfo:activityInfo	Landroid/content/pm/ActivityInfo;
    //   404: astore 7
    //   406: aload 7
    //   408: getfield 5590	android/content/pm/ActivityInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   411: astore 8
    //   413: aload 8
    //   415: getfield 2265	android/content/pm/ApplicationInfo:flags	I
    //   418: iconst_1
    //   419: iand
    //   420: ifeq +544 -> 964
    //   423: aload_0
    //   424: ldc_w 12108
    //   427: putfield 1561	com/android/server/am/ActivityManagerService:mTopAction	Ljava/lang/String;
    //   430: aload_0
    //   431: aconst_null
    //   432: putfield 9130	com/android/server/am/ActivityManagerService:mTopData	Ljava/lang/String;
    //   435: aload_0
    //   436: new 2891	android/content/ComponentName
    //   439: dup
    //   440: aload 8
    //   442: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   445: aload 7
    //   447: getfield 3646	android/content/pm/ActivityInfo:name	Ljava/lang/String;
    //   450: invokespecial 3566	android/content/ComponentName:<init>	(Ljava/lang/String;Ljava/lang/String;)V
    //   453: putfield 5911	com/android/server/am/ActivityManagerService:mTopComponent	Landroid/content/ComponentName;
    //   456: aload 6
    //   458: ifnull +52 -> 510
    //   461: aload_0
    //   462: aconst_null
    //   463: putfield 1561	com/android/server/am/ActivityManagerService:mTopAction	Ljava/lang/String;
    //   466: aload_0
    //   467: aconst_null
    //   468: putfield 9130	com/android/server/am/ActivityManagerService:mTopData	Ljava/lang/String;
    //   471: aload_0
    //   472: aconst_null
    //   473: putfield 5911	com/android/server/am/ActivityManagerService:mTopComponent	Landroid/content/ComponentName;
    //   476: invokestatic 9734	android/os/Message:obtain	()Landroid/os/Message;
    //   479: astore 7
    //   481: aload 7
    //   483: iconst_3
    //   484: putfield 3288	android/os/Message:what	I
    //   487: aload 7
    //   489: invokevirtual 12113	android/os/Message:getData	()Landroid/os/Bundle;
    //   492: ldc_w 12115
    //   495: aload 6
    //   497: invokevirtual 12119	android/os/Bundle:putCharSequence	(Ljava/lang/String;Ljava/lang/CharSequence;)V
    //   500: aload_0
    //   501: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   504: aload 7
    //   506: invokevirtual 9740	com/android/server/am/ActivityManagerService$UiHandler:sendMessage	(Landroid/os/Message;)Z
    //   509: pop
    //   510: aload_0
    //   511: monitorexit
    //   512: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   515: aload_0
    //   516: invokespecial 12121	com/android/server/am/ActivityManagerService:retrieveSettings	()V
    //   519: aload_0
    //   520: aload_0
    //   521: invokestatic 12124	com/android/server/am/OnePlusProcessManager:getInstance	(Lcom/android/server/am/ActivityManagerService;)Lcom/android/server/am/OnePlusProcessManager;
    //   524: putfield 7543	com/android/server/am/ActivityManagerService:mOnePlusProcessManager	Lcom/android/server/am/OnePlusProcessManager;
    //   527: aload_0
    //   528: getfield 1844	com/android/server/am/ActivityManagerService:mServices	Lcom/android/server/am/ActiveServices;
    //   531: astore 6
    //   533: aload_0
    //   534: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   537: invokevirtual 5598	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
    //   540: ldc_w 12126
    //   543: invokevirtual 5605	android/content/pm/PackageManager:hasSystemFeature	(Ljava/lang/String;)Z
    //   546: putstatic 12128	com/android/server/am/ActiveServices:isSupport	Z
    //   549: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   552: astore 6
    //   554: new 1066	java/lang/StringBuilder
    //   557: dup
    //   558: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   561: ldc_w 12130
    //   564: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   567: astore 7
    //   569: aload_0
    //   570: getfield 1844	com/android/server/am/ActivityManagerService:mServices	Lcom/android/server/am/ActiveServices;
    //   573: astore 8
    //   575: aload 6
    //   577: aload 7
    //   579: getstatic 12128	com/android/server/am/ActiveServices:isSupport	Z
    //   582: invokevirtual 2631	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   585: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   588: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   591: pop
    //   592: aload_0
    //   593: monitorenter
    //   594: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   597: aload_0
    //   598: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   601: invokevirtual 6073	com/android/server/am/UserController:getCurrentUserIdLocked	()I
    //   604: istore_2
    //   605: aload_0
    //   606: invokespecial 12132	com/android/server/am/ActivityManagerService:readGrantedUriPermissionsLocked	()V
    //   609: aload_0
    //   610: monitorexit
    //   611: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   614: aload_1
    //   615: ifnull +9 -> 624
    //   618: aload_1
    //   619: invokeinterface 12069 1 0
    //   624: aload_0
    //   625: getfield 1879	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
    //   628: ldc_w 12133
    //   631: iload_2
    //   632: invokestatic 12135	java/lang/Integer:toString	(I)Ljava/lang/String;
    //   635: iload_2
    //   636: invokevirtual 5593	com/android/server/am/BatteryStatsService:noteEvent	(ILjava/lang/String;I)V
    //   639: aload_0
    //   640: getfield 1879	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
    //   643: ldc_w 12136
    //   646: iload_2
    //   647: invokestatic 12135	java/lang/Integer:toString	(I)Ljava/lang/String;
    //   650: iload_2
    //   651: invokevirtual 5593	com/android/server/am/BatteryStatsService:noteEvent	(ILjava/lang/String;I)V
    //   654: aload_0
    //   655: getfield 8772	com/android/server/am/ActivityManagerService:mSystemServiceManager	Lcom/android/server/SystemServiceManager;
    //   658: iload_2
    //   659: invokevirtual 12138	com/android/server/SystemServiceManager:startUser	(I)V
    //   662: aload_0
    //   663: monitorenter
    //   664: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   667: aload_0
    //   668: ldc_w 6411
    //   671: invokespecial 1005	com/android/server/am/ActivityManagerService:startPersistentApps	(I)V
    //   674: aload_0
    //   675: iconst_1
    //   676: putfield 1569	com/android/server/am/ActivityManagerService:mBooting	Z
    //   679: invokestatic 12141	android/os/UserManager:isSplitSystemUser	()Z
    //   682: ifeq +30 -> 712
    //   685: new 2891	android/content/ComponentName
    //   688: dup
    //   689: aload_0
    //   690: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   693: ldc_w 12143
    //   696: invokespecial 12146	android/content/ComponentName:<init>	(Landroid/content/Context;Ljava/lang/Class;)V
    //   699: astore_1
    //   700: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   703: aload_1
    //   704: iconst_1
    //   705: iconst_0
    //   706: iconst_0
    //   707: invokeinterface 12150 5 0
    //   712: aload_0
    //   713: iload_2
    //   714: ldc_w 12151
    //   717: invokevirtual 10331	com/android/server/am/ActivityManagerService:startHomeActivityLocked	(ILjava/lang/String;)Z
    //   720: pop
    //   721: invokestatic 2271	android/app/AppGlobals:getPackageManager	()Landroid/content/pm/IPackageManager;
    //   724: invokeinterface 12154 1 0
    //   729: ifeq +25 -> 754
    //   732: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   735: ldc_w 12156
    //   738: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   741: pop
    //   742: aload_0
    //   743: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   746: bipush 14
    //   748: invokevirtual 2599	com/android/server/am/ActivityManagerService$UiHandler:obtainMessage	(I)Landroid/os/Message;
    //   751: invokevirtual 2604	android/os/Message:sendToTarget	()V
    //   754: invokestatic 12159	android/os/Build:isBuildConsistent	()Z
    //   757: ifne +25 -> 782
    //   760: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   763: ldc_w 12161
    //   766: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   769: pop
    //   770: aload_0
    //   771: getfield 1821	com/android/server/am/ActivityManagerService:mUiHandler	Lcom/android/server/am/ActivityManagerService$UiHandler;
    //   774: bipush 15
    //   776: invokevirtual 2599	com/android/server/am/ActivityManagerService$UiHandler:obtainMessage	(I)Landroid/os/Message;
    //   779: invokevirtual 2604	android/os/Message:sendToTarget	()V
    //   782: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   785: lstore 4
    //   787: new 2070	android/content/Intent
    //   790: dup
    //   791: ldc_w 12163
    //   794: invokespecial 5548	android/content/Intent:<init>	(Ljava/lang/String;)V
    //   797: astore_1
    //   798: aload_1
    //   799: ldc_w 4602
    //   802: invokevirtual 2086	android/content/Intent:addFlags	(I)Landroid/content/Intent;
    //   805: pop
    //   806: aload_1
    //   807: ldc_w 4609
    //   810: iload_2
    //   811: invokevirtual 4607	android/content/Intent:putExtra	(Ljava/lang/String;I)Landroid/content/Intent;
    //   814: pop
    //   815: aload_0
    //   816: aconst_null
    //   817: aconst_null
    //   818: aload_1
    //   819: aconst_null
    //   820: aconst_null
    //   821: iconst_0
    //   822: aconst_null
    //   823: aconst_null
    //   824: aconst_null
    //   825: iconst_m1
    //   826: aconst_null
    //   827: iconst_0
    //   828: iconst_0
    //   829: getstatic 1232	com/android/server/am/ActivityManagerService:MY_PID	I
    //   832: sipush 1000
    //   835: iload_2
    //   836: invokevirtual 4613	com/android/server/am/ActivityManagerService:broadcastIntentLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIII)I
    //   839: pop
    //   840: new 2070	android/content/Intent
    //   843: dup
    //   844: ldc_w 12165
    //   847: invokespecial 5548	android/content/Intent:<init>	(Ljava/lang/String;)V
    //   850: astore_1
    //   851: aload_1
    //   852: ldc_w 3644
    //   855: invokevirtual 2086	android/content/Intent:addFlags	(I)Landroid/content/Intent;
    //   858: pop
    //   859: aload_1
    //   860: ldc_w 4609
    //   863: iload_2
    //   864: invokevirtual 4607	android/content/Intent:putExtra	(Ljava/lang/String;I)Landroid/content/Intent;
    //   867: pop
    //   868: new 45	com/android/server/am/ActivityManagerService$22
    //   871: dup
    //   872: aload_0
    //   873: invokespecial 12166	com/android/server/am/ActivityManagerService$22:<init>	(Lcom/android/server/am/ActivityManagerService;)V
    //   876: astore 6
    //   878: getstatic 1232	com/android/server/am/ActivityManagerService:MY_PID	I
    //   881: istore_3
    //   882: aload_0
    //   883: aconst_null
    //   884: aconst_null
    //   885: aload_1
    //   886: aconst_null
    //   887: aload 6
    //   889: iconst_0
    //   890: aconst_null
    //   891: aconst_null
    //   892: iconst_1
    //   893: anewarray 1205	java/lang/String
    //   896: dup
    //   897: iconst_0
    //   898: ldc_w 3075
    //   901: aastore
    //   902: iconst_m1
    //   903: aconst_null
    //   904: iconst_1
    //   905: iconst_0
    //   906: iload_3
    //   907: sipush 1000
    //   910: iconst_m1
    //   911: invokevirtual 4613	com/android/server/am/ActivityManagerService:broadcastIntentLocked	(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIII)I
    //   914: pop
    //   915: lload 4
    //   917: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   920: aload_0
    //   921: getfield 1988	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
    //   924: invokevirtual 3581	com/android/server/am/ActivityStackSupervisor:resumeFocusedStackTopActivityLocked	()Z
    //   927: pop
    //   928: aload_0
    //   929: getfield 1933	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
    //   932: iconst_m1
    //   933: iload_2
    //   934: invokevirtual 12169	com/android/server/am/UserController:sendUserSwitchBroadcastsLocked	(II)V
    //   937: aload_0
    //   938: monitorexit
    //   939: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   942: aload_0
    //   943: getfield 936	com/android/server/am/ActivityManagerService:mEmbryoManager	Lcom/android/server/am/IEmbryoManager;
    //   946: aload_0
    //   947: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   950: invokeinterface 12172 2 0
    //   955: return
    //   956: astore_1
    //   957: aload_0
    //   958: monitorexit
    //   959: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   962: aload_1
    //   963: athrow
    //   964: aload_0
    //   965: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   968: invokevirtual 2012	android/content/Context:getResources	()Landroid/content/res/Resources;
    //   971: ldc_w 12173
    //   974: invokevirtual 12177	android/content/res/Resources:getText	(I)Ljava/lang/CharSequence;
    //   977: astore 6
    //   979: goto -523 -> 456
    //   982: aload_0
    //   983: getfield 1775	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
    //   986: invokevirtual 2012	android/content/Context:getResources	()Landroid/content/res/Resources;
    //   989: ldc_w 12178
    //   992: invokevirtual 12177	android/content/res/Resources:getText	(I)Ljava/lang/CharSequence;
    //   995: astore 6
    //   997: goto -541 -> 456
    //   1000: astore_1
    //   1001: aload_0
    //   1002: monitorexit
    //   1003: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1006: aload_1
    //   1007: athrow
    //   1008: astore_1
    //   1009: aload_0
    //   1010: monitorexit
    //   1011: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1014: aload_1
    //   1015: athrow
    //   1016: astore_1
    //   1017: aload_1
    //   1018: invokevirtual 5957	android/os/RemoteException:rethrowAsRuntimeException	()Ljava/lang/RuntimeException;
    //   1021: athrow
    //   1022: astore_1
    //   1023: aload_0
    //   1024: monitorexit
    //   1025: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   1028: aload_1
    //   1029: athrow
    //   1030: astore_1
    //   1031: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   1034: ldc_w 12180
    //   1037: aload_1
    //   1038: invokestatic 3020	android/util/Slog:wtf	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   1041: pop
    //   1042: lload 4
    //   1044: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1047: goto -127 -> 920
    //   1050: astore_1
    //   1051: lload 4
    //   1053: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   1056: aload_1
    //   1057: athrow
    //   1058: astore_1
    //   1059: goto -305 -> 754
    //   1062: astore_1
    //   1063: goto -817 -> 246
    //   1066: goto -927 -> 139
    //   1069: goto -922 -> 147
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	1072	0	this	ActivityManagerService
    //   0	1072	1	paramRunnable	Runnable
    //   88	846	2	i	int
    //   881	26	3	j	int
    //   785	267	4	l	long
    //   94	902	6	localObject1	Object
    //   76	502	7	localObject2	Object
    //   111	463	8	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   2	12	154	finally
    //   16	22	154	finally
    //   28	67	154	finally
    //   81	89	245	finally
    //   139	147	245	finally
    //   167	170	956	finally
    //   175	183	956	finally
    //   187	238	956	finally
    //   251	256	956	finally
    //   355	391	1000	finally
    //   399	456	1000	finally
    //   461	510	1000	finally
    //   964	979	1000	finally
    //   982	997	1000	finally
    //   594	609	1008	finally
    //   700	712	1016	android/os/RemoteException
    //   664	700	1022	finally
    //   700	712	1022	finally
    //   712	721	1022	finally
    //   721	754	1022	finally
    //   754	782	1022	finally
    //   782	787	1022	finally
    //   915	920	1022	finally
    //   920	937	1022	finally
    //   1017	1022	1022	finally
    //   1042	1047	1022	finally
    //   1051	1058	1022	finally
    //   787	915	1030	java/lang/Throwable
    //   787	915	1050	finally
    //   1031	1042	1050	finally
    //   721	754	1058	android/os/RemoteException
    //   100	125	1062	finally
    //   130	139	1062	finally
  }
  
  public void takePersistableUriPermission(Uri paramUri, int paramInt1, int paramInt2)
  {
    int j = 1;
    enforceNotIsolatedCaller("takePersistableUriPermission");
    Preconditions.checkFlagsArgument(paramInt1, 3);
    for (;;)
    {
      int k;
      boolean bool1;
      UriPermission localUriPermission;
      int i;
      try
      {
        boostPriorityForLockedSection();
        k = Binder.getCallingUid();
        bool1 = false;
        localGrantUri = new GrantUri(paramInt2, paramUri, false);
        localUriPermission = findUriPermissionLocked(k, new GrantUri(paramInt2, paramUri, false));
        paramUri = findUriPermissionLocked(k, new GrantUri(paramInt2, paramUri, true));
        if (localUriPermission == null) {
          break label176;
        }
        if ((localUriPermission.persistableModeFlags & paramInt1) != paramInt1) {
          break label170;
        }
        i = 1;
        if (paramUri == null) {
          break label187;
        }
        if ((paramUri.persistableModeFlags & paramInt1) != paramInt1) {
          break label182;
        }
        paramInt2 = 1;
      }
      finally
      {
        GrantUri localGrantUri;
        resetPriorityAfterLockedSection();
      }
      if (j == 0)
      {
        throw new SecurityException("No persistable permission grants found for UID " + k + " and Uri " + localGrantUri.toSafeString());
        label170:
        i = 0;
        continue;
        label176:
        i = 0;
        continue;
        label182:
        paramInt2 = 0;
        break label245;
        label187:
        paramInt2 = 0;
      }
      else
      {
        if (i != 0) {
          bool1 = localUriPermission.takePersistableModes(paramInt1);
        }
        boolean bool2 = bool1;
        if (paramInt2 != 0) {
          bool2 = bool1 | paramUri.takePersistableModes(paramInt1);
        }
        if ((bool2 | maybePrunePersistedUriGrantsLocked(k))) {
          schedulePersistUriGrants();
        }
        resetPriorityAfterLockedSection();
        return;
      }
      label245:
      if (i == 0) {
        j = paramInt2;
      }
    }
  }
  
  void tempWhitelistAppForPowerSave(int paramInt1, int paramInt2, int paramInt3, long paramLong)
  {
    if (ActivityManagerDebugConfig.DEBUG_WHITELISTS) {
      Slog.d(TAG, "tempWhitelistAppForPowerSave(" + paramInt1 + ", " + paramInt2 + ", " + paramInt3 + ", " + paramLong + ")");
    }
    synchronized (this.mPidsSelfLocked)
    {
      ProcessRecord localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(paramInt1);
      if (localProcessRecord == null)
      {
        Slog.w(TAG, "tempWhitelistAppForPowerSave() no ProcessRecord for pid " + paramInt1);
        return;
      }
      if (!localProcessRecord.whitelistManager)
      {
        if (ActivityManagerDebugConfig.DEBUG_WHITELISTS) {
          Slog.d(TAG, "tempWhitelistAppForPowerSave() for target " + paramInt3 + ": pid " + paramInt1 + " is not allowed");
        }
        return;
      }
      l = Binder.clearCallingIdentity();
    }
  }
  
  public boolean testIsSystemReady()
  {
    return this.mSystemReady;
  }
  
  final void trimApplications()
  {
    try
    {
      boostPriorityForLockedSection();
      int i = this.mRemovedProcesses.size() - 1;
      if (i >= 0)
      {
        ProcessRecord localProcessRecord = (ProcessRecord)this.mRemovedProcesses.get(i);
        IBinder localIBinder;
        if ((localProcessRecord.activities.size() == 0) && (localProcessRecord.curReceiver == null) && (localProcessRecord.services.size() == 0))
        {
          String str = TAG;
          StringBuilder localStringBuilder = new StringBuilder().append("Exiting empty application process ").append(localProcessRecord.toShortString()).append(" (");
          if (localProcessRecord.thread == null) {
            break label198;
          }
          localIBinder = localProcessRecord.thread.asBinder();
          label108:
          Slog.i(str, localIBinder + ")\n");
          if ((localProcessRecord.pid <= 0) || (localProcessRecord.pid == MY_PID)) {
            break label203;
          }
          localProcessRecord.kill("empty", false);
        }
        for (;;)
        {
          cleanUpApplicationRecordLocked(localProcessRecord, false, true, -1, false);
          this.mRemovedProcesses.remove(i);
          if (localProcessRecord.persistent) {
            addAppLocked(localProcessRecord.info, false, null);
          }
          i -= 1;
          break;
          label198:
          localIBinder = null;
          break label108;
          try
          {
            label203:
            localProcessRecord.thread.scheduleExit();
          }
          catch (Exception localException) {}
        }
      }
      updateOomAdjLocked();
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  /* Error */
  public void unbindBackupAgent(ApplicationInfo paramApplicationInfo)
  {
    // Byte code:
    //   0: getstatic 2990	com/android/server/am/ActivityManagerDebugConfig:DEBUG_BACKUP	Z
    //   3: ifeq +30 -> 33
    //   6: getstatic 1083	com/android/server/am/ActivityManagerService:TAG_BACKUP	Ljava/lang/String;
    //   9: new 1066	java/lang/StringBuilder
    //   12: dup
    //   13: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   16: ldc_w 12225
    //   19: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   22: aload_1
    //   23: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   26: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   29: invokestatic 2494	android/util/Slog:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   32: pop
    //   33: aload_1
    //   34: ifnonnull +14 -> 48
    //   37: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   40: ldc_w 12227
    //   43: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   46: pop
    //   47: return
    //   48: aload_0
    //   49: monitorenter
    //   50: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   53: aload_0
    //   54: getfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   57: ifnonnull +29 -> 86
    //   60: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   63: ldc_w 12229
    //   66: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   69: pop
    //   70: aload_0
    //   71: aconst_null
    //   72: putfield 1540	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
    //   75: aload_0
    //   76: aconst_null
    //   77: putfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   80: aload_0
    //   81: monitorexit
    //   82: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   85: return
    //   86: aload_0
    //   87: getfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   90: aload_1
    //   91: getfield 2995	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   94: invokevirtual 1209	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   97: ifne +52 -> 149
    //   100: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   103: new 1066	java/lang/StringBuilder
    //   106: dup
    //   107: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   110: ldc_w 12231
    //   113: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   116: aload_1
    //   117: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   120: ldc_w 12233
    //   123: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   126: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   129: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   132: pop
    //   133: aload_0
    //   134: aconst_null
    //   135: putfield 1540	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
    //   138: aload_0
    //   139: aconst_null
    //   140: putfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   143: aload_0
    //   144: monitorexit
    //   145: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   148: return
    //   149: aload_0
    //   150: getfield 1540	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
    //   153: getfield 3456	com/android/server/am/BackupRecord:app	Lcom/android/server/am/ProcessRecord;
    //   156: astore_2
    //   157: aload_0
    //   158: aload_2
    //   159: invokevirtual 4764	com/android/server/am/ActivityManagerService:updateOomAdjLocked	(Lcom/android/server/am/ProcessRecord;)Z
    //   162: pop
    //   163: aload_2
    //   164: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   167: astore_3
    //   168: aload_3
    //   169: ifnull +18 -> 187
    //   172: aload_2
    //   173: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   176: aload_1
    //   177: aload_0
    //   178: aload_1
    //   179: invokevirtual 2911	com/android/server/am/ActivityManagerService:compatibilityInfoForPackageLocked	(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
    //   182: invokeinterface 12237 3 0
    //   187: aload_0
    //   188: aconst_null
    //   189: putfield 1540	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
    //   192: aload_0
    //   193: aconst_null
    //   194: putfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   197: aload_0
    //   198: monitorexit
    //   199: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   202: return
    //   203: astore_1
    //   204: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   207: ldc_w 12239
    //   210: invokestatic 4899	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   213: pop
    //   214: aload_1
    //   215: invokevirtual 2680	java/lang/Exception:printStackTrace	()V
    //   218: goto -31 -> 187
    //   221: astore_1
    //   222: aload_0
    //   223: aconst_null
    //   224: putfield 1540	com/android/server/am/ActivityManagerService:mBackupTarget	Lcom/android/server/am/BackupRecord;
    //   227: aload_0
    //   228: aconst_null
    //   229: putfield 1538	com/android/server/am/ActivityManagerService:mBackupAppName	Ljava/lang/String;
    //   232: aload_1
    //   233: athrow
    //   234: astore_1
    //   235: aload_0
    //   236: monitorexit
    //   237: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   240: aload_1
    //   241: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	242	0	this	ActivityManagerService
    //   0	242	1	paramApplicationInfo	ApplicationInfo
    //   156	17	2	localProcessRecord	ProcessRecord
    //   167	2	3	localIApplicationThread	IApplicationThread
    // Exception table:
    //   from	to	target	type
    //   172	187	203	java/lang/Exception
    //   53	70	221	finally
    //   86	133	221	finally
    //   149	168	221	finally
    //   172	187	221	finally
    //   204	218	221	finally
    //   50	53	234	finally
    //   70	80	234	finally
    //   133	143	234	finally
    //   187	197	234	finally
    //   222	234	234	finally
  }
  
  public void unbindFinished(IBinder paramIBinder, Intent paramIntent, boolean paramBoolean)
  {
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    try
    {
      boostPriorityForLockedSection();
      this.mServices.unbindFinishedLocked((ServiceRecord)paramIBinder, paramIntent, paramBoolean);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public boolean unbindService(IServiceConnection paramIServiceConnection)
  {
    try
    {
      boostPriorityForLockedSection();
      boolean bool = this.mServices.unbindServiceLocked(paramIServiceConnection);
      return bool;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public final void unbroadcastIntent(IApplicationThread paramIApplicationThread, Intent paramIntent, int paramInt)
  {
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    int i = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), paramInt, true, 0, "removeStickyBroadcast", null);
    try
    {
      boostPriorityForLockedSection();
      if (checkCallingPermission("android.permission.BROADCAST_STICKY") != 0)
      {
        paramIApplicationThread = "Permission Denial: unbroadcastIntent() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.BROADCAST_STICKY";
        Slog.w(TAG, paramIApplicationThread);
        throw new SecurityException(paramIApplicationThread);
      }
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
    paramIApplicationThread = (ArrayMap)this.mStickyBroadcasts.get(i);
    ArrayList localArrayList;
    int j;
    if (paramIApplicationThread != null)
    {
      localArrayList = (ArrayList)paramIApplicationThread.get(paramIntent.getAction());
      if (localArrayList != null)
      {
        j = localArrayList.size();
        paramInt = 0;
      }
    }
    for (;;)
    {
      if (paramInt < j)
      {
        if (paramIntent.filterEquals((Intent)localArrayList.get(paramInt))) {
          localArrayList.remove(paramInt);
        }
      }
      else
      {
        if (localArrayList.size() <= 0) {
          paramIApplicationThread.remove(paramIntent.getAction());
        }
        if (paramIApplicationThread.size() <= 0) {
          this.mStickyBroadcasts.remove(i);
        }
        resetPriorityAfterLockedSection();
        return;
      }
      paramInt += 1;
    }
  }
  
  /* Error */
  public void unhandledBack()
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w 12259
    //   4: ldc_w 12261
    //   7: invokevirtual 4449	com/android/server/am/ActivityManagerService:enforceCallingPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   10: aload_0
    //   11: monitorenter
    //   12: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   15: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   18: lstore_1
    //   19: aload_0
    //   20: invokevirtual 4453	com/android/server/am/ActivityManagerService:getFocusedStack	()Lcom/android/server/am/ActivityStack;
    //   23: invokevirtual 12264	com/android/server/am/ActivityStack:unhandledBackLocked	()V
    //   26: lload_1
    //   27: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   30: aload_0
    //   31: monitorexit
    //   32: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   35: return
    //   36: astore_3
    //   37: lload_1
    //   38: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   41: aload_3
    //   42: athrow
    //   43: astore_3
    //   44: aload_0
    //   45: monitorexit
    //   46: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   49: aload_3
    //   50: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	51	0	this	ActivityManagerService
    //   18	20	1	l	long
    //   36	6	3	localObject1	Object
    //   43	7	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   19	26	36	finally
    //   12	19	43	finally
    //   26	30	43	finally
    //   37	43	43	finally
  }
  
  public boolean unlockUser(int paramInt, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, IProgressListener paramIProgressListener)
  {
    return this.mUserController.unlockUser(paramInt, paramArrayOfByte1, paramArrayOfByte2, paramIProgressListener);
  }
  
  public void unregisterProcessObserver(IProcessObserver paramIProcessObserver)
  {
    try
    {
      boostPriorityForLockedSection();
      this.mProcessObservers.unregister(paramIProcessObserver);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void unregisterReceiver(IIntentReceiver paramIIntentReceiver)
  {
    if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
      Slog.v(TAG_BROADCAST, "Unregister receiver: " + paramIIntentReceiver);
    }
    long l = Binder.clearCallingIdentity();
    int j = 0;
    int k = 0;
    try
    {
      try
      {
        boostPriorityForLockedSection();
        paramIIntentReceiver = (ReceiverList)this.mRegisteredReceivers.get(paramIIntentReceiver.asBinder());
        if (paramIIntentReceiver != null)
        {
          BroadcastRecord localBroadcastRecord = paramIIntentReceiver.curBroadcast;
          int i = k;
          if (localBroadcastRecord != null)
          {
            i = k;
            if (localBroadcastRecord == localBroadcastRecord.queue.getMatchingOrderedReceiver(localBroadcastRecord))
            {
              i = k;
              if (localBroadcastRecord.queue.finishReceiverLocked(localBroadcastRecord, localBroadcastRecord.resultCode, localBroadcastRecord.resultData, localBroadcastRecord.resultExtras, localBroadcastRecord.resultAbort, false))
              {
                i = 1;
                localBroadcastRecord.queue.processNextBroadcast(false);
              }
            }
          }
          if (paramIIntentReceiver.app != null) {
            paramIIntentReceiver.app.receivers.remove(paramIIntentReceiver);
          }
          removeReceiverLocked(paramIIntentReceiver);
          j = i;
          if (paramIIntentReceiver.linkedToDeath)
          {
            paramIIntentReceiver.linkedToDeath = false;
            paramIIntentReceiver.receiver.asBinder().unlinkToDeath(paramIIntentReceiver, 0);
            j = i;
          }
        }
        resetPriorityAfterLockedSection();
        if (j != 0)
        {
          trimApplications();
          return;
        }
      }
      finally
      {
        resetPriorityAfterLockedSection();
      }
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  public void unregisterUidObserver(IUidObserver paramIUidObserver)
  {
    try
    {
      boostPriorityForLockedSection();
      this.mUidObservers.unregister(paramIUidObserver);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void unregisterUserSwitchObserver(IUserSwitchObserver paramIUserSwitchObserver)
  {
    this.mUserController.unregisterUserSwitchObserver(paramIUserSwitchObserver);
  }
  
  /* Error */
  public void unstableProviderDied(IBinder paramIBinder)
  {
    // Byte code:
    //   0: aload_1
    //   1: checkcast 3392	com/android/server/am/ContentProviderConnection
    //   4: astore 4
    //   6: aload 4
    //   8: ifnonnull +60 -> 68
    //   11: new 7199	java/lang/NullPointerException
    //   14: dup
    //   15: ldc_w 10575
    //   18: invokespecial 7200	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   21: athrow
    //   22: astore 4
    //   24: new 1066	java/lang/StringBuilder
    //   27: dup
    //   28: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   31: ldc_w 10577
    //   34: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   37: aload_1
    //   38: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   41: ldc_w 10579
    //   44: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   47: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   50: astore_1
    //   51: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   54: aload_1
    //   55: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   58: pop
    //   59: new 2386	java/lang/IllegalArgumentException
    //   62: dup
    //   63: aload_1
    //   64: invokespecial 4505	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   67: athrow
    //   68: aload_0
    //   69: monitorenter
    //   70: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   73: aload 4
    //   75: getfield 3396	com/android/server/am/ContentProviderConnection:provider	Lcom/android/server/am/ContentProviderRecord;
    //   78: getfield 3424	com/android/server/am/ContentProviderRecord:provider	Landroid/content/IContentProvider;
    //   81: astore_1
    //   82: aload_0
    //   83: monitorexit
    //   84: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   87: aload_1
    //   88: ifnonnull +12 -> 100
    //   91: return
    //   92: astore_1
    //   93: aload_0
    //   94: monitorexit
    //   95: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   98: aload_1
    //   99: athrow
    //   100: aload_1
    //   101: invokeinterface 10713 1 0
    //   106: invokeinterface 12300 1 0
    //   111: ifeq +68 -> 179
    //   114: aload_0
    //   115: monitorenter
    //   116: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   119: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   122: new 1066	java/lang/StringBuilder
    //   125: dup
    //   126: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   129: ldc_w 12302
    //   132: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   135: invokestatic 3176	android/os/Binder:getCallingUid	()I
    //   138: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   141: ldc_w 12304
    //   144: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   147: aload 4
    //   149: invokevirtual 2159	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   152: ldc_w 12306
    //   155: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   158: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   161: invokestatic 2162	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   164: pop
    //   165: aload_0
    //   166: monitorexit
    //   167: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   170: return
    //   171: astore_1
    //   172: aload_0
    //   173: monitorexit
    //   174: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   177: aload_1
    //   178: athrow
    //   179: aload_0
    //   180: monitorenter
    //   181: invokestatic 2256	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
    //   184: aload 4
    //   186: getfield 3396	com/android/server/am/ContentProviderConnection:provider	Lcom/android/server/am/ContentProviderRecord;
    //   189: getfield 3424	com/android/server/am/ContentProviderRecord:provider	Landroid/content/IContentProvider;
    //   192: astore 5
    //   194: aload 5
    //   196: aload_1
    //   197: if_acmpeq +9 -> 206
    //   200: aload_0
    //   201: monitorexit
    //   202: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   205: return
    //   206: aload 4
    //   208: getfield 3396	com/android/server/am/ContentProviderConnection:provider	Lcom/android/server/am/ContentProviderRecord;
    //   211: getfield 3427	com/android/server/am/ContentProviderRecord:proc	Lcom/android/server/am/ProcessRecord;
    //   214: astore_1
    //   215: aload_1
    //   216: ifnull +14 -> 230
    //   219: aload_1
    //   220: getfield 2525	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
    //   223: astore 4
    //   225: aload 4
    //   227: ifnonnull +9 -> 236
    //   230: aload_0
    //   231: monitorexit
    //   232: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   235: return
    //   236: getstatic 885	com/android/server/am/ActivityManagerService:TAG	Ljava/lang/String;
    //   239: new 1066	java/lang/StringBuilder
    //   242: dup
    //   243: invokespecial 1069	java/lang/StringBuilder:<init>	()V
    //   246: ldc_w 5338
    //   249: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   252: aload_1
    //   253: getfield 2144	com/android/server/am/ProcessRecord:processName	Ljava/lang/String;
    //   256: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   259: ldc_w 2367
    //   262: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   265: aload_1
    //   266: getfield 2397	com/android/server/am/ProcessRecord:pid	I
    //   269: invokevirtual 1800	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   272: ldc_w 12308
    //   275: invokevirtual 1073	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   278: invokevirtual 1081	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   281: invokestatic 1806	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   284: pop
    //   285: invokestatic 2648	android/os/Binder:clearCallingIdentity	()J
    //   288: lstore_2
    //   289: aload_0
    //   290: aload_1
    //   291: invokevirtual 4790	com/android/server/am/ActivityManagerService:appDiedLocked	(Lcom/android/server/am/ProcessRecord;)V
    //   294: lload_2
    //   295: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   298: aload_0
    //   299: monitorexit
    //   300: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   303: return
    //   304: astore_1
    //   305: lload_2
    //   306: invokestatic 2673	android/os/Binder:restoreCallingIdentity	(J)V
    //   309: aload_1
    //   310: athrow
    //   311: astore_1
    //   312: aload_0
    //   313: monitorexit
    //   314: invokestatic 2324	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
    //   317: aload_1
    //   318: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	319	0	this	ActivityManagerService
    //   0	319	1	paramIBinder	IBinder
    //   288	18	2	l	long
    //   4	3	4	localContentProviderConnection	ContentProviderConnection
    //   22	185	4	localClassCastException	ClassCastException
    //   223	3	4	localIApplicationThread	IApplicationThread
    //   192	3	5	localIContentProvider	IContentProvider
    // Exception table:
    //   from	to	target	type
    //   0	6	22	java/lang/ClassCastException
    //   70	82	92	finally
    //   116	165	171	finally
    //   289	294	304	finally
    //   181	194	311	finally
    //   206	215	311	finally
    //   219	225	311	finally
    //   236	289	311	finally
    //   294	298	311	finally
    //   305	311	311	finally
  }
  
  public void updateAccesibilityServiceFlag(String paramString, int paramInt)
  {
    try
    {
      boostPriorityForLockedSection();
      OnePlusAppBootManager.getInstance(null).updateAccesibilityServiceFlag(paramString, paramInt);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void updateConfiguration(Configuration paramConfiguration)
  {
    enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateConfiguration()");
    try
    {
      boostPriorityForLockedSection();
      Configuration localConfiguration = paramConfiguration;
      if (paramConfiguration == null)
      {
        localConfiguration = paramConfiguration;
        if (this.mWindowManager != null) {
          localConfiguration = this.mWindowManager.computeNewConfiguration();
        }
      }
      if (this.mWindowManager != null) {
        this.mProcessList.applyDisplaySize(this.mWindowManager);
      }
      long l = Binder.clearCallingIdentity();
      if (localConfiguration != null) {
        Settings.System.clearConfiguration(localConfiguration);
      }
      updateConfigurationLocked(localConfiguration, null, false);
      Binder.restoreCallingIdentity(l);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  boolean updateConfigurationLocked(Configuration paramConfiguration, ActivityRecord paramActivityRecord, boolean paramBoolean)
  {
    return updateConfigurationLocked(paramConfiguration, paramActivityRecord, paramBoolean, false);
  }
  
  boolean updateConfigurationLocked(Configuration paramConfiguration, ActivityRecord paramActivityRecord, boolean paramBoolean1, boolean paramBoolean2)
  {
    return updateConfigurationLocked(paramConfiguration, paramActivityRecord, paramBoolean1, false, 55536, paramBoolean2);
  }
  
  void updateCpuStats()
  {
    long l = SystemClock.uptimeMillis();
    if (this.mLastCpuTime.get() >= l - 5000L) {
      return;
    }
    if (this.mProcessCpuMutexFree.compareAndSet(true, false)) {}
    synchronized (this.mProcessCpuThread)
    {
      this.mProcessCpuThread.notify();
      return;
    }
  }
  
  void updateCpuStatsNow()
  {
    long l3;
    int j;
    int i;
    int m;
    int k;
    SparseArray localSparseArray;
    label358:
    Object localObject5;
    for (;;)
    {
      ProcessRecord localProcessRecord;
      synchronized (this.mProcessCpuTracker)
      {
        this.mProcessCpuMutexFree.set(false);
        l3 = SystemClock.uptimeMillis();
        j = 0;
        i = j;
        int n;
        if (this.mLastCpuTime.get() < l3 - 5000L)
        {
          this.mLastCpuTime.set(l3);
          this.mProcessCpuTracker.update();
          if (this.mProcessCpuTracker.collectAnbormalStats()) {
            this.mBgHandler.sendEmptyMessage(3);
          }
          i = j;
          if (this.mProcessCpuTracker.hasGoodLastStats())
          {
            j = 1;
            i = j;
            if ("true".equals(SystemProperties.get("events.cpu")))
            {
              m = this.mProcessCpuTracker.getLastUserTime();
              n = this.mProcessCpuTracker.getLastSystemTime();
              int i1 = this.mProcessCpuTracker.getLastIoWaitTime();
              int i2 = this.mProcessCpuTracker.getLastIrqTime();
              int i3 = this.mProcessCpuTracker.getLastSoftIrqTime();
              k = m + n + i1 + i2 + i3 + this.mProcessCpuTracker.getLastIdleTime();
              i = k;
              if (k == 0) {
                i = 1;
              }
              EventLog.writeEvent(2721, new Object[] { Integer.valueOf((m + n + i1 + i2 + i3) * 100 / i), Integer.valueOf(m * 100 / i), Integer.valueOf(n * 100 / i), Integer.valueOf(i1 * 100 / i), Integer.valueOf(i2 * 100 / i), Integer.valueOf(i3 * 100 / i) });
              i = j;
            }
          }
        }
        synchronized (this.mBatteryStatsService.getActiveStatistics())
        {
          localSparseArray = this.mPidsSelfLocked;
          if (i == 0) {
            break label874;
          }
          try
          {
            if (this.mOHPD == null) {
              break label1018;
            }
            i = 1;
            if (i != 0) {
              this.mOHPD.beginCpuStatistics();
            }
            if (!???.startAddingCpuLocked()) {
              break label911;
            }
            m = 0;
            k = 0;
            n = this.mProcessCpuTracker.countStats();
            j = 0;
            if (j >= n) {
              break label813;
            }
            localObject5 = this.mProcessCpuTracker.getStats(j);
            if (!((ProcessCpuTracker.Stats)localObject5).working) {
              break label1011;
            }
            long l2 = 0L;
            long l1 = l2;
            if (localObject5 != null)
            {
              l1 = l2;
              if (((ProcessCpuTracker.Stats)localObject5).rel_uptime > 0L) {
                l1 = (((ProcessCpuTracker.Stats)localObject5).rel_utime + ((ProcessCpuTracker.Stats)localObject5).rel_stime) * 100 / ((ProcessCpuTracker.Stats)localObject5).rel_uptime;
              }
            }
            if (l1 >= 10L) {
              Slog.i(TAG, "pid= " + ((ProcessCpuTracker.Stats)localObject5).pid + " st.name = " + ((ProcessCpuTracker.Stats)localObject5).baseName + " cpuPercent = " + l1 + " st.rel_utime =" + ((ProcessCpuTracker.Stats)localObject5).rel_utime + " st.rel_stime =" + ((ProcessCpuTracker.Stats)localObject5).rel_stime);
            }
            if (l1 >= 85L)
            {
              this.mHighConsumptionTime = SystemClock.uptimeMillis();
              this.mHighConsumptionAppPid = ((ProcessCpuTracker.Stats)localObject5).pid;
            }
            localProcessRecord = (ProcessRecord)this.mPidsSelfLocked.get(((ProcessCpuTracker.Stats)localObject5).pid);
            m += ((ProcessCpuTracker.Stats)localObject5).rel_utime;
            k += ((ProcessCpuTracker.Stats)localObject5).rel_stime;
            if (localProcessRecord == null) {
              break;
            }
            BatteryStatsImpl.Uid.Proc localProc = localProcessRecord.curProcBatteryStats;
            if ((localProc != null) && (localProc.isActive()))
            {
              localProc.addCpuTimeLocked(((ProcessCpuTracker.Stats)localObject5).rel_utime, ((ProcessCpuTracker.Stats)localObject5).rel_stime);
              localProcessRecord.curCpuTime += ((ProcessCpuTracker.Stats)localObject5).rel_utime + ((ProcessCpuTracker.Stats)localObject5).rel_stime;
              localProcessRecord.curCpuTimeBgMonitor += ((ProcessCpuTracker.Stats)localObject5).rel_utime + ((ProcessCpuTracker.Stats)localObject5).rel_stime;
            }
          }
          finally {}
        }
      }
      localObject4 = ???.getProcessStatsLocked(localProcessRecord.info.uid, localProcessRecord.processName);
      localProcessRecord.curProcBatteryStats = ((BatteryStatsImpl.Uid.Proc)localObject4);
    }
    Object localObject4 = ((ProcessCpuTracker.Stats)localObject5).batteryStats;
    if ((localObject4 != null) && (((BatteryStatsImpl.Uid.Proc)localObject4).isActive())) {}
    for (;;)
    {
      if (i != 0) {
        this.mOHPD.doCpuStatistics((ProcessCpuTracker.Stats)localObject5);
      }
      ((BatteryStatsImpl.Uid.Proc)localObject4).addCpuTimeLocked(((ProcessCpuTracker.Stats)localObject5).rel_utime, ((ProcessCpuTracker.Stats)localObject5).rel_stime);
      break;
      localObject4 = ???.getProcessStatsLocked(???.mapUid(((ProcessCpuTracker.Stats)localObject5).uid), ((ProcessCpuTracker.Stats)localObject5).name);
      ((ProcessCpuTracker.Stats)localObject5).batteryStats = ((BatteryStatsImpl.Uid.Proc)localObject4);
    }
    label813:
    ???.finishAddingCpuLocked(m, k, this.mProcessCpuTracker.getLastUserTime(), this.mProcessCpuTracker.getLastSystemTime(), this.mProcessCpuTracker.getLastIoWaitTime(), this.mProcessCpuTracker.getLastIrqTime(), this.mProcessCpuTracker.getLastSoftIrqTime(), this.mProcessCpuTracker.getLastIdleTime());
    label874:
    label911:
    label1011:
    label1018:
    label1023:
    label1028:
    for (;;)
    {
      if (i != 0) {
        this.mOHPD.finishCpuStatistics();
      }
      if (this.mLastWriteTime < l3 - 1800000L)
      {
        this.mLastWriteTime = l3;
        this.mBatteryStatsService.scheduleWriteToDisk();
      }
      return;
      k = this.mProcessCpuTracker.countStats();
      j = 0;
      for (;;)
      {
        if (j >= k) {
          break label1028;
        }
        localObject4 = this.mProcessCpuTracker.getStats(j);
        if (((ProcessCpuTracker.Stats)localObject4).working)
        {
          localObject5 = (ProcessRecord)this.mPidsSelfLocked.get(((ProcessCpuTracker.Stats)localObject4).pid);
          if (localObject5 != null)
          {
            ((ProcessRecord)localObject5).curCpuTimeBgMonitor += ((ProcessCpuTracker.Stats)localObject4).rel_utime + ((ProcessCpuTracker.Stats)localObject4).rel_stime;
          }
          else if (i != 0)
          {
            this.mOHPD.doCpuStatistics((ProcessCpuTracker.Stats)localObject4);
            break label1023;
            j += 1;
            break label358;
            i = 0;
            break;
          }
        }
        j += 1;
      }
    }
  }
  
  public void updateDeviceOwner(String paramString)
  {
    int i = Binder.getCallingUid();
    if ((i != 0) && (i != 1000)) {
      throw new SecurityException("updateDeviceOwner called from non-system process");
    }
    try
    {
      boostPriorityForLockedSection();
      this.mDeviceOwnerName = paramString;
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  public void updateLockTaskPackages(int paramInt, String[] paramArrayOfString)
  {
    int i = Binder.getCallingUid();
    if ((i != 0) && (i != 1000)) {
      enforceCallingPermission("android.permission.UPDATE_LOCK_TASK_PACKAGES", "updateLockTaskPackages()");
    }
    try
    {
      boostPriorityForLockedSection();
      if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
        Slog.w(TAG_LOCKTASK, "Whitelisting " + paramInt + ":" + Arrays.toString(paramArrayOfString));
      }
      this.mLockTaskPackages.put(paramInt, paramArrayOfString);
      this.mStackSupervisor.onLockTaskPackagesUpdatedLocked();
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  final void updateLruProcessLocked(ProcessRecord paramProcessRecord1, boolean paramBoolean, ProcessRecord paramProcessRecord2)
  {
    if ((paramProcessRecord1.activities.size() <= 0) && (!paramProcessRecord1.hasClientActivities)) {}
    for (boolean bool = paramProcessRecord1.treatLikeActivity; (!paramBoolean) && (bool); bool = true) {
      return;
    }
    this.mLruSeq += 1;
    long l = SystemClock.uptimeMillis();
    paramProcessRecord1.lastActivityTime = l;
    int i;
    if (bool)
    {
      i = this.mLruProcesses.size();
      if ((i > 0) && (this.mLruProcesses.get(i - 1) == paramProcessRecord1)) {
        if (ActivityManagerDebugConfig.DEBUG_LRU) {
          Slog.d(TAG_LRU, "Not moving, already top activity: " + paramProcessRecord1);
        }
      }
    }
    else if ((this.mLruProcessServiceStart > 0) && (this.mLruProcesses.get(this.mLruProcessServiceStart - 1) == paramProcessRecord1))
    {
      if (ActivityManagerDebugConfig.DEBUG_LRU) {
        Slog.d(TAG_LRU, "Not moving, already top other: " + paramProcessRecord1);
      }
      return;
    }
    int m = this.mLruProcesses.lastIndexOf(paramProcessRecord1);
    if ((paramProcessRecord1.persistent) && (m >= 0))
    {
      if (ActivityManagerDebugConfig.DEBUG_LRU) {
        Slog.d(TAG_LRU, "Not moving, persistent: " + paramProcessRecord1);
      }
      return;
    }
    if (m >= 0)
    {
      if (m < this.mLruProcessActivityStart) {
        this.mLruProcessActivityStart -= 1;
      }
      if (m < this.mLruProcessServiceStart) {
        this.mLruProcessServiceStart -= 1;
      }
      this.mLruProcesses.remove(m);
    }
    int k;
    if (bool)
    {
      i = this.mLruProcesses.size();
      if ((paramProcessRecord1.activities.size() == 0) && (this.mLruProcessActivityStart < i - 1))
      {
        if (ActivityManagerDebugConfig.DEBUG_LRU) {
          Slog.d(TAG_LRU, "Adding to second-top of LRU activity list: " + paramProcessRecord1);
        }
        this.mLruProcesses.add(i - 1, paramProcessRecord1);
        k = paramProcessRecord1.info.uid;
        i -= 2;
      }
      while ((i > this.mLruProcessActivityStart) && (((ProcessRecord)this.mLruProcesses.get(i)).info.uid == k))
      {
        j = i;
        if (((ProcessRecord)this.mLruProcesses.get(i - 1)).info.uid != k)
        {
          if (ActivityManagerDebugConfig.DEBUG_LRU) {
            Slog.d(TAG_LRU, "Pushing uid " + k + " swapping at " + i + ": " + this.mLruProcesses.get(i) + " : " + this.mLruProcesses.get(i - 1));
          }
          paramProcessRecord2 = (ProcessRecord)this.mLruProcesses.get(i);
          this.mLruProcesses.set(i, (ProcessRecord)this.mLruProcesses.get(i - 1));
          this.mLruProcesses.set(i - 1, paramProcessRecord2);
          j = i - 1;
        }
        i = j - 1;
        continue;
        if (ActivityManagerDebugConfig.DEBUG_LRU) {
          Slog.d(TAG_LRU, "Adding to top of LRU activity list: " + paramProcessRecord1);
        }
        this.mLruProcesses.add(paramProcessRecord1);
      }
      i = this.mLruProcessServiceStart;
      j = paramProcessRecord1.connections.size() - 1;
      label658:
      if (j < 0) {
        break label1008;
      }
      paramProcessRecord2 = (ConnectionRecord)paramProcessRecord1.connections.valueAt(j);
      k = i;
      if (paramProcessRecord2.binding != null)
      {
        if (!paramProcessRecord2.serviceDead) {
          break label905;
        }
        k = i;
      }
    }
    for (;;)
    {
      j -= 1;
      i = k;
      break label658;
      k = this.mLruProcessServiceStart;
      j = k;
      if (paramProcessRecord2 != null)
      {
        j = this.mLruProcesses.lastIndexOf(paramProcessRecord2);
        if ((ActivityManagerDebugConfig.DEBUG_LRU) && (j < 0)) {
          Slog.d(TAG_LRU, "Unknown client " + paramProcessRecord2 + " when updating " + paramProcessRecord1);
        }
        i = j;
        if (j <= m) {
          i = m;
        }
        j = k;
        if (i >= 0)
        {
          j = k;
          if (k > i) {
            j = i;
          }
        }
      }
      if (ActivityManagerDebugConfig.DEBUG_LRU) {
        Slog.d(TAG_LRU, "Adding at " + j + " of LRU list: " + paramProcessRecord1);
      }
      this.mLruProcesses.add(j, paramProcessRecord1);
      i = j - 1;
      this.mLruProcessActivityStart += 1;
      this.mLruProcessServiceStart += 1;
      break;
      label905:
      k = i;
      if (paramProcessRecord2.binding.service != null)
      {
        k = i;
        if (paramProcessRecord2.binding.service.app != null)
        {
          k = i;
          if (paramProcessRecord2.binding.service.app.lruSeq != this.mLruSeq)
          {
            k = i;
            if (!paramProcessRecord2.binding.service.app.persistent) {
              k = updateLruProcessInternalLocked(paramProcessRecord2.binding.service.app, l, i, "service connection", paramProcessRecord2, paramProcessRecord1);
            }
          }
        }
      }
    }
    label1008:
    int j = paramProcessRecord1.conProviders.size() - 1;
    if (j >= 0)
    {
      paramProcessRecord2 = ((ContentProviderConnection)paramProcessRecord1.conProviders.get(j)).provider;
      k = i;
      if (paramProcessRecord2.proc != null)
      {
        k = i;
        if (paramProcessRecord2.proc.lruSeq != this.mLruSeq) {
          if (!paramProcessRecord2.proc.persistent) {
            break label1096;
          }
        }
      }
      label1096:
      for (k = i;; k = updateLruProcessInternalLocked(paramProcessRecord2.proc, l, i, "provider reference", paramProcessRecord2, paramProcessRecord1))
      {
        j -= 1;
        i = k;
        break;
      }
    }
  }
  
  final void updateOomAdjLocked()
  {
    Object localObject1 = resumedAppLocked();
    if (localObject1 != null) {}
    long l3;
    long l4;
    long l5;
    int i26;
    for (ProcessRecord localProcessRecord1 = ((ActivityRecord)localObject1).app;; localProcessRecord1 = null)
    {
      l3 = SystemClock.uptimeMillis();
      l4 = SystemClock.elapsedRealtime();
      l5 = l3 - 1800000L;
      i26 = this.mLruProcesses.size();
      i = this.mActiveUids.size() - 1;
      while (i >= 0)
      {
        ((UidRecord)this.mActiveUids.valueAt(i)).reset();
        i -= 1;
      }
    }
    this.mStackSupervisor.rankTaskLayersIfNeeded();
    this.mAdjSeq += 1;
    this.mNewNumServiceProcs = 0;
    this.mNewNumAServiceProcs = 0;
    this.mImportantUids.clear();
    int i3;
    int k;
    int i13;
    label181:
    int i14;
    int i7;
    int i6;
    int i5;
    int i4;
    int i12;
    int i11;
    int i10;
    long l1;
    int m;
    int i15;
    ProcessRecord localProcessRecord2;
    int i16;
    Object localObject2;
    long l2;
    int n;
    label353:
    ServiceRecord localServiceRecord;
    if (this.mProcessLimit <= 0)
    {
      i = 0;
      i3 = 0;
      k = i26 - this.mNumNonCachedProcs - this.mNumCachedHiddenProcs;
      j = k;
      if (k > i) {
        j = i;
      }
      j /= 3;
      i13 = j;
      if (j < 1) {
        i13 = 1;
      }
      if (this.mNumCachedHiddenProcs <= 0) {
        break label592;
      }
      j = this.mNumCachedHiddenProcs;
      j /= 3;
      i14 = j;
      if (j < 1) {
        i14 = 1;
      }
      i7 = 0;
      i6 = 0;
      i5 = 0;
      i4 = 0;
      i12 = 0;
      this.mNumNonCachedProcs = 0;
      this.mNumCachedHiddenProcs = 0;
      i11 = 900;
      k = 901;
      i10 = 900;
      j = 902;
      localObject1 = null;
      l1 = 0L;
      m = 0;
      i15 = i26 - 1;
      if (i15 < 0) {
        break label1774;
      }
      localProcessRecord2 = (ProcessRecord)this.mLruProcesses.get(i15);
      i16 = m;
      localObject2 = localObject1;
      l2 = l1;
      if (!this.mEnableBServicePropagation) {
        break label651;
      }
      i16 = m;
      localObject2 = localObject1;
      l2 = l1;
      if (!localProcessRecord2.serviceb) {
        break label651;
      }
      i16 = m;
      localObject2 = localObject1;
      l2 = l1;
      if (localProcessRecord2.curAdj != 800) {
        break label651;
      }
      n = m + 1;
      m = localProcessRecord2.services.size() - 1;
      i16 = n;
      localObject2 = localObject1;
      l2 = l1;
      if (m < 0) {
        break label651;
      }
      localServiceRecord = (ServiceRecord)localProcessRecord2.services.valueAt(m);
      if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
        Slog.d(TAG, "app.processName = " + localProcessRecord2.processName + " serviceb = " + localProcessRecord2.serviceb + " s = " + m + " sr.lastActivity = " + localServiceRecord.lastActivity + " packageName = " + localServiceRecord.packageName + " processName = " + localServiceRecord.processName);
      }
      if (SystemClock.uptimeMillis() - localServiceRecord.lastActivity >= this.mMinBServiceAgingTime) {
        break label597;
      }
      localObject2 = localObject1;
      l2 = l1;
      if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)
      {
        Slog.d(TAG, "Not aged enough!!!");
        l2 = l1;
        localObject2 = localObject1;
      }
    }
    for (;;)
    {
      m -= 1;
      localObject1 = localObject2;
      l1 = l2;
      break label353;
      if (this.mProcessLimit == 1)
      {
        i3 = 1;
        i = 0;
        break;
      }
      i3 = ProcessList.computeEmptyProcessLimit(this.mProcessLimit);
      i = this.mProcessLimit - i3;
      break;
      label592:
      j = 1;
      break label181;
      label597:
      if (l1 == 0L)
      {
        l2 = localServiceRecord.lastActivity;
        localObject2 = localProcessRecord2;
      }
      else
      {
        localObject2 = localObject1;
        l2 = l1;
        if (localServiceRecord.lastActivity < l1)
        {
          l2 = localServiceRecord.lastActivity;
          localObject2 = localProcessRecord2;
        }
      }
    }
    label651:
    if ((ActivityManagerDebugConfig.DEBUG_OOM_ADJ) && (localObject2 != null)) {
      Slog.d(TAG, "Identified app.processName = " + ((ProcessRecord)localObject2).processName + " app.pid = " + ((ProcessRecord)localObject2).pid);
    }
    int i19 = i11;
    int i20 = i10;
    int i21 = k;
    int i22 = j;
    int i17 = i5;
    int i18 = i4;
    int i23 = i12;
    int i24 = i7;
    int i25 = i6;
    int i8;
    int i9;
    int i1;
    int i2;
    label1023:
    boolean bool;
    if (!localProcessRecord2.killedByAm)
    {
      i19 = i11;
      i20 = i10;
      i21 = k;
      i22 = j;
      i17 = i5;
      i18 = i4;
      i23 = i12;
      i24 = i7;
      i25 = i6;
      if (localProcessRecord2.thread != null)
      {
        localProcessRecord2.procStateChanged = false;
        computeOomAdjLocked(localProcessRecord2, 1001, localProcessRecord1, true, l3);
        i8 = i11;
        i9 = i10;
        i1 = k;
        i2 = j;
        m = i7;
        n = i6;
        if (localProcessRecord2.curAdj >= 1001) {}
        switch (localProcessRecord2.curProcState)
        {
        default: 
          localProcessRecord2.curRawAdj = i10;
          localProcessRecord2.curAdj = localProcessRecord2.modifyRawOomAdj(i10);
          if (ActivityManagerDebugConfig.DEBUG_LRU) {}
          i8 = i11;
          i9 = i10;
          i1 = k;
          i2 = j;
          m = i7;
          n = i6;
          if (i10 != j)
          {
            i6 += 1;
            i8 = i11;
            i9 = i10;
            i1 = k;
            i2 = j;
            m = i7;
            n = i6;
            if (i6 >= i13)
            {
              i10 = 0;
              i6 = j;
              j += 2;
              i8 = i11;
              i9 = i6;
              i1 = k;
              i2 = j;
              m = i7;
              n = i10;
              if (j > 906)
              {
                i2 = 906;
                n = i10;
                m = i7;
                i1 = k;
                i9 = i6;
                i8 = i11;
              }
            }
          }
          applyOomAdjLocked(localProcessRecord2, true, l3, l4);
          bool = this.mStackSupervisor.mLaunchingActivity.isHeld();
          switch (localProcessRecord2.curProcState)
          {
          default: 
            this.mNumNonCachedProcs += 1;
            k = i4;
            j = i5;
            label1096:
            if ((localProcessRecord2.isolated) && (localProcessRecord2.services.size() <= 0))
            {
              if (!bool) {
                localProcessRecord2.kill("isolated not needed", true);
              }
              label1129:
              i19 = i8;
              i20 = i9;
              i21 = i1;
              i22 = i2;
              i17 = j;
              i18 = k;
              i23 = i12;
              i24 = m;
              i25 = n;
              if (localProcessRecord2.curProcState >= 12)
              {
                if (!localProcessRecord2.killedByAm) {
                  break label1735;
                }
                i25 = n;
                i24 = m;
                i23 = i12;
                i18 = k;
                i17 = j;
                i22 = i2;
                i21 = i1;
                i20 = i9;
                i19 = i8;
              }
            }
            break;
          }
          break;
        }
      }
    }
    for (;;)
    {
      i15 -= 1;
      i11 = i19;
      i10 = i20;
      k = i21;
      j = i22;
      m = i16;
      i5 = i17;
      i4 = i18;
      i12 = i23;
      localObject1 = localObject2;
      l1 = l2;
      i7 = i24;
      i6 = i25;
      break;
      localProcessRecord2.curRawAdj = i11;
      localProcessRecord2.curAdj = localProcessRecord2.modifyRawOomAdj(i11);
      if (ActivityManagerDebugConfig.DEBUG_LRU) {}
      i8 = i11;
      i9 = i10;
      i1 = k;
      i2 = j;
      m = i7;
      n = i6;
      if (i11 == k) {
        break label1023;
      }
      i7 += 1;
      i8 = i11;
      i9 = i10;
      i1 = k;
      i2 = j;
      m = i7;
      n = i6;
      if (i7 < i14) {
        break label1023;
      }
      i11 = 0;
      i7 = k;
      k += 2;
      i8 = i7;
      i9 = i10;
      i1 = k;
      i2 = j;
      m = i11;
      n = i6;
      if (k <= 906) {
        break label1023;
      }
      i1 = 906;
      i8 = i7;
      i9 = i10;
      i2 = j;
      m = i11;
      n = i6;
      break label1023;
      j = i5;
      k = i4;
      if (this.mOemImportantProcessList.contains(localProcessRecord2.processName)) {
        break label1096;
      }
      this.mNumCachedHiddenProcs += 1;
      i5 += 1;
      j = i5;
      k = i4;
      if (i5 <= i) {
        break label1096;
      }
      j = i5;
      k = i4;
      if (bool) {
        break label1096;
      }
      localProcessRecord2.kill("cached #" + i5, true);
      j = i5;
      k = i4;
      break label1096;
      j = i5;
      k = i4;
      if (this.mOemImportantProcessList.contains(localProcessRecord2.processName)) {
        break label1096;
      }
      if ((i4 > ProcessList.TRIM_EMPTY_APPS) && (localProcessRecord2.lastActivityTime < l5))
      {
        j = i5;
        k = i4;
        if (bool) {
          break label1096;
        }
        localProcessRecord2.kill("empty for " + (1800000L + l5 - localProcessRecord2.lastActivityTime) / 1000L + "s", true);
        j = i5;
        k = i4;
        break label1096;
      }
      i4 += 1;
      j = i5;
      k = i4;
      if (i4 <= i3) {
        break label1096;
      }
      j = i5;
      k = i4;
      if (bool) {
        break label1096;
      }
      localProcessRecord2.kill("empty #" + i4, true);
      j = i5;
      k = i4;
      break label1096;
      localObject1 = localProcessRecord2.uidRecord;
      if ((localObject1 == null) || (((UidRecord)localObject1).curProcState <= localProcessRecord2.curProcState)) {
        break label1129;
      }
      ((UidRecord)localObject1).curProcState = localProcessRecord2.curProcState;
      break label1129;
      label1735:
      i23 = i12 + 1;
      i19 = i8;
      i20 = i9;
      i21 = i1;
      i22 = i2;
      i17 = j;
      i18 = k;
      i24 = m;
      i25 = n;
    }
    label1774:
    if ((m > this.mBServiceAppThreshold) && (this.mAllowLowerMemLevel) && (localObject1 != null))
    {
      if (!checkProcessExist(((ProcessRecord)localObject1).pid)) {
        break label2434;
      }
      ProcessList.setOomAdj(((ProcessRecord)localObject1).pid, ((ProcessRecord)localObject1).info.uid, 906);
      ((ProcessRecord)localObject1).setAdj = ((ProcessRecord)localObject1).curAdj;
      if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
        Slog.d(TAG, "app.processName = " + ((ProcessRecord)localObject1).processName + " app.pid = " + ((ProcessRecord)localObject1).pid + " is moved to higher adj");
      }
    }
    this.mNumServiceProcs = this.mNewNumServiceProcs;
    int i = i5 + i4;
    if ((i5 <= ProcessList.TRIM_CACHED_APPS) && (i4 <= ProcessList.TRIM_EMPTY_APPS)) {
      if (i <= 3)
      {
        i = 3;
        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
          Slog.d(TAG_OOM_ADJ, "oom: memFactor=" + i + " last=" + this.mLastMemoryLevel + " allowLow=" + this.mAllowLowerMemLevel + " numProcs=" + this.mLruProcesses.size() + " last=" + this.mLastNumProcesses);
        }
        j = i;
        if (i > this.mLastMemoryLevel) {
          if (this.mAllowLowerMemLevel)
          {
            j = i;
            if (this.mLruProcesses.size() < this.mLastNumProcesses) {}
          }
          else
          {
            i = this.mLastMemoryLevel;
            j = i;
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)
            {
              Slog.d(TAG_OOM_ADJ, "Keeping last mem factor!");
              j = i;
            }
          }
        }
        if (j != this.mLastMemoryLevel) {
          EventLogTags.writeAmMemFactor(j, this.mLastMemoryLevel);
        }
        this.mLastMemoryLevel = j;
        this.mLastNumProcesses = this.mLruProcesses.size();
        localObject1 = this.mProcessStats;
        if (!isSleepingLocked()) {
          break label2455;
        }
        bool = false;
        label2124:
        bool = ((ProcessStatsService)localObject1).setMemFactorLocked(j, bool, l3);
        i3 = this.mProcessStats.getMemFactorLocked();
        if (j == 0) {
          break label2839;
        }
        if (this.mLowRamStartTime == 0L) {
          this.mLowRamStartTime = l3;
        }
        n = 0;
        switch (j)
        {
        default: 
          i = 5;
          label2194:
          i1 = i12 / 3;
          k = 2;
          if (this.mHomeProcess != null) {
            k = 3;
          }
          j = k;
          if (this.mPreviousProcess != null) {
            j = k + 1;
          }
          m = i1;
          if (i1 < j) {
            m = j;
          }
          i1 = 80;
          j = i26 - 1;
          k = n;
          n = j;
          label2252:
          if (n >= 0)
          {
            localObject1 = (ProcessRecord)this.mLruProcesses.get(n);
            if ((bool) || (((ProcessRecord)localObject1).procStateChanged))
            {
              setProcessTrackerStateLocked((ProcessRecord)localObject1, i3, l3);
              ((ProcessRecord)localObject1).procStateChanged = false;
            }
            if (((((ProcessRecord)localObject1).curProcState < 12) || (((ProcessRecord)localObject1).killedByAm)) && ((((ProcessRecord)localObject1).curProcState == 9) && ((((ProcessRecord)localObject1).trimMemoryLevel >= 40) || (((ProcessRecord)localObject1).thread == null)))) {
              break;
            }
          }
          break;
        }
      }
    }
    try
    {
      if ((ActivityManagerDebugConfig.DEBUG_SWITCH) || (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)) {
        Slog.v(TAG_OOM_ADJ, "Trimming memory of heavy-weight " + ((ProcessRecord)localObject1).processName + " to " + 40);
      }
      ((ProcessRecord)localObject1).thread.scheduleTrimMemory(40);
    }
    catch (RemoteException localRemoteException4)
    {
      for (;;) {}
    }
    ((ProcessRecord)localObject1).trimMemoryLevel = 40;
    int j = i1;
    for (;;)
    {
      n -= 1;
      i1 = j;
      break label2252;
      label2434:
      return;
      if (i <= 5)
      {
        i = 2;
        break;
      }
      i = 1;
      break;
      i = 0;
      break;
      label2455:
      bool = true;
      break label2124;
      i = 15;
      break label2194;
      i = 10;
      break label2194;
      if ((((ProcessRecord)localObject1).trimMemoryLevel < i1) && (((ProcessRecord)localObject1).thread != null)) {}
      try
      {
        if ((ActivityManagerDebugConfig.DEBUG_SWITCH) || (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)) {
          Slog.v(TAG_OOM_ADJ, "Trimming memory of " + ((ProcessRecord)localObject1).processName + " to " + i1);
        }
        ((ProcessRecord)localObject1).thread.scheduleTrimMemory(i1);
      }
      catch (RemoteException localRemoteException5)
      {
        for (;;) {}
      }
      ((ProcessRecord)localObject1).trimMemoryLevel = i1;
      i2 = k + 1;
      j = i1;
      k = i2;
      if (i2 >= m)
      {
        k = 0;
        switch (i1)
        {
        default: 
          j = i1;
          break;
        case 60: 
          j = 40;
          break;
        case 80: 
          j = 60;
          continue;
          if (((((ProcessRecord)localObject1).curProcState >= 7) || (((ProcessRecord)localObject1).systemNoUi)) && (((ProcessRecord)localObject1).pendingUiClean) && ((((ProcessRecord)localObject1).trimMemoryLevel >= 20) || (((ProcessRecord)localObject1).thread == null))) {}
          break;
        }
      }
      try
      {
        if ((ActivityManagerDebugConfig.DEBUG_SWITCH) || (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)) {
          Slog.v(TAG_OOM_ADJ, "Trimming memory of bg-ui " + ((ProcessRecord)localObject1).processName + " to " + 20);
        }
        ((ProcessRecord)localObject1).thread.scheduleTrimMemory(20);
      }
      catch (RemoteException localRemoteException3)
      {
        for (;;) {}
      }
      ((ProcessRecord)localObject1).pendingUiClean = false;
      if ((((ProcessRecord)localObject1).trimMemoryLevel < i) && (((ProcessRecord)localObject1).thread != null)) {}
      try
      {
        if ((ActivityManagerDebugConfig.DEBUG_SWITCH) || (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)) {
          Slog.v(TAG_OOM_ADJ, "Trimming memory of fg " + ((ProcessRecord)localObject1).processName + " to " + i);
        }
        ((ProcessRecord)localObject1).thread.scheduleTrimMemory(i);
      }
      catch (RemoteException localRemoteException2)
      {
        for (;;) {}
      }
      ((ProcessRecord)localObject1).trimMemoryLevel = i;
      j = i1;
    }
    label2839:
    if (this.mLowRamStartTime != 0L)
    {
      this.mLowRamTimeSinceLastIdle += l3 - this.mLowRamStartTime;
      this.mLowRamStartTime = 0L;
    }
    i = i26 - 1;
    while (i >= 0)
    {
      localObject1 = (ProcessRecord)this.mLruProcesses.get(i);
      if ((bool) || (((ProcessRecord)localObject1).procStateChanged))
      {
        setProcessTrackerStateLocked((ProcessRecord)localObject1, i3, l3);
        ((ProcessRecord)localObject1).procStateChanged = false;
      }
      if (((((ProcessRecord)localObject1).curProcState < 7) && (!((ProcessRecord)localObject1).systemNoUi)) || (!((ProcessRecord)localObject1).pendingUiClean) || ((((ProcessRecord)localObject1).trimMemoryLevel < 20) && (((ProcessRecord)localObject1).thread != null))) {}
      try
      {
        if ((ActivityManagerDebugConfig.DEBUG_SWITCH) || (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)) {
          Slog.v(TAG_OOM_ADJ, "Trimming memory of ui hidden " + ((ProcessRecord)localObject1).processName + " to " + 20);
        }
        ((ProcessRecord)localObject1).thread.scheduleTrimMemory(20);
      }
      catch (RemoteException localRemoteException1)
      {
        for (;;) {}
      }
      ((ProcessRecord)localObject1).pendingUiClean = false;
      ((ProcessRecord)localObject1).trimMemoryLevel = 0;
      i -= 1;
    }
    if (this.mAlwaysFinishActivities) {
      this.mStackSupervisor.scheduleDestroyAllActivities(null, "always-finish");
    }
    if (bool) {
      requestPssAllProcsLocked(l3, false, this.mProcessStats.isMemFactorLowered());
    }
    j = this.mActiveUids.size() - 1;
    if (j >= 0)
    {
      localObject1 = (UidRecord)this.mActiveUids.valueAt(j);
      i = 0;
      k = 0;
      if (((UidRecord)localObject1).setProcState != ((UidRecord)localObject1).curProcState)
      {
        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
          Slog.i(TAG_UID_OBSERVERS, "Changes in " + localObject1 + ": proc state from " + ((UidRecord)localObject1).setProcState + " to " + ((UidRecord)localObject1).curProcState);
        }
        if (!ActivityManager.isProcStateBackground(((UidRecord)localObject1).curProcState)) {
          break label3291;
        }
        i = k;
        if (!ActivityManager.isProcStateBackground(((UidRecord)localObject1).setProcState))
        {
          ((UidRecord)localObject1).lastBackgroundTime = l4;
          i = k;
          if (!this.mHandler.hasMessages(60))
          {
            this.mHandler.sendEmptyMessageDelayed(60, 60000L);
            i = k;
          }
        }
      }
      for (;;)
      {
        ((UidRecord)localObject1).setProcState = ((UidRecord)localObject1).curProcState;
        enqueueUidChangeLocked((UidRecord)localObject1, -1, i);
        noteUidProcessState(((UidRecord)localObject1).uid, ((UidRecord)localObject1).curProcState);
        j -= 1;
        break;
        label3291:
        if (((UidRecord)localObject1).idle)
        {
          i = 4;
          ((UidRecord)localObject1).idle = false;
        }
        ((UidRecord)localObject1).lastBackgroundTime = 0L;
      }
    }
    if ((OnePlusProcessManager.isSupportFrozenApp()) && (!this.mImportantUids.equals(this.mLastImportantUids)))
    {
      Slog.e(TAG, "mImportantUids change mLastImportantUids =" + this.mLastImportantUids + " mImportantUids = " + this.mImportantUids);
      this.mLastImportantUids.clear();
      this.mLastImportantUids.addAll(this.mImportantUids);
      if (this.mOnePlusProcessManager != null)
      {
        localObject1 = this.mOnePlusProcessManager;
        OnePlusProcessManager.updateImportantUidChange(this.mImportantUids);
      }
    }
    if (this.mProcessStats.shouldWriteNowLocked(l3)) {
      this.mHandler.post(new Runnable()
      {
        public void run()
        {
          synchronized (ActivityManagerService.this)
          {
            ActivityManagerService.boostPriorityForLockedSection();
            ActivityManagerService.this.mProcessStats.writeStateAsyncLocked();
            ActivityManagerService.resetPriorityAfterLockedSection();
            return;
          }
        }
      });
    }
    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ)
    {
      l1 = SystemClock.uptimeMillis();
      Slog.d(TAG_OOM_ADJ, "Did OOM ADJ in " + (l1 - l3) + "ms");
    }
  }
  
  final boolean updateOomAdjLocked(ProcessRecord paramProcessRecord)
  {
    Object localObject = resumedAppLocked();
    boolean bool1;
    if (localObject != null)
    {
      localObject = ((ActivityRecord)localObject).app;
      bool1 = paramProcessRecord.cached;
      this.mAdjSeq += 1;
      if (paramProcessRecord.curRawAdj < 900) {
        break label93;
      }
    }
    label93:
    for (int i = paramProcessRecord.curRawAdj;; i = 1001)
    {
      boolean bool2 = updateOomAdjLocked(paramProcessRecord, i, (ProcessRecord)localObject, false, SystemClock.uptimeMillis());
      if ((bool1 != paramProcessRecord.cached) || (paramProcessRecord.curRawAdj == 1001)) {
        updateOomAdjLocked();
      }
      return bool2;
      localObject = null;
      break;
    }
  }
  
  public void updatePersistentConfiguration(Configuration paramConfiguration)
  {
    enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateConfiguration()");
    enforceWriteSettingsPermission("updateConfiguration()");
    if (paramConfiguration == null) {
      throw new NullPointerException("Configuration must not be null");
    }
    int i = UserHandle.getCallingUserId();
    try
    {
      boostPriorityForLockedSection();
      updatePersistentConfigurationLocked(paramConfiguration, i);
      return;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  final void updateProcessForegroundLocked(ProcessRecord paramProcessRecord, boolean paramBoolean1, boolean paramBoolean2)
  {
    ArrayList localArrayList2;
    if (paramBoolean1 != paramProcessRecord.foregroundServices)
    {
      paramProcessRecord.foregroundServices = paramBoolean1;
      localArrayList2 = (ArrayList)this.mForegroundPackages.get(paramProcessRecord.info.packageName, paramProcessRecord.info.uid);
      if (!paramBoolean1) {
        break label134;
      }
      ArrayList localArrayList1 = localArrayList2;
      if (localArrayList2 == null)
      {
        localArrayList1 = new ArrayList();
        this.mForegroundPackages.put(paramProcessRecord.info.packageName, paramProcessRecord.info.uid, localArrayList1);
      }
      if (!localArrayList1.contains(paramProcessRecord))
      {
        localArrayList1.add(paramProcessRecord);
        this.mBatteryStatsService.noteEvent(32770, paramProcessRecord.info.packageName, paramProcessRecord.info.uid);
      }
    }
    for (;;)
    {
      if (paramBoolean2) {
        updateOomAdjLocked();
      }
      return;
      label134:
      if ((localArrayList2 != null) && (localArrayList2.remove(paramProcessRecord)))
      {
        this.mBatteryStatsService.noteEvent(16386, paramProcessRecord.info.packageName, paramProcessRecord.info.uid);
        if (localArrayList2.size() <= 0) {
          this.mForegroundPackages.remove(paramProcessRecord.info.packageName, paramProcessRecord.info.uid);
        }
      }
    }
  }
  
  protected void updateProcessLaunchTime(String paramString, Long paramLong)
  {
    this.mRestartProcessManager.updateLaunchTime(paramString, paramLong.longValue());
  }
  
  void updateSleepIfNeededLocked()
  {
    if ((!this.mSleeping) || (shouldSleepLocked()))
    {
      if ((!this.mSleeping) && (shouldSleepLocked()))
      {
        this.mSleeping = true;
        if (this.mCurAppTimeTracker != null) {
          this.mCurAppTimeTracker.stop();
        }
        this.mTopProcessState = 5;
        this.mStackSupervisor.goingToSleepLocked();
        updateOomAdjLocked();
        checkExcessivePowerUsageLocked(false);
        this.mHandler.removeMessages(27);
        Message localMessage = this.mHandler.obtainMessage(27);
        this.mHandler.sendMessageDelayed(localMessage, POWER_CHECK_DELAY);
        this.mEmbryoManager.goingToSleep();
      }
      return;
    }
    this.mSleeping = false;
    startTimeTrackingFocusedActivityLocked();
    this.mTopProcessState = 2;
    this.mStackSupervisor.comeOutOfSleepIfNeededLocked();
    updateOomAdjLocked();
    this.mEmbryoManager.wakingUp();
  }
  
  void updateUsageStats(ActivityRecord paramActivityRecord, boolean paramBoolean)
  {
    if (ActivityManagerDebugConfig.DEBUG_SWITCH) {
      Slog.d(TAG_SWITCH, "updateUsageStats: comp=" + paramActivityRecord + "res=" + paramBoolean);
    }
    BatteryStatsImpl localBatteryStatsImpl = this.mBatteryStatsService.getActiveStatistics();
    if (paramBoolean) {
      if (this.mUsageStatsService != null) {
        this.mUsageStatsService.reportEvent(paramActivityRecord.realActivity, paramActivityRecord.userId, 1);
      }
    }
    for (;;)
    {
      try
      {
        localBatteryStatsImpl.noteActivityResumedLocked(paramActivityRecord.app.uid);
        return;
      }
      finally
      {
        paramActivityRecord = finally;
        throw paramActivityRecord;
      }
      if (this.mUsageStatsService != null) {
        this.mUsageStatsService.reportEvent(paramActivityRecord.realActivity, paramActivityRecord.userId, 2);
      }
      try
      {
        localBatteryStatsImpl.noteActivityPausedLocked(paramActivityRecord.app.uid);
      }
      finally {}
    }
  }
  
  void updateUserConfigurationLocked()
  {
    Configuration localConfiguration = new Configuration(this.mConfiguration);
    Settings.System.adjustConfigurationForUser(this.mContext.getContentResolver(), localConfiguration, this.mUserController.getCurrentUserIdLocked(), Settings.System.canWrite(this.mContext));
    updateConfigurationLocked(localConfiguration, null, false);
  }
  
  final Intent verifyBroadcastLocked(Intent paramIntent)
  {
    if ((paramIntent != null) && (paramIntent.hasFileDescriptors())) {
      throw new IllegalArgumentException("File descriptors passed in Intent");
    }
    int i = paramIntent.getFlags();
    if ((this.mProcessesReady) || ((0x4000000 & i) != 0)) {}
    while ((0x2000000 & i) != 0)
    {
      throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
      if ((0x40000000 & i) == 0)
      {
        Slog.e(TAG, "Attempt to launch receivers of broadcast intent " + paramIntent + " before boot completion");
        throw new IllegalStateException("Cannot broadcast before boot completed");
      }
    }
    return paramIntent;
  }
  
  public boolean willActivityBeVisible(IBinder paramIBinder)
  {
    try
    {
      boostPriorityForLockedSection();
      ActivityStack localActivityStack = ActivityRecord.getStackLocked(paramIBinder);
      if (localActivityStack != null)
      {
        boolean bool = localActivityStack.willActivityBeVisibleLocked(paramIBinder);
        return bool;
      }
      return false;
    }
    finally
    {
      resetPriorityAfterLockedSection();
    }
  }
  
  private final class AppDeathRecipient
    implements IBinder.DeathRecipient
  {
    final ProcessRecord mApp;
    final IApplicationThread mAppThread;
    final int mPid;
    
    AppDeathRecipient(ProcessRecord paramProcessRecord, int paramInt, IApplicationThread paramIApplicationThread)
    {
      if (ActivityManagerDebugConfig.DEBUG_ALL) {
        Slog.v(ActivityManagerService.-get1(), "New death recipient " + this + " for thread " + paramIApplicationThread.asBinder());
      }
      this.mApp = paramProcessRecord;
      this.mPid = paramInt;
      this.mAppThread = paramIApplicationThread;
    }
    
    public void binderDied()
    {
      if (ActivityManagerDebugConfig.DEBUG_ALL) {
        Slog.v(ActivityManagerService.-get1(), "Death received in " + this + " for thread " + this.mAppThread.asBinder());
      }
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
  }
  
  class AppTaskImpl
    extends IAppTask.Stub
  {
    private int mCallingUid;
    private int mTaskId;
    
    public AppTaskImpl(int paramInt1, int paramInt2)
    {
      this.mTaskId = paramInt1;
      this.mCallingUid = paramInt2;
    }
    
    private void checkCaller()
    {
      if (this.mCallingUid != Binder.getCallingUid()) {
        throw new SecurityException("Caller " + this.mCallingUid + " does not match caller of getAppTasks(): " + Binder.getCallingUid());
      }
    }
    
    public void finishAndRemoveTask()
    {
      checkCaller();
      long l;
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        l = Binder.clearCallingIdentity();
        try
        {
          if (!ActivityManagerService.-wrap2(ActivityManagerService.this, this.mTaskId, false, true)) {
            throw new IllegalArgumentException("Unable to find task ID " + this.mTaskId);
          }
        }
        finally
        {
          Binder.restoreCallingIdentity(l);
        }
      }
      Binder.restoreCallingIdentity(l);
      ActivityManagerService.resetPriorityAfterLockedSection();
    }
    
    public ActivityManager.RecentTaskInfo getTaskInfo()
    {
      checkCaller();
      long l;
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        l = Binder.clearCallingIdentity();
        try
        {
          TaskRecord localTaskRecord1 = ActivityManagerService.this.mStackSupervisor.anyTaskForIdLocked(this.mTaskId);
          if (localTaskRecord1 == null) {
            throw new IllegalArgumentException("Unable to find task ID " + this.mTaskId);
          }
        }
        finally
        {
          Binder.restoreCallingIdentity(l);
        }
      }
      ActivityManager.RecentTaskInfo localRecentTaskInfo = ActivityManagerService.-wrap0(ActivityManagerService.this, localTaskRecord2);
      Binder.restoreCallingIdentity(l);
      ActivityManagerService.resetPriorityAfterLockedSection();
      return localRecentTaskInfo;
    }
    
    /* Error */
    public void moveToFront()
    {
      // Byte code:
      //   0: aload_0
      //   1: invokespecial 57	com/android/server/am/ActivityManagerService$AppTaskImpl:checkCaller	()V
      //   4: invokestatic 64	android/os/Binder:clearCallingIdentity	()J
      //   7: lstore_1
      //   8: aload_0
      //   9: monitorenter
      //   10: aload_0
      //   11: getfield 16	com/android/server/am/ActivityManagerService$AppTaskImpl:this$0	Lcom/android/server/am/ActivityManagerService;
      //   14: getfield 86	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
      //   17: aload_0
      //   18: getfield 21	com/android/server/am/ActivityManagerService$AppTaskImpl:mTaskId	I
      //   21: aconst_null
      //   22: invokevirtual 101	com/android/server/am/ActivityStackSupervisor:startActivityFromRecentsInner	(ILandroid/os/Bundle;)I
      //   25: pop
      //   26: aload_0
      //   27: monitorexit
      //   28: lload_1
      //   29: invokestatic 77	android/os/Binder:restoreCallingIdentity	(J)V
      //   32: return
      //   33: astore_3
      //   34: aload_0
      //   35: monitorexit
      //   36: aload_3
      //   37: athrow
      //   38: astore_3
      //   39: lload_1
      //   40: invokestatic 77	android/os/Binder:restoreCallingIdentity	(J)V
      //   43: aload_3
      //   44: athrow
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	45	0	this	AppTaskImpl
      //   7	33	1	l	long
      //   33	4	3	localObject1	Object
      //   38	6	3	localObject2	Object
      // Exception table:
      //   from	to	target	type
      //   10	26	33	finally
      //   8	10	38	finally
      //   26	28	38	finally
      //   34	38	38	finally
    }
    
    public void setExcludeFromRecents(boolean paramBoolean)
    {
      checkCaller();
      long l;
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        l = Binder.clearCallingIdentity();
        try
        {
          TaskRecord localTaskRecord = ActivityManagerService.this.mStackSupervisor.anyTaskForIdLocked(this.mTaskId);
          if (localTaskRecord == null) {
            throw new IllegalArgumentException("Unable to find task ID " + this.mTaskId);
          }
        }
        finally
        {
          Binder.restoreCallingIdentity(l);
        }
      }
      Intent localIntent = ((TaskRecord)localObject2).getBaseIntent();
      if (paramBoolean) {
        localIntent.addFlags(8388608);
      }
      for (;;)
      {
        Binder.restoreCallingIdentity(l);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
        localIntent.setFlags(localIntent.getFlags() & 0xFF7FFFFF);
      }
    }
    
    public int startActivity(IBinder paramIBinder, String paramString1, Intent paramIntent, String paramString2, Bundle paramBundle)
    {
      checkCaller();
      int i = UserHandle.getCallingUserId();
      TaskRecord localTaskRecord;
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        localTaskRecord = ActivityManagerService.this.mStackSupervisor.anyTaskForIdLocked(this.mTaskId);
        if (localTaskRecord == null) {
          throw new IllegalArgumentException("Unable to find task ID " + this.mTaskId);
        }
      }
      paramIBinder = ApplicationThreadNative.asInterface(paramIBinder);
      if (paramIBinder == null) {
        throw new IllegalArgumentException("Bad app thread " + paramIBinder);
      }
      ActivityManagerService.resetPriorityAfterLockedSection();
      return ActivityManagerService.this.mActivityStarter.startActivityMayWait(paramIBinder, -1, paramString1, paramIntent, paramString2, null, null, null, null, 0, 0, null, null, null, paramBundle, false, i, null, localTaskRecord);
    }
  }
  
  static final class Association
  {
    int mCount;
    int mLastState = 17;
    long mLastStateUptime;
    int mNesting;
    final String mSourceProcess;
    final int mSourceUid;
    long mStartTime;
    long[] mStateTimes = new long[18];
    final ComponentName mTargetComponent;
    final String mTargetProcess;
    final int mTargetUid;
    long mTime;
    
    Association(int paramInt1, String paramString1, int paramInt2, ComponentName paramComponentName, String paramString2)
    {
      this.mSourceUid = paramInt1;
      this.mSourceProcess = paramString1;
      this.mTargetUid = paramInt2;
      this.mTargetComponent = paramComponentName;
      this.mTargetProcess = paramString2;
    }
  }
  
  static class CpuBinder
    extends Binder
  {
    ActivityManagerService mActivityManagerService;
    
    CpuBinder(ActivityManagerService paramActivityManagerService)
    {
      this.mActivityManagerService = paramActivityManagerService;
    }
    
    protected void dump(FileDescriptor arg1, PrintWriter paramPrintWriter, String[] paramArrayOfString)
    {
      if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
      {
        paramPrintWriter.println("Permission Denial: can't dump cpuinfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
        return;
      }
      synchronized (this.mActivityManagerService.mProcessCpuTracker)
      {
        paramPrintWriter.print(this.mActivityManagerService.mProcessCpuTracker.printCurrentLoad());
        paramPrintWriter.print(this.mActivityManagerService.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
        this.mActivityManagerService.mProcessCpuTracker.printCpuTrack(paramPrintWriter);
        return;
      }
    }
  }
  
  static class DbBinder
    extends Binder
  {
    ActivityManagerService mActivityManagerService;
    
    DbBinder(ActivityManagerService paramActivityManagerService)
    {
      this.mActivityManagerService = paramActivityManagerService;
    }
    
    protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
    {
      if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
      {
        paramPrintWriter.println("Permission Denial: can't dump dbinfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
        return;
      }
      this.mActivityManagerService.dumpDbInfo(paramFileDescriptor, paramPrintWriter, paramArrayOfString);
    }
  }
  
  public static class DumpStackFileObserver
    extends FileObserver
  {
    private static final int TRACE_DUMP_TIMEOUT_MS = 10000;
    static final int TRACE_DUMP_TIMEOUT_SECONDS = 10;
    private boolean mClosed;
    private final String mTracesPath;
    
    public DumpStackFileObserver(String paramString)
    {
      super(8);
      this.mTracesPath = paramString;
    }
    
    public void dumpWithTimeout(int paramInt)
    {
      Process.sendSignal(paramInt, 3);
      try
      {
        wait(10000L);
        if (!this.mClosed)
        {
          Slog.w(ActivityManagerService.-get1(), "Didn't see close of " + this.mTracesPath + " for pid " + paramInt + ". Attempting native stack collection.");
          Debug.dumpNativeBacktraceToFileTimeout(paramInt, this.mTracesPath, 10);
        }
        this.mClosed = false;
        return;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          Slog.wtf(ActivityManagerService.-get1(), localInterruptedException);
        }
      }
      finally {}
    }
    
    public void onEvent(int paramInt, String paramString)
    {
      try
      {
        this.mClosed = true;
        notify();
        return;
      }
      finally
      {
        paramString = finally;
        throw paramString;
      }
    }
  }
  
  class EmbryoConfigUpdater
    implements ConfigObserver.ConfigUpdater
  {
    EmbryoConfigUpdater() {}
    
    public void updateConfig(JSONArray paramJSONArray)
    {
      ActivityManagerService.-get7(ActivityManagerService.this).resolveConfig(paramJSONArray);
    }
  }
  
  private final class FontScaleSettingObserver
    extends ContentObserver
  {
    private final Uri mFontScaleUri = Settings.System.getUriFor("font_scale");
    
    public FontScaleSettingObserver()
    {
      super();
      ActivityManagerService.this.mContext.getContentResolver().registerContentObserver(this.mFontScaleUri, false, this, -1);
    }
    
    public void onChange(boolean paramBoolean, Uri paramUri, int paramInt)
    {
      if (this.mFontScaleUri.equals(paramUri)) {
        ActivityManagerService.-wrap19(ActivityManagerService.this, paramInt);
      }
    }
  }
  
  abstract class ForegroundToken
    implements IBinder.DeathRecipient
  {
    int pid;
    IBinder token;
    
    ForegroundToken() {}
  }
  
  public static class GrantUri
  {
    public boolean prefix;
    public final int sourceUserId;
    public final Uri uri;
    
    public GrantUri(int paramInt, Uri paramUri, boolean paramBoolean)
    {
      this.sourceUserId = paramInt;
      this.uri = paramUri;
      this.prefix = paramBoolean;
    }
    
    public static GrantUri resolve(int paramInt, Uri paramUri)
    {
      return new GrantUri(ContentProvider.getUserIdFromUri(paramUri, paramInt), ContentProvider.getUriWithoutUserId(paramUri), false);
    }
    
    public boolean equals(Object paramObject)
    {
      boolean bool2 = false;
      if ((paramObject instanceof GrantUri))
      {
        paramObject = (GrantUri)paramObject;
        boolean bool1 = bool2;
        if (this.uri.equals(((GrantUri)paramObject).uri))
        {
          bool1 = bool2;
          if (this.sourceUserId == ((GrantUri)paramObject).sourceUserId)
          {
            bool1 = bool2;
            if (this.prefix == ((GrantUri)paramObject).prefix) {
              bool1 = true;
            }
          }
        }
        return bool1;
      }
      return false;
    }
    
    public int hashCode()
    {
      int j = this.sourceUserId;
      int k = this.uri.hashCode();
      if (this.prefix) {}
      for (int i = 1231;; i = 1237) {
        return ((j + 31) * 31 + k) * 31 + i;
      }
    }
    
    public String toSafeString()
    {
      String str2 = Integer.toString(this.sourceUserId) + " @ " + this.uri.toSafeString();
      String str1 = str2;
      if (this.prefix) {
        str1 = str2 + " [prefix]";
      }
      return str1;
    }
    
    public String toString()
    {
      String str2 = Integer.toString(this.sourceUserId) + " @ " + this.uri.toString();
      String str1 = str2;
      if (this.prefix) {
        str1 = str2 + " [prefix]";
      }
      return str1;
    }
  }
  
  static class GraphicsBinder
    extends Binder
  {
    ActivityManagerService mActivityManagerService;
    
    GraphicsBinder(ActivityManagerService paramActivityManagerService)
    {
      this.mActivityManagerService = paramActivityManagerService;
    }
    
    protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
    {
      if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
      {
        paramPrintWriter.println("Permission Denial: can't dump gfxinfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
        return;
      }
      this.mActivityManagerService.dumpGraphicsHardwareUsage(paramFileDescriptor, paramPrintWriter, paramArrayOfString);
    }
  }
  
  private class Identity
  {
    public final int pid;
    public final IBinder token;
    public final int uid;
    
    Identity(IBinder paramIBinder, int paramInt1, int paramInt2)
    {
      this.token = paramIBinder;
      this.pid = paramInt1;
      this.uid = paramInt2;
    }
  }
  
  class IntentFirewallInterface
    implements IntentFirewall.AMSInterface
  {
    IntentFirewallInterface() {}
    
    public int checkComponentPermission(String paramString, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
    {
      return ActivityManagerService.this.checkComponentPermission(paramString, paramInt1, paramInt2, paramInt3, paramBoolean);
    }
    
    public Object getAMSLock()
    {
      return ActivityManagerService.this;
    }
  }
  
  static class ItemMatcher
  {
    boolean all = true;
    ArrayList<ComponentName> components;
    ArrayList<Integer> objects;
    ArrayList<String> strings;
    
    int build(String[] paramArrayOfString, int paramInt)
    {
      while (paramInt < paramArrayOfString.length)
      {
        String str = paramArrayOfString[paramInt];
        if ("--".equals(str)) {
          return paramInt + 1;
        }
        build(str);
        paramInt += 1;
      }
      return paramInt;
    }
    
    void build(String paramString)
    {
      ComponentName localComponentName = ComponentName.unflattenFromString(paramString);
      if (localComponentName != null)
      {
        if (this.components == null) {
          this.components = new ArrayList();
        }
        this.components.add(localComponentName);
        this.all = false;
        return;
      }
      try
      {
        int i = Integer.parseInt(paramString, 16);
        if (this.objects == null) {
          this.objects = new ArrayList();
        }
        this.objects.add(Integer.valueOf(i));
        this.all = false;
        return;
      }
      catch (RuntimeException localRuntimeException)
      {
        if (this.strings == null) {
          this.strings = new ArrayList();
        }
        this.strings.add(paramString);
        this.all = false;
      }
    }
    
    boolean match(Object paramObject, ComponentName paramComponentName)
    {
      if (this.all) {
        return true;
      }
      int i;
      if (this.components != null)
      {
        i = 0;
        while (i < this.components.size())
        {
          if (((ComponentName)this.components.get(i)).equals(paramComponentName)) {
            return true;
          }
          i += 1;
        }
      }
      if (this.objects != null)
      {
        i = 0;
        while (i < this.objects.size())
        {
          if (System.identityHashCode(paramObject) == ((Integer)this.objects.get(i)).intValue()) {
            return true;
          }
          i += 1;
        }
      }
      if (this.strings != null)
      {
        paramObject = paramComponentName.flattenToString();
        i = 0;
        while (i < this.strings.size())
        {
          if (((String)paramObject).contains((CharSequence)this.strings.get(i))) {
            return true;
          }
          i += 1;
        }
      }
      return false;
    }
  }
  
  final class KillHandler
    extends Handler
  {
    static final int KILL_PROCESS_GROUP_MSG = 4000;
    
    public KillHandler(Looper paramLooper)
    {
      super(null, true);
    }
    
    public void handleMessage(Message paramMessage)
    {
      switch (paramMessage.what)
      {
      default: 
        super.handleMessage(paramMessage);
        return;
      }
      Trace.traceBegin(64L, "killProcessGroup");
      Process.killProcessGroup(paramMessage.arg1, paramMessage.arg2);
      Trace.traceEnd(64L);
    }
  }
  
  public static final class Lifecycle
    extends SystemService
  {
    private final ActivityManagerService mService;
    
    public Lifecycle(Context paramContext)
    {
      super();
      this.mService = new ActivityManagerService(paramContext);
    }
    
    public ActivityManagerService getService()
    {
      return this.mService;
    }
    
    public void onStart()
    {
      ActivityManagerService.-wrap18(this.mService);
    }
  }
  
  private final class LocalService
    extends ActivityManagerInternal
  {
    private LocalService() {}
    
    public ActivityManagerInternal.SleepToken acquireSleepToken(String paramString)
    {
      Preconditions.checkNotNull(paramString);
      ??? = null;
      Object localObject2 = null;
      int i = -1;
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        if (ActivityManagerService.this.mFocusedActivity != null)
        {
          ??? = ActivityManagerService.this.mFocusedActivity.requestedVrComponent;
          localObject2 = ActivityManagerService.this.mFocusedActivity.info.getComponentName();
          i = ActivityManagerService.this.mFocusedActivity.userId;
        }
        ActivityManagerService.resetPriorityAfterLockedSection();
        if (??? != null) {
          ActivityManagerService.-wrap6(ActivityManagerService.this, false, (ComponentName)???, i, (ComponentName)localObject2, true);
        }
      }
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        paramString = new ActivityManagerService.SleepTokenImpl(ActivityManagerService.this, paramString);
        ActivityManagerService.this.mSleepTokens.add(paramString);
        if (ActivityManagerService.mEnableNetOpts)
        {
          localObject2 = ActivityManagerService.this.mStackSupervisor.getLastStack();
          if (localObject2 != null)
          {
            localObject2 = ((ActivityStack)localObject2).topRunningActivityLocked();
            if (localObject2 != null) {
              ActivityManagerService.-wrap13(ActivityManagerService.this, 1, ((ActivityRecord)localObject2).processName);
            }
          }
        }
        ActivityManagerService.this.updateSleepIfNeededLocked();
        ActivityManagerService.resetPriorityAfterLockedSection();
        return paramString;
        paramString = finally;
        ActivityManagerService.resetPriorityAfterLockedSection();
        throw paramString;
      }
    }
    
    public void addAppLockerPassedPackage(String paramString)
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        Slog.i(ActivityManagerService.-get1(), "AppLocker: addAppLockerPassedPackage pkg=" + paramString);
        ActivityManagerService.this.mPassedPackageList.add(paramString);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public String checkContentProviderAccess(String paramString, int paramInt)
    {
      return ActivityManagerService.this.checkContentProviderAccess(paramString, paramInt);
    }
    
    public ComponentName getHomeActivityForUser(int paramInt)
    {
      ComponentName localComponentName = null;
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityRecord localActivityRecord = ActivityManagerService.this.mStackSupervisor.getHomeActivityForUser(paramInt);
        if (localActivityRecord == null)
        {
          ActivityManagerService.resetPriorityAfterLockedSection();
          return localComponentName;
        }
        localComponentName = localActivityRecord.realActivity;
      }
    }
    
    public List<IBinder> getTopVisibleActivities()
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        List localList = ActivityManagerService.this.mStackSupervisor.getTopVisibleActivities();
        ActivityManagerService.resetPriorityAfterLockedSection();
        return localList;
      }
    }
    
    public int getUidProcessState(int paramInt)
    {
      return ActivityManagerService.this.getUidState(paramInt);
    }
    
    public void killForegroundAppsForUser(int paramInt)
    {
      for (;;)
      {
        int i;
        int j;
        ProcessRecord localProcessRecord;
        synchronized (ActivityManagerService.this)
        {
          ActivityManagerService.boostPriorityForLockedSection();
          ArrayList localArrayList = new ArrayList();
          int k = ActivityManagerService.this.mProcessNames.getMap().size();
          i = 0;
          if (i >= k) {
            break label164;
          }
          SparseArray localSparseArray = (SparseArray)ActivityManagerService.this.mProcessNames.getMap().valueAt(i);
          int m = localSparseArray.size();
          j = 0;
          if (j >= m) {
            break label219;
          }
          localProcessRecord = (ProcessRecord)localSparseArray.valueAt(j);
          if (localProcessRecord.persistent) {
            break label212;
          }
          if (localProcessRecord.removed) {
            localArrayList.add(localProcessRecord);
          }
        }
        if ((localProcessRecord.userId == paramInt) && (localProcessRecord.foregroundActivities))
        {
          localProcessRecord.removed = true;
          ((ArrayList)localObject).add(localProcessRecord);
          break label212;
          label164:
          i = ((ArrayList)localObject).size();
          paramInt = 0;
          while (paramInt < i)
          {
            ActivityManagerService.this.removeProcessLocked((ProcessRecord)((ArrayList)localObject).get(paramInt), false, true, "kill all fg");
            paramInt += 1;
          }
          ActivityManagerService.resetPriorityAfterLockedSection();
          return;
        }
        label212:
        j += 1;
        continue;
        label219:
        i += 1;
      }
    }
    
    public void notifyAppTransitionCancelled()
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.mStackSupervisor.notifyAppTransitionDone();
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public void notifyAppTransitionFinished()
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.mStackSupervisor.notifyAppTransitionDone();
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public void notifyAppTransitionStarting(int paramInt)
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.mStackSupervisor.mActivityMetricsLogger.notifyTransitionStarting(paramInt);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public void notifyDockedStackMinimizedChanged(boolean paramBoolean)
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.mStackSupervisor.setDockedStackMinimized(paramBoolean);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public void notifyStartingWindowDrawn()
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.mStackSupervisor.mActivityMetricsLogger.notifyStartingWindowDrawn();
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public void onLocalVoiceInteractionStarted(IBinder paramIBinder, IVoiceInteractionSession paramIVoiceInteractionSession, IVoiceInteractor paramIVoiceInteractor)
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.onLocalVoiceInteractionStartedLocked(paramIBinder, paramIVoiceInteractionSession, paramIVoiceInteractor);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public void onUserRemoved(int paramInt)
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.this.onUserStoppedLocked(paramInt);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public void onWakefulnessChanged(int paramInt)
    {
      ActivityManagerService.this.onWakefulnessChanged(paramInt);
    }
    
    public void setPendingIntentWhitelistDuration(IIntentSender paramIIntentSender, long paramLong)
    {
      if (!(paramIIntentSender instanceof PendingIntentRecord))
      {
        Slog.w(ActivityManagerService.-get1(), "markAsSentFromNotification(): not a PendingIntentRecord: " + paramIIntentSender);
        return;
      }
      ((PendingIntentRecord)paramIIntentSender).setWhitelistDuration(paramLong);
    }
    
    public int startActivitiesAsPackage(String paramString, int paramInt, Intent[] paramArrayOfIntent, Bundle paramBundle)
    {
      Preconditions.checkNotNull(paramArrayOfIntent, "intents");
      String[] arrayOfString = new String[paramArrayOfIntent.length];
      int i = 0;
      while (i < paramArrayOfIntent.length)
      {
        arrayOfString[i] = paramArrayOfIntent[i].resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver());
        i += 1;
      }
      i = 0;
      for (;;)
      {
        try
        {
          int j = AppGlobals.getPackageManager().getPackageUid(paramString, 268435456, paramInt);
          i = j;
        }
        catch (RemoteException localRemoteException)
        {
          continue;
        }
        synchronized (ActivityManagerService.this)
        {
          ActivityManagerService.boostPriorityForLockedSection();
          paramInt = ActivityManagerService.this.startActivitiesInPackage(i, paramString, paramArrayOfIntent, arrayOfString, null, paramBundle, paramInt);
          ActivityManagerService.resetPriorityAfterLockedSection();
          return paramInt;
        }
      }
    }
    
    public int startIsolatedProcess(String paramString1, String[] paramArrayOfString, String paramString2, String paramString3, int paramInt, Runnable paramRunnable)
    {
      return ActivityManagerService.this.startIsolatedProcess(paramString1, paramArrayOfString, paramString2, paramString3, paramInt, paramRunnable);
    }
    
    public void updatePersistentConfigurationForUser(Configuration paramConfiguration, int paramInt)
    {
      Preconditions.checkNotNull(paramConfiguration, "Configuration must not be null");
      Preconditions.checkArgumentNonnegative(paramInt, "userId " + paramInt + " not supported");
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        ActivityManagerService.-wrap4(ActivityManagerService.this, paramConfiguration, null, false, true, paramInt, false);
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
  }
  
  final class MainHandler
    extends Handler
  {
    public MainHandler(Looper paramLooper)
    {
      super(null, true);
    }
    
    /* Error */
    public void handleMessage(Message arg1)
    {
      // Byte code:
      //   0: aload_1
      //   1: getfield 35	android/os/Message:what	I
      //   4: lookupswitch	default:+476->480, 4:+477->481, 5:+503->507, 12:+536->540, 13:+612->616, 20:+1069->1073, 21:+1215->1219, 22:+1252->1256, 23:+1334->1338, 24:+1345->1349, 25:+1588->1592, 27:+1631->1635, 28:+748->752, 29:+874->878, 33:+1782->1786, 34:+1801->1805, 35:+1827->1831, 36:+1853->1857, 37:+1879->1883, 38:+1987->1991, 39:+1995->1999, 40:+2033->2037, 41:+2069->2073, 42:+2220->2224, 43:+2353->2357, 44:+2416->2420, 45:+2496->2500, 47:+2540->2544, 49:+2623->2627, 50:+3122->3126, 51:+3220->3224, 52:+3669->3673, 53:+3747->3751, 55:+3762->3766, 56:+3780->3784, 57:+3795->3799, 58:+3833->3837, 59:+1171->1175, 60:+3957->3961, 61:+2259->2263, 62:+3965->3969, 63:+4001->4005, 64:+2704->2708, 65:+2785->2789, 66:+2866->2870, 67:+2947->2951, 68:+3041->3045, 69:+4248->4252, 71:+4337->4341, 1118:+4418->4422, 54088:+4331->4335, 55000:+1686->1690, 55001:+1698->1702, 55002:+1710->1714, 55003:+1734->1738, 55004:+1746->1750, 55005:+1758->1762, 55006:+1722->1726, 55008:+1770->1774
      //   480: return
      //   481: aload_0
      //   482: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   485: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   488: invokevirtual 45	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
      //   491: aload_1
      //   492: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   495: checkcast 51	android/content/res/Configuration
      //   498: aload_1
      //   499: getfield 54	android/os/Message:arg1	I
      //   502: invokestatic 60	android/provider/Settings$System:putConfigurationForUser	(Landroid/content/ContentResolver;Landroid/content/res/Configuration;I)Z
      //   505: pop
      //   506: return
      //   507: aload_0
      //   508: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   511: astore_1
      //   512: aload_1
      //   513: monitorenter
      //   514: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   517: aload_0
      //   518: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   521: invokevirtual 67	com/android/server/am/ActivityManagerService:performAppGcsIfAppropriateLocked	()V
      //   524: aload_1
      //   525: monitorexit
      //   526: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   529: return
      //   530: astore 8
      //   532: aload_1
      //   533: monitorexit
      //   534: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   537: aload 8
      //   539: athrow
      //   540: aload_0
      //   541: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   544: getfield 74	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
      //   547: ifeq +51 -> 598
      //   550: aload_0
      //   551: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   554: iconst_0
      //   555: putfield 74	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
      //   558: aload_0
      //   559: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   562: getfield 78	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
      //   565: bipush 12
      //   567: invokevirtual 82	com/android/server/am/ActivityManagerService$MainHandler:obtainMessage	(I)Landroid/os/Message;
      //   570: astore 8
      //   572: aload 8
      //   574: aload_1
      //   575: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   578: putfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   581: aload_0
      //   582: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   585: getfield 78	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
      //   588: aload 8
      //   590: ldc2_w 83
      //   593: invokevirtual 88	com/android/server/am/ActivityManagerService$MainHandler:sendMessageDelayed	(Landroid/os/Message;J)Z
      //   596: pop
      //   597: return
      //   598: aload_0
      //   599: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   602: getfield 92	com/android/server/am/ActivityManagerService:mServices	Lcom/android/server/am/ActiveServices;
      //   605: aload_1
      //   606: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   609: checkcast 94	com/android/server/am/ProcessRecord
      //   612: invokevirtual 100	com/android/server/am/ActiveServices:serviceTimeout	(Lcom/android/server/am/ProcessRecord;)V
      //   615: return
      //   616: aload_0
      //   617: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   620: astore_1
      //   621: aload_1
      //   622: monitorenter
      //   623: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   626: aload_0
      //   627: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   630: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   633: invokevirtual 110	java/util/ArrayList:size	()I
      //   636: iconst_1
      //   637: isub
      //   638: istore_2
      //   639: iload_2
      //   640: iflt +106 -> 746
      //   643: aload_0
      //   644: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   647: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   650: iload_2
      //   651: invokevirtual 114	java/util/ArrayList:get	(I)Ljava/lang/Object;
      //   654: checkcast 94	com/android/server/am/ProcessRecord
      //   657: astore 8
      //   659: aload 8
      //   661: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   664: astore 9
      //   666: aload 9
      //   668: ifnull +23 -> 691
      //   671: aload 8
      //   673: getfield 121	com/android/server/am/ProcessRecord:uid	I
      //   676: ldc 123
      //   678: invokestatic 129	com/android/server/am/OnePlusProcessManager:resumeProcessByUID_out	(ILjava/lang/String;)V
      //   681: aload 8
      //   683: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   686: invokeinterface 133 1 0
      //   691: iload_2
      //   692: iconst_1
      //   693: isub
      //   694: istore_2
      //   695: goto -56 -> 639
      //   698: astore 9
      //   700: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   703: new 139	java/lang/StringBuilder
      //   706: dup
      //   707: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   710: ldc -113
      //   712: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   715: aload 8
      //   717: getfield 151	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
      //   720: getfield 157	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
      //   723: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   726: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   729: invokestatic 166	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
      //   732: pop
      //   733: goto -42 -> 691
      //   736: astore 8
      //   738: aload_1
      //   739: monitorexit
      //   740: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   743: aload 8
      //   745: athrow
      //   746: aload_1
      //   747: monitorexit
      //   748: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   751: return
      //   752: aload_0
      //   753: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   756: astore_1
      //   757: aload_1
      //   758: monitorenter
      //   759: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   762: aload_0
      //   763: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   766: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   769: invokevirtual 110	java/util/ArrayList:size	()I
      //   772: iconst_1
      //   773: isub
      //   774: istore_2
      //   775: iload_2
      //   776: iflt +96 -> 872
      //   779: aload_0
      //   780: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   783: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   786: iload_2
      //   787: invokevirtual 114	java/util/ArrayList:get	(I)Ljava/lang/Object;
      //   790: checkcast 94	com/android/server/am/ProcessRecord
      //   793: astore 8
      //   795: aload 8
      //   797: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   800: astore 9
      //   802: aload 9
      //   804: ifnull +13 -> 817
      //   807: aload 8
      //   809: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   812: invokeinterface 169 1 0
      //   817: iload_2
      //   818: iconst_1
      //   819: isub
      //   820: istore_2
      //   821: goto -46 -> 775
      //   824: astore 9
      //   826: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   829: new 139	java/lang/StringBuilder
      //   832: dup
      //   833: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   836: ldc -85
      //   838: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   841: aload 8
      //   843: getfield 151	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
      //   846: getfield 157	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
      //   849: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   852: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   855: invokestatic 166	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
      //   858: pop
      //   859: goto -42 -> 817
      //   862: astore 8
      //   864: aload_1
      //   865: monitorexit
      //   866: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   869: aload 8
      //   871: athrow
      //   872: aload_1
      //   873: monitorexit
      //   874: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   877: return
      //   878: aload_1
      //   879: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   882: checkcast 173	android/net/ProxyInfo
      //   885: astore 11
      //   887: ldc -81
      //   889: astore 8
      //   891: ldc -81
      //   893: astore 10
      //   895: ldc -81
      //   897: astore_1
      //   898: getstatic 181	android/net/Uri:EMPTY	Landroid/net/Uri;
      //   901: astore 9
      //   903: aload 11
      //   905: ifnull +33 -> 938
      //   908: aload 11
      //   910: invokevirtual 184	android/net/ProxyInfo:getHost	()Ljava/lang/String;
      //   913: astore 8
      //   915: aload 11
      //   917: invokevirtual 187	android/net/ProxyInfo:getPort	()I
      //   920: invokestatic 192	java/lang/Integer:toString	(I)Ljava/lang/String;
      //   923: astore 10
      //   925: aload 11
      //   927: invokevirtual 195	android/net/ProxyInfo:getExclusionListAsString	()Ljava/lang/String;
      //   930: astore_1
      //   931: aload 11
      //   933: invokevirtual 199	android/net/ProxyInfo:getPacFileUrl	()Landroid/net/Uri;
      //   936: astore 9
      //   938: aload_0
      //   939: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   942: astore 11
      //   944: aload 11
      //   946: monitorenter
      //   947: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   950: aload_0
      //   951: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   954: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   957: invokevirtual 110	java/util/ArrayList:size	()I
      //   960: iconst_1
      //   961: isub
      //   962: istore_2
      //   963: iload_2
      //   964: iflt +102 -> 1066
      //   967: aload_0
      //   968: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   971: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   974: iload_2
      //   975: invokevirtual 114	java/util/ArrayList:get	(I)Ljava/lang/Object;
      //   978: checkcast 94	com/android/server/am/ProcessRecord
      //   981: astore 12
      //   983: aload 12
      //   985: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   988: astore 13
      //   990: aload 13
      //   992: ifnull +20 -> 1012
      //   995: aload 12
      //   997: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   1000: aload 8
      //   1002: aload 10
      //   1004: aload_1
      //   1005: aload 9
      //   1007: invokeinterface 203 5 0
      //   1012: iload_2
      //   1013: iconst_1
      //   1014: isub
      //   1015: istore_2
      //   1016: goto -53 -> 963
      //   1019: astore 13
      //   1021: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   1024: new 139	java/lang/StringBuilder
      //   1027: dup
      //   1028: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   1031: ldc -51
      //   1033: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   1036: aload 12
      //   1038: getfield 151	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
      //   1041: getfield 157	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
      //   1044: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   1047: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   1050: invokestatic 166	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
      //   1053: pop
      //   1054: goto -42 -> 1012
      //   1057: astore_1
      //   1058: aload 11
      //   1060: monitorexit
      //   1061: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1064: aload_1
      //   1065: athrow
      //   1066: aload 11
      //   1068: monitorexit
      //   1069: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1072: return
      //   1073: aload_0
      //   1074: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1077: getfield 74	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
      //   1080: ifeq +51 -> 1131
      //   1083: aload_0
      //   1084: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1087: iconst_0
      //   1088: putfield 74	com/android/server/am/ActivityManagerService:mDidDexOpt	Z
      //   1091: aload_0
      //   1092: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1095: getfield 78	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
      //   1098: bipush 20
      //   1100: invokevirtual 82	com/android/server/am/ActivityManagerService$MainHandler:obtainMessage	(I)Landroid/os/Message;
      //   1103: astore 8
      //   1105: aload 8
      //   1107: aload_1
      //   1108: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1111: putfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1114: aload_0
      //   1115: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1118: getfield 78	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
      //   1121: aload 8
      //   1123: ldc2_w 206
      //   1126: invokevirtual 88	com/android/server/am/ActivityManagerService$MainHandler:sendMessageDelayed	(Landroid/os/Message;J)Z
      //   1129: pop
      //   1130: return
      //   1131: aload_1
      //   1132: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1135: checkcast 94	com/android/server/am/ProcessRecord
      //   1138: astore 8
      //   1140: aload_0
      //   1141: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1144: astore_1
      //   1145: aload_1
      //   1146: monitorenter
      //   1147: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   1150: aload_0
      //   1151: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1154: aload 8
      //   1156: invokestatic 211	com/android/server/am/ActivityManagerService:-wrap15	(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;)V
      //   1159: aload_1
      //   1160: monitorexit
      //   1161: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1164: return
      //   1165: astore 8
      //   1167: aload_1
      //   1168: monitorexit
      //   1169: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1172: aload 8
      //   1174: athrow
      //   1175: aload_1
      //   1176: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1179: checkcast 94	com/android/server/am/ProcessRecord
      //   1182: astore 8
      //   1184: aload_0
      //   1185: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1188: astore_1
      //   1189: aload_1
      //   1190: monitorenter
      //   1191: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   1194: aload_0
      //   1195: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1198: aload 8
      //   1200: invokestatic 214	com/android/server/am/ActivityManagerService:-wrap14	(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;)V
      //   1203: aload_1
      //   1204: monitorexit
      //   1205: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1208: return
      //   1209: astore 8
      //   1211: aload_1
      //   1212: monitorexit
      //   1213: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1216: aload 8
      //   1218: athrow
      //   1219: aload_0
      //   1220: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1223: astore_1
      //   1224: aload_1
      //   1225: monitorenter
      //   1226: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   1229: aload_0
      //   1230: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1233: getfield 218	com/android/server/am/ActivityManagerService:mActivityStarter	Lcom/android/server/am/ActivityStarter;
      //   1236: iconst_1
      //   1237: invokevirtual 224	com/android/server/am/ActivityStarter:doPendingActivityLaunchesLocked	(Z)V
      //   1240: aload_1
      //   1241: monitorexit
      //   1242: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1245: return
      //   1246: astore 8
      //   1248: aload_1
      //   1249: monitorexit
      //   1250: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1253: aload 8
      //   1255: athrow
      //   1256: aload_0
      //   1257: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1260: astore 8
      //   1262: aload 8
      //   1264: monitorenter
      //   1265: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   1268: aload_1
      //   1269: getfield 54	android/os/Message:arg1	I
      //   1272: istore_2
      //   1273: aload_1
      //   1274: getfield 227	android/os/Message:arg2	I
      //   1277: istore_3
      //   1278: aload_1
      //   1279: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1282: checkcast 229	android/os/Bundle
      //   1285: astore 9
      //   1287: aload 9
      //   1289: ldc -25
      //   1291: invokevirtual 235	android/os/Bundle:getString	(Ljava/lang/String;)Ljava/lang/String;
      //   1294: astore_1
      //   1295: aload 9
      //   1297: ldc -19
      //   1299: invokevirtual 235	android/os/Bundle:getString	(Ljava/lang/String;)Ljava/lang/String;
      //   1302: astore 9
      //   1304: aload_0
      //   1305: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1308: aload_1
      //   1309: iload_2
      //   1310: iconst_0
      //   1311: iconst_0
      //   1312: iconst_1
      //   1313: iconst_0
      //   1314: iconst_0
      //   1315: iload_3
      //   1316: aload 9
      //   1318: invokevirtual 241	com/android/server/am/ActivityManagerService:forceStopPackageLocked	(Ljava/lang/String;IZZZZZILjava/lang/String;)Z
      //   1321: pop
      //   1322: aload 8
      //   1324: monitorexit
      //   1325: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1328: return
      //   1329: astore_1
      //   1330: aload 8
      //   1332: monitorexit
      //   1333: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1336: aload_1
      //   1337: athrow
      //   1338: aload_1
      //   1339: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1342: checkcast 243	com/android/server/am/PendingIntentRecord
      //   1345: invokevirtual 246	com/android/server/am/PendingIntentRecord:completeFinalize	()V
      //   1348: return
      //   1349: invokestatic 252	android/app/NotificationManager:getService	()Landroid/app/INotificationManager;
      //   1352: astore 8
      //   1354: aload 8
      //   1356: ifnonnull +4 -> 1360
      //   1359: return
      //   1360: aload_1
      //   1361: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1364: checkcast 254	com/android/server/am/ActivityRecord
      //   1367: astore_1
      //   1368: aload_1
      //   1369: getfield 258	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
      //   1372: astore 9
      //   1374: aload 9
      //   1376: ifnonnull +4 -> 1380
      //   1379: return
      //   1380: aload_0
      //   1381: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1384: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   1387: aload 9
      //   1389: getfield 151	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
      //   1392: getfield 261	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
      //   1395: iconst_0
      //   1396: invokevirtual 265	android/content/Context:createPackageContext	(Ljava/lang/String;I)Landroid/content/Context;
      //   1399: astore 9
      //   1401: aload_0
      //   1402: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1405: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   1408: ldc_w 266
      //   1411: iconst_1
      //   1412: anewarray 268	java/lang/Object
      //   1415: dup
      //   1416: iconst_0
      //   1417: aload 9
      //   1419: invokevirtual 272	android/content/Context:getApplicationInfo	()Landroid/content/pm/ApplicationInfo;
      //   1422: aload 9
      //   1424: invokevirtual 276	android/content/Context:getPackageManager	()Landroid/content/pm/PackageManager;
      //   1427: invokevirtual 280	android/content/pm/ApplicationInfo:loadLabel	(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;
      //   1430: aastore
      //   1431: invokevirtual 283	android/content/Context:getString	(I[Ljava/lang/Object;)Ljava/lang/String;
      //   1434: astore 10
      //   1436: new 285	android/app/Notification$Builder
      //   1439: dup
      //   1440: aload 9
      //   1442: invokespecial 288	android/app/Notification$Builder:<init>	(Landroid/content/Context;)V
      //   1445: ldc_w 289
      //   1448: invokevirtual 293	android/app/Notification$Builder:setSmallIcon	(I)Landroid/app/Notification$Builder;
      //   1451: lconst_0
      //   1452: invokevirtual 297	android/app/Notification$Builder:setWhen	(J)Landroid/app/Notification$Builder;
      //   1455: iconst_1
      //   1456: invokevirtual 301	android/app/Notification$Builder:setOngoing	(Z)Landroid/app/Notification$Builder;
      //   1459: aload 10
      //   1461: invokevirtual 305	android/app/Notification$Builder:setTicker	(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;
      //   1464: aload_0
      //   1465: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1468: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   1471: ldc_w 306
      //   1474: invokevirtual 310	android/content/Context:getColor	(I)I
      //   1477: invokevirtual 313	android/app/Notification$Builder:setColor	(I)Landroid/app/Notification$Builder;
      //   1480: aload 10
      //   1482: invokevirtual 316	android/app/Notification$Builder:setContentTitle	(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;
      //   1485: aload_0
      //   1486: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1489: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   1492: ldc_w 317
      //   1495: invokevirtual 321	android/content/Context:getText	(I)Ljava/lang/CharSequence;
      //   1498: invokevirtual 324	android/app/Notification$Builder:setContentText	(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;
      //   1501: aload_0
      //   1502: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1505: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   1508: iconst_0
      //   1509: aload_1
      //   1510: getfield 328	com/android/server/am/ActivityRecord:intent	Landroid/content/Intent;
      //   1513: ldc_w 329
      //   1516: aconst_null
      //   1517: new 331	android/os/UserHandle
      //   1520: dup
      //   1521: aload_1
      //   1522: getfield 334	com/android/server/am/ActivityRecord:userId	I
      //   1525: invokespecial 337	android/os/UserHandle:<init>	(I)V
      //   1528: invokestatic 343	android/app/PendingIntent:getActivityAsUser	(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/Bundle;Landroid/os/UserHandle;)Landroid/app/PendingIntent;
      //   1531: invokevirtual 347	android/app/Notification$Builder:setContentIntent	(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;
      //   1534: invokevirtual 351	android/app/Notification$Builder:build	()Landroid/app/Notification;
      //   1537: astore 9
      //   1539: aload 8
      //   1541: ldc_w 353
      //   1544: ldc_w 353
      //   1547: aconst_null
      //   1548: ldc_w 266
      //   1551: aload 9
      //   1553: iconst_1
      //   1554: newarray <illegal type>
      //   1556: aload_1
      //   1557: getfield 334	com/android/server/am/ActivityRecord:userId	I
      //   1560: invokeinterface 359 8 0
      //   1565: return
      //   1566: astore_1
      //   1567: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   1570: ldc_w 361
      //   1573: aload_1
      //   1574: invokestatic 364	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1577: pop
      //   1578: return
      //   1579: astore_1
      //   1580: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   1583: ldc_w 366
      //   1586: aload_1
      //   1587: invokestatic 364	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1590: pop
      //   1591: return
      //   1592: invokestatic 252	android/app/NotificationManager:getService	()Landroid/app/INotificationManager;
      //   1595: astore 8
      //   1597: aload 8
      //   1599: ifnonnull +4 -> 1603
      //   1602: return
      //   1603: aload 8
      //   1605: ldc_w 353
      //   1608: aconst_null
      //   1609: ldc_w 266
      //   1612: aload_1
      //   1613: getfield 54	android/os/Message:arg1	I
      //   1616: invokeinterface 370 5 0
      //   1621: return
      //   1622: astore_1
      //   1623: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   1626: ldc_w 372
      //   1629: aload_1
      //   1630: invokestatic 364	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1633: pop
      //   1634: return
      //   1635: aload_0
      //   1636: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1639: astore_1
      //   1640: aload_1
      //   1641: monitorenter
      //   1642: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   1645: aload_0
      //   1646: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1649: iconst_1
      //   1650: invokevirtual 375	com/android/server/am/ActivityManagerService:checkExcessivePowerUsageLocked	(Z)V
      //   1653: aload_0
      //   1654: bipush 27
      //   1656: invokevirtual 378	com/android/server/am/ActivityManagerService$MainHandler:removeMessages	(I)V
      //   1659: aload_0
      //   1660: aload_0
      //   1661: bipush 27
      //   1663: invokevirtual 82	com/android/server/am/ActivityManagerService$MainHandler:obtainMessage	(I)Landroid/os/Message;
      //   1666: getstatic 381	com/android/server/am/ActivityManagerService:POWER_CHECK_DELAY	I
      //   1669: i2l
      //   1670: invokevirtual 88	com/android/server/am/ActivityManagerService$MainHandler:sendMessageDelayed	(Landroid/os/Message;J)Z
      //   1673: pop
      //   1674: aload_1
      //   1675: monitorexit
      //   1676: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1679: return
      //   1680: astore 8
      //   1682: aload_1
      //   1683: monitorexit
      //   1684: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   1687: aload 8
      //   1689: athrow
      //   1690: aload_0
      //   1691: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1694: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1697: aload_1
      //   1698: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1701: return
      //   1702: aload_0
      //   1703: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1706: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1709: aload_1
      //   1710: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1713: return
      //   1714: aload_0
      //   1715: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1718: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1721: aload_1
      //   1722: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1725: return
      //   1726: aload_0
      //   1727: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1730: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1733: aload_1
      //   1734: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1737: return
      //   1738: aload_0
      //   1739: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1742: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1745: aload_1
      //   1746: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1749: return
      //   1750: aload_0
      //   1751: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1754: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1757: aload_1
      //   1758: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1761: return
      //   1762: aload_0
      //   1763: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1766: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1769: aload_1
      //   1770: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1773: return
      //   1774: aload_0
      //   1775: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1778: getfield 385	com/android/server/am/ActivityManagerService:mOHPD	Lcom/android/server/am/OnePlusHighPowerDetector;
      //   1781: aload_1
      //   1782: invokevirtual 389	com/android/server/am/OnePlusHighPowerDetector:handleMessage	(Landroid/os/Message;)V
      //   1785: return
      //   1786: new 9	com/android/server/am/ActivityManagerService$MainHandler$1
      //   1789: dup
      //   1790: aload_0
      //   1791: aload_1
      //   1792: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1795: checkcast 106	java/util/ArrayList
      //   1798: invokespecial 392	com/android/server/am/ActivityManagerService$MainHandler$1:<init>	(Lcom/android/server/am/ActivityManagerService$MainHandler;Ljava/util/ArrayList;)V
      //   1801: invokevirtual 397	java/lang/Thread:start	()V
      //   1804: return
      //   1805: aload_0
      //   1806: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1809: getfield 401	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
      //   1812: aload_1
      //   1813: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1816: checkcast 403	com/android/server/am/UserState
      //   1819: aload_1
      //   1820: getfield 54	android/os/Message:arg1	I
      //   1823: aload_1
      //   1824: getfield 227	android/os/Message:arg2	I
      //   1827: invokevirtual 409	com/android/server/am/UserController:dispatchUserSwitch	(Lcom/android/server/am/UserState;II)V
      //   1830: return
      //   1831: aload_0
      //   1832: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1835: getfield 401	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
      //   1838: aload_1
      //   1839: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1842: checkcast 403	com/android/server/am/UserState
      //   1845: aload_1
      //   1846: getfield 54	android/os/Message:arg1	I
      //   1849: aload_1
      //   1850: getfield 227	android/os/Message:arg2	I
      //   1853: invokevirtual 412	com/android/server/am/UserController:continueUserSwitch	(Lcom/android/server/am/UserState;II)V
      //   1856: return
      //   1857: aload_0
      //   1858: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1861: getfield 401	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
      //   1864: aload_1
      //   1865: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1868: checkcast 403	com/android/server/am/UserState
      //   1871: aload_1
      //   1872: getfield 54	android/os/Message:arg1	I
      //   1875: aload_1
      //   1876: getfield 227	android/os/Message:arg2	I
      //   1879: invokevirtual 415	com/android/server/am/UserController:timeoutUserSwitch	(Lcom/android/server/am/UserState;II)V
      //   1882: return
      //   1883: aload_1
      //   1884: getfield 54	android/os/Message:arg1	I
      //   1887: ifeq +87 -> 1974
      //   1890: iconst_1
      //   1891: istore 5
      //   1893: aload_0
      //   1894: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1897: getfield 419	com/android/server/am/ActivityManagerService:mUpdateLock	Landroid/os/UpdateLock;
      //   1900: invokevirtual 425	android/os/UpdateLock:isHeld	()Z
      //   1903: iload 5
      //   1905: if_icmpeq -1425 -> 480
      //   1908: getstatic 430	com/android/server/am/ActivityManagerDebugConfig:DEBUG_IMMERSIVE	Z
      //   1911: ifeq +47 -> 1958
      //   1914: invokestatic 433	com/android/server/am/ActivityManagerService:-get2	()Ljava/lang/String;
      //   1917: new 139	java/lang/StringBuilder
      //   1920: dup
      //   1921: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   1924: ldc_w 435
      //   1927: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   1930: iload 5
      //   1932: invokevirtual 438	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
      //   1935: ldc_w 440
      //   1938: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   1941: aload_1
      //   1942: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   1945: checkcast 254	com/android/server/am/ActivityRecord
      //   1948: invokevirtual 443	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      //   1951: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   1954: invokestatic 446	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
      //   1957: pop
      //   1958: iload 5
      //   1960: ifeq +20 -> 1980
      //   1963: aload_0
      //   1964: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1967: getfield 419	com/android/server/am/ActivityManagerService:mUpdateLock	Landroid/os/UpdateLock;
      //   1970: invokevirtual 449	android/os/UpdateLock:acquire	()V
      //   1973: return
      //   1974: iconst_0
      //   1975: istore 5
      //   1977: goto -84 -> 1893
      //   1980: aload_0
      //   1981: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1984: getfield 419	com/android/server/am/ActivityManagerService:mUpdateLock	Landroid/os/UpdateLock;
      //   1987: invokevirtual 452	android/os/UpdateLock:release	()V
      //   1990: return
      //   1991: aload_0
      //   1992: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   1995: invokestatic 456	com/android/server/am/ActivityManagerService:-wrap20	(Lcom/android/server/am/ActivityManagerService;)V
      //   1998: return
      //   1999: aload_0
      //   2000: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2003: astore_1
      //   2004: aload_1
      //   2005: monitorenter
      //   2006: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2009: aload_0
      //   2010: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2013: invokestatic 462	android/os/SystemClock:uptimeMillis	()J
      //   2016: iconst_1
      //   2017: iconst_0
      //   2018: invokevirtual 466	com/android/server/am/ActivityManagerService:requestPssAllProcsLocked	(JZZ)V
      //   2021: aload_1
      //   2022: monitorexit
      //   2023: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2026: return
      //   2027: astore 8
      //   2029: aload_1
      //   2030: monitorexit
      //   2031: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2034: aload 8
      //   2036: athrow
      //   2037: aload_0
      //   2038: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2041: astore_1
      //   2042: aload_1
      //   2043: monitorenter
      //   2044: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2047: aload_0
      //   2048: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2051: getfield 401	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
      //   2054: invokevirtual 469	com/android/server/am/UserController:startProfilesLocked	()V
      //   2057: aload_1
      //   2058: monitorexit
      //   2059: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2062: return
      //   2063: astore 8
      //   2065: aload_1
      //   2066: monitorexit
      //   2067: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2070: aload 8
      //   2072: athrow
      //   2073: aload_0
      //   2074: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2077: astore 8
      //   2079: aload 8
      //   2081: monitorenter
      //   2082: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2085: aload_0
      //   2086: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2089: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   2092: invokevirtual 110	java/util/ArrayList:size	()I
      //   2095: iconst_1
      //   2096: isub
      //   2097: istore_2
      //   2098: iload_2
      //   2099: iflt +118 -> 2217
      //   2102: aload_0
      //   2103: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2106: getfield 104	com/android/server/am/ActivityManagerService:mLruProcesses	Ljava/util/ArrayList;
      //   2109: iload_2
      //   2110: invokevirtual 114	java/util/ArrayList:get	(I)Ljava/lang/Object;
      //   2113: checkcast 94	com/android/server/am/ProcessRecord
      //   2116: astore 9
      //   2118: aload 9
      //   2120: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   2123: astore 10
      //   2125: aload 10
      //   2127: ifnull +29 -> 2156
      //   2130: aload 9
      //   2132: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   2135: astore 10
      //   2137: aload_1
      //   2138: getfield 54	android/os/Message:arg1	I
      //   2141: ifne +22 -> 2163
      //   2144: iconst_0
      //   2145: istore 5
      //   2147: aload 10
      //   2149: iload 5
      //   2151: invokeinterface 472 2 0
      //   2156: iload_2
      //   2157: iconst_1
      //   2158: isub
      //   2159: istore_2
      //   2160: goto -62 -> 2098
      //   2163: iconst_1
      //   2164: istore 5
      //   2166: goto -19 -> 2147
      //   2169: astore 10
      //   2171: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   2174: new 139	java/lang/StringBuilder
      //   2177: dup
      //   2178: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   2181: ldc_w 474
      //   2184: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   2187: aload 9
      //   2189: getfield 151	com/android/server/am/ProcessRecord:info	Landroid/content/pm/ApplicationInfo;
      //   2192: getfield 157	android/content/pm/ApplicationInfo:processName	Ljava/lang/String;
      //   2195: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   2198: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   2201: invokestatic 166	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
      //   2204: pop
      //   2205: goto -49 -> 2156
      //   2208: astore_1
      //   2209: aload 8
      //   2211: monitorexit
      //   2212: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2215: aload_1
      //   2216: athrow
      //   2217: aload 8
      //   2219: monitorexit
      //   2220: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2223: return
      //   2224: aload_0
      //   2225: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2228: getfield 478	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
      //   2231: ldc_w 479
      //   2234: aload_1
      //   2235: getfield 54	android/os/Message:arg1	I
      //   2238: invokestatic 192	java/lang/Integer:toString	(I)Ljava/lang/String;
      //   2241: aload_1
      //   2242: getfield 54	android/os/Message:arg1	I
      //   2245: invokevirtual 485	com/android/server/am/BatteryStatsService:noteEvent	(ILjava/lang/String;I)V
      //   2248: aload_0
      //   2249: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2252: getfield 489	com/android/server/am/ActivityManagerService:mSystemServiceManager	Lcom/android/server/SystemServiceManager;
      //   2255: aload_1
      //   2256: getfield 54	android/os/Message:arg1	I
      //   2259: invokevirtual 494	com/android/server/SystemServiceManager:startUser	(I)V
      //   2262: return
      //   2263: aload_1
      //   2264: getfield 54	android/os/Message:arg1	I
      //   2267: istore_2
      //   2268: aload_0
      //   2269: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2272: getfield 489	com/android/server/am/ActivityManagerService:mSystemServiceManager	Lcom/android/server/SystemServiceManager;
      //   2275: iload_2
      //   2276: invokevirtual 497	com/android/server/SystemServiceManager:unlockUser	(I)V
      //   2279: aload_0
      //   2280: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2283: astore 8
      //   2285: aload 8
      //   2287: monitorenter
      //   2288: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2291: aload_0
      //   2292: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2295: getfield 501	com/android/server/am/ActivityManagerService:mRecentTasks	Lcom/android/server/am/RecentTasks;
      //   2298: iload_2
      //   2299: invokevirtual 506	com/android/server/am/RecentTasks:loadUserRecentsLocked	(I)V
      //   2302: aload 8
      //   2304: monitorexit
      //   2305: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2308: iload_2
      //   2309: ifne +13 -> 2322
      //   2312: aload_0
      //   2313: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2316: ldc_w 507
      //   2319: invokestatic 511	com/android/server/am/ActivityManagerService:-wrap17	(Lcom/android/server/am/ActivityManagerService;I)V
      //   2322: aload_0
      //   2323: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2326: iload_2
      //   2327: invokestatic 514	com/android/server/am/ActivityManagerService:-wrap12	(Lcom/android/server/am/ActivityManagerService;I)V
      //   2330: aload_0
      //   2331: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2334: getfield 401	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
      //   2337: aload_1
      //   2338: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   2341: checkcast 403	com/android/server/am/UserState
      //   2344: invokevirtual 518	com/android/server/am/UserController:finishUserUnlocked	(Lcom/android/server/am/UserState;)V
      //   2347: return
      //   2348: astore_1
      //   2349: aload 8
      //   2351: monitorexit
      //   2352: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2355: aload_1
      //   2356: athrow
      //   2357: aload_0
      //   2358: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2361: getfield 478	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
      //   2364: sipush 16392
      //   2367: aload_1
      //   2368: getfield 227	android/os/Message:arg2	I
      //   2371: invokestatic 192	java/lang/Integer:toString	(I)Ljava/lang/String;
      //   2374: aload_1
      //   2375: getfield 227	android/os/Message:arg2	I
      //   2378: invokevirtual 485	com/android/server/am/BatteryStatsService:noteEvent	(ILjava/lang/String;I)V
      //   2381: aload_0
      //   2382: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2385: getfield 478	com/android/server/am/ActivityManagerService:mBatteryStatsService	Lcom/android/server/am/BatteryStatsService;
      //   2388: ldc_w 519
      //   2391: aload_1
      //   2392: getfield 54	android/os/Message:arg1	I
      //   2395: invokestatic 192	java/lang/Integer:toString	(I)Ljava/lang/String;
      //   2398: aload_1
      //   2399: getfield 54	android/os/Message:arg1	I
      //   2402: invokevirtual 485	com/android/server/am/BatteryStatsService:noteEvent	(ILjava/lang/String;I)V
      //   2405: aload_0
      //   2406: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2409: getfield 489	com/android/server/am/ActivityManagerService:mSystemServiceManager	Lcom/android/server/SystemServiceManager;
      //   2412: aload_1
      //   2413: getfield 54	android/os/Message:arg1	I
      //   2416: invokevirtual 522	com/android/server/SystemServiceManager:switchUser	(I)V
      //   2419: return
      //   2420: aload_0
      //   2421: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2424: astore 8
      //   2426: aload 8
      //   2428: monitorenter
      //   2429: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2432: aload_1
      //   2433: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   2436: checkcast 524	android/os/IBinder
      //   2439: invokestatic 528	com/android/server/am/ActivityRecord:forTokenLocked	(Landroid/os/IBinder;)Lcom/android/server/am/ActivityRecord;
      //   2442: astore_1
      //   2443: aload_1
      //   2444: ifnull +40 -> 2484
      //   2447: aload_1
      //   2448: getfield 258	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
      //   2451: ifnull +33 -> 2484
      //   2454: aload_1
      //   2455: getfield 258	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
      //   2458: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   2461: astore 9
      //   2463: aload 9
      //   2465: ifnull +19 -> 2484
      //   2468: aload_1
      //   2469: getfield 258	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
      //   2472: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   2475: aload_1
      //   2476: getfield 532	com/android/server/am/ActivityRecord:appToken	Landroid/view/IApplicationToken$Stub;
      //   2479: invokeinterface 536 2 0
      //   2484: aload 8
      //   2486: monitorexit
      //   2487: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2490: return
      //   2491: astore_1
      //   2492: aload 8
      //   2494: monitorexit
      //   2495: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2498: aload_1
      //   2499: athrow
      //   2500: aload_1
      //   2501: getfield 54	android/os/Message:arg1	I
      //   2504: ifeq +25 -> 2529
      //   2507: ldc2_w 537
      //   2510: ldc_w 540
      //   2513: invokestatic 546	android/os/Trace:traceBegin	(JLjava/lang/String;)V
      //   2516: aload_0
      //   2517: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2520: invokevirtual 549	com/android/server/am/ActivityManagerService:finishBooting	()V
      //   2523: ldc2_w 537
      //   2526: invokestatic 553	android/os/Trace:traceEnd	(J)V
      //   2529: aload_1
      //   2530: getfield 227	android/os/Message:arg2	I
      //   2533: ifeq -2053 -> 480
      //   2536: aload_0
      //   2537: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2540: invokevirtual 556	com/android/server/am/ActivityManagerService:enableScreenAfterBoot	()V
      //   2543: return
      //   2544: aload_1
      //   2545: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   2548: checkcast 558	java/util/Locale
      //   2551: astore_1
      //   2552: ldc_w 560
      //   2555: invokestatic 565	android/os/ServiceManager:getService	(Ljava/lang/String;)Landroid/os/IBinder;
      //   2558: invokestatic 571	android/os/storage/IMountService$Stub:asInterface	(Landroid/os/IBinder;)Landroid/os/storage/IMountService;
      //   2561: astore 8
      //   2563: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   2566: new 139	java/lang/StringBuilder
      //   2569: dup
      //   2570: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   2573: ldc_w 573
      //   2576: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   2579: aload_1
      //   2580: invokevirtual 576	java/util/Locale:toLanguageTag	()Ljava/lang/String;
      //   2583: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   2586: ldc_w 578
      //   2589: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   2592: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   2595: invokestatic 581	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
      //   2598: pop
      //   2599: aload 8
      //   2601: ldc_w 583
      //   2604: aload_1
      //   2605: invokevirtual 576	java/util/Locale:toLanguageTag	()Ljava/lang/String;
      //   2608: invokeinterface 589 3 0
      //   2613: return
      //   2614: astore_1
      //   2615: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   2618: ldc_w 591
      //   2621: aload_1
      //   2622: invokestatic 594	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   2625: pop
      //   2626: return
      //   2627: aload_0
      //   2628: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2631: astore_1
      //   2632: aload_1
      //   2633: monitorenter
      //   2634: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2637: aload_0
      //   2638: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2641: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2644: invokevirtual 603	android/os/RemoteCallbackList:beginBroadcast	()I
      //   2647: istore_2
      //   2648: iload_2
      //   2649: iconst_1
      //   2650: isub
      //   2651: istore_2
      //   2652: iload_2
      //   2653: iflt +29 -> 2682
      //   2656: aload_0
      //   2657: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2660: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2663: iload_2
      //   2664: invokevirtual 607	android/os/RemoteCallbackList:getBroadcastItem	(I)Landroid/os/IInterface;
      //   2667: checkcast 609	android/app/ITaskStackListener
      //   2670: invokeinterface 612 1 0
      //   2675: iload_2
      //   2676: iconst_1
      //   2677: isub
      //   2678: istore_2
      //   2679: goto -27 -> 2652
      //   2682: aload_0
      //   2683: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2686: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2689: invokevirtual 615	android/os/RemoteCallbackList:finishBroadcast	()V
      //   2692: aload_1
      //   2693: monitorexit
      //   2694: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2697: return
      //   2698: astore 8
      //   2700: aload_1
      //   2701: monitorexit
      //   2702: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2705: aload 8
      //   2707: athrow
      //   2708: aload_0
      //   2709: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2712: astore_1
      //   2713: aload_1
      //   2714: monitorenter
      //   2715: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2718: aload_0
      //   2719: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2722: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2725: invokevirtual 603	android/os/RemoteCallbackList:beginBroadcast	()I
      //   2728: istore_2
      //   2729: iload_2
      //   2730: iconst_1
      //   2731: isub
      //   2732: istore_2
      //   2733: iload_2
      //   2734: iflt +29 -> 2763
      //   2737: aload_0
      //   2738: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2741: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2744: iload_2
      //   2745: invokevirtual 607	android/os/RemoteCallbackList:getBroadcastItem	(I)Landroid/os/IInterface;
      //   2748: checkcast 609	android/app/ITaskStackListener
      //   2751: invokeinterface 618 1 0
      //   2756: iload_2
      //   2757: iconst_1
      //   2758: isub
      //   2759: istore_2
      //   2760: goto -27 -> 2733
      //   2763: aload_0
      //   2764: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2767: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2770: invokevirtual 615	android/os/RemoteCallbackList:finishBroadcast	()V
      //   2773: aload_1
      //   2774: monitorexit
      //   2775: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2778: return
      //   2779: astore 8
      //   2781: aload_1
      //   2782: monitorexit
      //   2783: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2786: aload 8
      //   2788: athrow
      //   2789: aload_0
      //   2790: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2793: astore_1
      //   2794: aload_1
      //   2795: monitorenter
      //   2796: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2799: aload_0
      //   2800: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2803: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2806: invokevirtual 603	android/os/RemoteCallbackList:beginBroadcast	()I
      //   2809: istore_2
      //   2810: iload_2
      //   2811: iconst_1
      //   2812: isub
      //   2813: istore_2
      //   2814: iload_2
      //   2815: iflt +29 -> 2844
      //   2818: aload_0
      //   2819: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2822: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2825: iload_2
      //   2826: invokevirtual 607	android/os/RemoteCallbackList:getBroadcastItem	(I)Landroid/os/IInterface;
      //   2829: checkcast 609	android/app/ITaskStackListener
      //   2832: invokeinterface 621 1 0
      //   2837: iload_2
      //   2838: iconst_1
      //   2839: isub
      //   2840: istore_2
      //   2841: goto -27 -> 2814
      //   2844: aload_0
      //   2845: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2848: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2851: invokevirtual 615	android/os/RemoteCallbackList:finishBroadcast	()V
      //   2854: aload_1
      //   2855: monitorexit
      //   2856: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2859: return
      //   2860: astore 8
      //   2862: aload_1
      //   2863: monitorexit
      //   2864: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2867: aload 8
      //   2869: athrow
      //   2870: aload_0
      //   2871: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2874: astore_1
      //   2875: aload_1
      //   2876: monitorenter
      //   2877: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2880: aload_0
      //   2881: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2884: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2887: invokevirtual 603	android/os/RemoteCallbackList:beginBroadcast	()I
      //   2890: istore_2
      //   2891: iload_2
      //   2892: iconst_1
      //   2893: isub
      //   2894: istore_2
      //   2895: iload_2
      //   2896: iflt +29 -> 2925
      //   2899: aload_0
      //   2900: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2903: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2906: iload_2
      //   2907: invokevirtual 607	android/os/RemoteCallbackList:getBroadcastItem	(I)Landroid/os/IInterface;
      //   2910: checkcast 609	android/app/ITaskStackListener
      //   2913: invokeinterface 624 1 0
      //   2918: iload_2
      //   2919: iconst_1
      //   2920: isub
      //   2921: istore_2
      //   2922: goto -27 -> 2895
      //   2925: aload_0
      //   2926: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2929: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2932: invokevirtual 615	android/os/RemoteCallbackList:finishBroadcast	()V
      //   2935: aload_1
      //   2936: monitorexit
      //   2937: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2940: return
      //   2941: astore 8
      //   2943: aload_1
      //   2944: monitorexit
      //   2945: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   2948: aload 8
      //   2950: athrow
      //   2951: aload_0
      //   2952: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2955: astore 8
      //   2957: aload 8
      //   2959: monitorenter
      //   2960: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   2963: aload_0
      //   2964: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2967: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2970: invokevirtual 603	android/os/RemoteCallbackList:beginBroadcast	()I
      //   2973: istore_2
      //   2974: iload_2
      //   2975: iconst_1
      //   2976: isub
      //   2977: istore_2
      //   2978: iload_2
      //   2979: iflt +40 -> 3019
      //   2982: aload_0
      //   2983: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   2986: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   2989: iload_2
      //   2990: invokevirtual 607	android/os/RemoteCallbackList:getBroadcastItem	(I)Landroid/os/IInterface;
      //   2993: checkcast 609	android/app/ITaskStackListener
      //   2996: aload_1
      //   2997: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   3000: checkcast 626	java/lang/String
      //   3003: aload_1
      //   3004: getfield 54	android/os/Message:arg1	I
      //   3007: invokeinterface 630 3 0
      //   3012: iload_2
      //   3013: iconst_1
      //   3014: isub
      //   3015: istore_2
      //   3016: goto -38 -> 2978
      //   3019: aload_0
      //   3020: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3023: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   3026: invokevirtual 615	android/os/RemoteCallbackList:finishBroadcast	()V
      //   3029: aload 8
      //   3031: monitorexit
      //   3032: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3035: return
      //   3036: astore_1
      //   3037: aload 8
      //   3039: monitorexit
      //   3040: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3043: aload_1
      //   3044: athrow
      //   3045: aload_0
      //   3046: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3049: astore_1
      //   3050: aload_1
      //   3051: monitorenter
      //   3052: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   3055: aload_0
      //   3056: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3059: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   3062: invokevirtual 603	android/os/RemoteCallbackList:beginBroadcast	()I
      //   3065: istore_2
      //   3066: iload_2
      //   3067: iconst_1
      //   3068: isub
      //   3069: istore_2
      //   3070: iload_2
      //   3071: iflt +29 -> 3100
      //   3074: aload_0
      //   3075: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3078: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   3081: iload_2
      //   3082: invokevirtual 607	android/os/RemoteCallbackList:getBroadcastItem	(I)Landroid/os/IInterface;
      //   3085: checkcast 609	android/app/ITaskStackListener
      //   3088: invokeinterface 633 1 0
      //   3093: iload_2
      //   3094: iconst_1
      //   3095: isub
      //   3096: istore_2
      //   3097: goto -27 -> 3070
      //   3100: aload_0
      //   3101: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3104: invokestatic 598	com/android/server/am/ActivityManagerService:-get16	(Lcom/android/server/am/ActivityManagerService;)Landroid/os/RemoteCallbackList;
      //   3107: invokevirtual 615	android/os/RemoteCallbackList:finishBroadcast	()V
      //   3110: aload_1
      //   3111: monitorexit
      //   3112: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3115: return
      //   3116: astore 8
      //   3118: aload_1
      //   3119: monitorexit
      //   3120: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3123: aload 8
      //   3125: athrow
      //   3126: aload_1
      //   3127: getfield 54	android/os/Message:arg1	I
      //   3130: istore_3
      //   3131: aload_1
      //   3132: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   3135: checkcast 635	[B
      //   3138: astore 8
      //   3140: aload_0
      //   3141: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3144: getfield 639	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
      //   3147: astore_1
      //   3148: aload_1
      //   3149: monitorenter
      //   3150: iconst_0
      //   3151: istore_2
      //   3152: iload_2
      //   3153: aload_0
      //   3154: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3157: getfield 639	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
      //   3160: invokevirtual 642	android/util/SparseArray:size	()I
      //   3163: if_icmpge +51 -> 3214
      //   3166: aload_0
      //   3167: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3170: getfield 639	com/android/server/am/ActivityManagerService:mPidsSelfLocked	Landroid/util/SparseArray;
      //   3173: iload_2
      //   3174: invokevirtual 645	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
      //   3177: checkcast 94	com/android/server/am/ProcessRecord
      //   3180: astore 9
      //   3182: aload 9
      //   3184: getfield 121	com/android/server/am/ProcessRecord:uid	I
      //   3187: istore 4
      //   3189: iload 4
      //   3191: iload_3
      //   3192: if_icmpne +15 -> 3207
      //   3195: aload 9
      //   3197: getfield 118	com/android/server/am/ProcessRecord:thread	Landroid/app/IApplicationThread;
      //   3200: aload 8
      //   3202: invokeinterface 649 2 0
      //   3207: iload_2
      //   3208: iconst_1
      //   3209: iadd
      //   3210: istore_2
      //   3211: goto -59 -> 3152
      //   3214: aload_1
      //   3215: monitorexit
      //   3216: return
      //   3217: astore 8
      //   3219: aload_1
      //   3220: monitorexit
      //   3221: aload 8
      //   3223: athrow
      //   3224: aload_0
      //   3225: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3228: astore 10
      //   3230: aload 10
      //   3232: monitorenter
      //   3233: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   3236: aload_0
      //   3237: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3240: getfield 652	com/android/server/am/ActivityManagerService:mMemWatchDumpProcName	Ljava/lang/String;
      //   3243: astore 9
      //   3245: aload_0
      //   3246: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3249: getfield 655	com/android/server/am/ActivityManagerService:mMemWatchDumpUid	I
      //   3252: istore_2
      //   3253: aload_0
      //   3254: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3257: getfield 659	com/android/server/am/ActivityManagerService:mMemWatchProcesses	Lcom/android/internal/app/ProcessMap;
      //   3260: aload 9
      //   3262: iload_2
      //   3263: invokevirtual 664	com/android/internal/app/ProcessMap:get	(Ljava/lang/String;I)Ljava/lang/Object;
      //   3266: checkcast 666	android/util/Pair
      //   3269: astore 8
      //   3271: aload 8
      //   3273: astore_1
      //   3274: aload 8
      //   3276: ifnonnull +20 -> 3296
      //   3279: aload_0
      //   3280: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3283: getfield 659	com/android/server/am/ActivityManagerService:mMemWatchProcesses	Lcom/android/internal/app/ProcessMap;
      //   3286: aload 9
      //   3288: iconst_0
      //   3289: invokevirtual 664	com/android/internal/app/ProcessMap:get	(Ljava/lang/String;I)Ljava/lang/Object;
      //   3292: checkcast 666	android/util/Pair
      //   3295: astore_1
      //   3296: aload_1
      //   3297: ifnull +35 -> 3332
      //   3300: aload_1
      //   3301: getfield 669	android/util/Pair:first	Ljava/lang/Object;
      //   3304: checkcast 671	java/lang/Long
      //   3307: invokevirtual 674	java/lang/Long:longValue	()J
      //   3310: lstore 6
      //   3312: aload_1
      //   3313: getfield 677	android/util/Pair:second	Ljava/lang/Object;
      //   3316: checkcast 626	java/lang/String
      //   3319: astore_1
      //   3320: aload 10
      //   3322: monitorexit
      //   3323: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3326: aload 9
      //   3328: ifnonnull +21 -> 3349
      //   3331: return
      //   3332: lconst_0
      //   3333: lstore 6
      //   3335: aconst_null
      //   3336: astore_1
      //   3337: goto -17 -> 3320
      //   3340: astore_1
      //   3341: aload 10
      //   3343: monitorexit
      //   3344: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3347: aload_1
      //   3348: athrow
      //   3349: getstatic 680	com/android/server/am/ActivityManagerDebugConfig:DEBUG_PSS	Z
      //   3352: ifeq +41 -> 3393
      //   3355: invokestatic 683	com/android/server/am/ActivityManagerService:-get3	()Ljava/lang/String;
      //   3358: new 139	java/lang/StringBuilder
      //   3361: dup
      //   3362: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   3365: ldc_w 685
      //   3368: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   3371: aload 9
      //   3373: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   3376: ldc_w 687
      //   3379: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   3382: iload_2
      //   3383: invokevirtual 690	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
      //   3386: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   3389: invokestatic 446	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
      //   3392: pop
      //   3393: invokestatic 252	android/app/NotificationManager:getService	()Landroid/app/INotificationManager;
      //   3396: astore 8
      //   3398: aload 8
      //   3400: ifnonnull +4 -> 3404
      //   3403: return
      //   3404: aload_0
      //   3405: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3408: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   3411: ldc_w 691
      //   3414: iconst_1
      //   3415: anewarray 268	java/lang/Object
      //   3418: dup
      //   3419: iconst_0
      //   3420: aload 9
      //   3422: aastore
      //   3423: invokevirtual 283	android/content/Context:getString	(I[Ljava/lang/Object;)Ljava/lang/String;
      //   3426: astore 10
      //   3428: new 693	android/content/Intent
      //   3431: dup
      //   3432: invokespecial 694	android/content/Intent:<init>	()V
      //   3435: astore 11
      //   3437: aload 11
      //   3439: ldc_w 696
      //   3442: invokevirtual 700	android/content/Intent:setAction	(Ljava/lang/String;)Landroid/content/Intent;
      //   3445: pop
      //   3446: new 693	android/content/Intent
      //   3449: dup
      //   3450: invokespecial 694	android/content/Intent:<init>	()V
      //   3453: astore 12
      //   3455: aload 12
      //   3457: ldc_w 353
      //   3460: ldc_w 702
      //   3463: invokevirtual 707	java/lang/Class:getName	()Ljava/lang/String;
      //   3466: invokevirtual 711	android/content/Intent:setClassName	(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
      //   3469: pop
      //   3470: aload 12
      //   3472: ldc_w 713
      //   3475: aload 9
      //   3477: invokevirtual 716	android/content/Intent:putExtra	(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
      //   3480: pop
      //   3481: aload 12
      //   3483: ldc_w 717
      //   3486: lload 6
      //   3488: invokevirtual 720	android/content/Intent:putExtra	(Ljava/lang/String;J)Landroid/content/Intent;
      //   3491: pop
      //   3492: aload_1
      //   3493: ifnull +13 -> 3506
      //   3496: aload 12
      //   3498: ldc_w 722
      //   3501: aload_1
      //   3502: invokevirtual 716	android/content/Intent:putExtra	(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
      //   3505: pop
      //   3506: iload_2
      //   3507: invokestatic 725	android/os/UserHandle:getUserId	(I)I
      //   3510: istore_2
      //   3511: new 285	android/app/Notification$Builder
      //   3514: dup
      //   3515: aload_0
      //   3516: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3519: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   3522: invokespecial 288	android/app/Notification$Builder:<init>	(Landroid/content/Context;)V
      //   3525: ldc_w 289
      //   3528: invokevirtual 293	android/app/Notification$Builder:setSmallIcon	(I)Landroid/app/Notification$Builder;
      //   3531: lconst_0
      //   3532: invokevirtual 297	android/app/Notification$Builder:setWhen	(J)Landroid/app/Notification$Builder;
      //   3535: iconst_1
      //   3536: invokevirtual 301	android/app/Notification$Builder:setOngoing	(Z)Landroid/app/Notification$Builder;
      //   3539: iconst_1
      //   3540: invokevirtual 728	android/app/Notification$Builder:setAutoCancel	(Z)Landroid/app/Notification$Builder;
      //   3543: aload 10
      //   3545: invokevirtual 305	android/app/Notification$Builder:setTicker	(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;
      //   3548: aload_0
      //   3549: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3552: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   3555: ldc_w 306
      //   3558: invokevirtual 310	android/content/Context:getColor	(I)I
      //   3561: invokevirtual 313	android/app/Notification$Builder:setColor	(I)Landroid/app/Notification$Builder;
      //   3564: aload 10
      //   3566: invokevirtual 316	android/app/Notification$Builder:setContentTitle	(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;
      //   3569: aload_0
      //   3570: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3573: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   3576: ldc_w 729
      //   3579: invokevirtual 321	android/content/Context:getText	(I)Ljava/lang/CharSequence;
      //   3582: invokevirtual 324	android/app/Notification$Builder:setContentText	(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;
      //   3585: aload_0
      //   3586: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3589: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   3592: iconst_0
      //   3593: aload 12
      //   3595: ldc_w 329
      //   3598: aconst_null
      //   3599: new 331	android/os/UserHandle
      //   3602: dup
      //   3603: iload_2
      //   3604: invokespecial 337	android/os/UserHandle:<init>	(I)V
      //   3607: invokestatic 343	android/app/PendingIntent:getActivityAsUser	(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/Bundle;Landroid/os/UserHandle;)Landroid/app/PendingIntent;
      //   3610: invokevirtual 347	android/app/Notification$Builder:setContentIntent	(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;
      //   3613: aload_0
      //   3614: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3617: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   3620: iconst_0
      //   3621: aload 11
      //   3623: iconst_0
      //   3624: getstatic 733	android/os/UserHandle:SYSTEM	Landroid/os/UserHandle;
      //   3627: invokestatic 737	android/app/PendingIntent:getBroadcastAsUser	(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/UserHandle;)Landroid/app/PendingIntent;
      //   3630: invokevirtual 740	android/app/Notification$Builder:setDeleteIntent	(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;
      //   3633: invokevirtual 351	android/app/Notification$Builder:build	()Landroid/app/Notification;
      //   3636: astore_1
      //   3637: aload 8
      //   3639: ldc_w 353
      //   3642: ldc_w 353
      //   3645: aconst_null
      //   3646: ldc_w 691
      //   3649: aload_1
      //   3650: iconst_1
      //   3651: newarray <illegal type>
      //   3653: iload_2
      //   3654: invokeinterface 359 8 0
      //   3659: return
      //   3660: astore_1
      //   3661: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   3664: ldc_w 742
      //   3667: aload_1
      //   3668: invokestatic 364	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   3671: pop
      //   3672: return
      //   3673: aload_0
      //   3674: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3677: invokestatic 748	android/app/ActivityThread:currentActivityThread	()Landroid/app/ActivityThread;
      //   3680: invokevirtual 752	android/app/ActivityThread:getApplicationThread	()Landroid/app/ActivityThread$ApplicationThread;
      //   3683: getstatic 755	com/android/internal/app/DumpHeapActivity:JAVA_URI	Landroid/net/Uri;
      //   3686: iconst_3
      //   3687: invokestatic 758	android/os/UserHandle:myUserId	()I
      //   3690: invokevirtual 762	com/android/server/am/ActivityManagerService:revokeUriPermission	(Landroid/app/IApplicationThread;Landroid/net/Uri;II)V
      //   3693: aload_0
      //   3694: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3697: astore_1
      //   3698: aload_1
      //   3699: monitorenter
      //   3700: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   3703: aload_0
      //   3704: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3707: aconst_null
      //   3708: putfield 765	com/android/server/am/ActivityManagerService:mMemWatchDumpFile	Ljava/lang/String;
      //   3711: aload_0
      //   3712: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3715: aconst_null
      //   3716: putfield 652	com/android/server/am/ActivityManagerService:mMemWatchDumpProcName	Ljava/lang/String;
      //   3719: aload_0
      //   3720: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3723: iconst_m1
      //   3724: putfield 768	com/android/server/am/ActivityManagerService:mMemWatchDumpPid	I
      //   3727: aload_0
      //   3728: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3731: iconst_m1
      //   3732: putfield 655	com/android/server/am/ActivityManagerService:mMemWatchDumpUid	I
      //   3735: aload_1
      //   3736: monitorexit
      //   3737: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3740: return
      //   3741: astore 8
      //   3743: aload_1
      //   3744: monitorexit
      //   3745: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3748: aload 8
      //   3750: athrow
      //   3751: aload_0
      //   3752: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3755: getfield 401	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
      //   3758: aload_1
      //   3759: getfield 54	android/os/Message:arg1	I
      //   3762: invokevirtual 771	com/android/server/am/UserController:dispatchForegroundProfileChanged	(I)V
      //   3765: return
      //   3766: aload_1
      //   3767: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   3770: checkcast 773	com/android/server/am/AppTimeTracker
      //   3773: aload_0
      //   3774: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3777: getfield 39	com/android/server/am/ActivityManagerService:mContext	Landroid/content/Context;
      //   3780: invokevirtual 776	com/android/server/am/AppTimeTracker:deliverResult	(Landroid/content/Context;)V
      //   3783: return
      //   3784: aload_0
      //   3785: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3788: getfield 401	com/android/server/am/ActivityManagerService:mUserController	Lcom/android/server/am/UserController;
      //   3791: aload_1
      //   3792: getfield 54	android/os/Message:arg1	I
      //   3795: invokevirtual 779	com/android/server/am/UserController:dispatchUserSwitchComplete	(I)V
      //   3798: return
      //   3799: aload_1
      //   3800: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   3803: checkcast 781	android/app/IUiAutomationConnection
      //   3806: astore_1
      //   3807: aload_1
      //   3808: invokeinterface 784 1 0
      //   3813: aload_0
      //   3814: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3817: iconst_0
      //   3818: invokestatic 788	com/android/server/am/ActivityManagerService:-set5	(Lcom/android/server/am/ActivityManagerService;Z)Z
      //   3821: pop
      //   3822: return
      //   3823: astore_1
      //   3824: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   3827: ldc_w 790
      //   3830: invokestatic 166	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
      //   3833: pop
      //   3834: goto -21 -> 3813
      //   3837: ldc2_w 537
      //   3840: ldc_w 792
      //   3843: invokestatic 546	android/os/Trace:traceBegin	(JLjava/lang/String;)V
      //   3846: aload_0
      //   3847: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3850: astore_1
      //   3851: aload_1
      //   3852: monitorenter
      //   3853: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   3856: aload_0
      //   3857: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3860: invokestatic 796	com/android/server/am/ActivityManagerService:-get9	(Lcom/android/server/am/ActivityManagerService;)Z
      //   3863: ifeq +43 -> 3906
      //   3866: aload_0
      //   3867: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3870: invokestatic 800	com/android/server/am/ActivityManagerService:-get6	(Lcom/android/server/am/ActivityManagerService;)J
      //   3873: invokestatic 462	android/os/SystemClock:uptimeMillis	()J
      //   3876: ldc2_w 801
      //   3879: lsub
      //   3880: lcmp
      //   3881: ifge +37 -> 3918
      //   3884: invokestatic 805	com/android/server/am/ActivityManagerService:-wrap5	()I
      //   3887: pop
      //   3888: aload_0
      //   3889: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3892: iconst_0
      //   3893: invokestatic 808	com/android/server/am/ActivityManagerService:-set2	(Lcom/android/server/am/ActivityManagerService;Z)Z
      //   3896: pop
      //   3897: aload_0
      //   3898: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3901: lconst_0
      //   3902: invokestatic 812	com/android/server/am/ActivityManagerService:-set0	(Lcom/android/server/am/ActivityManagerService;J)J
      //   3905: pop2
      //   3906: aload_1
      //   3907: monitorexit
      //   3908: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3911: ldc2_w 537
      //   3914: invokestatic 553	android/os/Trace:traceEnd	(J)V
      //   3917: return
      //   3918: aload_0
      //   3919: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3922: getfield 78	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
      //   3925: bipush 58
      //   3927: invokevirtual 82	com/android/server/am/ActivityManagerService$MainHandler:obtainMessage	(I)Landroid/os/Message;
      //   3930: astore 8
      //   3932: aload_0
      //   3933: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3936: getfield 78	com/android/server/am/ActivityManagerService:mHandler	Lcom/android/server/am/ActivityManagerService$MainHandler;
      //   3939: aload 8
      //   3941: ldc2_w 801
      //   3944: invokevirtual 88	com/android/server/am/ActivityManagerService$MainHandler:sendMessageDelayed	(Landroid/os/Message;J)Z
      //   3947: pop
      //   3948: goto -42 -> 3906
      //   3951: astore 8
      //   3953: aload_1
      //   3954: monitorexit
      //   3955: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3958: aload 8
      //   3960: athrow
      //   3961: aload_0
      //   3962: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3965: invokevirtual 815	com/android/server/am/ActivityManagerService:idleUids	()V
      //   3968: return
      //   3969: aload_0
      //   3970: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3973: astore_1
      //   3974: aload_1
      //   3975: monitorenter
      //   3976: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   3979: aload_0
      //   3980: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   3983: getfield 819	com/android/server/am/ActivityManagerService:mStackSupervisor	Lcom/android/server/am/ActivityStackSupervisor;
      //   3986: invokevirtual 824	com/android/server/am/ActivityStackSupervisor:logStackState	()V
      //   3989: aload_1
      //   3990: monitorexit
      //   3991: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   3994: return
      //   3995: astore 8
      //   3997: aload_1
      //   3998: monitorexit
      //   3999: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   4002: aload 8
      //   4004: athrow
      //   4005: ldc_w 826
      //   4008: invokestatic 831	com/android/server/LocalServices:getService	(Ljava/lang/Class;)Ljava/lang/Object;
      //   4011: checkcast 826	com/android/server/vr/VrManagerInternal
      //   4014: astore 8
      //   4016: aload_1
      //   4017: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   4020: checkcast 254	com/android/server/am/ActivityRecord
      //   4023: astore 11
      //   4025: aload_0
      //   4026: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4029: astore_1
      //   4030: aload_1
      //   4031: monitorenter
      //   4032: invokestatic 64	com/android/server/am/ActivityManagerService:boostPriorityForLockedSection	()V
      //   4035: aload 11
      //   4037: getfield 835	com/android/server/am/ActivityRecord:requestedVrComponent	Landroid/content/ComponentName;
      //   4040: ifnull +150 -> 4190
      //   4043: iconst_1
      //   4044: istore 5
      //   4046: aload 11
      //   4048: getfield 835	com/android/server/am/ActivityRecord:requestedVrComponent	Landroid/content/ComponentName;
      //   4051: astore 9
      //   4053: aload 11
      //   4055: getfield 334	com/android/server/am/ActivityRecord:userId	I
      //   4058: istore_2
      //   4059: aload 11
      //   4061: getfield 838	com/android/server/am/ActivityRecord:info	Landroid/content/pm/ActivityInfo;
      //   4064: invokevirtual 844	android/content/pm/ActivityInfo:getComponentName	()Landroid/content/ComponentName;
      //   4067: astore 10
      //   4069: aload_0
      //   4070: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4073: invokestatic 847	com/android/server/am/ActivityManagerService:-get8	(Lcom/android/server/am/ActivityManagerService;)Z
      //   4076: iload 5
      //   4078: if_icmpeq +94 -> 4172
      //   4081: aload_0
      //   4082: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4085: iload 5
      //   4087: invokestatic 850	com/android/server/am/ActivityManagerService:-set1	(Lcom/android/server/am/ActivityManagerService;Z)Z
      //   4090: pop
      //   4091: aload_0
      //   4092: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4095: aload_0
      //   4096: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4099: getfield 854	com/android/server/am/ActivityManagerService:mConfiguration	Landroid/content/res/Configuration;
      //   4102: aload_0
      //   4103: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4106: invokestatic 847	com/android/server/am/ActivityManagerService:-get8	(Lcom/android/server/am/ActivityManagerService;)Z
      //   4109: invokestatic 858	com/android/server/am/ActivityManagerService:-wrap3	(Landroid/content/res/Configuration;Z)Z
      //   4112: invokestatic 861	com/android/server/am/ActivityManagerService:-set4	(Lcom/android/server/am/ActivityManagerService;Z)Z
      //   4115: pop
      //   4116: aload 11
      //   4118: getfield 258	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
      //   4121: ifnull +51 -> 4172
      //   4124: aload 11
      //   4126: getfield 258	com/android/server/am/ActivityRecord:app	Lcom/android/server/am/ProcessRecord;
      //   4129: astore 11
      //   4131: aload 11
      //   4133: getfield 864	com/android/server/am/ProcessRecord:vrThreadTid	I
      //   4136: ifle +36 -> 4172
      //   4139: aload 11
      //   4141: getfield 867	com/android/server/am/ProcessRecord:curSchedGroup	I
      //   4144: istore_3
      //   4145: iload_3
      //   4146: iconst_2
      //   4147: if_icmpne +25 -> 4172
      //   4150: aload_0
      //   4151: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4154: invokestatic 847	com/android/server/am/ActivityManagerService:-get8	(Lcom/android/server/am/ActivityManagerService;)Z
      //   4157: ifeq +39 -> 4196
      //   4160: aload 11
      //   4162: getfield 864	com/android/server/am/ProcessRecord:vrThreadTid	I
      //   4165: ldc_w 868
      //   4168: iconst_1
      //   4169: invokestatic 874	android/os/Process:setThreadScheduler	(III)V
      //   4172: aload_1
      //   4173: monitorexit
      //   4174: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   4177: aload 8
      //   4179: iload 5
      //   4181: aload 9
      //   4183: iload_2
      //   4184: aload 10
      //   4186: invokevirtual 878	com/android/server/vr/VrManagerInternal:setVrMode	(ZLandroid/content/ComponentName;ILandroid/content/ComponentName;)V
      //   4189: return
      //   4190: iconst_0
      //   4191: istore 5
      //   4193: goto -147 -> 4046
      //   4196: aload 11
      //   4198: getfield 864	com/android/server/am/ProcessRecord:vrThreadTid	I
      //   4201: iconst_0
      //   4202: iconst_0
      //   4203: invokestatic 874	android/os/Process:setThreadScheduler	(III)V
      //   4206: goto -34 -> 4172
      //   4209: astore 11
      //   4211: invokestatic 137	com/android/server/am/ActivityManagerService:-get1	()Ljava/lang/String;
      //   4214: new 139	java/lang/StringBuilder
      //   4217: dup
      //   4218: invokespecial 141	java/lang/StringBuilder:<init>	()V
      //   4221: ldc_w 880
      //   4224: invokevirtual 147	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   4227: aload 11
      //   4229: invokevirtual 443	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      //   4232: invokevirtual 160	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   4235: invokestatic 166	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
      //   4238: pop
      //   4239: goto -67 -> 4172
      //   4242: astore 8
      //   4244: aload_1
      //   4245: monitorexit
      //   4246: invokestatic 70	com/android/server/am/ActivityManagerService:resetPriorityAfterLockedSection	()V
      //   4249: aload 8
      //   4251: athrow
      //   4252: aload_1
      //   4253: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   4256: checkcast 254	com/android/server/am/ActivityRecord
      //   4259: astore 8
      //   4261: aload 8
      //   4263: ifnull +61 -> 4324
      //   4266: aload 8
      //   4268: getfield 835	com/android/server/am/ActivityRecord:requestedVrComponent	Landroid/content/ComponentName;
      //   4271: ifnull +53 -> 4324
      //   4274: iconst_1
      //   4275: istore_2
      //   4276: iload_2
      //   4277: ifeq -3797 -> 480
      //   4280: aload_0
      //   4281: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4284: astore 9
      //   4286: aload_1
      //   4287: getfield 54	android/os/Message:arg1	I
      //   4290: iconst_1
      //   4291: if_icmpne +38 -> 4329
      //   4294: iconst_1
      //   4295: istore 5
      //   4297: aload 9
      //   4299: iload 5
      //   4301: aload 8
      //   4303: getfield 835	com/android/server/am/ActivityRecord:requestedVrComponent	Landroid/content/ComponentName;
      //   4306: aload 8
      //   4308: getfield 334	com/android/server/am/ActivityRecord:userId	I
      //   4311: aload 8
      //   4313: getfield 838	com/android/server/am/ActivityRecord:info	Landroid/content/pm/ActivityInfo;
      //   4316: invokevirtual 844	android/content/pm/ActivityInfo:getComponentName	()Landroid/content/ComponentName;
      //   4319: iconst_0
      //   4320: invokestatic 884	com/android/server/am/ActivityManagerService:-wrap6	(Lcom/android/server/am/ActivityManagerService;ZLandroid/content/ComponentName;ILandroid/content/ComponentName;Z)V
      //   4323: return
      //   4324: iconst_0
      //   4325: istore_2
      //   4326: goto -50 -> 4276
      //   4329: iconst_0
      //   4330: istore 5
      //   4332: goto -35 -> 4297
      //   4335: ldc -81
      //   4337: putstatic 887	com/android/server/am/ActivityManagerService:mIgnoredAnrProcess	Ljava/lang/String;
      //   4340: return
      //   4341: aload_1
      //   4342: getfield 54	android/os/Message:arg1	I
      //   4345: istore_2
      //   4346: aload_1
      //   4347: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   4350: checkcast 626	java/lang/String
      //   4353: astore 8
      //   4355: iload_2
      //   4356: ifne +47 -> 4403
      //   4359: getstatic 891	com/android/server/am/ActivityManagerService:mActivityTrigger	Lcom/android/internal/app/ActivityTrigger;
      //   4362: ifnull +41 -> 4403
      //   4365: aload_0
      //   4366: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4369: getfield 894	com/android/server/am/ActivityManagerService:mNetLock	Ljava/lang/Object;
      //   4372: astore_1
      //   4373: aload_1
      //   4374: monitorenter
      //   4375: getstatic 891	com/android/server/am/ActivityManagerService:mActivityTrigger	Lcom/android/internal/app/ActivityTrigger;
      //   4378: iconst_2
      //   4379: aload 8
      //   4381: aload_0
      //   4382: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4385: getfield 897	com/android/server/am/ActivityManagerService:mActiveType	I
      //   4388: iconst_0
      //   4389: invokevirtual 903	com/android/internal/app/ActivityTrigger:activityMiscTrigger	(ILjava/lang/String;II)F
      //   4392: pop
      //   4393: aload_1
      //   4394: monitorexit
      //   4395: return
      //   4396: astore 8
      //   4398: aload_1
      //   4399: monitorexit
      //   4400: aload 8
      //   4402: athrow
      //   4403: getstatic 891	com/android/server/am/ActivityManagerService:mActivityTrigger	Lcom/android/internal/app/ActivityTrigger;
      //   4406: ifnull -3926 -> 480
      //   4409: getstatic 891	com/android/server/am/ActivityManagerService:mActivityTrigger	Lcom/android/internal/app/ActivityTrigger;
      //   4412: iconst_2
      //   4413: aload 8
      //   4415: iconst_m1
      //   4416: iconst_1
      //   4417: invokevirtual 903	com/android/internal/app/ActivityTrigger:activityMiscTrigger	(ILjava/lang/String;II)F
      //   4420: pop
      //   4421: return
      //   4422: aload_0
      //   4423: getfield 15	com/android/server/am/ActivityManagerService$MainHandler:this$0	Lcom/android/server/am/ActivityManagerService;
      //   4426: aload_1
      //   4427: getfield 49	android/os/Message:obj	Ljava/lang/Object;
      //   4430: checkcast 189	java/lang/Integer
      //   4433: invokevirtual 906	java/lang/Integer:intValue	()I
      //   4436: invokestatic 909	com/android/server/am/ActivityManagerService:-wrap11	(Lcom/android/server/am/ActivityManagerService;I)V
      //   4439: return
      //   4440: astore_1
      //   4441: return
      //   4442: astore 9
      //   4444: goto -1237 -> 3207
      //   4447: astore 8
      //   4449: goto -1356 -> 3093
      //   4452: astore 9
      //   4454: goto -1442 -> 3012
      //   4457: astore 8
      //   4459: goto -1541 -> 2918
      //   4462: astore 8
      //   4464: goto -1627 -> 2837
      //   4467: astore 8
      //   4469: goto -1713 -> 2756
      //   4472: astore 8
      //   4474: goto -1799 -> 2675
      //   4477: astore_1
      //   4478: goto -1994 -> 2484
      //   4481: astore_1
      //   4482: return
      //   4483: astore_1
      //   4484: return
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	4485	0	this	MainHandler
      //   638	3718	2	i	int
      //   1277	2871	3	j	int
      //   3187	6	4	k	int
      //   1891	2440	5	bool	boolean
      //   3310	177	6	l	long
      //   530	8	8	localObject1	Object
      //   570	146	8	localObject2	Object
      //   736	8	8	localObject3	Object
      //   793	49	8	localProcessRecord1	ProcessRecord
      //   862	8	8	localObject4	Object
      //   889	266	8	localObject5	Object
      //   1165	8	8	localObject6	Object
      //   1182	17	8	localProcessRecord2	ProcessRecord
      //   1209	8	8	localObject7	Object
      //   1246	8	8	localObject8	Object
      //   1260	344	8	localObject9	Object
      //   1680	8	8	localObject10	Object
      //   2027	8	8	localObject11	Object
      //   2063	8	8	localObject12	Object
      //   2077	523	8	localObject13	Object
      //   2698	8	8	localObject14	Object
      //   2779	8	8	localObject15	Object
      //   2860	8	8	localObject16	Object
      //   2941	8	8	localObject17	Object
      //   2955	83	8	localActivityManagerService	ActivityManagerService
      //   3116	8	8	localObject18	Object
      //   3138	63	8	arrayOfByte	byte[]
      //   3217	5	8	localObject19	Object
      //   3269	369	8	localObject20	Object
      //   3741	8	8	localObject21	Object
      //   3930	10	8	localMessage	Message
      //   3951	8	8	localObject22	Object
      //   3995	8	8	localObject23	Object
      //   4014	164	8	localVrManagerInternal	VrManagerInternal
      //   4242	8	8	localObject24	Object
      //   4259	121	8	localObject25	Object
      //   4396	18	8	str	String
      //   4447	1	8	localRemoteException1	RemoteException
      //   4457	1	8	localRemoteException2	RemoteException
      //   4462	1	8	localRemoteException3	RemoteException
      //   4467	1	8	localRemoteException4	RemoteException
      //   4472	1	8	localRemoteException5	RemoteException
      //   664	3	9	localIApplicationThread1	IApplicationThread
      //   698	1	9	localRemoteException6	RemoteException
      //   800	3	9	localIApplicationThread2	IApplicationThread
      //   824	1	9	localRemoteException7	RemoteException
      //   901	3397	9	localObject26	Object
      //   4442	1	9	localRemoteException8	RemoteException
      //   4452	1	9	localRemoteException9	RemoteException
      //   893	1255	10	localObject27	Object
      //   2169	1	10	localRemoteException10	RemoteException
      //   885	3312	11	localObject29	Object
      //   4209	19	11	localIllegalArgumentException	IllegalArgumentException
      //   981	2613	12	localObject30	Object
      //   988	3	13	localIApplicationThread3	IApplicationThread
      //   1019	1	13	localRemoteException11	RemoteException
      // Exception table:
      //   from	to	target	type
      //   514	524	530	finally
      //   671	691	698	android/os/RemoteException
      //   623	639	736	finally
      //   643	666	736	finally
      //   671	691	736	finally
      //   700	733	736	finally
      //   807	817	824	android/os/RemoteException
      //   759	775	862	finally
      //   779	802	862	finally
      //   807	817	862	finally
      //   826	859	862	finally
      //   995	1012	1019	android/os/RemoteException
      //   947	963	1057	finally
      //   967	990	1057	finally
      //   995	1012	1057	finally
      //   1021	1054	1057	finally
      //   1147	1159	1165	finally
      //   1191	1203	1209	finally
      //   1226	1240	1246	finally
      //   1265	1322	1329	finally
      //   1539	1565	1566	java/lang/RuntimeException
      //   1380	1539	1579	android/content/pm/PackageManager$NameNotFoundException
      //   1539	1565	1579	android/content/pm/PackageManager$NameNotFoundException
      //   1567	1578	1579	android/content/pm/PackageManager$NameNotFoundException
      //   1603	1621	1622	java/lang/RuntimeException
      //   1642	1674	1680	finally
      //   2006	2021	2027	finally
      //   2044	2057	2063	finally
      //   2130	2144	2169	android/os/RemoteException
      //   2147	2156	2169	android/os/RemoteException
      //   2082	2098	2208	finally
      //   2102	2125	2208	finally
      //   2130	2144	2208	finally
      //   2147	2156	2208	finally
      //   2171	2205	2208	finally
      //   2288	2302	2348	finally
      //   2429	2443	2491	finally
      //   2447	2463	2491	finally
      //   2468	2484	2491	finally
      //   2544	2613	2614	android/os/RemoteException
      //   2634	2648	2698	finally
      //   2656	2675	2698	finally
      //   2682	2692	2698	finally
      //   2715	2729	2779	finally
      //   2737	2756	2779	finally
      //   2763	2773	2779	finally
      //   2796	2810	2860	finally
      //   2818	2837	2860	finally
      //   2844	2854	2860	finally
      //   2877	2891	2941	finally
      //   2899	2918	2941	finally
      //   2925	2935	2941	finally
      //   2960	2974	3036	finally
      //   2982	3012	3036	finally
      //   3019	3029	3036	finally
      //   3052	3066	3116	finally
      //   3074	3093	3116	finally
      //   3100	3110	3116	finally
      //   3152	3189	3217	finally
      //   3195	3207	3217	finally
      //   3233	3271	3340	finally
      //   3279	3296	3340	finally
      //   3300	3320	3340	finally
      //   3637	3659	3660	java/lang/RuntimeException
      //   3700	3735	3741	finally
      //   3807	3813	3823	android/os/RemoteException
      //   3853	3906	3951	finally
      //   3918	3948	3951	finally
      //   3976	3989	3995	finally
      //   4150	4172	4209	java/lang/IllegalArgumentException
      //   4196	4206	4209	java/lang/IllegalArgumentException
      //   4032	4043	4242	finally
      //   4046	4145	4242	finally
      //   4150	4172	4242	finally
      //   4196	4206	4242	finally
      //   4211	4239	4242	finally
      //   4375	4393	4396	finally
      //   3637	3659	4440	android/os/RemoteException
      //   3195	3207	4442	android/os/RemoteException
      //   3074	3093	4447	android/os/RemoteException
      //   2982	3012	4452	android/os/RemoteException
      //   2899	2918	4457	android/os/RemoteException
      //   2818	2837	4462	android/os/RemoteException
      //   2737	2756	4467	android/os/RemoteException
      //   2656	2675	4472	android/os/RemoteException
      //   2468	2484	4477	android/os/RemoteException
      //   1603	1621	4481	android/os/RemoteException
      //   1539	1565	4483	android/os/RemoteException
    }
  }
  
  static class MemBinder
    extends Binder
  {
    ActivityManagerService mActivityManagerService;
    
    MemBinder(ActivityManagerService paramActivityManagerService)
    {
      this.mActivityManagerService = paramActivityManagerService;
    }
    
    protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
    {
      if (this.mActivityManagerService.checkCallingPermission("android.permission.DUMP") != 0)
      {
        paramPrintWriter.println("Permission Denial: can't dump meminfo from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " without permission " + "android.permission.DUMP");
        return;
      }
      this.mActivityManagerService.dumpApplicationMemoryUsage(paramFileDescriptor, paramPrintWriter, "  ", paramArrayOfString, false, null);
    }
  }
  
  static final class MemItem
  {
    final boolean hasActivities;
    final int id;
    final boolean isProc;
    final String label;
    final long pss;
    final String shortLabel;
    ArrayList<MemItem> subitems;
    final long swapPss;
    
    public MemItem(String paramString1, String paramString2, long paramLong1, long paramLong2, int paramInt)
    {
      this.isProc = false;
      this.label = paramString1;
      this.shortLabel = paramString2;
      this.pss = paramLong1;
      this.swapPss = paramLong2;
      this.id = paramInt;
      this.hasActivities = false;
    }
    
    public MemItem(String paramString1, String paramString2, long paramLong1, long paramLong2, int paramInt, boolean paramBoolean)
    {
      this.isProc = true;
      this.label = paramString1;
      this.shortLabel = paramString2;
      this.pss = paramLong1;
      this.swapPss = paramLong2;
      this.id = paramInt;
      this.hasActivities = paramBoolean;
    }
  }
  
  static class NeededUriGrants
    extends ArrayList<ActivityManagerService.GrantUri>
  {
    final int flags;
    final String targetPkg;
    final int targetUid;
    
    NeededUriGrants(String paramString, int paramInt1, int paramInt2)
    {
      this.targetPkg = paramString;
      this.targetUid = paramInt1;
      this.flags = paramInt2;
    }
  }
  
  public class PendingAssistExtras
    extends Binder
    implements Runnable
  {
    public final ActivityRecord activity;
    public AssistContent content = null;
    public final Bundle extras;
    public boolean haveResult = false;
    public final String hint;
    public final Intent intent;
    public final IResultReceiver receiver;
    public Bundle receiverExtras;
    public Bundle result = null;
    public AssistStructure structure = null;
    public final int userHandle;
    
    public PendingAssistExtras(ActivityRecord paramActivityRecord, Bundle paramBundle1, Intent paramIntent, String paramString, IResultReceiver paramIResultReceiver, Bundle paramBundle2, int paramInt)
    {
      this.activity = paramActivityRecord;
      this.extras = paramBundle1;
      this.intent = paramIntent;
      this.hint = paramString;
      this.receiver = paramIResultReceiver;
      this.receiverExtras = paramBundle2;
      this.userHandle = paramInt;
    }
    
    public void run()
    {
      Slog.w(ActivityManagerService.-get1(), "getAssistContextExtras failed: timeout retrieving from " + this.activity);
      try
      {
        this.haveResult = true;
        notifyAll();
        ActivityManagerService.this.pendingAssistExtrasTimedOut(this);
        return;
      }
      finally {}
    }
  }
  
  static class PermissionController
    extends IPermissionController.Stub
  {
    ActivityManagerService mActivityManagerService;
    
    PermissionController(ActivityManagerService paramActivityManagerService)
    {
      this.mActivityManagerService = paramActivityManagerService;
    }
    
    public boolean checkPermission(String paramString, int paramInt1, int paramInt2)
    {
      boolean bool = false;
      if (this.mActivityManagerService.checkPermission(paramString, paramInt1, paramInt2) == 0) {
        bool = true;
      }
      return bool;
    }
    
    public String[] getPackagesForUid(int paramInt)
    {
      return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(paramInt);
    }
    
    public boolean isRuntimePermission(String paramString)
    {
      try
      {
        int i = this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(paramString, 0).protectionLevel;
        return i == 1;
      }
      catch (PackageManager.NameNotFoundException localNameNotFoundException)
      {
        Slog.e(ActivityManagerService.-get1(), "No such permission: " + paramString, localNameNotFoundException);
      }
      return false;
    }
  }
  
  private static final class PriorityState
  {
    private int prevPriority = Integer.MIN_VALUE;
    private int regionCounter = 0;
  }
  
  static final class ProcessChangeItem
  {
    static final int CHANGE_ACTIVITIES = 1;
    static final int CHANGE_PROCESS_STATE = 2;
    int changes;
    boolean foregroundActivities;
    int pid;
    int processState;
    int uid;
  }
  
  static class ProcessInfoService
    extends IProcessInfoService.Stub
  {
    final ActivityManagerService mActivityManagerService;
    
    ProcessInfoService(ActivityManagerService paramActivityManagerService)
    {
      this.mActivityManagerService = paramActivityManagerService;
    }
    
    public void getProcessStatesAndOomScoresFromPids(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int[] paramArrayOfInt3)
    {
      this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(paramArrayOfInt1, paramArrayOfInt2, paramArrayOfInt3);
    }
    
    public void getProcessStatesFromPids(int[] paramArrayOfInt1, int[] paramArrayOfInt2)
    {
      this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(paramArrayOfInt1, paramArrayOfInt2, null);
    }
  }
  
  private final class SleepTokenImpl
    extends ActivityManagerInternal.SleepToken
  {
    private final long mAcquireTime;
    private final String mTag;
    
    public SleepTokenImpl(String paramString)
    {
      this.mTag = paramString;
      this.mAcquireTime = SystemClock.uptimeMillis();
    }
    
    public void release()
    {
      synchronized (ActivityManagerService.this)
      {
        ActivityManagerService.boostPriorityForLockedSection();
        if (ActivityManagerService.this.mSleepTokens.remove(this))
        {
          if (ActivityManagerService.mEnableNetOpts)
          {
            Object localObject1 = ActivityManagerService.this.mStackSupervisor.getLastStack();
            if (localObject1 != null)
            {
              localObject1 = ((ActivityStack)localObject1).topRunningActivityLocked();
              if (localObject1 != null) {
                ActivityManagerService.-wrap13(ActivityManagerService.this, 0, ((ActivityRecord)localObject1).processName);
              }
            }
          }
          ActivityManagerService.this.updateSleepIfNeededLocked();
        }
        ActivityManagerService.resetPriorityAfterLockedSection();
        return;
      }
    }
    
    public String toString()
    {
      return "{\"" + this.mTag + "\", acquire at " + TimeUtils.formatUptime(this.mAcquireTime) + "}";
    }
  }
  
  final class UiHandler
    extends Handler
  {
    public UiHandler()
    {
      super(null, true);
    }
    
    public void handleMessage(Message arg1)
    {
      switch (???.what)
      {
      default: 
      case 1: 
      case 2: 
      case 26: 
      case 3: 
      case 6: 
      case 14: 
      case 15: 
        do
        {
          do
          {
            return;
            ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(???);
            ActivityManagerService.this.ensureBootCompleted();
            return;
            ActivityManagerService.this.mAppErrors.handleShowAnrUi(???);
            ActivityManagerService.this.ensureBootCompleted();
            return;
            Object localObject2 = (HashMap)???.obj;
            synchronized (ActivityManagerService.this)
            {
              ActivityManagerService.boostPriorityForLockedSection();
              ProcessRecord localProcessRecord = (ProcessRecord)((HashMap)localObject2).get("app");
              if (localProcessRecord == null)
              {
                Slog.e(ActivityManagerService.-get1(), "App not found when showing strict mode dialog.");
                ActivityManagerService.resetPriorityAfterLockedSection();
                return;
              }
              if (localProcessRecord.crashDialog != null)
              {
                Slog.e(ActivityManagerService.-get1(), "App already has strict mode dialog: " + localProcessRecord);
                ActivityManagerService.resetPriorityAfterLockedSection();
                return;
              }
              localObject2 = (AppErrorResult)((HashMap)localObject2).get("result");
              if ((!ActivityManagerService.-get13(ActivityManagerService.this)) || (ActivityManagerService.-get14(ActivityManagerService.this))) {}
              while (ActivityManagerService.this.mShuttingDown)
              {
                ((AppErrorResult)localObject2).set(0);
                ActivityManagerService.resetPriorityAfterLockedSection();
                ActivityManagerService.this.ensureBootCompleted();
                return;
              }
              localObject2 = new StrictModeViolationDialog(ActivityManagerService.this.mContext, ActivityManagerService.this, (AppErrorResult)localObject2, localProcessRecord);
              ((Dialog)localObject2).show();
              localProcessRecord.crashDialog = ((Dialog)localObject2);
            }
            new FactoryErrorDialog(ActivityManagerService.this.mContext, ???.getData().getCharSequence("msg")).show();
            ActivityManagerService.this.ensureBootCompleted();
            return;
            synchronized (ActivityManagerService.this)
            {
              ActivityManagerService.boostPriorityForLockedSection();
              localObject2 = (ProcessRecord)???.obj;
              if (???.arg1 != 0) {
                if (!((ProcessRecord)localObject2).waitedForDebugger)
                {
                  ??? = new AppWaitingForDebuggerDialog(ActivityManagerService.this, ActivityManagerService.this.mContext, (ProcessRecord)localObject2);
                  ((ProcessRecord)localObject2).waitDialog = ???;
                  ((ProcessRecord)localObject2).waitedForDebugger = true;
                  ???.show();
                }
              }
              while (((ProcessRecord)localObject2).waitDialog == null)
              {
                ActivityManagerService.resetPriorityAfterLockedSection();
                return;
              }
              ((ProcessRecord)localObject2).waitDialog.dismiss();
              ((ProcessRecord)localObject2).waitDialog = null;
            }
          } while (!ActivityManagerService.-get13(ActivityManagerService.this));
          ??? = new BaseErrorDialog(ActivityManagerService.this.mContext);
          ???.getWindow().setType(2010);
          ???.setCancelable(false);
          ???.setTitle(ActivityManagerService.this.mContext.getText(17039702));
          ???.setMessage(ActivityManagerService.this.mContext.getText(17040861));
          ???.setButton(-1, ActivityManagerService.this.mContext.getText(17039370), obtainMessage(48, ???));
          ???.show();
          return;
        } while (!ActivityManagerService.-get13(ActivityManagerService.this));
        ??? = new BaseErrorDialog(ActivityManagerService.this.mContext);
        ???.getWindow().setType(2010);
        ???.setCancelable(false);
        ???.setTitle(ActivityManagerService.this.mContext.getText(17039702));
        ???.setMessage(ActivityManagerService.this.mContext.getText(17040862));
        ???.setButton(-1, ActivityManagerService.this.mContext.getText(17039370), obtainMessage(48, ???));
        ???.show();
        return;
      case 30: 
        synchronized (ActivityManagerService.this)
        {
          ActivityManagerService.boostPriorityForLockedSection();
          ??? = (ActivityRecord)???.obj;
          if (ActivityManagerService.this.mCompatModeDialog != null)
          {
            boolean bool = ActivityManagerService.this.mCompatModeDialog.mAppInfo.packageName.equals(???.info.applicationInfo.packageName);
            if (bool)
            {
              ActivityManagerService.resetPriorityAfterLockedSection();
              return;
            }
            ActivityManagerService.this.mCompatModeDialog.dismiss();
            ActivityManagerService.this.mCompatModeDialog = null;
          }
          if (??? != null) {}
          ActivityManagerService.resetPriorityAfterLockedSection();
          return;
        }
      case 70: 
        synchronized (ActivityManagerService.this)
        {
          ActivityManagerService.boostPriorityForLockedSection();
          ??? = (ActivityRecord)???.obj;
          if (ActivityManagerService.this.mUnsupportedDisplaySizeDialog != null)
          {
            ActivityManagerService.this.mUnsupportedDisplaySizeDialog.dismiss();
            ActivityManagerService.this.mUnsupportedDisplaySizeDialog = null;
          }
          if ((??? != null) && (ActivityManagerService.this.mCompatModePackages.getPackageNotifyUnsupportedZoomLocked(???.packageName)))
          {
            ActivityManagerService.this.mUnsupportedDisplaySizeDialog = new UnsupportedDisplaySizeDialog(ActivityManagerService.this, ActivityManagerService.this.mContext, ???.info.applicationInfo);
            ActivityManagerService.this.mUnsupportedDisplaySizeDialog.show();
          }
          ActivityManagerService.resetPriorityAfterLockedSection();
          return;
        }
      case 46: 
        ActivityManagerService.this.mUserController.showUserSwitchDialog((Pair)???.obj);
        return;
      case 48: 
        ((Dialog)???.obj).dismiss();
        return;
      case 31: 
        ActivityManagerService.-wrap8(ActivityManagerService.this);
        return;
      case 32: 
        int i = ???.arg1;
        int j = ???.arg2;
        ActivityManagerService.-wrap7(ActivityManagerService.this, i, j);
        return;
      }
      ActivityManagerService.-wrap9(ActivityManagerService.this);
    }
  }
}


/* Location:              /Users/joshua/Desktop/system_framework/classes-dex2jar.jar!/com/android/server/am/ActivityManagerService.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */