package com.android.server.pm;

import android.app.ActivityManager;
import android.app.ActivityManagerNative;
import android.app.AlarmManager;
import android.app.IActivityManager;
import android.app.ResourcesManager;
import android.app.admin.IDevicePolicyManager;
import android.app.admin.IDevicePolicyManager.Stub;
import android.app.admin.SecurityLog;
import android.app.backup.IBackupManager;
import android.app.backup.IBackupManager.Stub;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IIntentReceiver;
import android.content.IIntentReceiver.Stub;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentFilter.AuthorityEntry;
import android.content.IntentSender;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.AppsQueryHelper;
import android.content.pm.ComponentInfo;
import android.content.pm.EphemeralApplicationInfo;
import android.content.pm.EphemeralResolveInfo;
import android.content.pm.EphemeralResolveInfo.EphemeralDigest;
import android.content.pm.EphemeralResolveInfo.EphemeralResolveIntentInfo;
import android.content.pm.FeatureInfo;
import android.content.pm.IOnPermissionsChangeListener;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageDeleteObserver;
import android.content.pm.IPackageDeleteObserver2;
import android.content.pm.IPackageInstallObserver2;
import android.content.pm.IPackageInstallObserver2.Stub;
import android.content.pm.IPackageInstaller;
import android.content.pm.IPackageManager.Stub;
import android.content.pm.IPackageMoveObserver;
import android.content.pm.IPackageMoveObserver.Stub;
import android.content.pm.IPackageStatsObserver;
import android.content.pm.InstrumentationInfo;
import android.content.pm.IntentFilterVerificationInfo;
import android.content.pm.KeySet;
import android.content.pm.PackageCleanItem;
import android.content.pm.PackageInfo;
import android.content.pm.PackageInfoLite;
import android.content.pm.PackageInstaller.SessionParams;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.LegacyPackageDeleteObserver;
import android.content.pm.PackageManagerInternal;
import android.content.pm.PackageManagerInternal.PackagesProvider;
import android.content.pm.PackageManagerInternal.SyncAdapterPackagesProvider;
import android.content.pm.PackageParser;
import android.content.pm.PackageParser.Activity;
import android.content.pm.PackageParser.ActivityIntentInfo;
import android.content.pm.PackageParser.Instrumentation;
import android.content.pm.PackageParser.NewPermissionInfo;
import android.content.pm.PackageParser.Package;
import android.content.pm.PackageParser.PackageLite;
import android.content.pm.PackageParser.PackageParserException;
import android.content.pm.PackageParser.Permission;
import android.content.pm.PackageParser.PermissionGroup;
import android.content.pm.PackageParser.Provider;
import android.content.pm.PackageParser.ProviderIntentInfo;
import android.content.pm.PackageParser.Service;
import android.content.pm.PackageParser.ServiceIntentInfo;
import android.content.pm.PackageStats;
import android.content.pm.PackageUserState;
import android.content.pm.ParceledListSlice;
import android.content.pm.PermissionGroupInfo;
import android.content.pm.PermissionInfo;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.content.pm.Signature;
import android.content.pm.UserInfo;
import android.content.pm.VerifierDeviceIdentity;
import android.content.pm.VerifierInfo;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.hardware.display.DisplayManager;
import android.net.Uri;
import android.os.Binder;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Debug;
import android.os.Environment;
import android.os.Environment.UserEnvironment;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.IDeviceIdleController;
import android.os.IDeviceIdleController.Stub;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.Process;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.SELinux;
import android.os.ServiceManager;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.UserManagerInternal;
import android.os.storage.IMountService;
import android.os.storage.MountServiceInternal;
import android.os.storage.MountServiceInternal.ExternalStorageMountPolicy;
import android.os.storage.StorageEventListener;
import android.os.storage.StorageManager;
import android.os.storage.VolumeInfo;
import android.provider.Settings.Global;
import android.provider.Settings.Secure;
import android.security.KeyStore;
import android.security.SystemKeyStore;
import android.system.ErrnoException;
import android.system.Os;
import android.system.OsConstants;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.DisplayMetrics;
import android.util.EventLog;
import android.util.ExceptionUtils;
import android.util.Log;
import android.util.LogPrinter;
import android.util.MathUtils;
import android.util.OpFeatures;
import android.util.Pair;
import android.util.Permission;
import android.util.PrintStreamPrinter;
import android.util.SeempLog;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.util.Xml;
import android.view.Display;
import android.widget.Toast;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.app.IMediaContainerService;
import com.android.internal.app.IMediaContainerService.Stub;
import com.android.internal.app.IntentForwarderActivity;
import com.android.internal.app.ResolverActivity;
import com.android.internal.content.NativeLibraryHelper;
import com.android.internal.content.NativeLibraryHelper.Handle;
import com.android.internal.content.PackageHelper;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.os.IParcelFileDescriptorFactory;
import com.android.internal.os.IParcelFileDescriptorFactory.Stub;
import com.android.internal.os.InstallerConnection.InstallerException;
import com.android.internal.os.RegionalizationEnvironment;
import com.android.internal.os.SomeArgs;
import com.android.internal.telephony.CarrierAppUtils;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.FastXmlSerializer;
import com.android.internal.util.IndentingPrintWriter;
import com.android.internal.util.Preconditions;
import com.android.internal.util.XmlUtils;
import com.android.server.AttributeCache;
import com.android.server.FgThread;
import com.android.server.IntentResolver;
import com.android.server.LocalServices;
import com.android.server.ServiceThread;
import com.android.server.SystemConfig;
import com.android.server.SystemConfig.PermissionEntry;
import com.android.server.Watchdog;
import com.android.server.am.OnePlusAppBootManager;
import com.android.server.am.OnePlusProcessManager;
import com.android.server.net.NetworkPolicyManagerInternal;
import com.android.server.storage.DeviceStorageMonitorInternal;
import com.oneplus.config.ConfigGrabber;
import com.oneplus.config.ConfigObserver;
import com.oneplus.config.ConfigObserver.ConfigUpdater;
import com.oneplus.sdk.upgradecenter.utils.UpgradeCenterUtils;
import dalvik.system.CloseGuard;
import dalvik.system.DexFile;
import dalvik.system.VMRuntime;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import libcore.io.IoUtils;
import libcore.util.EmptyArray;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;

public class PackageManagerService
  extends IPackageManager.Stub
{
  private static final String ATTR_IS_GRANTED = "g";
  private static final String ATTR_PACKAGE_NAME = "pkg";
  private static final String ATTR_PERMISSION_NAME = "name";
  private static final String ATTR_REVOKE_ON_UPGRADE = "rou";
  private static final String ATTR_USER_FIXED = "fixed";
  private static final String ATTR_USER_SET = "set";
  private static final int BLUETOOTH_UID = 1002;
  static final int BROADCAST_DELAY = 10000;
  static final int CHECK_PENDING_VERIFICATION = 16;
  static final boolean CLEAR_RUNTIME_PERMISSIONS_ON_UPGRADE = false;
  static boolean DEBUG_ABI_SELECTION = false;
  private static final boolean DEBUG_APP_DATA = false;
  static boolean DEBUG_BACKUP = false;
  static boolean DEBUG_BROADCASTS = false;
  static boolean DEBUG_DEXOPT = false;
  static boolean DEBUG_DOMAIN_VERIFICATION = false;
  private static final boolean DEBUG_EPHEMERAL;
  static boolean DEBUG_FILTERS = false;
  static boolean DEBUG_INSTALL = false;
  static boolean DEBUG_INTENT_MATCHING = false;
  static boolean DEBUG_PACKAGE_INFO = false;
  static boolean DEBUG_PACKAGE_SCANNING = false;
  static boolean DEBUG_PREFERRED = false;
  static boolean DEBUG_REMOVE = false;
  static final boolean DEBUG_SD_INSTALL = false;
  static boolean DEBUG_SETTINGS = false;
  static boolean DEBUG_SHOW_INFO = false;
  private static final boolean DEBUG_TRIAGED_MISSING = false;
  static boolean DEBUG_UPGRADE = false;
  static boolean DEBUG_VERIFY = false;
  static final ComponentName DEFAULT_CONTAINER_COMPONENT;
  static final String DEFAULT_CONTAINER_PACKAGE = "com.android.defcontainer";
  private static int DEFAULT_EPHEMERAL_HASH_PREFIX_COUNT = 0;
  private static int DEFAULT_EPHEMERAL_HASH_PREFIX_MASK = 0;
  private static final long DEFAULT_MANDATORY_FSTRIM_INTERVAL = 259200000L;
  private static final int DEFAULT_VERIFICATION_RESPONSE = 1;
  private static final long DEFAULT_VERIFICATION_TIMEOUT = 10000L;
  private static final boolean DEFAULT_VERIFY_ENABLE = true;
  private static final boolean DISABLE_EPHEMERAL_APPS = false;
  private static final int[] EMPTY_INT_ARRAY;
  static final int END_COPY = 4;
  static final int FIND_INSTALL_LOC = 8;
  static final int GET_ONLINECONFIG = 20;
  private static final ArraySet<String> GMS_PKG_NAMES;
  private static final String GOOGLE_PLAY_PKGNAME = "com.android.vending";
  private static final int GRANT_DENIED = 1;
  private static final int GRANT_INSTALL = 2;
  private static final int GRANT_RUNTIME = 3;
  private static final int GRANT_UPGRADE = 4;
  private static final boolean HIDE_EPHEMERAL_APIS = true;
  static final int INIT_COPY = 5;
  private static final String INSTALL_PACKAGE_SUFFIX = "-";
  static final int INTENT_FILTER_VERIFIED = 18;
  private static final String KILL_APP_REASON_GIDS_CHANGED = "permission grant or revoke changed gids";
  private static final String KILL_APP_REASON_PERMISSIONS_REVOKED = "permissions revoked";
  private static final int LOG_UID = 1007;
  private static final int MAX_PERMISSION_TREE_FOOTPRINT = 32768;
  static final int MCS_BOUND = 3;
  static final int MCS_GIVE_UP = 11;
  static final int MCS_RECONNECT = 10;
  static final int MCS_UNBIND = 6;
  private static final int NFC_UID = 1027;
  private static String PACKAGEMANAGERMENT_CONFIG_NAME;
  private static final String PACKAGE_MIME_TYPE = "application/vnd.android.package-archive";
  private static final String PACKAGE_SCHEME = "package";
  static final int PACKAGE_VERIFIED = 15;
  static final String PLATFORM_PACKAGE_NAME = "android";
  static final int POST_INSTALL = 9;
  private static final Set<String> PROTECTED_ACTIONS;
  private static final int RADIO_UID = 1001;
  public static final int REASON_AB_OTA = 4;
  public static final int REASON_BACKGROUND_DEXOPT = 3;
  public static final int REASON_BOOT = 1;
  public static final int REASON_CORE_APP = 8;
  public static final int REASON_FIRST_BOOT = 0;
  public static final int REASON_FORCED_DEXOPT = 7;
  public static final int REASON_INSTALL = 2;
  public static final int REASON_LAST = 8;
  public static final int REASON_NON_SYSTEM_LIBRARY = 5;
  public static final int REASON_SHARED_APK = 6;
  static final int REMOVE_CHATTY = 65536;
  private static final String RRO_IDMAP_DIR = "/data/resource-cache";
  static final int SCAN_BOOTING = 256;
  static final int SCAN_CHECK_ONLY = 32768;
  static final int SCAN_DEFER_DEX = 128;
  static final int SCAN_DELETE_DATA_ON_FAILURES = 1024;
  static final int SCAN_DONT_KILL_APP = 131072;
  static final int SCAN_FORCE_DEX = 4;
  static final int SCAN_IGNORE_FROZEN = 262144;
  static final int SCAN_INITIAL = 16384;
  static final int SCAN_MOVE = 8192;
  static final int SCAN_NEW_INSTALL = 16;
  static final int SCAN_NO_DEX = 2;
  static final int SCAN_NO_PATHS = 32;
  static final int SCAN_REPLACING = 2048;
  static final int SCAN_REQUIRE_KNOWN = 4096;
  static final int SCAN_TRUSTED_OVERLAY = 512;
  static final int SCAN_UPDATE_SIGNATURE = 8;
  static final int SCAN_UPDATE_TIME = 64;
  private static final String SD_ENCRYPTION_ALGORITHM = "AES";
  private static final String SD_ENCRYPTION_KEYSTORE_NAME = "AppsOnSD";
  static final int SEND_PENDING_BROADCAST = 1;
  private static final int SHELL_UID = 2000;
  private static final String SKIP_SHARED_LIBRARY_CHECK = "&";
  static final int START_CLEANING_PACKAGE = 7;
  static final int START_INTENT_FILTER_VERIFICATIONS = 17;
  private static final int SYSTEM_RUNTIME_GRANT_MASK = 52;
  static final String TAG = "PackageManager";
  private static final String TAG_ALL_GRANTS = "rt-grants";
  private static final String TAG_DEFAULT_APPS = "da";
  private static final String TAG_GRANT = "grant";
  private static final String TAG_INTENT_FILTER_VERIFICATION = "iv";
  private static final String TAG_PERMISSION = "perm";
  private static final String TAG_PERMISSION_BACKUP = "perm-grant-backup";
  private static final String TAG_PREFERRED_BACKUP = "pa";
  static final int UPDATED_MEDIA_STATUS = 12;
  static final int UPDATE_PERMISSIONS_ALL = 1;
  static final int UPDATE_PERMISSIONS_REPLACE_ALL = 4;
  static final int UPDATE_PERMISSIONS_REPLACE_PKG = 2;
  private static final int USER_RUNTIME_GRANT_MASK = 11;
  private static final String VENDOR_OVERLAY_DIR = "/vendor/overlay";
  private static final long WATCHDOG_TIMEOUT = 600000L;
  static final int WRITE_PACKAGE_LIST = 19;
  static final int WRITE_PACKAGE_RESTRICTIONS = 14;
  static final int WRITE_SETTINGS = 13;
  static final int WRITE_SETTINGS_DELAY = 10000;
  private static boolean mGmsEnabled;
  private static final Comparator<ProviderInfo> mProviderInitOrderSorter = new Comparator()
  {
    public int compare(ProviderInfo paramAnonymousProviderInfo1, ProviderInfo paramAnonymousProviderInfo2)
    {
      int i = paramAnonymousProviderInfo1.initOrder;
      int j = paramAnonymousProviderInfo2.initOrder;
      if (i > j) {
        return -1;
      }
      if (i < j) {
        return 1;
      }
      return 0;
    }
  };
  private static final Comparator<ResolveInfo> mResolvePrioritySorter;
  private static final Intent sBrowserIntent;
  static UserManagerService sUserManager;
  final ActivityIntentResolver mActivities = new ActivityIntentResolver();
  ApplicationInfo mAndroidApplication;
  final File mAppInstallDir;
  private File mAppLib32InstallDir;
  final ArrayMap<String, ArraySet<String>> mAppOpPermissionPackages = new ArrayMap();
  final String mAsecInternalPath;
  final ArrayMap<String, FeatureInfo> mAvailableFeatures;
  private final CompilerStats mCompilerStats = new CompilerStats();
  private IMediaContainerService mContainerService = null;
  final Context mContext;
  ComponentName mCustomResolverComponentName;
  private final DefaultContainerConnection mDefContainerConn = new DefaultContainerConnection();
  final int mDefParseFlags;
  final DefaultPermissionGrantPolicy mDefaultPermissionPolicy;
  private boolean mDeferProtectedFilters = true;
  @GuardedBy("mPackages")
  private boolean mDexOptDialogShown;
  private ArraySet<Integer> mDirtyUsers = new ArraySet();
  private ConfigObserver mDozeWhitelistConfigObserver;
  final File mDrmAppPrivateInstallDir;
  private final EphemeralApplicationRegistry mEphemeralApplicationRegistry;
  final File mEphemeralInstallDir;
  final ActivityInfo mEphemeralInstallerActivity = new ActivityInfo();
  final ComponentName mEphemeralInstallerComponent;
  final ResolveInfo mEphemeralInstallerInfo = new ResolveInfo();
  final ComponentName mEphemeralResolverComponent;
  final EphemeralResolverConnection mEphemeralResolverConnection;
  private final ArraySet<String> mExistingSystemPackages = new ArraySet();
  private final ArrayMap<String, File> mExpectingBetter = new ArrayMap();
  final boolean mFactoryTest;
  boolean mFirstBoot;
  boolean mFoundPolicyFile;
  @GuardedBy("mPackages")
  final ArraySet<String> mFrozenPackages = new ArraySet();
  final int[] mGlobalGids;
  final PackageHandler mHandler;
  final ServiceThread mHandlerThread;
  volatile boolean mHasSystemUidErrors;
  final Object mInstallLock = new Object();
  @GuardedBy("mInstallLock")
  final Installer mInstaller;
  final PackageInstallerService mInstallerService;
  final ArrayMap<ComponentName, PackageParser.Instrumentation> mInstrumentation = new ArrayMap();
  final SparseArray<IntentFilterVerificationState> mIntentFilterVerificationStates = new SparseArray();
  private int mIntentFilterVerificationToken = 0;
  private final IntentFilterVerifier<PackageParser.ActivityIntentInfo> mIntentFilterVerifier;
  private final ComponentName mIntentFilterVerifierComponent;
  final boolean mIsAlarmBoot;
  final boolean mIsPreNMR1Upgrade;
  final boolean mIsPreNUpgrade;
  final boolean mIsUpgrade;
  private List<String> mKeepUninstalledPackages;
  final ArrayMap<String, Set<String>> mKnownCodebase = new ArrayMap();
  private boolean mMediaMounted = false;
  final DisplayMetrics mMetrics;
  private final MoveCallbacks mMoveCallbacks;
  int mNextInstallToken = 1;
  private AtomicInteger mNextMoveId = new AtomicInteger();
  private OemCompatibilityHelper mOemCompatibilityHelper = null;
  private List<String> mOemDeviceIdleWhiteList;
  private final OnPermissionChangeListeners mOnPermissionChangeListeners;
  final boolean mOnlyCore;
  private boolean mOnlyPowerOffAlarm = false;
  final String mOptionalVerifierPackage;
  final ArrayMap<String, ArrayMap<String, PackageParser.Package>> mOverlays = new ArrayMap();
  private final PackageDexOptimizer mPackageDexOptimizer;
  private final PackageUsage mPackageUsage = new PackageUsage();
  @GuardedBy("mPackages")
  final ArrayMap<String, PackageParser.Package> mPackages = new ArrayMap();
  final PendingPackageBroadcasts mPendingBroadcasts = new PendingPackageBroadcasts();
  final SparseArray<PackageVerificationState> mPendingVerification = new SparseArray();
  private int mPendingVerificationToken = 0;
  final ArrayMap<String, PackageParser.PermissionGroup> mPermissionGroups = new ArrayMap();
  PackageParser.Package mPlatformPackage;
  private ArrayList<Message> mPostSystemReadyMessages;
  private final ProcessLoggingHandler mProcessLoggingHandler;
  boolean mPromoteSystemApps;
  final ArraySet<String> mProtectedBroadcasts = new ArraySet();
  private final List<PackageParser.ActivityIntentInfo> mProtectedFilters = new ArrayList();
  final ProtectedPackages mProtectedPackages;
  final ProviderIntentResolver mProviders = new ProviderIntentResolver(null);
  final ArrayMap<String, PackageParser.Provider> mProvidersByAuthority = new ArrayMap();
  final ActivityIntentResolver mReceivers = new ActivityIntentResolver();
  final File mRegionalizationAppInstallDir;
  final String mRequiredInstallerPackage;
  final String mRequiredUninstallerPackage;
  final String mRequiredVerifierPackage;
  final ActivityInfo mResolveActivity = new ActivityInfo();
  ComponentName mResolveComponentName;
  final ResolveInfo mResolveInfo = new ResolveInfo();
  boolean mResolverReplaced = false;
  final SparseArray<PostInstallData> mRunningInstalls = new SparseArray();
  volatile boolean mSafeMode;
  final int mSdkVersion = Build.VERSION.SDK_INT;
  final String[] mSeparateProcesses;
  final ServiceIntentResolver mServices = new ServiceIntentResolver(null);
  final String mServicesSystemSharedLibraryPackageName;
  @GuardedBy("mPackages")
  final Settings mSettings;
  final String mSetupWizardPackage;
  final ArrayMap<String, SharedLibraryEntry> mSharedLibraries = new ArrayMap();
  final String mSharedSystemSharedLibraryPackageName;
  private StorageEventListener mStorageListener = new StorageEventListener()
  {
    public void onVolumeForgotten(String paramAnonymousString)
    {
      if (TextUtils.isEmpty(paramAnonymousString))
      {
        Slog.e("PackageManager", "Forgetting internal storage is probably a mistake; ignoring");
        return;
      }
      synchronized (PackageManagerService.this.mPackages)
      {
        Iterator localIterator = PackageManagerService.this.mSettings.getVolumePackagesLPr(paramAnonymousString).iterator();
        if (localIterator.hasNext())
        {
          PackageSetting localPackageSetting = (PackageSetting)localIterator.next();
          Slog.d("PackageManager", "Destroying " + localPackageSetting.name + " because volume was forgotten");
          PackageManagerService.this.deletePackage(localPackageSetting.name, new PackageManager.LegacyPackageDeleteObserver(null).getBinder(), 0, 2);
        }
      }
      PackageManagerService.this.mSettings.onVolumeForgotten(paramAnonymousString);
      PackageManagerService.this.mSettings.writeLPr();
    }
    
    public void onVolumeStateChanged(VolumeInfo paramAnonymousVolumeInfo, int paramAnonymousInt1, int paramAnonymousInt2)
    {
      if (paramAnonymousVolumeInfo.type == 1)
      {
        if (paramAnonymousVolumeInfo.state != 2) {
          break label92;
        }
        String str = paramAnonymousVolumeInfo.getFsUuid();
        PackageManagerService.-wrap37(PackageManagerService.this, str);
        PackageManagerService.-wrap36(PackageManagerService.this, str);
        PackageManagerService.this.mInstallerService.onPrivateVolumeMounted(str);
        PackageManagerService.-wrap32(PackageManagerService.this, paramAnonymousVolumeInfo);
      }
      label92:
      do
      {
        for (;;)
        {
          if ((paramAnonymousVolumeInfo.type == 0) && (paramAnonymousVolumeInfo.isPrimary()))
          {
            if (paramAnonymousVolumeInfo.state != 2) {
              break;
            }
            PackageManagerService.this.updateExternalMediaStatus(true, false);
          }
          return;
          if (paramAnonymousVolumeInfo.state == 5) {
            PackageManagerService.-wrap45(PackageManagerService.this, paramAnonymousVolumeInfo);
          }
        }
      } while (paramAnonymousVolumeInfo.state != 5);
      PackageManagerService.this.updateExternalMediaStatus(false, false);
    }
  };
  final String mStorageManagerPackage;
  private final boolean mSupportResverApp = OpFeatures.isSupport(new int[] { 18 });
  final SparseArray<ArraySet<String>> mSystemPermissions;
  volatile boolean mSystemReady;
  final ArraySet<String> mTransferedPackages = new ArraySet();
  private UserManagerInternal mUserManagerInternal;
  SparseBooleanArray mUserNeedsBadging = new SparseBooleanArray();
  
  static
  {
    DEBUG_PREFERRED = false;
    DEBUG_UPGRADE = false;
    DEBUG_DOMAIN_VERIFICATION = false;
    DEBUG_BACKUP = false;
    DEBUG_INSTALL = false;
    DEBUG_REMOVE = false;
    DEBUG_BROADCASTS = false;
    DEBUG_SHOW_INFO = false;
    DEBUG_PACKAGE_INFO = false;
    DEBUG_INTENT_MATCHING = false;
    DEBUG_PACKAGE_SCANNING = false;
    DEBUG_VERIFY = false;
    DEBUG_FILTERS = false;
    DEBUG_DEXOPT = false;
    DEBUG_ABI_SELECTION = false;
    DEBUG_EPHEMERAL = Build.IS_DEBUGGABLE;
    EMPTY_INT_ARRAY = new int[0];
    PACKAGEMANAGERMENT_CONFIG_NAME = "ProcessManagement";
    DEFAULT_CONTAINER_COMPONENT = new ComponentName("com.android.defcontainer", "com.android.defcontainer.DefaultContainerService");
    DEFAULT_EPHEMERAL_HASH_PREFIX_MASK = 61440;
    DEFAULT_EPHEMERAL_HASH_PREFIX_COUNT = 5;
    sBrowserIntent = new Intent();
    sBrowserIntent.setAction("android.intent.action.VIEW");
    sBrowserIntent.addCategory("android.intent.category.BROWSABLE");
    sBrowserIntent.setData(Uri.parse("http:"));
    PROTECTED_ACTIONS = new ArraySet();
    PROTECTED_ACTIONS.add("android.intent.action.SEND");
    PROTECTED_ACTIONS.add("android.intent.action.SENDTO");
    PROTECTED_ACTIONS.add("android.intent.action.SEND_MULTIPLE");
    PROTECTED_ACTIONS.add("android.intent.action.VIEW");
    GMS_PKG_NAMES = new ArraySet(Arrays.asList(new String[] { "com.google.android.gms", "com.google.android.gsf", "com.google.android.gsf.login", "com.google.android.syncadapters.contacts" }));
    mGmsEnabled = false;
    mResolvePrioritySorter = new Comparator()
    {
      public int compare(ResolveInfo paramAnonymousResolveInfo1, ResolveInfo paramAnonymousResolveInfo2)
      {
        int i = paramAnonymousResolveInfo1.priority;
        int j = paramAnonymousResolveInfo2.priority;
        if (i != j)
        {
          if (i > j) {
            return -1;
          }
          return 1;
        }
        i = paramAnonymousResolveInfo1.preferredOrder;
        j = paramAnonymousResolveInfo2.preferredOrder;
        if (i != j)
        {
          if (i > j) {
            return -1;
          }
          return 1;
        }
        if (paramAnonymousResolveInfo1.isDefault != paramAnonymousResolveInfo2.isDefault)
        {
          if (paramAnonymousResolveInfo1.isDefault) {
            return -1;
          }
          return 1;
        }
        i = paramAnonymousResolveInfo1.match;
        j = paramAnonymousResolveInfo2.match;
        if (i != j)
        {
          if (i > j) {
            return -1;
          }
          return 1;
        }
        if (paramAnonymousResolveInfo1.system != paramAnonymousResolveInfo2.system)
        {
          if (paramAnonymousResolveInfo1.system) {
            return -1;
          }
          return 1;
        }
        if (paramAnonymousResolveInfo1.activityInfo != null) {
          return paramAnonymousResolveInfo1.activityInfo.packageName.compareTo(paramAnonymousResolveInfo2.activityInfo.packageName);
        }
        if (paramAnonymousResolveInfo1.serviceInfo != null) {
          return paramAnonymousResolveInfo1.serviceInfo.packageName.compareTo(paramAnonymousResolveInfo2.serviceInfo.packageName);
        }
        if (paramAnonymousResolveInfo1.providerInfo != null) {
          return paramAnonymousResolveInfo1.providerInfo.packageName.compareTo(paramAnonymousResolveInfo2.providerInfo.packageName);
        }
        return 0;
      }
    };
  }
  
  public PackageManagerService(Context arg1, Installer paramInstaller, boolean paramBoolean1, boolean paramBoolean2)
  {
    EventLog.writeEvent(3060, SystemClock.uptimeMillis());
    if (this.mSdkVersion <= 0) {
      Slog.w("PackageManager", "**** ro.build.version.sdk not set!");
    }
    this.mContext = ???;
    this.mFactoryTest = paramBoolean1;
    this.mOnlyCore = paramBoolean2;
    this.mMetrics = new DisplayMetrics();
    this.mSettings = new Settings(this.mPackages);
    this.mSettings.addSharedUserLPw("android.uid.system", 1000, 1, 8);
    this.mSettings.addSharedUserLPw("android.uid.phone", 1001, 1, 8);
    this.mSettings.addSharedUserLPw("android.uid.log", 1007, 1, 8);
    this.mSettings.addSharedUserLPw("android.uid.nfc", 1027, 1, 8);
    this.mSettings.addSharedUserLPw("android.uid.bluetooth", 1002, 1, 8);
    this.mSettings.addSharedUserLPw("android.uid.shell", 2000, 1, 8);
    this.mOemDeviceIdleWhiteList = new ArrayList(Arrays.asList(this.mContext.getResources().getStringArray(84344839)));
    Object localObject1 = this.mOemDeviceIdleWhiteList.iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject4 = (String)((Iterator)localObject1).next();
      Slog.d("TAG", "OEM device idle whitelist: " + (String)localObject4);
    }
    localObject1 = new File("/persist/alarm/powerOffAlarmSet");
    localObject4 = new File("/persist/alarm/powerOffAlarmHandle");
    this.mIsAlarmBoot = SystemProperties.getBoolean("ro.alarm_boot", false);
    if (this.mIsAlarmBoot)
    {
      this.mOnlyPowerOffAlarm = true;
      localObject1 = SystemProperties.get("debug.separate_processes");
      if ((localObject1 == null) || (((String)localObject1).length() <= 0)) {
        break label1393;
      }
      if (!"*".equals(localObject1)) {
        break label1345;
      }
      this.mDefParseFlags = 8;
      this.mSeparateProcesses = null;
      Slog.w("PackageManager", "Running with debug.separate_processes: * (ALL)");
    }
    for (;;)
    {
      this.mInstaller = paramInstaller;
      this.mPackageDexOptimizer = new PackageDexOptimizer(paramInstaller, this.mInstallLock, ???, "*dexopt*");
      this.mMoveCallbacks = new MoveCallbacks(FgThread.get().getLooper());
      this.mOnPermissionChangeListeners = new OnPermissionChangeListeners(FgThread.get().getLooper());
      getDefaultDisplayMetrics(???, this.mMetrics);
      localObject4 = SystemConfig.getInstance();
      this.mGlobalGids = ((SystemConfig)localObject4).getGlobalGids();
      this.mSystemPermissions = ((SystemConfig)localObject4).getSystemPermissions();
      this.mAvailableFeatures = ((SystemConfig)localObject4).getAvailableFeatures();
      this.mProtectedPackages = new ProtectedPackages(this.mContext);
      this.mOemCompatibilityHelper = new OemCompatibilityHelper(???);
      this.mHandlerThread = new ServiceThread("PackageManager", 10, true);
      this.mHandlerThread.start();
      this.mHandler = new PackageHandler(this.mHandlerThread.getLooper());
      this.mProcessLoggingHandler = new ProcessLoggingHandler();
      Watchdog.getInstance().addThread(this.mHandler, 600000L);
      this.mDefaultPermissionPolicy = new DefaultPermissionGrantPolicy(this);
      OnePlusAppBootManager.getInstance(this);
      paramInstaller = Environment.getDataDirectory();
      this.mAppInstallDir = new File(paramInstaller, "app");
      this.mAppLib32InstallDir = new File(paramInstaller, "app-lib");
      this.mEphemeralInstallDir = new File(paramInstaller, "app-ephemeral");
      this.mAsecInternalPath = new File(paramInstaller, "app-asec").getPath();
      this.mDrmAppPrivateInstallDir = new File(paramInstaller, "app-private");
      this.mRegionalizationAppInstallDir = new File(paramInstaller, "app-regional");
      sUserManager = new UserManagerService(???, this, this.mPackages);
      localObject5 = ((SystemConfig)localObject4).getPermissions();
      i = 0;
      while (i < ((ArrayMap)localObject5).size())
      {
        SystemConfig.PermissionEntry localPermissionEntry = (SystemConfig.PermissionEntry)((ArrayMap)localObject5).valueAt(i);
        localObject1 = (BasePermission)this.mSettings.mPermissions.get(localPermissionEntry.name);
        paramInstaller = (Installer)localObject1;
        if (localObject1 == null)
        {
          paramInstaller = new BasePermission(localPermissionEntry.name, "android", 1);
          this.mSettings.mPermissions.put(localPermissionEntry.name, paramInstaller);
        }
        if (localPermissionEntry.gids != null) {
          paramInstaller.setGids(localPermissionEntry.gids, localPermissionEntry.perUser);
        }
        i += 1;
      }
      if ((!((File)localObject1).exists()) || (!((File)localObject4).exists()) || (this.mOnlyCore) || (!AlarmManager.readPowerOffAlarmFile("/persist/alarm/powerOffAlarmHandle").equals("1"))) {
        break;
      }
      SystemProperties.set("ro.alarm_handled", "true");
      new File("/persist/alarm/powerOffAlarmInstance");
      SystemProperties.set("ro.alarm_instance", AlarmManager.readPowerOffAlarmFile("/persist/alarm/powerOffAlarmInstance"));
      AlarmManager.writePowerOffAlarmFile("/persist/alarm/powerOffAlarmHandle", "0");
      break;
      label1345:
      this.mDefParseFlags = 0;
      this.mSeparateProcesses = ((String)localObject1).split(",");
      Slog.w("PackageManager", "Running with debug.separate_processes: " + (String)localObject1);
      continue;
      label1393:
      this.mDefParseFlags = 0;
      this.mSeparateProcesses = null;
    }
    paramInstaller = ((SystemConfig)localObject4).getSharedLibraries();
    i = 0;
    while (i < paramInstaller.size())
    {
      this.mSharedLibraries.put((String)paramInstaller.keyAt(i), new SharedLibraryEntry((String)paramInstaller.valueAt(i), null));
      i += 1;
    }
    this.mFoundPolicyFile = SELinuxMMAC.readInstallPolicy();
    if (this.mSettings.readLPw(sUserManager.getUsers(false)))
    {
      paramBoolean1 = false;
      this.mFirstBoot = paramBoolean1;
      i = this.mSettings.mPackages.size() - 1;
      label1512:
      if (i < 0) {
        break label1613;
      }
      paramInstaller = (PackageSetting)this.mSettings.mPackages.valueAt(i);
      if ((!isExternal(paramInstaller)) && ((paramInstaller.codePath == null) || (!paramInstaller.codePath.exists()))) {
        break label1571;
      }
    }
    for (;;)
    {
      i -= 1;
      break label1512;
      paramBoolean1 = true;
      break;
      label1571:
      if (this.mSettings.getDisabledSystemPkgLPr(paramInstaller.name) != null)
      {
        this.mSettings.mPackages.removeAt(i);
        this.mSettings.enableSystemPackageLPw(paramInstaller.name);
      }
    }
    label1613:
    if (this.mFirstBoot) {
      requestCopyPreoptedFiles();
    }
    try
    {
      this.mInstaller.initPreloadFiles();
      if ((!OpFeatures.isSupport(new int[] { 0 })) || (this.mFirstBoot))
      {
        paramInstaller = Resources.getSystem().getString(17039457);
        if (!TextUtils.isEmpty(paramInstaller)) {
          break label1974;
        }
        l = SystemClock.uptimeMillis();
        EventLog.writeEvent(3070, l);
        paramInstaller = System.getenv("BOOTCLASSPATH");
        localObject1 = System.getenv("SYSTEMSERVERCLASSPATH");
        if (paramInstaller == null) {
          Slog.w("PackageManager", "No BOOTCLASSPATH found!");
        }
        if (localObject1 == null) {
          Slog.w("PackageManager", "No SYSTEMSERVERCLASSPATH found!");
        }
        paramInstaller = InstructionSets.getAllInstructionSets();
        paramInstaller = InstructionSets.getDexCodeInstructionSets((String[])paramInstaller.toArray(new String[paramInstaller.size()]));
        if (this.mSharedLibraries.size() <= 0) {
          break label2041;
        }
        j = paramInstaller.length;
        i = 0;
        if (i >= j) {
          break label2041;
        }
        localObject1 = paramInstaller[i];
        localObject4 = this.mSharedLibraries.values().iterator();
        do
        {
          if (!((Iterator)localObject4).hasNext()) {
            break;
          }
          localObject5 = ((SharedLibraryEntry)((Iterator)localObject4).next()).path;
        } while (localObject5 == null);
      }
    }
    catch (InstallerConnection.InstallerException paramInstaller)
    {
      for (;;)
      {
        try
        {
          int k = DexFile.getDexOptNeeded((String)localObject5, (String)localObject1, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(6), false);
          if (k == 0) {
            continue;
          }
          this.mInstaller.dexopt((String)localObject5, 1000, (String)localObject1, k, 2, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(6), StorageManager.UUID_PRIVATE_INTERNAL, "&");
        }
        catch (FileNotFoundException localFileNotFoundException)
        {
          Slog.w("PackageManager", "Library not found: " + (String)localObject5);
          continue;
          paramInstaller = paramInstaller;
          Slog.w("PackageManager", "Failed to init preload resources. " + paramInstaller.getMessage());
          continue;
          paramInstaller = this.mSettings.peekPackageLPr("com.google.android.gms");
          if ((paramInstaller == null) || (paramInstaller.getEnabled(0) == 2)) {
            continue;
          }
          mGmsEnabled = true;
          continue;
          this.mCustomResolverComponentName = ComponentName.unflattenFromString(paramInstaller);
          continue;
        }
        catch (IOException|InstallerConnection.InstallerException localIOException2)
        {
          label1974:
          Slog.w("PackageManager", "Cannot dexopt " + (String)localObject5 + "; is it an APK or JAR? " + localIOException2.getMessage());
        }
        continue;
        i += 1;
      }
      label2041:
      paramInstaller = new File(Environment.getRootDirectory(), "framework");
      localObject4 = this.mSettings.getInternalVersion();
      localObject1 = SystemProperties.get("ro.build.version.ota", "");
      localObject5 = SystemProperties.get("persist.sys.version.ota", "");
      if (("".equals(localObject1)) || ((!isFirstBoot()) && (((String)localObject1).equals(localObject5))))
      {
        this.mIsUpgrade = false;
        if ((!this.mIsUpgrade) || (((Settings.VersionInfo)localObject4).sdkVersion > 22)) {
          break label2269;
        }
        paramBoolean1 = true;
        label2138:
        this.mPromoteSystemApps = paramBoolean1;
        if ((!this.mIsUpgrade) || (((Settings.VersionInfo)localObject4).sdkVersion >= 24)) {
          break label2274;
        }
        paramBoolean1 = true;
        label2162:
        this.mIsPreNUpgrade = paramBoolean1;
        if ((!this.mIsUpgrade) || (((Settings.VersionInfo)localObject4).sdkVersion >= 25)) {
          break label2279;
        }
      }
      label2269:
      label2274:
      label2279:
      for (paramBoolean1 = true;; paramBoolean1 = false)
      {
        this.mIsPreNMR1Upgrade = paramBoolean1;
        if (!this.mPromoteSystemApps) {
          break label2284;
        }
        localObject1 = this.mSettings.mPackages.values().iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject5 = (PackageSetting)((Iterator)localObject1).next();
          if (isSystemApp((PackageSetting)localObject5)) {
            this.mExistingSystemPackages.add(((PackageSetting)localObject5).name);
          }
        }
        this.mIsUpgrade = true;
        break;
        paramBoolean1 = false;
        break label2138;
        paramBoolean1 = false;
        break label2162;
      }
      label2284:
      scanDirTracedLI(new File("/vendor/overlay"), this.mDefParseFlags | 0x1 | 0x40 | 0x200, 17312, 0L);
      scanDirTracedLI(paramInstaller, this.mDefParseFlags | 0x1 | 0x40 | 0x80, 16802, 0L);
      localObject5 = new File(Environment.getRootDirectory(), "priv-app");
      scanDirTracedLI((File)localObject5, this.mDefParseFlags | 0x1 | 0x40 | 0x80, 16800, 0L);
      localFile1 = new File(Environment.getRootDirectory(), "app");
      scanDirTracedLI(localFile1, this.mDefParseFlags | 0x1 | 0x40, 16800, 0L);
      paramInstaller = new File("/vendor/app");
      try
      {
        localObject1 = paramInstaller.getCanonicalFile();
        paramInstaller = (Installer)localObject1;
      }
      catch (IOException localIOException1)
      {
        File localFile2;
        for (;;) {}
        Object localObject2 = new ArrayList();
        if (this.mOnlyCore) {
          break label2936;
        }
        ??? = this.mSettings.mPackages.values().iterator();
        while (((Iterator)???).hasNext())
        {
          localObject7 = (PackageSetting)((Iterator)???).next();
          if ((((PackageSetting)localObject7).pkgFlags & 0x1) != 0)
          {
            localObject8 = (PackageParser.Package)this.mPackages.get(((PackageSetting)localObject7).name);
            if (localObject8 != null)
            {
              if (this.mSettings.isDisabledSystemPackageLPr(((PackageSetting)localObject7).name))
              {
                logCriticalInfo(5, "Expecting better updated system app for " + ((PackageSetting)localObject7).name + "; removing system app.  Last known codePath=" + ((PackageSetting)localObject7).codePathString + ", installStatus=" + ((PackageSetting)localObject7).installStatus + ", versionCode=" + ((PackageSetting)localObject7).versionCode + "; scanned versionCode=" + ((PackageParser.Package)localObject8).mVersionCode);
                removePackageLI((PackageParser.Package)localObject8, true);
                this.mExpectingBetter.put(((PackageSetting)localObject7).name, ((PackageSetting)localObject7).codePath);
              }
            }
            else if (!this.mSettings.isDisabledSystemPackageLPr(((PackageSetting)localObject7).name))
            {
              ((Iterator)???).remove();
              logCriticalInfo(5, "System package " + ((PackageSetting)localObject7).name + " no longer exists; it's data will be wiped");
            }
            else
            {
              localObject8 = this.mSettings.getDisabledSystemPkgLPr(((PackageSetting)localObject7).name);
              if ((((PackageSetting)localObject8).codePath == null) || (!((PackageSetting)localObject8).codePath.exists())) {
                ((List)localObject2).add(((PackageSetting)localObject7).name);
              }
            }
          }
        }
        Object localObject7 = this.mSettings.getListOfIncompleteInstallPackagesLPr();
        i = 0;
        for (;;)
        {
          if (i < ((ArrayList)localObject7).size())
          {
            localObject8 = ((PackageSetting)((ArrayList)localObject7).get(i)).name;
            logCriticalInfo(5, "Cleaning up incompletely installed app: " + (String)localObject8);
          }
          synchronized (this.mPackages)
          {
            this.mSettings.removePackageLPw((String)localObject8);
            i += 1;
          }
        }
        this.mSettings.pruneSharedUsersLPw();
        if (this.mOnlyCore) {
          break label3708;
        }
        EventLog.writeEvent(3080, SystemClock.uptimeMillis());
        if (!this.mSupportResverApp) {
          break label3107;
        }
        ??? = new File(Environment.getRootDirectory(), "reserve");
        if (!((File)???).exists()) {
          break label3107;
        }
        OemPackageManagerHelper.readDeletedReserveAppsFromXML();
        scanDirLI((File)???, 0, 16800, 0L);
        scanDirTracedLI(this.mAppInstallDir, 0, 20896, 0L);
        scanDirTracedLI(this.mDrmAppPrivateInstallDir, this.mDefParseFlags | 0x10, 20896, 0L);
        scanDirLI(this.mEphemeralInstallDir, this.mDefParseFlags | 0x800, 20896, 0L);
        if (!RegionalizationEnvironment.isSupported()) {
          break label3267;
        }
        Log.d("PackageManager", "Load Regionalization 3rd apks from res packages.");
        ??? = RegionalizationEnvironment.getAllPackageNames().iterator();
        while (((Iterator)???).hasNext())
        {
          localObject7 = (String)((Iterator)???).next();
          localObject7 = new File(this.mRegionalizationAppInstallDir, (String)localObject7);
          Log.d("PackageManager", "Load Regionalization 3rd apks of path " + ((File)localObject7).getPath());
          scanDirLI((File)localObject7, 0, 20896, 0L);
        }
        ??? = ((Iterable)localObject2).iterator();
        if (!((Iterator)???).hasNext()) {
          break label3451;
        }
        localObject7 = (String)((Iterator)???).next();
        Object localObject8 = (PackageParser.Package)this.mPackages.get(localObject7);
        this.mSettings.removeDisabledSystemPackageLPw((String)localObject7);
        if (localObject8 != null) {
          break label3364;
        }
        localObject2 = "Updated system package " + (String)localObject7 + " no longer exists; it's data will be wiped";
        for (;;)
        {
          logCriticalInfo(5, (String)localObject2);
          break;
          localObject2 = "Updated system app + " + (String)localObject7 + " no longer present; removing system privileges for " + (String)localObject7;
          localObject8 = ((PackageParser.Package)localObject8).applicationInfo;
          ((ApplicationInfo)localObject8).flags &= 0xFFFFFFFE;
          localObject7 = (PackageSetting)this.mSettings.mPackages.get(localObject7);
          ((PackageSetting)localObject7).pkgFlags &= 0xFFFFFFFE;
        }
        j = 0;
        for (;;)
        {
          if (j < this.mExpectingBetter.size())
          {
            localObject2 = (String)this.mExpectingBetter.keyAt(j);
            if (!this.mPackages.containsKey(localObject2))
            {
              ??? = (File)this.mExpectingBetter.valueAt(j);
              logCriticalInfo(5, "Expected better " + (String)localObject2 + " but never showed up; reverting to system");
              i = this.mDefParseFlags;
              if (!FileUtils.contains((File)localObject5, (File)???)) {
                break label3591;
              }
              i = 193;
              this.mSettings.enableSystemPackageLPw((String)localObject2);
            }
            try
            {
              scanPackageTracedLI((File)???, i, 16800, 0L, null);
              for (;;)
              {
                j += 1;
                break;
                if (FileUtils.contains(localFile1, (File)???))
                {
                  i = 65;
                  break label3558;
                }
                if (FileUtils.contains(paramInstaller, (File)???))
                {
                  i = 65;
                  break label3558;
                }
                if (FileUtils.contains(localFile2, (File)???))
                {
                  i = 65;
                  break label3558;
                }
                Slog.e("PackageManager", "Ignoring unexpected fallback path " + ???);
              }
            }
            catch (PackageManagerException localPackageManagerException)
            {
              for (;;)
              {
                Slog.e("PackageManager", "Failed to parse original system package: " + localPackageManagerException.getMessage());
              }
            }
          }
        }
        this.mExpectingBetter.clear();
        this.mStorageManagerPackage = getStorageManagerPackageName();
        this.mSetupWizardPackage = getSetupWizardPackageName();
        if (this.mProtectedFilters.size() <= 0) {
          break label3991;
        }
        if ((!DEBUG_FILTERS) || (this.mSetupWizardPackage != null)) {
          break label3766;
        }
        Slog.i("PackageManager", "No setup wizard; All protected intents capped to priority 0");
        paramInstaller = this.mProtectedFilters.iterator();
        Object localObject3;
        while (paramInstaller.hasNext())
        {
          localObject3 = (PackageParser.ActivityIntentInfo)paramInstaller.next();
          if (((PackageParser.ActivityIntentInfo)localObject3).activity.info.packageName.equals(this.mSetupWizardPackage))
          {
            if (DEBUG_FILTERS) {
              Slog.i("PackageManager", "Found setup wizard; allow priority " + ((PackageParser.ActivityIntentInfo)localObject3).getPriority() + ";" + " package: " + ((PackageParser.ActivityIntentInfo)localObject3).activity.info.packageName + " activity: " + ((PackageParser.ActivityIntentInfo)localObject3).activity.className + " priority: " + ((PackageParser.ActivityIntentInfo)localObject3).getPriority());
            }
          }
          else
          {
            Slog.w("PackageManager", "Protected action; cap priority to 0; package: " + ((PackageParser.ActivityIntentInfo)localObject3).activity.info.packageName + " activity: " + ((PackageParser.ActivityIntentInfo)localObject3).activity.className + " origPrio: " + ((PackageParser.ActivityIntentInfo)localObject3).getPriority());
            ((PackageParser.ActivityIntentInfo)localObject3).setPriority(0);
          }
        }
        this.mDeferProtectedFilters = false;
        this.mProtectedFilters.clear();
        updateAllSharedLibrariesLPw();
        paramInstaller = this.mSettings.getAllSharedUsersLPw().iterator();
        while (paramInstaller.hasNext()) {
          adjustCpuAbisForSharedUserLPw(((SharedUserSetting)paramInstaller.next()).packages, null, false);
        }
        this.mPackageUsage.read(this.mPackages);
        this.mCompilerStats.read();
        EventLog.writeEvent(3090, SystemClock.uptimeMillis());
        Slog.i("PackageManager", "Time to scan packages: " + (float)(SystemClock.uptimeMillis() - l) / 1000.0F + " seconds");
        i = 1;
        if (((Settings.VersionInfo)localObject4).sdkVersion == this.mSdkVersion) {
          break label4192;
        }
        Slog.i("PackageManager", "Platform changed from " + ((Settings.VersionInfo)localObject4).sdkVersion + " to " + this.mSdkVersion + "; regranting permissions for internal storage");
        i = 7;
        updatePermissionsLPw(null, null, StorageManager.UUID_PRIVATE_INTERNAL, i);
        ((Settings.VersionInfo)localObject4).sdkVersion = this.mSdkVersion;
        if ((paramBoolean2) || ((!this.mPromoteSystemApps) && (!this.mFirstBoot))) {
          break label4298;
        }
        paramInstaller = sUserManager.getUsers(true).iterator();
        while (paramInstaller.hasNext())
        {
          localObject3 = (UserInfo)paramInstaller.next();
          this.mSettings.applyDefaultPreferredAppsLPw(this, ((UserInfo)localObject3).id);
          applyFactoryDefaultBrowserLPw(((UserInfo)localObject3).id);
          primeDomainVerificationsLPw(((UserInfo)localObject3).id);
        }
        if (!StorageManager.isFileEncryptedNativeOrEmulated()) {
          break label4684;
        }
        i = 1;
        for (;;)
        {
          reconcileAppsDataLI(StorageManager.UUID_PRIVATE_INTERNAL, 0, i);
          if ((this.mIsUpgrade) && (!paramBoolean2)) {
            break label4690;
          }
          checkDefaultBrowser();
          this.mExistingSystemPackages.clear();
          this.mPromoteSystemApps = false;
          ((Settings.VersionInfo)localObject4).databaseVersion = 3;
          this.mSettings.writeLPr();
          if (((isFirstBoot()) || (isUpgrade()) || (VMRuntime.didPruneDalvikCache())) && (!paramBoolean2)) {
            break label4779;
          }
          EventLog.writeEvent(3100, SystemClock.uptimeMillis());
          if (this.mOnlyCore) {
            break label4966;
          }
          this.mRequiredVerifierPackage = getRequiredButNotReallyRequiredVerifierLPr();
          this.mOptionalVerifierPackage = getOptionalVerfiferLPr();
          this.mRequiredInstallerPackage = getRequiredInstallerLPr();
          this.mRequiredUninstallerPackage = getRequiredUninstallerLPr();
          this.mIntentFilterVerifierComponent = getIntentFilterVerifierComponentNameLPr();
          this.mIntentFilterVerifier = new IntentVerifierProxy(this.mContext, this.mIntentFilterVerifierComponent);
          this.mServicesSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr("android.ext.services");
          this.mSharedSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr("android.ext.shared");
          this.mInstallerService = new PackageInstallerService(???, this);
          ??? = getEphemeralResolverLPr();
          paramInstaller = getEphemeralInstallerLPr();
          if ((paramInstaller == null) || (??? == null)) {
            break label5027;
          }
          if (!DEBUG_EPHEMERAL) {
            break label4556;
          }
          Slog.i("PackageManager", "Ephemeral activated; resolver: " + ??? + " installer:" + paramInstaller);
          this.mEphemeralResolverComponent = ???;
          this.mEphemeralInstallerComponent = paramInstaller;
          setUpEphemeralInstallerActivityLP(this.mEphemeralInstallerComponent);
          this.mEphemeralResolverConnection = new EphemeralResolverConnection(this.mContext, this.mEphemeralResolverComponent);
          this.mEphemeralApplicationRegistry = new EphemeralApplicationRegistry(this);
          if ((OpFeatures.isSupport(new int[] { 0 })) && ((this.mFirstBoot) || (!mGmsEnabled))) {
            break label5104;
          }
          Runtime.getRuntime().gc();
          this.mInstaller.setWarnIfHeld(this.mPackages);
          LocalServices.addService(PackageManagerInternal.class, new PackageManagerInternalImpl(null));
          synchronized (this.mPackages)
          {
            OnePlusAppBootManager.getInstance(null).initPackages(this.mPackages);
            return;
            i = 3;
            continue;
            Slog.i("PackageManager", "Build fingerprint changed; clearing code caches");
            i = 0;
            while (i < this.mSettings.mPackages.size())
            {
              paramInstaller = (PackageSetting)this.mSettings.mPackages.valueAt(i);
              if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, paramInstaller.volumeUuid)) {
                clearAppDataLIF(paramInstaller.pkg, -1, 515);
              }
              i += 1;
            }
            ((Settings.VersionInfo)localObject4).fingerprint = Build.FINGERPRINT;
            break label4329;
            l = System.nanoTime();
            paramInstaller = new ArrayList();
            localObject3 = this.mPackages.values().iterator();
            while (((Iterator)localObject3).hasNext())
            {
              localObject4 = (PackageParser.Package)((Iterator)localObject3).next();
              if (((PackageParser.Package)localObject4).coreApp) {
                paramInstaller.add(localObject4);
              }
            }
            paramInstaller = performDexOptUpgrade(paramInstaller, false, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(8));
            i = (int)TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - l);
            MetricsLogger.histogram(this.mContext, "opt_coreapps_time_s", i);
            if (!DEBUG_DEXOPT) {
              break label4383;
            }
            Slog.i("PackageManager", "Dex-opt core apps took : " + i + " seconds (" + paramInstaller[0] + ", " + paramInstaller[1] + ", " + paramInstaller[2] + ")");
            break label4383;
            this.mRequiredVerifierPackage = null;
            this.mOptionalVerifierPackage = null;
            if (!this.mOnlyPowerOffAlarm) {
              break label5019;
            }
            for (this.mRequiredInstallerPackage = getRequiredInstallerLPr();; this.mRequiredInstallerPackage = null)
            {
              this.mRequiredUninstallerPackage = null;
              this.mIntentFilterVerifierComponent = null;
              this.mIntentFilterVerifier = null;
              this.mServicesSystemSharedLibraryPackageName = null;
              this.mSharedSystemSharedLibraryPackageName = null;
              break;
            }
            if (!DEBUG_EPHEMERAL) {
              break label5072;
            }
            if (??? != null) {
              break label5097;
            }
            if (paramInstaller != null) {
              break label5090;
            }
            ??? = "resolver and installer";
            for (;;)
            {
              Slog.i("PackageManager", "Ephemeral deactivated; missing " + ???);
              this.mEphemeralResolverComponent = null;
              this.mEphemeralInstallerComponent = null;
              this.mEphemeralResolverConnection = null;
              break;
              ??? = "resolver";
              continue;
              ??? = "installer";
            }
            setGMSEnabledSetting(UserHandle.ALL, 2);
          }
        }
      }
      scanDirTracedLI(paramInstaller, this.mDefParseFlags | 0x1 | 0x40, 16800, 0L);
      localFile2 = new File(Environment.getOemDirectory(), "app");
      scanDirTracedLI(localFile2, this.mDefParseFlags | 0x1 | 0x40, 16800, 0L);
      if (RegionalizationEnvironment.isSupported())
      {
        Log.d("PackageManager", "Load Regionalization vendor apks");
        localObject1 = RegionalizationEnvironment.getAllPackageDirectories().iterator();
        while (((Iterator)localObject1).hasNext())
        {
          ??? = new File((File)((Iterator)localObject1).next(), "system");
          scanDirLI(new File((File)???, "priv-app"), 193, 16800, 0L);
          scanDirLI(new File((File)???, "app"), 65, 16800, 0L);
          scanDirLI(new File((File)???, "vendor/overlay"), 65, 17312, 0L);
        }
      }
    }
  }
  
  private static void addDozeWhiteList(String paramString)
  {
    IDeviceIdleController localIDeviceIdleController = IDeviceIdleController.Stub.asInterface(ServiceManager.getService("deviceidle"));
    if (localIDeviceIdleController != null) {
      try
      {
        Slog.d("PackageManager", "addDozeWhiteList: " + paramString);
        localIDeviceIdleController.addPowerSaveWhitelistApp(paramString);
        return;
      }
      catch (RemoteException paramString)
      {
        Slog.w("PackageManager", "Falied to add package to doze whitelist");
        return;
      }
    }
    Slog.w("PackageManager", "Cannot get DeviceIdleController");
  }
  
  private void addPackageHoldingPermissions(ArrayList<PackageInfo> paramArrayList, PackageSetting paramPackageSetting, String[] paramArrayOfString, boolean[] paramArrayOfBoolean, int paramInt1, int paramInt2)
  {
    int j = 0;
    PermissionsState localPermissionsState = paramPackageSetting.getPermissionsState();
    int i = 0;
    if (i < paramArrayOfString.length)
    {
      if (localPermissionsState.hasPermission(paramArrayOfString[i], paramInt2))
      {
        paramArrayOfBoolean[i] = true;
        j += 1;
      }
      for (;;)
      {
        i += 1;
        break;
        paramArrayOfBoolean[i] = false;
      }
    }
    if (j == 0) {
      return;
    }
    if (paramPackageSetting.pkg != null)
    {
      paramPackageSetting = generatePackageInfo(paramPackageSetting, paramInt1, paramInt2);
      if (paramPackageSetting != null) {
        if ((paramInt1 & 0x1000) == 0)
        {
          if (j != paramArrayOfString.length) {
            break label131;
          }
          paramPackageSetting.requestedPermissions = paramArrayOfString;
        }
      }
    }
    for (;;)
    {
      paramArrayList.add(paramPackageSetting);
      return;
      paramPackageSetting = generatePackageInfo(paramPackageSetting, paramInt1, paramInt2);
      break;
      label131:
      paramPackageSetting.requestedPermissions = new String[j];
      paramInt2 = 0;
      paramInt1 = 0;
      while (paramInt1 < paramArrayOfString.length)
      {
        i = paramInt2;
        if (paramArrayOfBoolean[paramInt1] != 0)
        {
          paramPackageSetting.requestedPermissions[paramInt2] = paramArrayOfString[paramInt1];
          i = paramInt2 + 1;
        }
        paramInt1 += 1;
        paramInt2 = i;
      }
    }
  }
  
  private void addPreferredActivityInternal(IntentFilter paramIntentFilter, int paramInt1, ComponentName[] paramArrayOfComponentName, ComponentName paramComponentName, boolean paramBoolean, int paramInt2, String paramString)
  {
    int i = Binder.getCallingUid();
    enforceCrossUserPermission(i, paramInt2, true, false, "add preferred activity");
    if (paramIntentFilter.countActions() == 0)
    {
      Slog.w("PackageManager", "Cannot set a preferred activity with no filter actions");
      return;
    }
    synchronized (this.mPackages)
    {
      if (this.mContext.checkCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS") != 0)
      {
        if (getUidTargetSdkVersionLockedLPr(i) < 8)
        {
          Slog.w("PackageManager", "Ignoring addPreferredActivity() from uid " + i);
          return;
        }
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
      }
      PreferredIntentResolver localPreferredIntentResolver = this.mSettings.editPreferredActivitiesLPw(paramInt2);
      Slog.i("PackageManager", paramString + " activity " + paramComponentName.flattenToShortString() + " for user " + paramInt2 + ":");
      paramIntentFilter.dump(new LogPrinter(4, "PackageManager"), "  ");
      localPreferredIntentResolver.addFilter(new PreferredActivity(paramIntentFilter, paramInt1, paramArrayOfComponentName, paramComponentName, paramBoolean));
      scheduleWritePackageRestrictionsLocked(paramInt2);
      postPreferredActivityChangedBroadcast(paramInt2);
      return;
    }
  }
  
  private void addSharedLibraryLPw(ArraySet<String> paramArraySet, SharedLibraryEntry paramSharedLibraryEntry, PackageParser.Package paramPackage)
  {
    if (paramSharedLibraryEntry.path != null)
    {
      paramArraySet.add(paramSharedLibraryEntry.path);
      return;
    }
    PackageParser.Package localPackage2 = (PackageParser.Package)this.mPackages.get(paramSharedLibraryEntry.apk);
    PackageParser.Package localPackage1 = localPackage2;
    if (paramPackage != null)
    {
      localPackage1 = localPackage2;
      if (paramPackage.packageName.equals(paramSharedLibraryEntry.apk)) {
        if (localPackage2 != null)
        {
          localPackage1 = localPackage2;
          if (!localPackage2.packageName.equals(paramPackage.packageName)) {}
        }
        else
        {
          localPackage1 = paramPackage;
        }
      }
    }
    if (localPackage1 != null) {
      paramArraySet.addAll(localPackage1.getAllCodePaths());
    }
  }
  
  private void adjustCpuAbisForSharedUserLPw(Set<PackageSetting> paramSet, PackageParser.Package paramPackage, boolean paramBoolean)
  {
    Object localObject1 = null;
    Object localObject2 = localObject1;
    if (paramPackage != null)
    {
      localObject2 = localObject1;
      if (paramPackage.applicationInfo.primaryCpuAbi != null) {
        localObject2 = VMRuntime.getInstructionSet(paramPackage.applicationInfo.primaryCpuAbi);
      }
    }
    int i = 0;
    int[] arrayOfInt = new int[3];
    arrayOfInt[0] = 0;
    arrayOfInt[1] = 0;
    arrayOfInt[2] = 0;
    localObject1 = null;
    Iterator localIterator = paramSet.iterator();
    PackageSetting localPackageSetting;
    Object localObject4;
    int j;
    Object localObject3;
    while (localIterator.hasNext())
    {
      localPackageSetting = (PackageSetting)localIterator.next();
      if (((paramPackage == null) || (!paramPackage.packageName.equals(localPackageSetting.name))) && (localPackageSetting.primaryCpuAbiString != null))
      {
        localObject4 = VMRuntime.getInstructionSet(localPackageSetting.primaryCpuAbiString);
        j = this.mOemCompatibilityHelper.convertAbi2Int(localPackageSetting.primaryCpuAbiString);
        arrayOfInt[j] += 1;
        j = i;
        if (localObject2 != null)
        {
          if (((String)localObject4).equals(localObject2)) {
            j = i;
          }
        }
        else
        {
          i = j;
          if (localObject2 != null) {
            continue;
          }
          localObject2 = localObject4;
          localObject1 = localPackageSetting;
          i = j;
          continue;
        }
        StringBuilder localStringBuilder = new StringBuilder().append("Instruction set mismatch, ");
        if (localObject1 == null) {}
        for (localObject3 = "[caller]";; localObject3 = localObject1)
        {
          Slog.w("PackageManager", localObject3 + " requires " + (String)localObject2 + " whereas " + localPackageSetting + " requires " + (String)localObject4);
          j = i + 1;
          break;
        }
      }
    }
    if (localObject2 != null)
    {
      if (localObject1 != null)
      {
        Slog.d("PackageManager", "abi64=" + arrayOfInt[0] + " abiv7a=" + arrayOfInt[1] + "abi=" + arrayOfInt[2]);
        if (i > 2)
        {
          j = 0;
          int m = -1;
          i = 0;
          while (i < arrayOfInt.length)
          {
            int k = j;
            if (arrayOfInt[i] > j)
            {
              k = arrayOfInt[i];
              m = i;
            }
            i += 1;
            j = k;
          }
          if (m >= 0) {
            this.mOemCompatibilityHelper.convertAbi2String(m);
          }
        }
        localObject3 = ((PackageSetting)localObject1).primaryCpuAbiString;
        localObject2 = localObject3;
        if (paramPackage != null)
        {
          paramPackage.applicationInfo.primaryCpuAbi = ((String)localObject3);
          localObject2 = localObject3;
        }
        localObject3 = paramSet.iterator();
        label472:
        do
        {
          do
          {
            if (!((Iterator)localObject3).hasNext()) {
              break;
            }
            localPackageSetting = (PackageSetting)((Iterator)localObject3).next();
          } while (((paramPackage != null) && (paramPackage.packageName.equals(localPackageSetting.name))) || (localPackageSetting.primaryCpuAbiString != null));
          localPackageSetting.primaryCpuAbiString = ((String)localObject2);
        } while ((localPackageSetting.pkg == null) || (localPackageSetting.pkg.applicationInfo == null) || (TextUtils.equals((CharSequence)localObject2, localPackageSetting.pkg.applicationInfo.primaryCpuAbi)));
        localPackageSetting.pkg.applicationInfo.primaryCpuAbi = ((String)localObject2);
        localObject4 = new StringBuilder().append("Adjusting ABI for ").append(localPackageSetting.name).append(" to ").append((String)localObject2).append(" (requirer=");
        if (localObject1 != null) {
          break label710;
        }
        paramSet = "null";
        label628:
        localObject4 = ((StringBuilder)localObject4).append(paramSet).append(", scannedPackage=");
        if (paramPackage == null) {
          break label737;
        }
      }
      label710:
      label737:
      for (paramSet = paramPackage.packageName;; paramSet = "null")
      {
        Slog.i("PackageManager", paramSet + ")");
        try
        {
          this.mInstaller.rmdex(localPackageSetting.codePathString, InstructionSets.getDexCodeInstructionSet(InstructionSets.getPreferredInstructionSet()));
        }
        catch (InstallerConnection.InstallerException paramSet) {}
        break label472;
        localObject2 = paramPackage.applicationInfo.primaryCpuAbi;
        break;
        if (((PackageSetting)localObject1).pkg == null)
        {
          paramSet = "null";
          break label628;
        }
        paramSet = ((PackageSetting)localObject1).pkg.packageName;
        break label628;
      }
    }
  }
  
  private boolean allHavePackage(List<ResolveInfo> paramList, String paramString)
  {
    if (ArrayUtils.isEmpty(paramList)) {
      return false;
    }
    int i = 0;
    int j = paramList.size();
    if (i < j)
    {
      Object localObject = (ResolveInfo)paramList.get(i);
      if (localObject != null) {}
      for (localObject = ((ResolveInfo)localObject).activityInfo;; localObject = null)
      {
        if ((localObject == null) || (!paramString.equals(((ActivityInfo)localObject).packageName))) {
          break label79;
        }
        i += 1;
        break;
      }
      label79:
      return false;
    }
    return true;
  }
  
  /* Error */
  private static boolean apkHasCode(String paramString)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_1
    //   2: aconst_null
    //   3: astore_2
    //   4: aconst_null
    //   5: astore_3
    //   6: new 2447	android/util/jar/StrictJarFile
    //   9: dup
    //   10: aload_0
    //   11: iconst_0
    //   12: iconst_0
    //   13: invokespecial 2450	android/util/jar/StrictJarFile:<init>	(Ljava/lang/String;ZZ)V
    //   16: astore_0
    //   17: aload_0
    //   18: ldc_w 2452
    //   21: invokevirtual 2456	android/util/jar/StrictJarFile:findEntry	(Ljava/lang/String;)Ljava/util/zip/ZipEntry;
    //   24: astore_2
    //   25: aload_2
    //   26: ifnull +5 -> 31
    //   29: iconst_1
    //   30: istore_1
    //   31: aload_0
    //   32: ifnull +7 -> 39
    //   35: aload_0
    //   36: invokevirtual 2459	android/util/jar/StrictJarFile:close	()V
    //   39: iload_1
    //   40: ireturn
    //   41: astore_0
    //   42: iload_1
    //   43: ireturn
    //   44: astore_0
    //   45: aload_3
    //   46: astore_0
    //   47: aload_0
    //   48: ifnull +7 -> 55
    //   51: aload_0
    //   52: invokevirtual 2459	android/util/jar/StrictJarFile:close	()V
    //   55: iconst_0
    //   56: ireturn
    //   57: astore_0
    //   58: iconst_0
    //   59: ireturn
    //   60: astore_0
    //   61: aload_2
    //   62: ifnull +7 -> 69
    //   65: aload_2
    //   66: invokevirtual 2459	android/util/jar/StrictJarFile:close	()V
    //   69: aload_0
    //   70: athrow
    //   71: astore_2
    //   72: goto -3 -> 69
    //   75: astore_3
    //   76: aload_0
    //   77: astore_2
    //   78: aload_3
    //   79: astore_0
    //   80: goto -19 -> 61
    //   83: astore_2
    //   84: goto -37 -> 47
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	87	0	paramString	String
    //   1	42	1	bool	boolean
    //   3	63	2	localZipEntry	java.util.zip.ZipEntry
    //   71	1	2	localIOException1	IOException
    //   77	1	2	str	String
    //   83	1	2	localIOException2	IOException
    //   5	41	3	localObject1	Object
    //   75	4	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   35	39	41	java/io/IOException
    //   6	17	44	java/io/IOException
    //   51	55	57	java/io/IOException
    //   6	17	60	finally
    //   65	69	71	java/io/IOException
    //   17	25	75	finally
    //   17	25	83	java/io/IOException
  }
  
  static int[] appendInts(int[] paramArrayOfInt1, int[] paramArrayOfInt2)
  {
    if (paramArrayOfInt2 == null) {
      return paramArrayOfInt1;
    }
    if (paramArrayOfInt1 == null) {
      return paramArrayOfInt2;
    }
    int j = paramArrayOfInt2.length;
    int i = 0;
    while (i < j)
    {
      paramArrayOfInt1 = ArrayUtils.appendInt(paramArrayOfInt1, paramArrayOfInt2[i]);
      i += 1;
    }
    return paramArrayOfInt1;
  }
  
  private void applyFactoryDefaultBrowserLPw(int paramInt)
  {
    String str2 = this.mContext.getResources().getString(17039432);
    String str1 = str2;
    if (!TextUtils.isEmpty(str2))
    {
      if ((PackageSetting)this.mSettings.mPackages.get(str2) != null) {
        break label79;
      }
      Slog.e("PackageManager", "Product default browser app does not exist: " + str2);
    }
    for (str1 = null;; str1 = str2)
    {
      if (str1 == null) {
        calculateDefaultBrowserLPw(paramInt);
      }
      return;
      label79:
      this.mSettings.setDefaultBrowserPackageNameLPw(str2, paramInt);
    }
  }
  
  static String arrayToString(int[] paramArrayOfInt)
  {
    StringBuffer localStringBuffer = new StringBuffer(128);
    localStringBuffer.append('[');
    if (paramArrayOfInt != null)
    {
      int i = 0;
      while (i < paramArrayOfInt.length)
      {
        if (i > 0) {
          localStringBuffer.append(", ");
        }
        localStringBuffer.append(paramArrayOfInt[i]);
        i += 1;
      }
    }
    localStringBuffer.append(']');
    return localStringBuffer.toString();
  }
  
  private void assertPackageKnown(String paramString1, String paramString2)
    throws PackageManagerException
  {
    PackageSetting localPackageSetting;
    synchronized (this.mPackages)
    {
      paramString2 = normalizePackageNameLPr(paramString2);
      localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString2);
      if (localPackageSetting == null) {
        throw new PackageManagerException("Package " + paramString2 + " is unknown");
      }
    }
    if (!TextUtils.equals(paramString1, localPackageSetting.volumeUuid)) {
      throw new PackageManagerException("Package " + paramString2 + " found on unknown volume " + paramString1 + "; expected volume " + localPackageSetting.volumeUuid);
    }
  }
  
  private void assertPackageKnownAndInstalled(String paramString1, String paramString2, int paramInt)
    throws PackageManagerException
  {
    PackageSetting localPackageSetting;
    synchronized (this.mPackages)
    {
      paramString2 = normalizePackageNameLPr(paramString2);
      localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString2);
      if (localPackageSetting == null) {
        throw new PackageManagerException("Package " + paramString2 + " is unknown");
      }
    }
    if (!TextUtils.equals(paramString1, localPackageSetting.volumeUuid)) {
      throw new PackageManagerException("Package " + paramString2 + " found on unknown volume " + paramString1 + "; expected volume " + localPackageSetting.volumeUuid);
    }
    if (!localPackageSetting.getInstalled(paramInt)) {
      throw new PackageManagerException("Package " + paramString2 + " not installed for user " + paramInt);
    }
  }
  
  private int bestDomainVerificationStatus(int paramInt1, int paramInt2)
  {
    if (paramInt1 == 3) {
      return paramInt2;
    }
    if (paramInt2 == 3) {
      return paramInt1;
    }
    return (int)MathUtils.max(paramInt1, paramInt2);
  }
  
  private void broadcastPackageVerified(int paramInt1, Uri paramUri, int paramInt2, UserHandle paramUserHandle)
  {
    Intent localIntent = new Intent("android.intent.action.PACKAGE_VERIFIED");
    localIntent.setDataAndType(paramUri, "application/vnd.android.package-archive");
    localIntent.addFlags(1);
    localIntent.putExtra("android.content.pm.extra.VERIFICATION_ID", paramInt1);
    localIntent.putExtra("android.content.pm.extra.VERIFICATION_RESULT", paramInt2);
    this.mContext.sendBroadcastAsUser(localIntent, paramUserHandle, "android.permission.PACKAGE_VERIFICATION_AGENT");
  }
  
  private static String calculateBundledApkRoot(String paramString)
  {
    File localFile2 = new File(paramString);
    if (FileUtils.contains(Environment.getRootDirectory(), localFile2)) {
      paramString = Environment.getRootDirectory();
    }
    for (;;)
    {
      return paramString.getPath();
      if (FileUtils.contains(Environment.getOemDirectory(), localFile2)) {
        paramString = Environment.getOemDirectory();
      } else if (FileUtils.contains(Environment.getVendorDirectory(), localFile2)) {
        paramString = Environment.getVendorDirectory();
      } else {
        try
        {
          paramString = localFile2.getCanonicalFile();
          File localFile1;
          for (Object localObject = paramString.getParentFile();; localObject = localFile1)
          {
            localFile1 = ((File)localObject).getParentFile();
            if (localFile1 == null) {
              break;
            }
            paramString = (String)localObject;
          }
          Slog.w("PackageManager", "Unrecognized code path " + localFile2 + " - using " + paramString);
        }
        catch (IOException paramString)
        {
          Slog.w("PackageManager", "Can't canonicalize code path " + localFile2);
        }
      }
    }
    return Environment.getRootDirectory().getPath();
  }
  
  private void calculateDefaultBrowserLPw(int paramInt)
  {
    Object localObject = resolveAllBrowserApps(paramInt);
    if (((List)localObject).size() == 1) {}
    for (localObject = (String)((List)localObject).get(0);; localObject = null)
    {
      this.mSettings.setDefaultBrowserPackageNameLPw((String)localObject, paramInt);
      return;
    }
  }
  
  private static long calculateDirectorySize(IMediaContainerService paramIMediaContainerService, File[] paramArrayOfFile)
    throws RemoteException
  {
    long l = 0L;
    int i = 0;
    int j = paramArrayOfFile.length;
    while (i < j)
    {
      l += paramIMediaContainerService.calculateDirectorySize(paramArrayOfFile[i].getAbsolutePath());
      i += 1;
    }
    return l;
  }
  
  private boolean canSuspendPackageForUserLocked(String paramString, int paramInt)
  {
    if (isPackageDeviceAdmin(paramString, paramInt))
    {
      Slog.w("PackageManager", "Cannot suspend/un-suspend package \"" + paramString + "\": has an active device admin");
      return false;
    }
    if (paramString.equals(getActiveLauncherPackageName(paramInt)))
    {
      Slog.w("PackageManager", "Cannot suspend/un-suspend package \"" + paramString + "\": contains the active launcher");
      return false;
    }
    if (paramString.equals(this.mRequiredInstallerPackage))
    {
      Slog.w("PackageManager", "Cannot suspend/un-suspend package \"" + paramString + "\": required for package installation");
      return false;
    }
    if (paramString.equals(this.mRequiredUninstallerPackage))
    {
      Slog.w("PackageManager", "Cannot suspend/un-suspend package \"" + paramString + "\": required for package uninstallation");
      return false;
    }
    if (paramString.equals(this.mRequiredVerifierPackage))
    {
      Slog.w("PackageManager", "Cannot suspend/un-suspend package \"" + paramString + "\": required for package verification");
      return false;
    }
    if (paramString.equals(getDefaultDialerPackageName(paramInt)))
    {
      Slog.w("PackageManager", "Cannot suspend/un-suspend package \"" + paramString + "\": is the default dialer");
      return false;
    }
    if (this.mProtectedPackages.isPackageStateProtected(paramInt, paramString))
    {
      Slog.w("PackageManager", "Cannot suspend/un-suspend package \"" + paramString + "\": protected package");
      return false;
    }
    return true;
  }
  
  private void checkDefaultBrowser()
  {
    int i = UserHandle.myUserId();
    ??? = getDefaultBrowserPackageName(i);
    if ((??? != null) && (getPackageInfo((String)???, 0, i) == null)) {
      Slog.w("PackageManager", "Default browser no longer installed: " + (String)???);
    }
    synchronized (this.mPackages)
    {
      applyFactoryDefaultBrowserLPw(i);
      return;
    }
  }
  
  private static void checkDowngrade(PackageParser.Package paramPackage, PackageInfoLite paramPackageInfoLite)
    throws PackageManagerException
  {
    if (paramPackageInfoLite.versionCode < paramPackage.mVersionCode) {
      throw new PackageManagerException(-25, "Update version code " + paramPackageInfoLite.versionCode + " is older than current " + paramPackage.mVersionCode);
    }
    if (paramPackageInfoLite.versionCode == paramPackage.mVersionCode)
    {
      if (paramPackageInfoLite.baseRevisionCode < paramPackage.baseRevisionCode) {
        throw new PackageManagerException(-25, "Update base revision code " + paramPackageInfoLite.baseRevisionCode + " is older than current " + paramPackage.baseRevisionCode);
      }
      if (!ArrayUtils.isEmpty(paramPackageInfoLite.splitNames))
      {
        int i = 0;
        while (i < paramPackageInfoLite.splitNames.length)
        {
          String str = paramPackageInfoLite.splitNames[i];
          int j = ArrayUtils.indexOf(paramPackage.splitNames, str);
          if ((j != -1) && (paramPackageInfoLite.splitRevisionCodes[i] < paramPackage.splitRevisionCodes[j])) {
            throw new PackageManagerException(-25, "Update split " + str + " revision code " + paramPackageInfoLite.splitRevisionCodes[i] + " is older than current " + paramPackage.splitRevisionCodes[j]);
          }
          i += 1;
        }
      }
    }
  }
  
  private void checkPackageFrozen(String paramString)
  {
    synchronized (this.mPackages)
    {
      if (!this.mFrozenPackages.contains(paramString)) {
        Slog.wtf("PackageManager", "Expected " + paramString + " to be frozen!", new Throwable());
      }
      return;
    }
  }
  
  private BasePermission checkPermissionTreeLP(String paramString)
  {
    if (paramString != null)
    {
      BasePermission localBasePermission = findPermissionTreeLP(paramString);
      if (localBasePermission != null)
      {
        if (localBasePermission.uid == UserHandle.getAppId(Binder.getCallingUid())) {
          return localBasePermission;
        }
        throw new SecurityException("Calling uid " + Binder.getCallingUid() + " is not allowed to add to permission tree " + localBasePermission.name + " owned by uid " + localBasePermission.uid);
      }
    }
    throw new SecurityException("No permission tree found for " + paramString);
  }
  
  private boolean checkUpgradeKeySetLP(PackageSetting paramPackageSetting, PackageParser.Package paramPackage)
  {
    paramPackageSetting = paramPackageSetting.keySetData.getUpgradeKeySets();
    KeySetManagerService localKeySetManagerService = this.mSettings.mKeySetManagerService;
    int i = 0;
    while (i < paramPackageSetting.length)
    {
      ArraySet localArraySet = localKeySetManagerService.getPublicKeysFromKeySetLPr(paramPackageSetting[i]);
      if ((localArraySet != null) && (paramPackage.mSigningKeys.containsAll(localArraySet))) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private ResolveInfo chooseBestActivity(Intent paramIntent, String paramString, int paramInt1, List<ResolveInfo> paramList, int paramInt2)
  {
    if (paramList != null)
    {
      int i = paramList.size();
      if (i == 1) {
        return (ResolveInfo)paramList.get(0);
      }
      if (i > 1)
      {
        boolean bool;
        ResolveInfo localResolveInfo1;
        ResolveInfo localResolveInfo2;
        if ((paramIntent.getFlags() & 0x8) != 0)
        {
          bool = true;
          localResolveInfo1 = (ResolveInfo)paramList.get(0);
          localResolveInfo2 = (ResolveInfo)paramList.get(1);
          if ((DEBUG_INTENT_MATCHING) || (bool)) {
            Slog.v("PackageManager", localResolveInfo1.activityInfo.name + "=" + localResolveInfo1.priority + " vs " + localResolveInfo2.activityInfo.name + "=" + localResolveInfo2.priority);
          }
          if ((localResolveInfo1.priority == localResolveInfo2.priority) && (localResolveInfo1.preferredOrder == localResolveInfo2.preferredOrder)) {
            break label205;
          }
        }
        label205:
        while (localResolveInfo1.isDefault != localResolveInfo2.isDefault)
        {
          return (ResolveInfo)paramList.get(0);
          bool = false;
          break;
        }
        paramString = findPreferredActivity(paramIntent, paramString, paramInt1, paramList, localResolveInfo1.priority, true, false, bool, paramInt2);
        if (paramString != null) {
          return paramString;
        }
        paramString = new ResolveInfo(this.mResolveInfo);
        paramString.activityInfo = new ActivityInfo(paramString.activityInfo);
        paramString.activityInfo.labelRes = ResolverActivity.getLabelRes(paramIntent.getAction());
        paramIntent = paramIntent.getPackage();
        if ((!TextUtils.isEmpty(paramIntent)) && (allHavePackage(paramList, paramIntent)))
        {
          paramList = ((ResolveInfo)paramList.get(0)).activityInfo.applicationInfo;
          paramString.resolvePackageName = paramIntent;
          if (!userNeedsBadging(paramInt2)) {
            break label458;
          }
          paramString.noResourceId = true;
        }
        for (;;)
        {
          paramString.iconResourceId = paramList.icon;
          paramString.labelRes = paramList.labelRes;
          paramString.activityInfo.applicationInfo = new ApplicationInfo(paramString.activityInfo.applicationInfo);
          if (paramInt2 != 0) {
            paramString.activityInfo.applicationInfo.uid = UserHandle.getUid(paramInt2, UserHandle.getAppId(paramString.activityInfo.applicationInfo.uid));
          }
          if (paramString.activityInfo.metaData == null) {
            paramString.activityInfo.metaData = new Bundle();
          }
          paramString.activityInfo.metaData.putBoolean("android.dock_home", true);
          return paramString;
          label458:
          paramString.icon = paramList.icon;
        }
      }
    }
    return null;
  }
  
  static String cidFromCodePath(String paramString)
  {
    int i = paramString.lastIndexOf("/");
    paramString = paramString.substring(0, i);
    return paramString.substring(paramString.lastIndexOf("/") + 1, i);
  }
  
  private void clearAppDataLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    if (paramPackage == null)
    {
      Slog.wtf("PackageManager", "Package was null!", new Throwable());
      return;
    }
    clearAppDataLeafLIF(paramPackage, paramInt1, paramInt2);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        clearAppDataLeafLIF((PackageParser.Package)paramPackage.childPackages.get(j), paramInt1, paramInt2);
        j += 1;
      }
    }
  }
  
  private void clearAppDataLeafLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    for (;;)
    {
      int j;
      long l;
      synchronized (this.mPackages)
      {
        PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramPackage.packageName);
        ??? = resolveUserIds(paramInt1);
        int i = ???.length;
        paramInt1 = 0;
        if (paramInt1 >= i) {
          return;
        }
        j = ???[paramInt1];
        if (localPackageSetting != null) {
          l = localPackageSetting.getCeDataInode(j);
        }
      }
      try
      {
        for (;;)
        {
          this.mInstaller.clearAppData(paramPackage.volumeUuid, paramPackage.packageName, j, paramInt2, l);
          paramInt1 += 1;
          break;
          paramPackage = finally;
          throw paramPackage;
          l = 0L;
        }
      }
      catch (InstallerConnection.InstallerException localInstallerException)
      {
        for (;;)
        {
          Slog.w("PackageManager", String.valueOf(localInstallerException));
        }
      }
    }
  }
  
  private void clearAppProfilesLIF(PackageParser.Package paramPackage, int paramInt)
  {
    if (paramPackage == null)
    {
      Slog.wtf("PackageManager", "Package was null!", new Throwable());
      return;
    }
    clearAppProfilesLeafLIF(paramPackage);
    destroyAppReferenceProfileLeafLIF(paramPackage, paramInt, false);
    if (paramPackage.childPackages != null) {}
    for (paramInt = paramPackage.childPackages.size();; paramInt = 0)
    {
      int i = 0;
      while (i < paramInt)
      {
        clearAppProfilesLeafLIF((PackageParser.Package)paramPackage.childPackages.get(i));
        i += 1;
      }
    }
  }
  
  private void clearAppProfilesLeafLIF(PackageParser.Package paramPackage)
  {
    try
    {
      this.mInstaller.clearAppProfiles(paramPackage.packageName);
      return;
    }
    catch (InstallerConnection.InstallerException paramPackage)
    {
      Slog.w("PackageManager", String.valueOf(paramPackage));
    }
  }
  
  private boolean clearApplicationUserDataLIF(String paramString, int paramInt)
  {
    if (paramString == null)
    {
      Slog.w("PackageManager", "Attempt to delete null packageName.");
      return false;
    }
    for (;;)
    {
      int i;
      synchronized (this.mPackages)
      {
        PackageParser.Package localPackage2 = (PackageParser.Package)this.mPackages.get(paramString);
        PackageParser.Package localPackage1 = localPackage2;
        if (localPackage2 == null)
        {
          PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
          localPackage1 = localPackage2;
          if (localPackageSetting != null) {
            localPackage1 = localPackageSetting.pkg;
          }
        }
        if (localPackage1 == null)
        {
          Slog.w("PackageManager", "Package named '" + paramString + "' doesn't exist.");
          return false;
        }
        resetUserChangesToRuntimePermissionsAndFlagsLPw((PackageSetting)localPackage1.mExtras, paramInt);
        clearAppDataLIF(localPackage1, paramInt, 3);
        removeKeystoreDataIfNeeded(paramInt, UserHandle.getAppId(localPackage1.applicationInfo.uid));
        paramString = getUserManagerInternal();
        if (paramString.isUserUnlockingOrUnlocked(paramInt))
        {
          i = 3;
          prepareAppDataContentsLIF(localPackage1, paramInt, i);
          return true;
        }
      }
      if (paramString.isUserRunning(paramInt)) {
        i = 1;
      } else {
        i = 0;
      }
    }
  }
  
  private static void clearDirectory(IMediaContainerService paramIMediaContainerService, File[] paramArrayOfFile)
  {
    int i = 0;
    int j = paramArrayOfFile.length;
    for (;;)
    {
      File localFile;
      if (i < j) {
        localFile = paramArrayOfFile[i];
      }
      try
      {
        paramIMediaContainerService.clearDirectory(localFile.getAbsolutePath());
        i += 1;
        continue;
        return;
      }
      catch (RemoteException localRemoteException)
      {
        for (;;) {}
      }
    }
  }
  
  private void clearExternalStorageDataSync(String paramString, int paramInt, boolean paramBoolean)
  {
    if ("com.android.defcontainer".equals(paramString)) {
      return;
    }
    boolean bool;
    if (Environment.isExternalStorageEmulated()) {
      bool = true;
    }
    Object localObject1;
    while (!bool)
    {
      return;
      localObject1 = Environment.getExternalStorageState();
      if (!((String)localObject1).equals("mounted")) {
        bool = ((String)localObject1).equals("mounted_ro");
      } else {
        bool = true;
      }
    }
    Intent localIntent = new Intent().setComponent(DEFAULT_CONTAINER_COMPONENT);
    ClearStorageConnection localClearStorageConnection;
    if (paramInt == -1)
    {
      localObject1 = sUserManager.getUserIds();
      localClearStorageConnection = new ClearStorageConnection(null);
      if (this.mContext.bindServiceAsUser(localIntent, localClearStorageConnection, 1, UserHandle.SYSTEM)) {
        paramInt = 0;
      }
    }
    else
    {
      for (;;)
      {
        Object localObject2;
        try
        {
          int i = localObject1.length;
          if (paramInt >= i) {
            break label307;
          }
          int j = localObject1[paramInt];
          long l1 = SystemClock.uptimeMillis() + 5000L;
          try
          {
            if (localClearStorageConnection.mContainerService == null)
            {
              long l2 = SystemClock.uptimeMillis();
              if (l2 < l1)
              {
                try
                {
                  localClearStorageConnection.wait(l1 - l2);
                }
                catch (InterruptedException localInterruptedException) {}
                continue;
                localObject1 = new int[1];
                localObject1[0] = paramInt;
                break;
              }
            }
            localObject2 = localClearStorageConnection.mContainerService;
            if (localObject2 == null) {
              return;
            }
          }
          finally {}
          localObject2 = new Environment.UserEnvironment(j);
        }
        finally
        {
          this.mContext.unbindService(localClearStorageConnection);
        }
        clearDirectory(localClearStorageConnection.mContainerService, ((Environment.UserEnvironment)localObject2).buildExternalStorageAppCacheDirs(paramString));
        if (paramBoolean)
        {
          clearDirectory(localClearStorageConnection.mContainerService, ((Environment.UserEnvironment)localObject2).buildExternalStorageAppDataDirs(paramString));
          clearDirectory(localClearStorageConnection.mContainerService, ((Environment.UserEnvironment)localObject2).buildExternalStorageAppMediaDirs(paramString));
        }
        paramInt += 1;
      }
      label307:
      this.mContext.unbindService(localClearStorageConnection);
    }
  }
  
  private void clearIntentFilterVerificationsLPw(int paramInt)
  {
    int j = this.mPackages.size();
    int i = 0;
    while (i < j)
    {
      clearIntentFilterVerificationsLPw(((PackageParser.Package)this.mPackages.valueAt(i)).packageName, paramInt);
      i += 1;
    }
  }
  
  private boolean clearPackageStateForUserLIF(PackageSetting paramPackageSetting, int paramInt, PackageRemovedInfo paramPackageRemovedInfo)
  {
    for (;;)
    {
      int i;
      int k;
      synchronized (this.mPackages)
      {
        PackageParser.Package localPackage = (PackageParser.Package)this.mPackages.get(paramPackageSetting.name);
        if (paramInt == -1)
        {
          ??? = sUserManager.getUserIds();
          int j = ???.length;
          i = 0;
          if (i >= j) {
            break;
          }
          k = ???[i];
          if (DEBUG_REMOVE) {
            Slog.d("PackageManager", "Updating package:" + paramPackageSetting.name + " install state for user:" + k);
          }
          destroyAppDataLIF(localPackage, paramInt, 3);
          destroyAppProfilesLIF(localPackage, paramInt);
          removeKeystoreDataIfNeeded(k, paramPackageSetting.appId);
          schedulePackageCleaning(paramPackageSetting.name, k, false);
        }
      }
      synchronized (this.mPackages)
      {
        if (clearPackagePreferredActivitiesLPw(paramPackageSetting.name, k)) {
          scheduleWritePackageRestrictionsLocked(k);
        }
        resetUserChangesToRuntimePermissionsAndFlagsLPw(paramPackageSetting, k);
        i += 1;
        continue;
        paramPackageSetting = finally;
        throw paramPackageSetting;
        ??? = new int[1];
        ???[0] = paramInt;
      }
    }
    if (paramPackageRemovedInfo != null)
    {
      paramPackageRemovedInfo.removedPackage = paramPackageSetting.name;
      paramPackageRemovedInfo.removedAppId = paramPackageSetting.appId;
      paramPackageRemovedInfo.removedUsers = ((int[])???);
    }
    return true;
  }
  
  private void collectCertificatesLI(PackageSetting paramPackageSetting, PackageParser.Package paramPackage, File arg3, int paramInt)
    throws PackageManagerException
  {
    long l;
    if (this.mIsPreNMR1Upgrade)
    {
      l = new File(paramPackage.codePath).lastModified();
      if ((paramPackageSetting != null) && (paramPackageSetting.codePath.equals(???)) && (paramPackageSetting.timeStamp == l) && (!isCompatSignatureUpdateNeeded(paramPackage))) {
        break label104;
      }
      label56:
      Slog.i("PackageManager", ???.toString() + " changed; collecting certs");
    }
    for (;;)
    {
      try
      {
        PackageParser.collectCertificates(paramPackage, paramInt);
        return;
      }
      catch (PackageParser.PackageParserException paramPackageSetting)
      {
        label104:
        Object localObject;
        throw PackageManagerException.from(paramPackageSetting);
      }
      l = getLastModifiedTime(paramPackage, ???);
      break;
      if (isRecoverSignatureUpdateNeeded(paramPackage)) {
        break label56;
      }
      l = paramPackageSetting.keySetData.getProperSigningKeySet();
      localObject = this.mSettings.mKeySetManagerService;
      synchronized (this.mPackages)
      {
        localObject = ((KeySetManagerService)localObject).getPublicKeysFromKeySetLPr(l);
        if ((paramPackageSetting.signatures.mSignatures != null) && (paramPackageSetting.signatures.mSignatures.length != 0) && (localObject != null))
        {
          paramPackage.mSignatures = paramPackageSetting.signatures.mSignatures;
          paramPackage.mSigningKeys = ((ArraySet)localObject);
          return;
        }
      }
      Slog.w("PackageManager", "PackageSetting for " + paramPackageSetting.name + " is missing signatures.  Collecting certs again to recover them.");
    }
  }
  
  static boolean comparePermissionInfos(PermissionInfo paramPermissionInfo1, PermissionInfo paramPermissionInfo2)
  {
    if (paramPermissionInfo1.icon != paramPermissionInfo2.icon) {
      return false;
    }
    if (paramPermissionInfo1.logo != paramPermissionInfo2.logo) {
      return false;
    }
    if (paramPermissionInfo1.protectionLevel != paramPermissionInfo2.protectionLevel) {
      return false;
    }
    if (!compareStrings(paramPermissionInfo1.name, paramPermissionInfo2.name)) {
      return false;
    }
    if (!compareStrings(paramPermissionInfo1.nonLocalizedLabel, paramPermissionInfo2.nonLocalizedLabel)) {
      return false;
    }
    return compareStrings(paramPermissionInfo1.packageName, paramPermissionInfo2.packageName);
  }
  
  static int compareSignatures(Signature[] paramArrayOfSignature1, Signature[] paramArrayOfSignature2)
  {
    if (paramArrayOfSignature1 == null)
    {
      if (paramArrayOfSignature2 == null) {
        return 1;
      }
      return -1;
    }
    if (paramArrayOfSignature2 == null) {
      return -2;
    }
    if (paramArrayOfSignature1.length != paramArrayOfSignature2.length) {
      return -3;
    }
    if (paramArrayOfSignature1.length == 1)
    {
      if (paramArrayOfSignature1[0].equals(paramArrayOfSignature2[0])) {
        return 0;
      }
      return -3;
    }
    ArraySet localArraySet = new ArraySet();
    int j = paramArrayOfSignature1.length;
    int i = 0;
    while (i < j)
    {
      localArraySet.add(paramArrayOfSignature1[i]);
      i += 1;
    }
    paramArrayOfSignature1 = new ArraySet();
    j = paramArrayOfSignature2.length;
    i = 0;
    while (i < j)
    {
      paramArrayOfSignature1.add(paramArrayOfSignature2[i]);
      i += 1;
    }
    if (localArraySet.equals(paramArrayOfSignature1)) {
      return 0;
    }
    return -3;
  }
  
  private int compareSignaturesCompat(PackageSignatures arg1, PackageParser.Package paramPackage)
  {
    if (!isCompatSignatureUpdateNeeded(paramPackage)) {
      return -3;
    }
    ArraySet localArraySet = new ArraySet();
    Object localObject = ???.mSignatures;
    int j = localObject.length;
    int i = 0;
    while (i < j)
    {
      localArraySet.add(localObject[i]);
      i += 1;
    }
    localObject = new ArraySet();
    Signature[] arrayOfSignature1 = paramPackage.mSignatures;
    int k = arrayOfSignature1.length;
    i = 0;
    for (;;)
    {
      if (i < k)
      {
        Signature localSignature = arrayOfSignature1[i];
        try
        {
          Signature[] arrayOfSignature2 = localSignature.getChainSignatures();
          int m = arrayOfSignature2.length;
          j = 0;
          while (j < m)
          {
            ((ArraySet)localObject).add(arrayOfSignature2[j]);
            j += 1;
          }
        }
        catch (CertificateEncodingException localCertificateEncodingException)
        {
          ((ArraySet)localObject).add(localSignature);
          i += 1;
        }
      }
    }
    if (((ArraySet)localObject).equals(localArraySet))
    {
      ???.assignSignatures(paramPackage.mSignatures);
      synchronized (this.mPackages)
      {
        this.mSettings.mKeySetManagerService.removeAppKeySetDataLPw(paramPackage.packageName);
        return 0;
      }
    }
    return -3;
  }
  
  private int compareSignaturesRecover(PackageSignatures paramPackageSignatures, PackageParser.Package paramPackage)
  {
    if (!isRecoverSignatureUpdateNeeded(paramPackage)) {
      return -3;
    }
    String str = null;
    try
    {
      if (Signature.areEffectiveMatch(paramPackageSignatures.mSignatures, paramPackage.mSignatures))
      {
        logCriticalInfo(4, "Recovered effectively matching certificates for " + paramPackage.packageName);
        return 0;
      }
    }
    catch (CertificateException paramPackageSignatures)
    {
      str = paramPackageSignatures.getMessage();
      logCriticalInfo(4, "Failed to recover certificates for " + paramPackage.packageName + ": " + str);
    }
    return -3;
  }
  
  static boolean compareStrings(CharSequence paramCharSequence1, CharSequence paramCharSequence2)
  {
    boolean bool = false;
    if (paramCharSequence1 == null)
    {
      if (paramCharSequence2 == null) {
        bool = true;
      }
      return bool;
    }
    if (paramCharSequence2 == null) {
      return false;
    }
    if (paramCharSequence1.getClass() != paramCharSequence2.getClass()) {
      return false;
    }
    return paramCharSequence1.equals(paramCharSequence2);
  }
  
  private ResolveInfo createForwardingResolveInfo(CrossProfileIntentFilter paramCrossProfileIntentFilter, Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    int i = paramCrossProfileIntentFilter.getTargetUserId();
    paramIntent = this.mActivities.queryIntent(paramIntent, paramString, paramInt1, i);
    if ((paramIntent != null) && (isUserEnabled(i)))
    {
      paramInt1 = paramIntent.size() - 1;
      while (paramInt1 >= 0)
      {
        if ((((ResolveInfo)paramIntent.get(paramInt1)).activityInfo.applicationInfo.flags & 0x40000000) == 0) {
          return createForwardingResolveInfoUnchecked(paramCrossProfileIntentFilter, paramInt2, i);
        }
        paramInt1 -= 1;
      }
    }
    return null;
  }
  
  private ResolveInfo createForwardingResolveInfoUnchecked(IntentFilter paramIntentFilter, int paramInt1, int paramInt2)
  {
    ResolveInfo localResolveInfo = new ResolveInfo();
    long l = Binder.clearCallingIdentity();
    for (;;)
    {
      try
      {
        boolean bool = sUserManager.getUserInfo(paramInt2).isManagedProfile();
        Binder.restoreCallingIdentity(l);
        if (bool)
        {
          localObject = IntentForwarderActivity.FORWARD_INTENT_TO_MANAGED_PROFILE;
          localObject = getActivityInfo(new ComponentName(this.mAndroidApplication.packageName, (String)localObject), 0, paramInt1);
          if (!bool)
          {
            ((ActivityInfo)localObject).showUserIcon = paramInt2;
            localResolveInfo.noResourceId = true;
          }
          localResolveInfo.activityInfo = ((ActivityInfo)localObject);
          localResolveInfo.priority = 0;
          localResolveInfo.preferredOrder = 0;
          localResolveInfo.match = 0;
          localResolveInfo.isDefault = true;
          localResolveInfo.filter = paramIntentFilter;
          localResolveInfo.targetUserId = paramInt2;
          return localResolveInfo;
        }
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      Object localObject = IntentForwarderActivity.FORWARD_INTENT_TO_PARENT;
    }
  }
  
  private boolean createIdmapForPackagePairLI(PackageParser.Package paramPackage1, PackageParser.Package paramPackage2)
  {
    int j = 0;
    if (!paramPackage2.mTrustedOverlay)
    {
      Slog.w("PackageManager", "Skipping target and overlay pair " + paramPackage1.baseCodePath + " and " + paramPackage2.baseCodePath + ": overlay not trusted");
      return false;
    }
    ArrayMap localArrayMap = (ArrayMap)this.mOverlays.get(paramPackage1.packageName);
    if (localArrayMap == null)
    {
      Slog.e("PackageManager", "was about to create idmap for " + paramPackage1.baseCodePath + " and " + paramPackage2.baseCodePath + " but target package has no known overlays");
      return false;
    }
    int i = UserHandle.getSharedAppGid(paramPackage1.applicationInfo.uid);
    try
    {
      this.mInstaller.idmap(paramPackage1.baseCodePath, paramPackage2.baseCodePath, i);
      paramPackage2 = (PackageParser.Package[])localArrayMap.values().toArray(new PackageParser.Package[0]);
      Arrays.sort(paramPackage2, new Comparator()
      {
        public int compare(PackageParser.Package paramAnonymousPackage1, PackageParser.Package paramAnonymousPackage2)
        {
          return paramAnonymousPackage1.mOverlayPriority - paramAnonymousPackage2.mOverlayPriority;
        }
      });
      paramPackage1.applicationInfo.resourceDirs = new String[paramPackage2.length];
      int k = paramPackage2.length;
      i = 0;
      while (j < k)
      {
        localArrayMap = paramPackage2[j];
        paramPackage1.applicationInfo.resourceDirs[i] = localArrayMap.baseCodePath;
        j += 1;
        i += 1;
      }
      return true;
    }
    catch (InstallerConnection.InstallerException localInstallerException)
    {
      Slog.e("PackageManager", "Failed to generate idmap for " + paramPackage1.baseCodePath + " and " + paramPackage2.baseCodePath);
      return false;
    }
  }
  
  private void createIdmapsForPackageLI(PackageParser.Package paramPackage)
  {
    Object localObject = (ArrayMap)this.mOverlays.get(paramPackage.packageName);
    if (localObject == null)
    {
      Slog.w("PackageManager", "Unable to create idmap for " + paramPackage.packageName + ": no overlay packages");
      return;
    }
    localObject = ((ArrayMap)localObject).values().iterator();
    while (((Iterator)localObject).hasNext()) {
      createIdmapForPackagePairLI(paramPackage, (PackageParser.Package)((Iterator)localObject).next());
    }
  }
  
  private InstallArgs createInstallArgs(InstallParams paramInstallParams)
  {
    if (paramInstallParams.move != null) {
      return new MoveInstallArgs(paramInstallParams);
    }
    if ((installOnExternalAsec(paramInstallParams.installFlags)) || (paramInstallParams.isForwardLocked())) {
      return new AsecInstallArgs(paramInstallParams);
    }
    return new FileInstallArgs(paramInstallParams);
  }
  
  private InstallArgs createInstallArgsForExisting(int paramInt, String paramString1, String paramString2, String[] paramArrayOfString)
  {
    int i;
    if (installOnExternalAsec(paramInt)) {
      i = 1;
    }
    while (i != 0)
    {
      return new AsecInstallArgs(paramString1, paramArrayOfString, installOnExternalAsec(paramInt), installForwardLocked(paramInt));
      if ((!installForwardLocked(paramInt)) || (paramString1.startsWith(this.mDrmAppPrivateInstallDir.getAbsolutePath()))) {
        i = 0;
      } else {
        i = 1;
      }
    }
    return new FileInstallArgs(paramString1, paramString2, paramArrayOfString);
  }
  
  /* Error */
  private boolean deleteInstalledPackageLIF(PackageSetting paramPackageSetting, boolean paramBoolean1, int paramInt, int[] paramArrayOfInt, PackageRemovedInfo paramPackageRemovedInfo, boolean paramBoolean2, PackageParser.Package paramPackage)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   4: astore 11
    //   6: aload 11
    //   8: monitorenter
    //   9: aload 5
    //   11: ifnull +12 -> 23
    //   14: aload 5
    //   16: aload_1
    //   17: getfield 2946	com/android/server/pm/PackageSetting:appId	I
    //   20: putfield 3212	com/android/server/pm/PackageManagerService$PackageRemovedInfo:uid	I
    //   23: aload 5
    //   25: ifnull +127 -> 152
    //   28: aload 5
    //   30: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   33: ifnull +119 -> 152
    //   36: aload_1
    //   37: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   40: ifnull +67 -> 107
    //   43: aload_1
    //   44: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   47: invokeinterface 1676 1 0
    //   52: istore 8
    //   54: goto +339 -> 393
    //   57: iload 9
    //   59: iload 8
    //   61: if_icmpge +91 -> 152
    //   64: aload_1
    //   65: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   68: iload 9
    //   70: invokeinterface 2440 2 0
    //   75: checkcast 1071	java/lang/String
    //   78: astore 13
    //   80: aload_0
    //   81: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   84: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   87: aload 13
    //   89: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   92: checkcast 1615	com/android/server/pm/PackageSetting
    //   95: astore 12
    //   97: aload 12
    //   99: ifnonnull +14 -> 113
    //   102: aload 11
    //   104: monitorexit
    //   105: iconst_0
    //   106: ireturn
    //   107: iconst_0
    //   108: istore 8
    //   110: goto +283 -> 393
    //   113: aload 5
    //   115: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   118: aload 13
    //   120: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   123: checkcast 174	com/android/server/pm/PackageManagerService$PackageRemovedInfo
    //   126: astore 13
    //   128: aload 13
    //   130: ifnull +13 -> 143
    //   133: aload 13
    //   135: aload 12
    //   137: getfield 2946	com/android/server/pm/PackageSetting:appId	I
    //   140: putfield 3212	com/android/server/pm/PackageManagerService$PackageRemovedInfo:uid	I
    //   143: iload 9
    //   145: iconst_1
    //   146: iadd
    //   147: istore 9
    //   149: goto -92 -> 57
    //   152: aload 11
    //   154: monitorexit
    //   155: aload_0
    //   156: aload_1
    //   157: aload 4
    //   159: aload 5
    //   161: iload_3
    //   162: iload 6
    //   164: invokespecial 3222	com/android/server/pm/PackageManagerService:removePackageDataLIF	(Lcom/android/server/pm/PackageSetting;[ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;IZ)V
    //   167: aload_1
    //   168: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   171: ifnull +151 -> 322
    //   174: aload_1
    //   175: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   178: invokeinterface 1676 1 0
    //   183: istore 8
    //   185: iconst_0
    //   186: istore 9
    //   188: iload 9
    //   190: iload 8
    //   192: if_icmpge +157 -> 349
    //   195: aload_0
    //   196: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   199: astore 11
    //   201: aload 11
    //   203: monitorenter
    //   204: aload_0
    //   205: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   208: aload_1
    //   209: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   212: iload 9
    //   214: invokeinterface 2440 2 0
    //   219: checkcast 1071	java/lang/String
    //   222: invokevirtual 1722	com/android/server/pm/Settings:peekPackageLPr	(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
    //   225: astore 12
    //   227: aload 11
    //   229: monitorexit
    //   230: aload 12
    //   232: ifnull +75 -> 307
    //   235: aload 5
    //   237: ifnull +97 -> 334
    //   240: aload 5
    //   242: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   245: ifnull +89 -> 334
    //   248: aload 5
    //   250: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   253: aload 12
    //   255: getfield 1622	com/android/server/pm/PackageSetting:name	Ljava/lang/String;
    //   258: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   261: checkcast 174	com/android/server/pm/PackageManagerService$PackageRemovedInfo
    //   264: astore 11
    //   266: iload_3
    //   267: iconst_1
    //   268: iand
    //   269: ifeq +21 -> 290
    //   272: aload 7
    //   274: ifnull +16 -> 290
    //   277: aload 7
    //   279: aload 12
    //   281: getfield 1622	com/android/server/pm/PackageSetting:name	Ljava/lang/String;
    //   284: invokevirtual 3225	android/content/pm/PackageParser$Package:hasChildPackage	(Ljava/lang/String;)Z
    //   287: ifeq +53 -> 340
    //   290: iload_3
    //   291: istore 10
    //   293: aload_0
    //   294: aload 12
    //   296: aload 4
    //   298: aload 11
    //   300: iload 10
    //   302: iload 6
    //   304: invokespecial 3222	com/android/server/pm/PackageManagerService:removePackageDataLIF	(Lcom/android/server/pm/PackageSetting;[ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;IZ)V
    //   307: iload 9
    //   309: iconst_1
    //   310: iadd
    //   311: istore 9
    //   313: goto -125 -> 188
    //   316: astore_1
    //   317: aload 11
    //   319: monitorexit
    //   320: aload_1
    //   321: athrow
    //   322: iconst_0
    //   323: istore 8
    //   325: goto -140 -> 185
    //   328: astore_1
    //   329: aload 11
    //   331: monitorexit
    //   332: aload_1
    //   333: athrow
    //   334: aconst_null
    //   335: astore 11
    //   337: goto -71 -> 266
    //   340: iload_3
    //   341: bipush -2
    //   343: iand
    //   344: istore 10
    //   346: goto -53 -> 293
    //   349: aload_1
    //   350: getfield 3228	com/android/server/pm/PackageSetting:parentPackageName	Ljava/lang/String;
    //   353: ifnonnull +38 -> 391
    //   356: iload_2
    //   357: ifeq +34 -> 391
    //   360: aload 5
    //   362: ifnull +29 -> 391
    //   365: aload 5
    //   367: aload_0
    //   368: aload_0
    //   369: aload_1
    //   370: invokespecial 3232	com/android/server/pm/PackageManagerService:packageFlagsToInstallFlags	(Lcom/android/server/pm/PackageSetting;)I
    //   373: aload_1
    //   374: getfield 1829	com/android/server/pm/PackageSetting:codePathString	Ljava/lang/String;
    //   377: aload_1
    //   378: getfield 3235	com/android/server/pm/PackageSetting:resourcePathString	Ljava/lang/String;
    //   381: aload_1
    //   382: invokestatic 3239	com/android/server/pm/InstructionSets:getAppDexInstructionSets	(Lcom/android/server/pm/PackageSetting;)[Ljava/lang/String;
    //   385: invokespecial 3241	com/android/server/pm/PackageManagerService:createInstallArgsForExisting	(ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lcom/android/server/pm/PackageManagerService$InstallArgs;
    //   388: putfield 3245	com/android/server/pm/PackageManagerService$PackageRemovedInfo:args	Lcom/android/server/pm/PackageManagerService$InstallArgs;
    //   391: iconst_1
    //   392: ireturn
    //   393: iconst_0
    //   394: istore 9
    //   396: goto -339 -> 57
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	399	0	this	PackageManagerService
    //   0	399	1	paramPackageSetting	PackageSetting
    //   0	399	2	paramBoolean1	boolean
    //   0	399	3	paramInt	int
    //   0	399	4	paramArrayOfInt	int[]
    //   0	399	5	paramPackageRemovedInfo	PackageRemovedInfo
    //   0	399	6	paramBoolean2	boolean
    //   0	399	7	paramPackage	PackageParser.Package
    //   52	272	8	i	int
    //   57	338	9	j	int
    //   291	54	10	k	int
    //   95	200	12	localPackageSetting	PackageSetting
    //   78	56	13	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   14	23	316	finally
    //   28	54	316	finally
    //   64	97	316	finally
    //   113	128	316	finally
    //   133	143	316	finally
    //   204	227	328	finally
  }
  
  private void deletePackageIfUnusedLPr(final String paramString)
  {
    PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
    if (localPackageSetting == null) {
      return;
    }
    if (!localPackageSetting.isAnyInstalled(sUserManager.getUserIds())) {
      this.mHandler.post(new Runnable()
      {
        public void run()
        {
          PackageManagerService.-wrap11(PackageManagerService.this, paramString, 0, 2);
        }
      });
    }
  }
  
  private boolean deletePackageLIF(String paramString, UserHandle paramUserHandle, boolean paramBoolean1, int[] paramArrayOfInt, int paramInt, PackageRemovedInfo paramPackageRemovedInfo, boolean paramBoolean2, PackageParser.Package arg8)
  {
    if (paramString == null)
    {
      Slog.w("PackageManager", "Attempt to delete null packageName.");
      return false;
    }
    if (DEBUG_REMOVE) {
      Slog.d("PackageManager", "deletePackageLI: " + paramString + " user " + paramUserHandle);
    }
    PackageSetting localPackageSetting;
    synchronized (this.mPackages)
    {
      localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
      if (localPackageSetting == null)
      {
        Slog.w("PackageManager", "Package named '" + paramString + "' doesn't exist.");
        return false;
      }
      if ((localPackageSetting.parentPackageName != null) && ((!isSystemApp(localPackageSetting)) || ((paramInt & 0x4) != 0)))
      {
        if (DEBUG_REMOVE)
        {
          paramArrayOfInt = new StringBuilder().append("Uninstalled child package:").append(paramString).append(" for user:");
          if (paramUserHandle == null)
          {
            paramString = Integer.valueOf(-1);
            Slog.d("PackageManager", paramString);
          }
        }
        else
        {
          if (paramUserHandle == null) {
            break label241;
          }
        }
        label241:
        for (paramInt = paramUserHandle.getIdentifier();; paramInt = -1)
        {
          paramBoolean1 = clearPackageStateForUserLIF(localPackageSetting, paramInt, paramPackageRemovedInfo);
          if (paramBoolean1) {
            break label247;
          }
          return false;
          paramString = paramUserHandle;
          break;
        }
        label247:
        markPackageUninstalledForUserLPw(localPackageSetting, paramUserHandle);
        scheduleWritePackageRestrictionsLocked(paramUserHandle);
        return true;
      }
      if (((isSystemApp(localPackageSetting)) && ((paramInt & 0x4) == 0)) || (paramUserHandle == null) || (paramUserHandle.getIdentifier() == -1)) {
        break label436;
      }
      markPackageUninstalledForUserLPw(localPackageSetting, paramUserHandle);
      if (isSystemApp(localPackageSetting)) {
        break label579;
      }
      boolean bool = shouldKeepUninstalledPackageLPr(paramString);
      if ((!localPackageSetting.isAnyInstalled(sUserManager.getUserIds())) && (!bool)) {
        break label410;
      }
      if (DEBUG_REMOVE) {
        Slog.d("PackageManager", "Still installed by other users");
      }
      if (!clearPackageStateForUserLIF(localPackageSetting, paramUserHandle.getIdentifier(), paramPackageRemovedInfo)) {
        return false;
      }
    }
    scheduleWritePackageRestrictionsLocked(paramUserHandle);
    if ((OpFeatures.isSupport(new int[] { 0 })) && (paramString.equals("com.android.vending"))) {
      setGMSEnabledSetting(paramUserHandle, 2);
    }
    return true;
    label410:
    if (DEBUG_REMOVE) {
      Slog.d("PackageManager", "Not installed by other users, full delete");
    }
    localPackageSetting.setInstalled(true, paramUserHandle.getIdentifier());
    label436:
    if ((localPackageSetting.childPackageNames != null) && (paramPackageRemovedInfo != null)) {}
    int i;
    Object localObject3;
    Object localObject2;
    for (;;)
    {
      synchronized (this.mPackages)
      {
        int j = localPackageSetting.childPackageNames.size();
        paramPackageRemovedInfo.removedChildPackages = new ArrayMap(j);
        i = 0;
        if (i < j)
        {
          localObject3 = (String)localPackageSetting.childPackageNames.get(i);
          localObject2 = new PackageRemovedInfo();
          ((PackageRemovedInfo)localObject2).removedPackage = ((String)localObject3);
          paramPackageRemovedInfo.removedChildPackages.put(localObject3, localObject2);
          localObject3 = this.mSettings.peekPackageLPr((String)localObject3);
          if (localObject3 != null) {
            ((PackageRemovedInfo)localObject2).origUsers = ((PackageSetting)localObject3).queryInstalledUsers(paramArrayOfInt, true);
          }
          i += 1;
          continue;
          label579:
          if (DEBUG_REMOVE) {
            Slog.d("PackageManager", "Deleting system app");
          }
          if (!clearPackageStateForUserLIF(localPackageSetting, paramUserHandle.getIdentifier(), paramPackageRemovedInfo)) {
            return false;
          }
          scheduleWritePackageRestrictionsLocked(paramUserHandle);
          return true;
        }
        if (isSystemApp(localPackageSetting))
        {
          if (DEBUG_REMOVE) {
            Slog.d("PackageManager", "Removing system package: " + localPackageSetting.name);
          }
          paramBoolean1 = deleteSystemPackageLIF(localPackageSetting.pkg, localPackageSetting, paramArrayOfInt, paramInt, paramPackageRemovedInfo, paramBoolean2);
          if (paramPackageRemovedInfo == null) {
            break;
          }
          if (this.mPackages.get(localPackageSetting.name) != null) {
            break label872;
          }
          paramBoolean2 = true;
          label710:
          paramPackageRemovedInfo.removedForAllUsers = paramBoolean2;
          if (paramPackageRemovedInfo.removedChildPackages == null) {
            break label887;
          }
        }
      }
      synchronized (this.mPackages)
      {
        i = paramPackageRemovedInfo.removedChildPackages.size();
        paramInt = 0;
        label747:
        if (paramInt < i)
        {
          ??? = (PackageRemovedInfo)paramPackageRemovedInfo.removedChildPackages.valueAt(paramInt);
          if (??? != null) {
            if (this.mPackages.get(((PackageRemovedInfo)???).removedPackage) != null) {
              break label878;
            }
          }
          label872:
          label878:
          for (paramBoolean2 = true;; paramBoolean2 = false)
          {
            ((PackageRemovedInfo)???).removedForAllUsers = paramBoolean2;
            paramInt += 1;
            break label747;
            paramString = finally;
            throw paramString;
            if (DEBUG_REMOVE) {
              Slog.d("PackageManager", "Removing non-system package: " + localPackageSetting.name);
            }
            paramBoolean1 = deleteInstalledPackageLIF(localPackageSetting, paramBoolean1, paramInt, paramArrayOfInt, paramPackageRemovedInfo, paramBoolean2, ???);
            break;
            paramBoolean2 = false;
            break label710;
          }
        }
        label887:
        if (!isSystemApp(localPackageSetting)) {
          break;
        }
      }
    }
    for (;;)
    {
      synchronized (this.mPackages)
      {
        localPackageSetting = this.mSettings.peekPackageLPr(localPackageSetting.name);
        if (localPackageSetting.childPackageNames != null)
        {
          paramInt = localPackageSetting.childPackageNames.size();
          break label1161;
          if (i >= paramInt) {
            break label1127;
          }
          ??? = (String)localPackageSetting.childPackageNames.get(i);
          if ((paramPackageRemovedInfo.removedChildPackages == null) || (paramPackageRemovedInfo.removedChildPackages.indexOfKey(???) < 0))
          {
            localObject2 = this.mSettings.peekPackageLPr((String)???);
            if (localObject2 != null) {}
          }
          else
          {
            i += 1;
            continue;
            paramString = finally;
            throw paramString;
          }
        }
        else
        {
          paramInt = 0;
          break label1161;
        }
        localObject3 = new PackageInstalledInfo();
        ((PackageInstalledInfo)localObject3).name = ((String)???);
        ((PackageInstalledInfo)localObject3).newUsers = ((PackageSetting)localObject2).queryInstalledUsers(paramArrayOfInt, true);
        ((PackageInstalledInfo)localObject3).pkg = ((PackageParser.Package)this.mPackages.get(???));
        ((PackageInstalledInfo)localObject3).uid = ((PackageSetting)localObject2).pkg.applicationInfo.uid;
        if (paramPackageRemovedInfo.appearedChildPackages == null) {
          paramPackageRemovedInfo.appearedChildPackages = new ArrayMap();
        }
        paramPackageRemovedInfo.appearedChildPackages.put(???, localObject3);
      }
      label1127:
      if ((OpFeatures.isSupport(new int[] { 0 })) && (paramString.equals("com.android.vending"))) {
        setGMSEnabledSetting(paramUserHandle, 2);
      }
      return paramBoolean1;
      label1161:
      i = 0;
    }
  }
  
  /* Error */
  private int deletePackageX(String arg1, int paramInt1, int paramInt2)
  {
    // Byte code:
    //   0: new 174	com/android/server/pm/PackageManagerService$PackageRemovedInfo
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 3294	com/android/server/pm/PackageManagerService$PackageRemovedInfo:<init>	(Lcom/android/server/pm/PackageManagerService;)V
    //   8: astore 13
    //   10: iload_3
    //   11: iconst_2
    //   12: iand
    //   13: ifeq +52 -> 65
    //   16: iconst_m1
    //   17: istore 4
    //   19: aload_0
    //   20: aload_1
    //   21: iload 4
    //   23: invokespecial 2567	com/android/server/pm/PackageManagerService:isPackageDeviceAdmin	(Ljava/lang/String;I)Z
    //   26: ifeq +45 -> 71
    //   29: ldc_w 391
    //   32: new 1320	java/lang/StringBuilder
    //   35: dup
    //   36: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   39: ldc_w 3332
    //   42: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   45: aload_1
    //   46: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   49: ldc_w 3334
    //   52: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   55: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   58: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   61: pop
    //   62: bipush -2
    //   64: ireturn
    //   65: iload_2
    //   66: istore 4
    //   68: goto -49 -> 19
    //   71: aload_0
    //   72: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   75: astore 8
    //   77: aload 8
    //   79: monitorenter
    //   80: aload_0
    //   81: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   84: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   87: aload_1
    //   88: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   91: checkcast 1615	com/android/server/pm/PackageSetting
    //   94: astore 14
    //   96: aload 14
    //   98: ifnonnull +35 -> 133
    //   101: ldc_w 391
    //   104: new 1320	java/lang/StringBuilder
    //   107: dup
    //   108: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   111: ldc_w 3336
    //   114: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   117: aload_1
    //   118: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   121: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   124: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   127: pop
    //   128: aload 8
    //   130: monitorexit
    //   131: iconst_m1
    //   132: ireturn
    //   133: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   136: invokevirtual 2891	com/android/server/pm/UserManagerService:getUserIds	()[I
    //   139: astore 15
    //   141: aload 13
    //   143: aload 14
    //   145: aload 15
    //   147: iconst_1
    //   148: invokevirtual 3298	com/android/server/pm/PackageSetting:queryInstalledUsers	([IZ)[I
    //   151: putfield 3301	com/android/server/pm/PackageManagerService$PackageRemovedInfo:origUsers	[I
    //   154: aload 8
    //   156: monitorexit
    //   157: aload 14
    //   159: invokestatic 3339	com/android/server/pm/PackageManagerService:isUpdatedSystemApp	(Lcom/android/server/pm/PackageSetting;)Z
    //   162: ifeq +152 -> 314
    //   165: iload_3
    //   166: iconst_4
    //   167: iand
    //   168: ifne +146 -> 314
    //   171: iconst_m1
    //   172: istore 5
    //   174: aload_0
    //   175: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   178: astore 12
    //   180: aload 12
    //   182: monitorenter
    //   183: getstatic 987	com/android/server/pm/PackageManagerService:DEBUG_REMOVE	Z
    //   186: ifeq +40 -> 226
    //   189: ldc_w 391
    //   192: new 1320	java/lang/StringBuilder
    //   195: dup
    //   196: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   199: ldc_w 3341
    //   202: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   205: aload_1
    //   206: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   209: ldc_w 3343
    //   212: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   215: iload_2
    //   216: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   219: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   222: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   225: pop
    //   226: aconst_null
    //   227: astore 11
    //   229: aconst_null
    //   230: astore 9
    //   232: aconst_null
    //   233: astore 8
    //   235: aload_0
    //   236: aload_1
    //   237: iload 5
    //   239: iload_3
    //   240: ldc_w 3344
    //   243: invokevirtual 3348	com/android/server/pm/PackageManagerService:freezePackageForDelete	(Ljava/lang/String;IILjava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
    //   246: astore 10
    //   248: aload 10
    //   250: astore 8
    //   252: aload 10
    //   254: astore 9
    //   256: aload_0
    //   257: aload_1
    //   258: iload 4
    //   260: invokestatic 3352	android/os/UserHandle:of	(I)Landroid/os/UserHandle;
    //   263: iconst_1
    //   264: aload 15
    //   266: iload_3
    //   267: ldc_w 339
    //   270: ior
    //   271: aload 13
    //   273: iconst_1
    //   274: aconst_null
    //   275: invokespecial 3354	com/android/server/pm/PackageManagerService:deletePackageLIF	(Ljava/lang/String;Landroid/os/UserHandle;Z[IILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;ZLandroid/content/pm/PackageParser$Package;)Z
    //   278: istore 7
    //   280: aload 11
    //   282: astore_1
    //   283: aload 10
    //   285: ifnull +11 -> 296
    //   288: aload 10
    //   290: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   293: aload 11
    //   295: astore_1
    //   296: aload_1
    //   297: ifnull +89 -> 386
    //   300: aload_1
    //   301: athrow
    //   302: astore_1
    //   303: aload 12
    //   305: monitorexit
    //   306: aload_1
    //   307: athrow
    //   308: astore_1
    //   309: aload 8
    //   311: monitorexit
    //   312: aload_1
    //   313: athrow
    //   314: iload 4
    //   316: istore 5
    //   318: goto -144 -> 174
    //   321: astore_1
    //   322: goto -26 -> 296
    //   325: astore_1
    //   326: aload_1
    //   327: athrow
    //   328: astore 10
    //   330: aload 8
    //   332: astore 9
    //   334: aload 10
    //   336: astore 8
    //   338: aload_1
    //   339: astore 10
    //   341: aload 9
    //   343: ifnull +11 -> 354
    //   346: aload 9
    //   348: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   351: aload_1
    //   352: astore 10
    //   354: aload 10
    //   356: ifnull +27 -> 383
    //   359: aload 10
    //   361: athrow
    //   362: aload_1
    //   363: astore 10
    //   365: aload_1
    //   366: aload 9
    //   368: if_acmpeq -14 -> 354
    //   371: aload_1
    //   372: aload 9
    //   374: invokevirtual 3359	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   377: aload_1
    //   378: astore 10
    //   380: goto -26 -> 354
    //   383: aload 8
    //   385: athrow
    //   386: aload_0
    //   387: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   390: astore_1
    //   391: aload_1
    //   392: monitorenter
    //   393: iload 7
    //   395: ifeq +15 -> 410
    //   398: aload_0
    //   399: getfield 2148	com/android/server/pm/PackageManagerService:mEphemeralApplicationRegistry	Lcom/android/server/pm/EphemeralApplicationRegistry;
    //   402: aload 14
    //   404: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   407: invokevirtual 3362	com/android/server/pm/EphemeralApplicationRegistry:onPackageUninstalledLPw	(Landroid/content/pm/PackageParser$Package;)V
    //   410: aload_1
    //   411: monitorexit
    //   412: aload 12
    //   414: monitorexit
    //   415: iload 7
    //   417: ifeq +30 -> 447
    //   420: iload_3
    //   421: bipush 8
    //   423: iand
    //   424: ifne +70 -> 494
    //   427: iconst_1
    //   428: istore 6
    //   430: aload 13
    //   432: iload 6
    //   434: invokevirtual 3366	com/android/server/pm/PackageManagerService$PackageRemovedInfo:sendPackageRemovedBroadcasts	(Z)V
    //   437: aload 13
    //   439: invokevirtual 3369	com/android/server/pm/PackageManagerService$PackageRemovedInfo:sendSystemPackageUpdatedBroadcasts	()V
    //   442: aload 13
    //   444: invokevirtual 3372	com/android/server/pm/PackageManagerService$PackageRemovedInfo:sendSystemPackageAppearedBroadcasts	()V
    //   447: invokestatic 2154	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   450: invokevirtual 2157	java/lang/Runtime:gc	()V
    //   453: aload 13
    //   455: getfield 3245	com/android/server/pm/PackageManagerService$PackageRemovedInfo:args	Lcom/android/server/pm/PackageManagerService$InstallArgs;
    //   458: ifnull +22 -> 480
    //   461: aload_0
    //   462: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   465: astore_1
    //   466: aload_1
    //   467: monitorenter
    //   468: aload 13
    //   470: getfield 3245	com/android/server/pm/PackageManagerService$PackageRemovedInfo:args	Lcom/android/server/pm/PackageManagerService$InstallArgs;
    //   473: iconst_1
    //   474: invokevirtual 3376	com/android/server/pm/PackageManagerService$InstallArgs:doPostDeleteLI	(Z)Z
    //   477: pop
    //   478: aload_1
    //   479: monitorexit
    //   480: iload 7
    //   482: ifeq +25 -> 507
    //   485: iconst_1
    //   486: ireturn
    //   487: astore 8
    //   489: aload_1
    //   490: monitorexit
    //   491: aload 8
    //   493: athrow
    //   494: iconst_0
    //   495: istore 6
    //   497: goto -67 -> 430
    //   500: astore 8
    //   502: aload_1
    //   503: monitorexit
    //   504: aload 8
    //   506: athrow
    //   507: iconst_m1
    //   508: ireturn
    //   509: astore 8
    //   511: aconst_null
    //   512: astore_1
    //   513: goto -175 -> 338
    //   516: astore 9
    //   518: aload_1
    //   519: ifnonnull -157 -> 362
    //   522: aload 9
    //   524: astore 10
    //   526: goto -172 -> 354
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	529	0	this	PackageManagerService
    //   0	529	2	paramInt1	int
    //   0	529	3	paramInt2	int
    //   17	298	4	i	int
    //   172	145	5	j	int
    //   428	68	6	bool1	boolean
    //   278	203	7	bool2	boolean
    //   75	309	8	localObject1	Object
    //   487	5	8	localObject2	Object
    //   500	5	8	localObject3	Object
    //   509	1	8	localObject4	Object
    //   230	143	9	localObject5	Object
    //   516	7	9	localThrowable	Throwable
    //   246	43	10	localPackageFreezer	PackageFreezer
    //   328	7	10	localObject6	Object
    //   339	186	10	localObject7	Object
    //   227	67	11	localObject8	Object
    //   178	235	12	localObject9	Object
    //   8	461	13	localPackageRemovedInfo	PackageRemovedInfo
    //   94	309	14	localPackageSetting	PackageSetting
    //   139	126	15	arrayOfInt	int[]
    // Exception table:
    //   from	to	target	type
    //   183	226	302	finally
    //   288	293	302	finally
    //   300	302	302	finally
    //   346	351	302	finally
    //   359	362	302	finally
    //   371	377	302	finally
    //   383	386	302	finally
    //   386	393	302	finally
    //   410	412	302	finally
    //   489	494	302	finally
    //   80	96	308	finally
    //   101	128	308	finally
    //   133	154	308	finally
    //   288	293	321	java/lang/Throwable
    //   235	248	325	java/lang/Throwable
    //   256	280	325	java/lang/Throwable
    //   326	328	328	finally
    //   398	410	487	finally
    //   468	478	500	finally
    //   235	248	509	finally
    //   256	280	509	finally
    //   346	351	516	java/lang/Throwable
  }
  
  /* Error */
  private boolean deleteSystemPackageLIF(PackageParser.Package arg1, PackageSetting paramPackageSetting, int[] paramArrayOfInt, int paramInt, PackageRemovedInfo paramPackageRemovedInfo, boolean paramBoolean)
  {
    // Byte code:
    //   0: aload_2
    //   1: getfield 3228	com/android/server/pm/PackageSetting:parentPackageName	Ljava/lang/String;
    //   4: ifnull +35 -> 39
    //   7: ldc_w 391
    //   10: new 1320	java/lang/StringBuilder
    //   13: dup
    //   14: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   17: ldc_w 3378
    //   20: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   23: aload_1
    //   24: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   27: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   30: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   33: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   36: pop
    //   37: iconst_0
    //   38: ireturn
    //   39: aload_3
    //   40: ifnull +123 -> 163
    //   43: aload 5
    //   45: getfield 3301	com/android/server/pm/PackageManagerService$PackageRemovedInfo:origUsers	[I
    //   48: ifnull +115 -> 163
    //   51: iconst_1
    //   52: istore 7
    //   54: aload_0
    //   55: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   58: astore 13
    //   60: aload 13
    //   62: monitorenter
    //   63: aload_0
    //   64: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   67: aload_2
    //   68: getfield 1622	com/android/server/pm/PackageSetting:name	Ljava/lang/String;
    //   71: invokevirtual 1626	com/android/server/pm/Settings:getDisabledSystemPkgLPr	(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
    //   74: astore 12
    //   76: aload 13
    //   78: monitorexit
    //   79: getstatic 987	com/android/server/pm/PackageManagerService:DEBUG_REMOVE	Z
    //   82: ifeq +44 -> 126
    //   85: ldc_w 391
    //   88: new 1320	java/lang/StringBuilder
    //   91: dup
    //   92: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   95: ldc_w 3380
    //   98: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   101: aload_1
    //   102: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   105: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   108: ldc_w 3382
    //   111: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   114: aload 12
    //   116: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   119: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   122: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   125: pop
    //   126: aload 12
    //   128: ifnonnull +47 -> 175
    //   131: ldc_w 391
    //   134: new 1320	java/lang/StringBuilder
    //   137: dup
    //   138: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   141: ldc_w 3384
    //   144: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   147: aload_1
    //   148: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   151: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   154: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   157: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   160: pop
    //   161: iconst_0
    //   162: ireturn
    //   163: iconst_0
    //   164: istore 7
    //   166: goto -112 -> 54
    //   169: astore_1
    //   170: aload 13
    //   172: monitorexit
    //   173: aload_1
    //   174: athrow
    //   175: getstatic 987	com/android/server/pm/PackageManagerService:DEBUG_REMOVE	Z
    //   178: ifeq +13 -> 191
    //   181: ldc_w 391
    //   184: ldc_w 3386
    //   187: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   190: pop
    //   191: getstatic 987	com/android/server/pm/PackageManagerService:DEBUG_REMOVE	Z
    //   194: ifeq +98 -> 292
    //   197: iload 7
    //   199: ifeq +93 -> 292
    //   202: ldc_w 391
    //   205: ldc_w 3388
    //   208: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   211: pop
    //   212: iconst_0
    //   213: istore 8
    //   215: aload_3
    //   216: arraylength
    //   217: istore 9
    //   219: iload 8
    //   221: iload 9
    //   223: if_icmpge +69 -> 292
    //   226: aload_3
    //   227: iload 8
    //   229: iaload
    //   230: istore 10
    //   232: aload 5
    //   234: getfield 3301	com/android/server/pm/PackageManagerService$PackageRemovedInfo:origUsers	[I
    //   237: iload 10
    //   239: invokestatic 3391	com/android/internal/util/ArrayUtils:contains	([II)Z
    //   242: istore 11
    //   244: ldc_w 391
    //   247: new 1320	java/lang/StringBuilder
    //   250: dup
    //   251: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   254: ldc_w 3393
    //   257: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   260: iload 10
    //   262: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   265: ldc_w 3395
    //   268: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   271: iload 11
    //   273: invokevirtual 3398	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   276: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   279: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   282: pop
    //   283: iload 8
    //   285: iconst_1
    //   286: iadd
    //   287: istore 8
    //   289: goto -70 -> 219
    //   292: aload 5
    //   294: iconst_1
    //   295: putfield 3401	com/android/server/pm/PackageManagerService$PackageRemovedInfo:isRemovedPackageSystemUpdate	Z
    //   298: aload 5
    //   300: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   303: ifnull +111 -> 414
    //   306: aload_2
    //   307: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   310: ifnull +98 -> 408
    //   313: aload_2
    //   314: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   317: invokeinterface 1676 1 0
    //   322: istore 8
    //   324: iconst_0
    //   325: istore 9
    //   327: iload 9
    //   329: iload 8
    //   331: if_icmpge +83 -> 414
    //   334: aload_2
    //   335: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   338: iload 9
    //   340: invokeinterface 2440 2 0
    //   345: checkcast 1071	java/lang/String
    //   348: astore 13
    //   350: aload 12
    //   352: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   355: ifnull +44 -> 399
    //   358: aload 12
    //   360: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   363: aload 13
    //   365: invokeinterface 3402 2 0
    //   370: ifeq +29 -> 399
    //   373: aload 5
    //   375: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   378: aload 13
    //   380: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   383: checkcast 174	com/android/server/pm/PackageManagerService$PackageRemovedInfo
    //   386: astore 13
    //   388: aload 13
    //   390: ifnull +9 -> 399
    //   393: aload 13
    //   395: iconst_1
    //   396: putfield 3401	com/android/server/pm/PackageManagerService$PackageRemovedInfo:isRemovedPackageSystemUpdate	Z
    //   399: iload 9
    //   401: iconst_1
    //   402: iadd
    //   403: istore 9
    //   405: goto -78 -> 327
    //   408: iconst_0
    //   409: istore 8
    //   411: goto -87 -> 324
    //   414: aload 12
    //   416: getfield 1842	com/android/server/pm/PackageSetting:versionCode	I
    //   419: aload_2
    //   420: getfield 1842	com/android/server/pm/PackageSetting:versionCode	I
    //   423: if_icmpge +33 -> 456
    //   426: iload 4
    //   428: bipush -2
    //   430: iand
    //   431: istore 4
    //   433: aload_0
    //   434: aload_2
    //   435: iconst_1
    //   436: iload 4
    //   438: aload_3
    //   439: aload 5
    //   441: iload 6
    //   443: aload 12
    //   445: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   448: invokespecial 3316	com/android/server/pm/PackageManagerService:deleteInstalledPackageLIF	(Lcom/android/server/pm/PackageSetting;ZI[ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;ZLandroid/content/pm/PackageParser$Package;)Z
    //   451: ifne +14 -> 465
    //   454: iconst_0
    //   455: ireturn
    //   456: iload 4
    //   458: iconst_1
    //   459: ior
    //   460: istore 4
    //   462: goto -29 -> 433
    //   465: aload_0
    //   466: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   469: astore 13
    //   471: aload 13
    //   473: monitorenter
    //   474: aload_0
    //   475: aload 12
    //   477: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   480: invokespecial 3404	com/android/server/pm/PackageManagerService:enableSystemPackageLPw	(Landroid/content/pm/PackageParser$Package;)V
    //   483: aload_0
    //   484: aload_2
    //   485: invokespecial 3408	com/android/server/pm/PackageManagerService:removeNativeBinariesLI	(Lcom/android/server/pm/PackageSetting;)V
    //   488: aload 13
    //   490: monitorexit
    //   491: getstatic 987	com/android/server/pm/PackageManagerService:DEBUG_REMOVE	Z
    //   494: ifeq +31 -> 525
    //   497: ldc_w 391
    //   500: new 1320	java/lang/StringBuilder
    //   503: dup
    //   504: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   507: ldc_w 3410
    //   510: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   513: aload 12
    //   515: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   518: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   521: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   524: pop
    //   525: aload_0
    //   526: getfield 1366	com/android/server/pm/PackageManagerService:mDefParseFlags	I
    //   529: iconst_4
    //   530: ior
    //   531: iconst_1
    //   532: ior
    //   533: bipush 64
    //   535: ior
    //   536: istore 8
    //   538: iload 8
    //   540: istore 4
    //   542: aload 12
    //   544: getfield 1621	com/android/server/pm/PackageSetting:codePath	Ljava/io/File;
    //   547: invokestatic 3414	com/android/server/pm/PackageManagerService:locationIsPrivileged	(Ljava/io/File;)Z
    //   550: ifeq +11 -> 561
    //   553: iload 8
    //   555: sipush 128
    //   558: ior
    //   559: istore 4
    //   561: aload_0
    //   562: aload 12
    //   564: getfield 1621	com/android/server/pm/PackageSetting:codePath	Ljava/io/File;
    //   567: iload 4
    //   569: bipush 32
    //   571: lconst_0
    //   572: aconst_null
    //   573: invokespecial 715	com/android/server/pm/PackageManagerService:scanPackageTracedLI	(Ljava/io/File;IIJLandroid/os/UserHandle;)Landroid/content/pm/PackageParser$Package;
    //   576: astore 12
    //   578: aload_0
    //   579: aload 12
    //   581: aconst_null
    //   582: invokespecial 3418	com/android/server/pm/PackageManagerService:updateSharedLibrariesLPw	(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;)V
    //   585: aload_0
    //   586: aload 12
    //   588: invokespecial 3421	com/android/server/pm/PackageManagerService:prepareAppDataAfterInstallLIF	(Landroid/content/pm/PackageParser$Package;)V
    //   591: aload_0
    //   592: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   595: astore_1
    //   596: aload_1
    //   597: monitorenter
    //   598: aload_0
    //   599: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   602: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   605: aload 12
    //   607: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   610: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   613: checkcast 1615	com/android/server/pm/PackageSetting
    //   616: astore 13
    //   618: aload 13
    //   620: invokevirtual 2279	com/android/server/pm/PackageSetting:getPermissionsState	()Lcom/android/server/pm/PermissionsState;
    //   623: aload_2
    //   624: invokevirtual 2279	com/android/server/pm/PackageSetting:getPermissionsState	()Lcom/android/server/pm/PermissionsState;
    //   627: invokevirtual 3425	com/android/server/pm/PermissionsState:copyFrom	(Lcom/android/server/pm/PermissionsState;)V
    //   630: aload_0
    //   631: aload 12
    //   633: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   636: aload 12
    //   638: iconst_3
    //   639: invokespecial 3428	com/android/server/pm/PackageManagerService:updatePermissionsLPw	(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;I)V
    //   642: iload 7
    //   644: ifeq +217 -> 861
    //   647: getstatic 987	com/android/server/pm/PackageManagerService:DEBUG_REMOVE	Z
    //   650: ifeq +13 -> 663
    //   653: ldc_w 391
    //   656: ldc_w 3430
    //   659: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   662: pop
    //   663: iconst_0
    //   664: istore 4
    //   666: aload_3
    //   667: arraylength
    //   668: istore 7
    //   670: iload 4
    //   672: iload 7
    //   674: if_icmpge +180 -> 854
    //   677: aload_3
    //   678: iload 4
    //   680: iaload
    //   681: istore 8
    //   683: aload 5
    //   685: getfield 3301	com/android/server/pm/PackageManagerService$PackageRemovedInfo:origUsers	[I
    //   688: iload 8
    //   690: invokestatic 3391	com/android/internal/util/ArrayUtils:contains	([II)Z
    //   693: istore 11
    //   695: getstatic 987	com/android/server/pm/PackageManagerService:DEBUG_REMOVE	Z
    //   698: ifeq +42 -> 740
    //   701: ldc_w 391
    //   704: new 1320	java/lang/StringBuilder
    //   707: dup
    //   708: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   711: ldc_w 3432
    //   714: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   717: iload 8
    //   719: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   722: ldc_w 3434
    //   725: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   728: iload 11
    //   730: invokevirtual 3398	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   733: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   736: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   739: pop
    //   740: aload 13
    //   742: iload 11
    //   744: iload 8
    //   746: invokevirtual 3292	com/android/server/pm/PackageSetting:setInstalled	(ZI)V
    //   749: aload_0
    //   750: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   753: iload 8
    //   755: iconst_0
    //   756: invokevirtual 3438	com/android/server/pm/Settings:writeRuntimePermissionsForUserLPr	(IZ)V
    //   759: iload 4
    //   761: iconst_1
    //   762: iadd
    //   763: istore 4
    //   765: goto -95 -> 670
    //   768: astore_1
    //   769: aload 13
    //   771: monitorexit
    //   772: aload_1
    //   773: athrow
    //   774: astore_2
    //   775: ldc_w 391
    //   778: new 1320	java/lang/StringBuilder
    //   781: dup
    //   782: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   785: ldc_w 3440
    //   788: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   791: aload_1
    //   792: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   795: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   798: ldc_w 3069
    //   801: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   804: aload_2
    //   805: invokevirtual 1937	com/android/server/pm/PackageManagerException:getMessage	()Ljava/lang/String;
    //   808: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   811: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   814: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   817: pop
    //   818: iconst_0
    //   819: ireturn
    //   820: astore_1
    //   821: ldc_w 391
    //   824: new 1320	java/lang/StringBuilder
    //   827: dup
    //   828: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   831: ldc_w 3442
    //   834: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   837: aload_1
    //   838: invokevirtual 1937	com/android/server/pm/PackageManagerException:getMessage	()Ljava/lang/String;
    //   841: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   844: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   847: invokestatic 1934	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   850: pop
    //   851: goto -266 -> 585
    //   854: aload_0
    //   855: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   858: invokevirtual 3445	com/android/server/pm/Settings:writeAllUsersPackageRestrictionsLPr	()V
    //   861: iload 6
    //   863: ifeq +10 -> 873
    //   866: aload_0
    //   867: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   870: invokevirtual 2063	com/android/server/pm/Settings:writeLPr	()V
    //   873: aload_1
    //   874: monitorexit
    //   875: iconst_1
    //   876: ireturn
    //   877: astore_2
    //   878: aload_1
    //   879: monitorexit
    //   880: aload_2
    //   881: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	882	0	this	PackageManagerService
    //   0	882	2	paramPackageSetting	PackageSetting
    //   0	882	3	paramArrayOfInt	int[]
    //   0	882	4	paramInt	int
    //   0	882	5	paramPackageRemovedInfo	PackageRemovedInfo
    //   0	882	6	paramBoolean	boolean
    //   52	623	7	i	int
    //   213	541	8	j	int
    //   217	187	9	k	int
    //   230	31	10	m	int
    //   242	501	11	bool	boolean
    //   74	563	12	localObject1	Object
    //   58	712	13	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   63	76	169	finally
    //   474	488	768	finally
    //   561	578	774	com/android/server/pm/PackageManagerException
    //   578	585	820	com/android/server/pm/PackageManagerException
    //   598	642	877	finally
    //   647	663	877	finally
    //   666	670	877	finally
    //   683	740	877	finally
    //   740	759	877	finally
    //   854	861	877	finally
    //   866	873	877	finally
  }
  
  private void deleteTempPackageFiles()
  {
    Object localObject = new FilenameFilter()
    {
      public boolean accept(File paramAnonymousFile, String paramAnonymousString)
      {
        if (paramAnonymousString.startsWith("vmdl")) {
          return paramAnonymousString.endsWith(".tmp");
        }
        return false;
      }
    };
    localObject = this.mDrmAppPrivateInstallDir.listFiles((FilenameFilter)localObject);
    int i = 0;
    int j = localObject.length;
    while (i < j)
    {
      localObject[i].delete();
      i += 1;
    }
  }
  
  private static String deriveAbiOverride(String paramString, PackageSetting paramPackageSetting)
  {
    if ("-".equals(paramString)) {}
    do
    {
      return null;
      if (paramString != null) {
        return paramString;
      }
    } while (paramPackageSetting == null);
    return paramPackageSetting.cpuAbiOverrideString;
  }
  
  static String deriveCodePathName(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    File localFile = new File(paramString);
    String str = localFile.getName();
    if (localFile.isDirectory()) {
      return str;
    }
    if ((str.endsWith(".apk")) || (str.endsWith(".tmp"))) {
      return str.substring(0, str.lastIndexOf('.'));
    }
    Slog.w("PackageManager", "Odd, " + paramString + " doesn't look like an APK");
    return null;
  }
  
  private void derivePackageAbi(PackageParser.Package paramPackage, File paramFile, String paramString, boolean paramBoolean)
    throws PackageManagerException
  {
    setNativeLibraryPaths(paramPackage);
    boolean bool;
    Object localObject2;
    if ((!paramPackage.isForwardLocked()) && (!paramPackage.applicationInfo.isExternalAsec()))
    {
      bool = paramBoolean;
      if (isSystemApp(paramPackage))
      {
        if (paramPackage.isUpdatedSystemApp()) {
          bool = paramBoolean;
        }
      }
      else
      {
        localObject2 = paramPackage.applicationInfo.nativeLibraryRootDir;
        paramBoolean = paramPackage.applicationInfo.nativeLibraryRootRequiresIsa;
        localObject1 = null;
        paramFile = null;
      }
    }
    NativeLibraryHelper.Handle localHandle;
    File localFile;
    label172:
    int i;
    int j;
    try
    {
      localHandle = NativeLibraryHelper.Handle.create(paramPackage);
      paramFile = localHandle;
      localObject1 = localHandle;
      localFile = new File((String)localObject2);
      paramFile = localHandle;
      localObject1 = localHandle;
      paramPackage.applicationInfo.primaryCpuAbi = null;
      paramFile = localHandle;
      localObject1 = localHandle;
      paramPackage.applicationInfo.secondaryCpuAbi = null;
      paramFile = localHandle;
      localObject1 = localHandle;
      if (!isMultiArch(paramPackage.applicationInfo)) {
        break label551;
      }
      paramFile = localHandle;
      localObject1 = localHandle;
      if (paramPackage.cpuAbiOverride != null)
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        if (!"-".equals(paramPackage.cpuAbiOverride)) {
          break label406;
        }
      }
      i = -114;
      j = -114;
      paramFile = localHandle;
      localObject1 = localHandle;
      if (Build.SUPPORTED_32_BIT_ABIS.length > 0)
      {
        if (!bool) {
          break label467;
        }
        paramFile = localHandle;
        localObject1 = localHandle;
        i = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(localHandle, localFile, Build.SUPPORTED_32_BIT_ABIS, paramBoolean);
      }
    }
    catch (IOException paramString)
    {
      for (;;)
      {
        localObject1 = paramFile;
        Slog.e("PackageManager", "Unable to get canonical file " + paramString.toString());
        IoUtils.closeQuietly(paramFile);
        continue;
        paramFile = localHandle;
        localObject1 = localHandle;
        i = NativeLibraryHelper.findSupportedAbi(localHandle, Build.SUPPORTED_32_BIT_ABIS);
        continue;
        paramFile = localHandle;
        localObject1 = localHandle;
        j = NativeLibraryHelper.findSupportedAbi(localHandle, Build.SUPPORTED_64_BIT_ABIS);
        continue;
        paramFile = localHandle;
        localObject1 = localHandle;
        paramPackage.applicationInfo.secondaryCpuAbi = paramString;
      }
    }
    finally
    {
      IoUtils.closeQuietly((AutoCloseable)localObject1);
    }
    paramFile = localHandle;
    Object localObject1 = localHandle;
    maybeThrowExceptionForMultiArchCopy("Error unpackaging 32 bit native libs for multiarch app.", i);
    paramFile = localHandle;
    localObject1 = localHandle;
    if (Build.SUPPORTED_64_BIT_ABIS.length > 0)
    {
      if (bool)
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        j = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(localHandle, localFile, Build.SUPPORTED_64_BIT_ABIS, paramBoolean);
      }
    }
    else
    {
      paramFile = localHandle;
      localObject1 = localHandle;
      maybeThrowExceptionForMultiArchCopy("Error unpackaging 64 bit native libs for multiarch app.", j);
      if (j >= 0)
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        paramPackage.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[j];
      }
      if (i >= 0)
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        paramString = Build.SUPPORTED_32_BIT_ABIS[i];
        if (j < 0) {
          break label533;
        }
        paramFile = localHandle;
        localObject1 = localHandle;
        if (!paramPackage.use32bitAbi) {
          break label507;
        }
        paramFile = localHandle;
        localObject1 = localHandle;
        paramPackage.applicationInfo.secondaryCpuAbi = paramPackage.applicationInfo.primaryCpuAbi;
        paramFile = localHandle;
        localObject1 = localHandle;
        paramPackage.applicationInfo.primaryCpuAbi = paramString;
      }
    }
    for (;;)
    {
      IoUtils.closeQuietly(localHandle);
      setNativeLibraryPaths(paramPackage);
      return;
      bool = false;
      break;
      label406:
      paramFile = localHandle;
      localObject1 = localHandle;
      Slog.w("PackageManager", "Ignoring abiOverride for multi arch application.");
      break label172;
      label467:
      label507:
      label533:
      paramFile = localHandle;
      localObject1 = localHandle;
      paramPackage.applicationInfo.primaryCpuAbi = paramString;
      continue;
      label551:
      Object localObject3;
      if (paramString != null)
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        localObject2 = new String[1];
        localObject2[0] = paramString;
        j = 0;
        paramFile = localHandle;
        localObject1 = localHandle;
        localObject3 = localObject2;
        i = j;
        if (Build.SUPPORTED_64_BIT_ABIS.length > 0)
        {
          localObject3 = localObject2;
          i = j;
          if (paramString == null)
          {
            paramFile = localHandle;
            localObject1 = localHandle;
            localObject3 = localObject2;
            i = j;
            if (NativeLibraryHelper.hasRenderscriptBitcode(localHandle))
            {
              paramFile = localHandle;
              localObject1 = localHandle;
              localObject3 = Build.SUPPORTED_32_BIT_ABIS;
              i = 1;
            }
          }
        }
        if (!bool) {
          break label738;
        }
        paramFile = localHandle;
        localObject1 = localHandle;
      }
      for (j = NativeLibraryHelper.copyNativeBinariesForSupportedAbi(localHandle, localFile, (String[])localObject3, paramBoolean);; j = NativeLibraryHelper.findSupportedAbi(localHandle, (String[])localObject3))
      {
        if ((j >= 0) || (j == -114)) {
          break label757;
        }
        paramFile = localHandle;
        localObject1 = localHandle;
        throw new PackageManagerException(-110, "Error unpackaging native libs for app, errorCode=" + j);
        paramFile = localHandle;
        localObject1 = localHandle;
        localObject2 = Build.SUPPORTED_ABIS;
        break;
        label738:
        paramFile = localHandle;
        localObject1 = localHandle;
      }
      label757:
      if (j >= 0)
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        paramPackage.applicationInfo.primaryCpuAbi = localObject3[j];
      }
      else if ((j == -114) && (paramString != null))
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        paramPackage.applicationInfo.primaryCpuAbi = paramString;
      }
      else if (i != 0)
      {
        paramFile = localHandle;
        localObject1 = localHandle;
        paramPackage.applicationInfo.primaryCpuAbi = localObject3[0];
      }
    }
  }
  
  private void destroyAppDataLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    if (paramPackage == null)
    {
      Slog.wtf("PackageManager", "Package was null!", new Throwable());
      return;
    }
    destroyAppDataLeafLIF(paramPackage, paramInt1, paramInt2);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        destroyAppDataLeafLIF((PackageParser.Package)paramPackage.childPackages.get(j), paramInt1, paramInt2);
        j += 1;
      }
    }
  }
  
  private void destroyAppDataLeafLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    for (;;)
    {
      int j;
      long l;
      synchronized (this.mPackages)
      {
        PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramPackage.packageName);
        ??? = resolveUserIds(paramInt1);
        int i = ???.length;
        paramInt1 = 0;
        if (paramInt1 >= i) {
          return;
        }
        j = ???[paramInt1];
        if (localPackageSetting != null) {
          l = localPackageSetting.getCeDataInode(j);
        }
      }
      try
      {
        for (;;)
        {
          this.mInstaller.destroyAppData(paramPackage.volumeUuid, paramPackage.packageName, j, paramInt2, l);
          paramInt1 += 1;
          break;
          paramPackage = finally;
          throw paramPackage;
          l = 0L;
        }
      }
      catch (InstallerConnection.InstallerException localInstallerException)
      {
        for (;;)
        {
          Slog.w("PackageManager", String.valueOf(localInstallerException));
        }
      }
    }
  }
  
  private void destroyAppProfilesLIF(PackageParser.Package paramPackage, int paramInt)
  {
    if (paramPackage == null)
    {
      Slog.wtf("PackageManager", "Package was null!", new Throwable());
      return;
    }
    destroyAppProfilesLeafLIF(paramPackage);
    destroyAppReferenceProfileLeafLIF(paramPackage, paramInt, true);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        destroyAppProfilesLeafLIF((PackageParser.Package)paramPackage.childPackages.get(j));
        destroyAppReferenceProfileLeafLIF((PackageParser.Package)paramPackage.childPackages.get(j), paramInt, true);
        j += 1;
      }
    }
  }
  
  private void destroyAppProfilesLeafLIF(PackageParser.Package paramPackage)
  {
    try
    {
      this.mInstaller.destroyAppProfiles(paramPackage.packageName);
      return;
    }
    catch (InstallerConnection.InstallerException paramPackage)
    {
      Slog.w("PackageManager", String.valueOf(paramPackage));
    }
  }
  
  private void destroyAppReferenceProfileLeafLIF(PackageParser.Package paramPackage, int paramInt, boolean paramBoolean)
  {
    if (paramPackage.isForwardLocked()) {
      return;
    }
    Iterator localIterator = paramPackage.getAllCodePathsExcludingResourceOnly().iterator();
    if (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      for (;;)
      {
        int i;
        try
        {
          str = PackageManagerServiceUtils.realpath(new File(str));
          str = str.replace('/', '@');
          int[] arrayOfInt = resolveUserIds(paramInt);
          int k = arrayOfInt.length;
          i = 0;
          if (i >= k) {
            break;
          }
          Object localObject1 = Environment.getDataProfilesDeForeignDexDirectory(arrayOfInt[i]);
          Object localObject2;
          if (paramBoolean)
          {
            localObject2 = new File((File)localObject1, str);
            if ((((File)localObject2).exists()) && (!((File)localObject2).delete())) {
              Slog.w("PackageManager", "Unable to delete foreign user mark for package: " + paramPackage.packageName);
            }
          }
          localObject1 = ((File)localObject1).listFiles();
          if (localObject1 != null)
          {
            localObject2 = "@" + paramPackage.packageName + "@";
            int j = 0;
            int m = localObject1.length;
            if (j < m)
            {
              Object localObject3 = localObject1[j];
              if ((((File)localObject3).getName().indexOf((String)localObject2) > 0) && (!((File)localObject3).delete())) {
                Slog.w("PackageManager", "Unable to delete foreign user mark for package: " + paramPackage.packageName);
              }
              j += 1;
              continue;
            }
          }
        }
        catch (IOException localIOException)
        {
          Slog.w("PackageManager", "Failed to get canonical path", localIOException);
        }
        i += 1;
      }
    }
  }
  
  private void destroyUserDataLI(String paramString, int paramInt1, int paramInt2)
  {
    StorageManager localStorageManager = (StorageManager)this.mContext.getSystemService(StorageManager.class);
    try
    {
      this.mInstaller.destroyUserData(paramString, paramInt1, paramInt2);
      if (Objects.equals(paramString, StorageManager.UUID_PRIVATE_INTERNAL))
      {
        if ((paramInt2 & 0x1) != 0)
        {
          FileUtils.deleteContentsAndDir(Environment.getUserSystemDirectory(paramInt1));
          FileUtils.deleteContentsAndDir(Environment.getDataSystemDeDirectory(paramInt1));
        }
        if ((paramInt2 & 0x2) != 0) {
          FileUtils.deleteContentsAndDir(Environment.getDataSystemCeDirectory(paramInt1));
        }
      }
      localStorageManager.destroyUserStorage(paramString, paramInt1, paramInt2);
      return;
    }
    catch (Exception localException)
    {
      logCriticalInfo(5, "Failed to destroy user " + paramInt1 + " on volume " + paramString + ": " + localException);
    }
  }
  
  private boolean disableSystemPackageLPw(PackageParser.Package paramPackage1, PackageParser.Package paramPackage2)
  {
    boolean bool1 = this.mSettings.disableSystemPackageLPw(paramPackage1.packageName, true);
    if (paramPackage1.childPackages != null) {}
    for (int i = paramPackage1.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        PackageParser.Package localPackage = (PackageParser.Package)paramPackage1.childPackages.get(j);
        boolean bool2 = paramPackage2.hasChildPackage(localPackage.packageName);
        bool1 |= this.mSettings.disableSystemPackageLPw(localPackage.packageName, bool2);
        j += 1;
      }
    }
    return bool1;
  }
  
  private void dumpCompilerStatsLPr(PrintWriter paramPrintWriter, String paramString)
  {
    IndentingPrintWriter localIndentingPrintWriter = new IndentingPrintWriter(paramPrintWriter, "  ", 120);
    localIndentingPrintWriter.println();
    localIndentingPrintWriter.println("Compiler stats:");
    localIndentingPrintWriter.increaseIndent();
    if (paramString != null)
    {
      paramPrintWriter = (PackageParser.Package)this.mPackages.get(paramString);
      if (paramPrintWriter != null)
      {
        paramPrintWriter = Collections.singletonList(paramPrintWriter);
        paramPrintWriter = paramPrintWriter.iterator();
        label61:
        if (!paramPrintWriter.hasNext()) {
          return;
        }
        paramString = (PackageParser.Package)paramPrintWriter.next();
        localIndentingPrintWriter.println("[" + paramString.packageName + "]");
        localIndentingPrintWriter.increaseIndent();
        paramString = getCompilerPackageStats(paramString.packageName);
        if (paramString != null) {
          break label180;
        }
        localIndentingPrintWriter.println("(No recorded stats)");
      }
    }
    for (;;)
    {
      localIndentingPrintWriter.decreaseIndent();
      break label61;
      localIndentingPrintWriter.println("Unable to find package: " + paramString);
      return;
      paramPrintWriter = this.mPackages.values();
      break;
      label180:
      paramString.dump(localIndentingPrintWriter);
    }
  }
  
  private void dumpDexoptStateLPr(PrintWriter paramPrintWriter, String paramString)
  {
    IndentingPrintWriter localIndentingPrintWriter = new IndentingPrintWriter(paramPrintWriter, "  ", 120);
    localIndentingPrintWriter.println();
    localIndentingPrintWriter.println("Dexopt state:");
    localIndentingPrintWriter.increaseIndent();
    if (paramString != null)
    {
      paramPrintWriter = (PackageParser.Package)this.mPackages.get(paramString);
      if (paramPrintWriter == null) {}
    }
    for (paramPrintWriter = Collections.singletonList(paramPrintWriter);; paramPrintWriter = this.mPackages.values())
    {
      paramPrintWriter = paramPrintWriter.iterator();
      while (paramPrintWriter.hasNext())
      {
        paramString = (PackageParser.Package)paramPrintWriter.next();
        localIndentingPrintWriter.println("[" + paramString.packageName + "]");
        localIndentingPrintWriter.increaseIndent();
        this.mPackageDexOptimizer.dumpDexoptState(localIndentingPrintWriter, paramString);
        localIndentingPrintWriter.decreaseIndent();
      }
      localIndentingPrintWriter.println("Unable to find package: " + paramString);
      return;
    }
  }
  
  private String dumpDomainString(String paramString)
  {
    Object localObject2 = getIntentFilterVerifications(paramString).getList();
    Object localObject1 = getAllIntentFilters(paramString).getList();
    paramString = new ArraySet();
    if (((List)localObject2).size() > 0)
    {
      localObject2 = ((Iterable)localObject2).iterator();
      while (((Iterator)localObject2).hasNext())
      {
        Iterator localIterator = ((IntentFilterVerificationInfo)((Iterator)localObject2).next()).getDomains().iterator();
        while (localIterator.hasNext()) {
          paramString.add((String)localIterator.next());
        }
      }
    }
    if ((localObject1 != null) && (((List)localObject1).size() > 0))
    {
      localObject1 = ((Iterable)localObject1).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (IntentFilter)((Iterator)localObject1).next();
        if ((((IntentFilter)localObject2).hasCategory("android.intent.category.BROWSABLE")) && ((((IntentFilter)localObject2).hasDataScheme("http")) || (((IntentFilter)localObject2).hasDataScheme("https")))) {
          paramString.addAll(((IntentFilter)localObject2).getHostsList());
        }
      }
    }
    localObject1 = new StringBuilder(paramString.size() * 16);
    paramString = paramString.iterator();
    while (paramString.hasNext())
    {
      localObject2 = (String)paramString.next();
      if (((StringBuilder)localObject1).length() > 0) {
        ((StringBuilder)localObject1).append(" ");
      }
      ((StringBuilder)localObject1).append((String)localObject2);
    }
    return ((StringBuilder)localObject1).toString();
  }
  
  private void enableSystemPackageLPw(PackageParser.Package paramPackage)
  {
    this.mSettings.enableSystemPackageLPw(paramPackage.packageName);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        PackageParser.Package localPackage = (PackageParser.Package)paramPackage.childPackages.get(j);
        this.mSettings.enableSystemPackageLPw(localPackage.packageName);
        j += 1;
      }
    }
  }
  
  private void enableSystemUserPackages()
  {
    if (!UserManager.isSplitSystemUser()) {
      return;
    }
    Object localObject1 = new AppsQueryHelper(this);
    ArraySet localArraySet = new ArraySet();
    localArraySet.addAll(((AppsQueryHelper)localObject1).queryApps(AppsQueryHelper.GET_NON_LAUNCHABLE_APPS | AppsQueryHelper.GET_APPS_WITH_INTERACT_ACROSS_USERS_PERM | AppsQueryHelper.GET_IMES, true, UserHandle.SYSTEM));
    localArraySet.addAll(SystemConfig.getInstance().getSystemUserWhitelistedApps());
    localArraySet.addAll(((AppsQueryHelper)localObject1).queryApps(AppsQueryHelper.GET_REQUIRED_FOR_SYSTEM_USER, false, UserHandle.SYSTEM));
    localArraySet.removeAll(SystemConfig.getInstance().getSystemUserBlacklistedApps());
    Log.i("PackageManager", "Applications installed for system user: " + localArraySet);
    List localList = ((AppsQueryHelper)localObject1).queryApps(0, false, UserHandle.SYSTEM);
    int j = localList.size();
    ArrayMap localArrayMap = this.mPackages;
    int i = 0;
    for (;;)
    {
      if (i < j) {
        for (;;)
        {
          try
          {
            String str2 = (String)localList.get(i);
            PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(str2);
            if (localPackageSetting == null) {
              break;
            }
            boolean bool = localArraySet.contains(str2);
            if (localPackageSetting.getInstalled(0) == bool) {
              break;
            }
            StringBuilder localStringBuilder = new StringBuilder();
            if (bool)
            {
              localObject1 = "Installing ";
              Log.i("PackageManager", (String)localObject1 + str2 + " for system user");
              localPackageSetting.setInstalled(bool, 0);
            }
          }
          finally {}
          String str1 = "Uninstalling ";
        }
      }
      return;
      i += 1;
    }
  }
  
  private static void enforceCodePolicy(PackageParser.Package paramPackage)
    throws PackageManagerException
  {
    int i;
    if ((paramPackage.applicationInfo.flags & 0x4) != 0)
    {
      i = 1;
      if ((i != 0) && (!apkHasCode(paramPackage.baseCodePath))) {
        break label90;
      }
      if (ArrayUtils.isEmpty(paramPackage.splitCodePaths)) {
        return;
      }
      i = 0;
      label40:
      if (i >= paramPackage.splitCodePaths.length) {
        return;
      }
      if ((paramPackage.splitFlags[i] & 0x4) == 0) {
        break label129;
      }
    }
    label90:
    label129:
    for (int j = 1;; j = 0)
    {
      if ((j != 0) && (!apkHasCode(paramPackage.splitCodePaths[i]))) {
        break label134;
      }
      i += 1;
      break label40;
      i = 0;
      break;
      throw new PackageManagerException(-2, "Package " + paramPackage.baseCodePath + " code is missing");
    }
    label134:
    throw new PackageManagerException(-2, "Package " + paramPackage.splitCodePaths[i] + " code is missing");
  }
  
  private static void enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(PackageParser.Package paramPackage, BasePermission paramBasePermission)
  {
    if (paramPackage.requestedPermissions.indexOf(paramBasePermission.name) == -1) {
      throw new SecurityException("Package " + paramPackage.packageName + " has not requested permission " + paramBasePermission.name);
    }
    if ((paramBasePermission.isRuntime()) || (paramBasePermission.isDevelopment())) {
      return;
    }
    throw new SecurityException("Permission " + paramBasePermission.name + " is not a changeable permission type");
  }
  
  private void enforceGrantRevokeRuntimePermissionPermissions(String paramString)
  {
    if ((this.mContext.checkCallingOrSelfPermission("android.permission.GRANT_RUNTIME_PERMISSIONS") != 0) && (this.mContext.checkCallingOrSelfPermission("android.permission.REVOKE_RUNTIME_PERMISSIONS") != 0)) {
      throw new SecurityException(paramString + " requires " + "android.permission.GRANT_RUNTIME_PERMISSIONS" + " or " + "android.permission.REVOKE_RUNTIME_PERMISSIONS");
    }
  }
  
  private void enforceOwnerRights(String paramString, int paramInt)
  {
    if (UserHandle.getAppId(paramInt) == 1000) {
      return;
    }
    int i = UserHandle.getUserId(paramInt);
    PackageInfo localPackageInfo = getPackageInfo(paramString, 0, i);
    if (localPackageInfo == null) {
      throw new IllegalArgumentException("Unknown package " + paramString + " on user " + i);
    }
    if (!UserHandle.isSameApp(localPackageInfo.applicationInfo.uid, paramInt)) {
      throw new SecurityException("Calling uid " + paramInt + " does not own package " + paramString);
    }
  }
  
  private static void enforceSystemOrPhoneCaller(String paramString)
  {
    int i = Binder.getCallingUid();
    if ((i != 1001) && (i != 1000)) {
      throw new SecurityException("Cannot call " + paramString + " from UID " + i);
    }
  }
  
  private static final void enforceSystemOrRoot(String paramString)
  {
    int i = Binder.getCallingUid();
    if ((i != 1000) && (i != 0)) {
      throw new SecurityException(paramString);
    }
  }
  
  private List<ResolveInfo> filterCandidatesWithDomainPreferredActivitiesLPr(Intent paramIntent, int paramInt1, List<ResolveInfo> paramList, CrossProfileDomainInfo paramCrossProfileDomainInfo, int paramInt2)
  {
    int j;
    ArrayList localArrayList1;
    Object localObject1;
    Object localObject2;
    ArrayList localArrayList3;
    int k;
    int i;
    label130:
    int m;
    if ((paramIntent.getFlags() & 0x8) != 0)
    {
      j = 1;
      if ((DEBUG_PREFERRED) || (DEBUG_DOMAIN_VERIFICATION)) {
        Slog.v("PackageManager", "Filtering results with preferred activities. Candidates count: " + paramList.size());
      }
      localArrayList1 = new ArrayList();
      localObject1 = new ArrayList();
      localObject2 = new ArrayList();
      paramIntent = new ArrayList();
      ArrayList localArrayList2 = new ArrayList();
      localArrayList3 = new ArrayList();
      ResolveInfo localResolveInfo;
      synchronized (this.mPackages)
      {
        k = paramList.size();
        i = 0;
        if (i >= k) {
          break label473;
        }
        localResolveInfo = (ResolveInfo)paramList.get(i);
        Object localObject3 = localResolveInfo.activityInfo.packageName;
        localObject3 = (PackageSetting)this.mSettings.mPackages.get(localObject3);
        if (localObject3 == null) {
          break label958;
        }
        if (localResolveInfo.handleAllWebDataURI)
        {
          localArrayList3.add(localResolveInfo);
        }
        else
        {
          long l = getDomainVerificationStatusLPr((PackageSetting)localObject3, paramInt2);
          m = (int)(l >> 32);
          int n = (int)(0xFFFFFFFFFFFFFFFF & l);
          if (m == 2)
          {
            if (DEBUG_DOMAIN_VERIFICATION) {
              Slog.i("PackageManager", "  + always: " + localResolveInfo.activityInfo.packageName + " : linkgen=" + n);
            }
            localResolveInfo.preferredOrder = n;
            ((ArrayList)localObject1).add(localResolveInfo);
          }
        }
      }
      if (m == 3)
      {
        if (DEBUG_DOMAIN_VERIFICATION) {
          Slog.i("PackageManager", "  + never: " + localResolveInfo.activityInfo.packageName);
        }
        localArrayList2.add(localResolveInfo);
      }
      else
      {
        if (m != 4) {
          break label973;
        }
        if (DEBUG_DOMAIN_VERIFICATION) {
          Slog.i("PackageManager", "  + always-ask: " + localResolveInfo.activityInfo.packageName);
        }
        paramIntent.add(localResolveInfo);
        break label958;
        label422:
        if (DEBUG_DOMAIN_VERIFICATION) {
          Slog.i("PackageManager", "  + ask: " + localResolveInfo.activityInfo.packageName);
        }
        ((ArrayList)localObject2).add(localResolveInfo);
        break label958;
        label473:
        i = 0;
        if (((ArrayList)localObject1).size() > 0)
        {
          localArrayList1.addAll((Collection)localObject1);
          label492:
          if (paramIntent.size() > 0)
          {
            paramCrossProfileDomainInfo = localArrayList1.iterator();
            while (paramCrossProfileDomainInfo.hasNext()) {
              ((ResolveInfo)paramCrossProfileDomainInfo.next()).preferredOrder = 0;
            }
          }
        }
        else
        {
          localArrayList1.addAll((Collection)localObject2);
          if ((paramCrossProfileDomainInfo == null) || (paramCrossProfileDomainInfo.bestDomainVerificationStatus == 3)) {
            break label987;
          }
          localArrayList1.add(paramCrossProfileDomainInfo.resolveInfo);
          break label987;
          localArrayList1.addAll(paramIntent);
          i = 1;
        }
        if (i != 0)
        {
          if (DEBUG_DOMAIN_VERIFICATION) {
            Slog.v("PackageManager", "   ...including browsers in candidate set");
          }
          if ((0x20000 & paramInt1) == 0) {
            break label747;
          }
          localArrayList1.addAll(localArrayList3);
          label618:
          if (localArrayList1.size() == 0)
          {
            localArrayList1.addAll(paramList);
            localArrayList1.removeAll(localArrayList2);
          }
        }
        if ((DEBUG_PREFERRED) || (DEBUG_DOMAIN_VERIFICATION))
        {
          Slog.v("PackageManager", "Filtered results with preferred activities. New candidates count: " + localArrayList1.size());
          paramIntent = localArrayList1.iterator();
          while (paramIntent.hasNext())
          {
            paramList = (ResolveInfo)paramIntent.next();
            Slog.v("PackageManager", "  + " + paramList.activityInfo);
          }
          label747:
          localObject2 = getDefaultBrowserPackageName(paramInt2);
          paramInt2 = 0;
          paramIntent = null;
          k = localArrayList3.size();
          paramInt1 = 0;
        }
      }
    }
    for (;;)
    {
      if (paramInt1 < k)
      {
        localObject1 = (ResolveInfo)localArrayList3.get(paramInt1);
        i = paramInt2;
        if (((ResolveInfo)localObject1).priority > paramInt2) {
          i = ((ResolveInfo)localObject1).priority;
        }
        paramCrossProfileDomainInfo = paramIntent;
        if (!((ResolveInfo)localObject1).activityInfo.packageName.equals(localObject2)) {
          break label997;
        }
        if (paramIntent != null)
        {
          paramCrossProfileDomainInfo = paramIntent;
          if (paramIntent.priority >= ((ResolveInfo)localObject1).priority) {
            break label997;
          }
        }
        if (j != 0) {
          Slog.v("PackageManager", "Considering default browser match " + localObject1);
        }
      }
      else
      {
        if ((paramIntent == null) || (paramIntent.priority < paramInt2) || (TextUtils.isEmpty((CharSequence)localObject2)))
        {
          localArrayList1.addAll(localArrayList3);
          break label618;
        }
        if (j != 0) {
          Slog.v("PackageManager", "Default browser match " + paramIntent);
        }
        localArrayList1.add(paramIntent);
        break label618;
        return localArrayList1;
        label958:
        label973:
        do
        {
          i += 1;
          break label130;
          j = 0;
          break;
          if (m == 0) {
            break label422;
          }
        } while (m != 1);
        break label422;
        label987:
        i = 1;
        break label492;
      }
      paramCrossProfileDomainInfo = (CrossProfileDomainInfo)localObject1;
      label997:
      paramInt1 += 1;
      paramIntent = paramCrossProfileDomainInfo;
      paramInt2 = i;
    }
  }
  
  private List<ResolveInfo> filterIfNotSystemUser(List<ResolveInfo> paramList, int paramInt)
  {
    if (paramInt == 0) {
      return paramList;
    }
    paramInt = paramList.size() - 1;
    while (paramInt >= 0)
    {
      if ((((ResolveInfo)paramList.get(paramInt)).activityInfo.flags & 0x20000000) != 0) {
        paramList.remove(paramInt);
      }
      paramInt -= 1;
    }
    return paramList;
  }
  
  private BasePermission findPermissionTreeLP(String paramString)
  {
    Iterator localIterator = this.mSettings.mPermissionTrees.values().iterator();
    while (localIterator.hasNext())
    {
      BasePermission localBasePermission = (BasePermission)localIterator.next();
      if ((paramString.startsWith(localBasePermission.name)) && (paramString.length() > localBasePermission.name.length()) && (paramString.charAt(localBasePermission.name.length()) == '.')) {
        return localBasePermission;
      }
    }
    return null;
  }
  
  private ResolveInfo findPersistentPreferredActivityLP(Intent paramIntent, String paramString, int paramInt1, List<ResolveInfo> paramList, boolean paramBoolean, int paramInt2)
  {
    int k = paramList.size();
    Object localObject = (PersistentPreferredIntentResolver)this.mSettings.mPersistentPreferredActivities.get(paramInt2);
    if ((DEBUG_PREFERRED) || (paramBoolean)) {
      Slog.v("PackageManager", "Looking for presistent preferred activities...");
    }
    boolean bool;
    label75:
    int i;
    if (localObject != null) {
      if ((0x10000 & paramInt1) != 0)
      {
        bool = true;
        paramIntent = ((PersistentPreferredIntentResolver)localObject).queryIntent(paramIntent, paramString, bool, paramInt2);
        if ((paramIntent == null) || (paramIntent.size() <= 0)) {
          break label455;
        }
        int m = paramIntent.size();
        i = 0;
        label99:
        if (i >= m) {
          break label455;
        }
        localObject = (PersistentPreferredActivity)paramIntent.get(i);
        if ((DEBUG_PREFERRED) || (paramBoolean))
        {
          StringBuilder localStringBuilder = new StringBuilder().append("Checking PersistentPreferredActivity ds=");
          if (((PersistentPreferredActivity)localObject).countDataSchemes() <= 0) {
            break label295;
          }
          paramString = ((PersistentPreferredActivity)localObject).getDataScheme(0);
          label160:
          Slog.v("PackageManager", paramString + "\n  component=" + ((PersistentPreferredActivity)localObject).mComponent);
          ((PersistentPreferredActivity)localObject).dump(new LogPrinter(2, "PackageManager", 3), "  ");
        }
        paramString = getActivityInfo(((PersistentPreferredActivity)localObject).mComponent, paramInt1 | 0x200, paramInt2);
        if ((DEBUG_PREFERRED) || (paramBoolean))
        {
          Slog.v("PackageManager", "Found persistent preferred activity:");
          if (paramString == null) {
            break label302;
          }
          paramString.dump(new LogPrinter(2, "PackageManager", 3), "  ");
        }
      }
    }
    for (;;)
    {
      if (paramString != null) {
        break label315;
      }
      i += 1;
      break label99;
      bool = false;
      break;
      paramIntent = null;
      break label75;
      label295:
      paramString = "<none>";
      break label160;
      label302:
      Slog.v("PackageManager", "  null");
    }
    label315:
    int j = 0;
    label318:
    if (j < k)
    {
      localObject = (ResolveInfo)paramList.get(j);
      if (((ResolveInfo)localObject).activityInfo.applicationInfo.packageName.equals(paramString.applicationInfo.packageName)) {
        break label372;
      }
    }
    label372:
    while (!((ResolveInfo)localObject).activityInfo.name.equals(paramString.name))
    {
      j += 1;
      break label318;
      break;
    }
    if ((DEBUG_PREFERRED) || (paramBoolean)) {
      Slog.v("PackageManager", "Returning persistent preferred activity: " + ((ResolveInfo)localObject).activityInfo.packageName + "/" + ((ResolveInfo)localObject).activityInfo.name);
    }
    return (ResolveInfo)localObject;
    label455:
    return null;
  }
  
  private void findSharedNonSystemLibrariesRecursive(PackageParser.Package paramPackage, Collection<PackageParser.Package> paramCollection, Set<String> paramSet)
  {
    if (!paramSet.contains(paramPackage.packageName))
    {
      paramSet.add(paramPackage.packageName);
      paramCollection.add(paramPackage);
      if (paramPackage.usesLibraries != null) {
        findSharedNonSystemLibrariesRecursive(paramPackage.usesLibraries, paramCollection, paramSet);
      }
      if (paramPackage.usesOptionalLibraries != null) {
        findSharedNonSystemLibrariesRecursive(paramPackage.usesOptionalLibraries, paramCollection, paramSet);
      }
    }
  }
  
  private void findSharedNonSystemLibrariesRecursive(Collection<String> paramCollection, Collection<PackageParser.Package> paramCollection1, Set<String> paramSet)
  {
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      PackageParser.Package localPackage = findSharedNonSystemLibrary((String)paramCollection.next());
      if (localPackage != null) {
        findSharedNonSystemLibrariesRecursive(localPackage, paramCollection1, paramSet);
      }
    }
  }
  
  private PackageParser.Package findSharedNonSystemLibrary(String paramString)
  {
    synchronized (this.mPackages)
    {
      paramString = (SharedLibraryEntry)this.mSharedLibraries.get(paramString);
      if ((paramString != null) && (paramString.apk != null))
      {
        paramString = (PackageParser.Package)this.mPackages.get(paramString.apk);
        return paramString;
      }
      return null;
    }
  }
  
  private static String fixProcessName(String paramString1, String paramString2, int paramInt)
  {
    if (paramString2 == null) {
      return paramString1;
    }
    return paramString2;
  }
  
  private ApplicationInfo generateApplicationInfoFromSettingsLPw(String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramString = (PackageSetting)this.mSettings.mPackages.get(paramString);
    if (paramString != null)
    {
      if (paramString.pkg == null)
      {
        paramString = generatePackageInfo(paramString, paramInt1, paramInt2);
        if (paramString != null) {
          return paramString.applicationInfo;
        }
        return null;
      }
      return PackageParser.generateApplicationInfo(paramString.pkg, paramInt1, paramString.readUserState(paramInt2), paramInt2);
    }
    return null;
  }
  
  private PackageInfo generatePackageInfo(PackageSetting paramPackageSetting, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    if (paramPackageSetting == null) {
      return null;
    }
    PackageParser.Package localPackage = paramPackageSetting.pkg;
    if (localPackage == null) {
      return null;
    }
    Object localObject = paramPackageSetting.getPermissionsState();
    int[] arrayOfInt;
    if ((paramInt1 & 0x100) == 0)
    {
      arrayOfInt = EMPTY_INT_ARRAY;
      if (!ArrayUtils.isEmpty(localPackage.requestedPermissions)) {
        break label106;
      }
    }
    label106:
    for (localObject = Collections.emptySet();; localObject = ((PermissionsState)localObject).getPermissions(paramInt2))
    {
      PackageUserState localPackageUserState = paramPackageSetting.readUserState(paramInt2);
      return PackageParser.generatePackageInfo(localPackage, arrayOfInt, paramInt1, paramPackageSetting.firstInstallTime, paramPackageSetting.lastUpdateTime, (Set)localObject, localPackageUserState, paramInt2);
      arrayOfInt = ((PermissionsState)localObject).computeGids(paramInt2);
      break;
    }
  }
  
  static PermissionInfo generatePermissionInfo(BasePermission paramBasePermission, int paramInt)
  {
    if (paramBasePermission.perm != null) {
      return PackageParser.generatePermissionInfo(paramBasePermission.perm, paramInt);
    }
    PermissionInfo localPermissionInfo = new PermissionInfo();
    localPermissionInfo.name = paramBasePermission.name;
    localPermissionInfo.packageName = paramBasePermission.sourcePackage;
    localPermissionInfo.nonLocalizedLabel = paramBasePermission.name;
    localPermissionInfo.protectionLevel = paramBasePermission.protectionLevel;
    return localPermissionInfo;
  }
  
  private String getActiveLauncherPackageName(int paramInt)
  {
    Object localObject = new Intent("android.intent.action.MAIN");
    ((Intent)localObject).addCategory("android.intent.category.HOME");
    localObject = resolveIntent((Intent)localObject, ((Intent)localObject).resolveTypeIfNeeded(this.mContext.getContentResolver()), 65536, paramInt);
    if (localObject == null) {
      return null;
    }
    return ((ResolveInfo)localObject).activityInfo.packageName;
  }
  
  static String getAsecPackageName(String paramString)
  {
    int i = paramString.lastIndexOf("-");
    if (i == -1) {
      return paramString;
    }
    return paramString.substring(0, i);
  }
  
  private int[] getBlockUninstallForUsers(String paramString, int[] paramArrayOfInt)
  {
    Object localObject1 = EMPTY_INT_ARRAY;
    int i = 0;
    int j = paramArrayOfInt.length;
    while (i < j)
    {
      int k = paramArrayOfInt[i];
      Object localObject2 = localObject1;
      if (getBlockUninstallForUser(paramString, k)) {
        localObject2 = ArrayUtils.appendInt((int[])localObject1, k);
      }
      i += 1;
      localObject1 = localObject2;
    }
    return (int[])localObject1;
  }
  
  private CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(Intent paramIntent, String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    if (!sUserManager.hasUserRestriction("allow_parent_profile_app_linking", paramInt2)) {
      return null;
    }
    List localList = this.mActivities.queryIntent(paramIntent, paramString, paramInt1, paramInt3);
    if ((localList == null) || (localList.isEmpty())) {
      return null;
    }
    paramIntent = null;
    int i = localList.size();
    paramInt1 = 0;
    if (paramInt1 < i)
    {
      paramString = (ResolveInfo)localList.get(paramInt1);
      if (paramString.handleAllWebDataURI) {
        paramString = paramIntent;
      }
      for (;;)
      {
        paramInt1 += 1;
        paramIntent = paramString;
        break;
        paramString = paramString.activityInfo.packageName;
        PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
        paramString = paramIntent;
        if (localPackageSetting != null)
        {
          int j = (int)(getDomainVerificationStatusLPr(localPackageSetting, paramInt3) >> 32);
          if (paramIntent == null)
          {
            paramString = new CrossProfileDomainInfo(null);
            paramString.resolveInfo = createForwardingResolveInfoUnchecked(new IntentFilter(), paramInt2, paramInt3);
            paramString.bestDomainVerificationStatus = j;
          }
          else
          {
            paramIntent.bestDomainVerificationStatus = bestDomainVerificationStatus(j, paramIntent.bestDomainVerificationStatus);
            paramString = paramIntent;
          }
        }
      }
    }
    if ((paramIntent != null) && (paramIntent.bestDomainVerificationStatus == 3)) {
      return null;
    }
    return paramIntent;
  }
  
  private String getDefaultDialerPackageName(int paramInt)
  {
    synchronized (this.mPackages)
    {
      String str = this.mSettings.getDefaultDialerPackageNameLPw(paramInt);
      return str;
    }
  }
  
  private static void getDefaultDisplayMetrics(Context paramContext, DisplayMetrics paramDisplayMetrics)
  {
    ((DisplayManager)paramContext.getSystemService("display")).getDisplay(0).getMetrics(paramDisplayMetrics);
  }
  
  private int getDefaultVerificationResponse()
  {
    return Settings.Global.getInt(this.mContext.getContentResolver(), "verifier_default_response", 1);
  }
  
  private long getDomainVerificationStatusLPr(PackageSetting paramPackageSetting, int paramInt)
  {
    long l2 = paramPackageSetting.getDomainVerificationStatusForUser(paramInt);
    long l1 = l2;
    if (l2 >> 32 == 0L)
    {
      l1 = l2;
      if (paramPackageSetting.getIntentFilterVerificationInfo() != null) {
        l1 = paramPackageSetting.getIntentFilterVerificationInfo().getStatus() << 32;
      }
    }
    return l1;
  }
  
  static String getEncryptKey()
  {
    try
    {
      String str2 = SystemKeyStore.getInstance().retrieveKeyHexString("AppsOnSD");
      String str1 = str2;
      if (str2 == null)
      {
        str2 = SystemKeyStore.getInstance().generateNewKeyHexString(128, "AES", "AppsOnSD");
        str1 = str2;
        if (str2 == null)
        {
          Slog.e("PackageManager", "Failed to create encryption keys");
          return null;
        }
      }
      return str1;
    }
    catch (IOException localIOException)
    {
      Slog.e("PackageManager", "Failed to retrieve encryption keys with exception: " + localIOException);
      return null;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      Slog.e("PackageManager", "Failed to create encryption keys with exception: " + localNoSuchAlgorithmException);
    }
    return null;
  }
  
  private ComponentName getEphemeralInstallerLPr()
  {
    Object localObject = new Intent("android.intent.action.INSTALL_EPHEMERAL_PACKAGE");
    ((Intent)localObject).addCategory("android.intent.category.DEFAULT");
    ((Intent)localObject).setDataAndType(Uri.fromFile(new File("foo.apk")), "application/vnd.android.package-archive");
    if (!Build.IS_DEBUGGABLE) {}
    for (int i = 1048576;; i = 0)
    {
      localObject = queryIntentActivitiesInternal((Intent)localObject, "application/vnd.android.package-archive", 0xC0000 | i, 0);
      if (((List)localObject).size() != 0) {
        break;
      }
      return null;
    }
    if (((List)localObject).size() == 1) {
      return ((ResolveInfo)((List)localObject).get(0)).getComponentInfo().getComponentName();
    }
    throw new RuntimeException("There must be at most one ephemeral installer; found " + localObject);
  }
  
  private static EphemeralResolveInfo getEphemeralResolveInfo(Context paramContext, EphemeralResolverConnection paramEphemeralResolverConnection, Intent paramIntent, String paramString1, int paramInt, String paramString2)
  {
    int i = Settings.Global.getInt(paramContext.getContentResolver(), "ephemeral_hash_prefix_mask", DEFAULT_EPHEMERAL_HASH_PREFIX_MASK);
    int j = Settings.Global.getInt(paramContext.getContentResolver(), "ephemeral_hash_prefix_count", DEFAULT_EPHEMERAL_HASH_PREFIX_COUNT);
    paramContext = new EphemeralResolveInfo.EphemeralDigest(paramIntent.getData(), i, j);
    Object localObject1 = paramContext.getDigestPrefix();
    paramContext = paramContext.getDigestBytes();
    paramEphemeralResolverConnection = paramEphemeralResolverConnection.getEphemeralResolveInfoList((int[])localObject1, i);
    if ((paramEphemeralResolverConnection == null) || (paramEphemeralResolverConnection.size() == 0)) {
      return null;
    }
    i = localObject1.length - 1;
    while (i >= 0)
    {
      localObject1 = paramEphemeralResolverConnection.iterator();
      while (((Iterator)localObject1).hasNext())
      {
        Object localObject2 = (EphemeralResolveInfo)((Iterator)localObject1).next();
        if (Arrays.equals(paramContext[i], ((EphemeralResolveInfo)localObject2).getDigestBytes()))
        {
          List localList = ((EphemeralResolveInfo)localObject2).getFilters();
          if ((!localList.isEmpty()) && ((paramString2 == null) || (paramString2.equals(((EphemeralResolveInfo)localObject2).getPackageName()))))
          {
            EphemeralIntentResolver localEphemeralIntentResolver = new EphemeralIntentResolver(null);
            j = localList.size() - 1;
            while (j >= 0)
            {
              localEphemeralIntentResolver.addFilter(new EphemeralResolveInfo.EphemeralResolveIntentInfo((IntentFilter)localList.get(j), (EphemeralResolveInfo)localObject2));
              j -= 1;
            }
            localObject2 = localEphemeralIntentResolver.queryIntent(paramIntent, paramString1, false, paramInt);
            if (!((List)localObject2).isEmpty()) {
              return (EphemeralResolveInfo)((List)localObject2).get(0);
            }
          }
        }
      }
      i -= 1;
    }
    return null;
  }
  
  private ComponentName getEphemeralResolverLPr()
  {
    Object localObject = this.mContext.getResources().getStringArray(17236014);
    if ((localObject.length != 0) || (Build.IS_DEBUGGABLE)) {
      if (Build.IS_DEBUGGABLE) {
        break label106;
      }
    }
    List localList;
    int j;
    label106:
    for (int i = 1048576;; i = 0)
    {
      localList = queryIntentServicesInternal(new Intent("android.intent.action.RESOLVE_EPHEMERAL_PACKAGE"), null, 0xC0000 | i, 0);
      j = localList.size();
      if (j != 0) {
        break;
      }
      if (DEBUG_EPHEMERAL) {
        Slog.d("PackageManager", "Ephemeral resolver NOT found; no matching intent filters");
      }
      return null;
      if (DEBUG_EPHEMERAL) {
        Slog.d("PackageManager", "Ephemeral resolver NOT found; empty package list");
      }
      return null;
    }
    localObject = new ArraySet(Arrays.asList((Object[])localObject));
    i = 0;
    if (i < j)
    {
      ResolveInfo localResolveInfo = (ResolveInfo)localList.get(i);
      if (localResolveInfo.serviceInfo == null) {}
      for (;;)
      {
        i += 1;
        break;
        String str = localResolveInfo.serviceInfo.packageName;
        if ((((Set)localObject).contains(str)) || (Build.IS_DEBUGGABLE))
        {
          if (DEBUG_EPHEMERAL) {
            Slog.v("PackageManager", "Ephemeral resolver found; pkg: " + str + ", info:" + localResolveInfo);
          }
          return new ComponentName(str, localResolveInfo.serviceInfo.name);
        }
        if (DEBUG_EPHEMERAL) {
          Slog.d("PackageManager", "Ephemeral resolver not in allowed package list; pkg: " + str + ", info:" + localResolveInfo);
        }
      }
    }
    if (DEBUG_EPHEMERAL) {
      Slog.v("PackageManager", "Ephemeral resolver NOT found");
    }
    return null;
  }
  
  private IntentFilter getHomeFilter()
  {
    IntentFilter localIntentFilter = new IntentFilter("android.intent.action.MAIN");
    localIntentFilter.addCategory("android.intent.category.HOME");
    localIntentFilter.addCategory("android.intent.category.DEFAULT");
    return localIntentFilter;
  }
  
  private Intent getHomeIntent()
  {
    Intent localIntent = new Intent("android.intent.action.MAIN");
    localIntent.addCategory("android.intent.category.HOME");
    localIntent.addCategory("android.intent.category.DEFAULT");
    return localIntent;
  }
  
  private ComponentName getIntentFilterVerifierComponentNameLPr()
  {
    List localList = queryIntentReceiversInternal(new Intent("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION"), "application/vnd.android.package-archive", 1835008, 0);
    Object localObject1 = null;
    int j = localList.size();
    int i = 0;
    if (i < j)
    {
      ResolveInfo localResolveInfo = (ResolveInfo)localList.get(i);
      Object localObject2;
      if (checkPermission("android.permission.INTENT_FILTER_VERIFICATION_AGENT", localResolveInfo.getComponentInfo().packageName, 0) != 0) {
        localObject2 = localObject1;
      }
      for (;;)
      {
        i += 1;
        localObject1 = localObject2;
        break;
        if (localObject1 != null)
        {
          localObject2 = localObject1;
          if (localResolveInfo.priority <= ((ResolveInfo)localObject1).priority) {}
        }
        else
        {
          localObject2 = localResolveInfo;
        }
      }
    }
    if (localObject1 != null) {
      return ((ResolveInfo)localObject1).getComponentInfo().getComponentName();
    }
    throw new RuntimeException("There must be at least one intent filter verifier");
  }
  
  private long getLastModifiedTime(PackageParser.Package paramPackage, File paramFile)
  {
    if (paramFile.isDirectory())
    {
      long l1 = new File(paramPackage.baseCodePath).lastModified();
      long l2 = l1;
      if (paramPackage.splitCodePaths != null)
      {
        int i = paramPackage.splitCodePaths.length - 1;
        for (;;)
        {
          l2 = l1;
          if (i < 0) {
            break;
          }
          l1 = Math.max(l1, new File(paramPackage.splitCodePaths[i]).lastModified());
          i -= 1;
        }
      }
      return l2;
    }
    return paramFile.lastModified();
  }
  
  private List<CrossProfileIntentFilter> getMatchingCrossProfileIntentFilters(Intent paramIntent, String paramString, int paramInt)
  {
    CrossProfileIntentResolver localCrossProfileIntentResolver = (CrossProfileIntentResolver)this.mSettings.mCrossProfileIntentResolvers.get(paramInt);
    if (localCrossProfileIntentResolver != null) {
      return localCrossProfileIntentResolver.queryIntent(paramIntent, paramString, false, paramInt);
    }
    return null;
  }
  
  private File getNextCodePath(File paramFile, String paramString)
  {
    int i = 1;
    File localFile;
    do
    {
      localFile = new File(paramFile, paramString + "-" + i);
      i += 1;
    } while (localFile.exists());
    return localFile;
  }
  
  private static String getNextCodePath(String paramString1, String paramString2, String paramString3)
  {
    j = 1;
    i = j;
    if (paramString1 != null)
    {
      String str1 = paramString1;
      String str2 = str1;
      if (paramString3 != null)
      {
        str2 = str1;
        if (paramString1.endsWith(paramString3)) {
          str2 = paramString1.substring(0, paramString1.length() - paramString3.length());
        }
      }
      int k = str2.lastIndexOf(paramString2);
      i = j;
      if (k != -1)
      {
        paramString3 = str2.substring(paramString2.length() + k);
        i = j;
        if (paramString3 != null)
        {
          paramString1 = paramString3;
          if (paramString3.startsWith("-")) {
            paramString1 = paramString3.substring("-".length());
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        i = Integer.parseInt(paramString1);
        if (i > 1) {
          continue;
        }
        i += 1;
      }
      catch (NumberFormatException paramString1)
      {
        i = j;
        continue;
      }
      paramString1 = "-" + Integer.toString(i);
      return paramString2 + paramString1;
      i -= 1;
    }
  }
  
  private String getOptionalVerfiferLPr()
  {
    List localList = queryIntentReceiversInternal(new Intent("android.intent.action.PACKAGE_NEEDS_VERIFICATION"), "application/vnd.android.package-archive", 1835008, 0);
    if (localList.size() == 1) {
      return null;
    }
    if (localList.size() > 1)
    {
      String str = this.mContext.getResources().getString(17039464);
      if (TextUtils.isEmpty(str)) {
        return null;
      }
      int i = 0;
      while (i < localList.size())
      {
        if (((ResolveInfo)localList.get(i)).getComponentInfo().packageName.contains(str)) {
          return ((ResolveInfo)localList.get(i)).getComponentInfo().packageName;
        }
        i += 1;
      }
    }
    return null;
  }
  
  private boolean getPackageSizeInfoLI(String paramString, int paramInt, PackageStats paramPackageStats)
  {
    for (;;)
    {
      PackageSetting localPackageSetting;
      synchronized (this.mPackages)
      {
        localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
        if (localPackageSetting == null)
        {
          Slog.w("PackageManager", "Failed to find settings for " + paramString);
          return false;
        }
      }
      paramPackageStats.codeSize = 0L;
    }
  }
  
  private String getParentOrChildPackageChangedSharedUser(PackageParser.Package paramPackage1, PackageParser.Package paramPackage2)
  {
    if (!Objects.equals(paramPackage1.mSharedUserId, paramPackage2.mSharedUserId)) {
      return paramPackage2.packageName;
    }
    int i;
    int j;
    label50:
    int k;
    if (paramPackage1.childPackages != null)
    {
      i = paramPackage1.childPackages.size();
      if (paramPackage2.childPackages == null) {
        break label143;
      }
      j = paramPackage2.childPackages.size();
      k = 0;
    }
    for (;;)
    {
      if (k >= j) {
        break label164;
      }
      PackageParser.Package localPackage1 = (PackageParser.Package)paramPackage2.childPackages.get(k);
      int m = 0;
      for (;;)
      {
        if (m < i)
        {
          PackageParser.Package localPackage2 = (PackageParser.Package)paramPackage1.childPackages.get(m);
          if ((!localPackage1.packageName.equals(localPackage2.packageName)) || (Objects.equals(localPackage1.mSharedUserId, localPackage2.mSharedUserId)))
          {
            m += 1;
            continue;
            i = 0;
            break;
            label143:
            j = 0;
            break label50;
          }
          return localPackage1.packageName;
        }
      }
      k += 1;
    }
    label164:
    return null;
  }
  
  private List<ApplicationInfo> getPersistentApplicationsInternal(int paramInt)
  {
    ArrayList localArrayList = new ArrayList();
    for (;;)
    {
      synchronized (this.mPackages)
      {
        Iterator localIterator = this.mPackages.values().iterator();
        int j = UserHandle.getCallingUserId();
        if (!localIterator.hasNext()) {
          break label217;
        }
        Object localObject = (PackageParser.Package)localIterator.next();
        if (((PackageParser.Package)localObject).applicationInfo == null) {
          continue;
        }
        if ((0x40000 & paramInt) == 0) {
          break label206;
        }
        if (((PackageParser.Package)localObject).applicationInfo.isDirectBootAware())
        {
          i = 0;
          if ((0x80000 & paramInt) == 0) {
            break label211;
          }
          bool = ((PackageParser.Package)localObject).applicationInfo.isDirectBootAware();
          if ((((PackageParser.Package)localObject).applicationInfo.flags & 0x8) == 0) {
            continue;
          }
          if (!this.mSafeMode) {
            break label223;
          }
          if (!isSystemApp((PackageParser.Package)localObject)) {
            continue;
          }
          break label223;
          PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(((PackageParser.Package)localObject).packageName);
          if (localPackageSetting == null) {
            continue;
          }
          localObject = PackageParser.generateApplicationInfo((PackageParser.Package)localObject, paramInt, localPackageSetting.readUserState(j), j);
          if (localObject == null) {
            continue;
          }
          localArrayList.add(localObject);
        }
      }
      int i = 1;
      continue;
      label206:
      i = 0;
      continue;
      label211:
      boolean bool = false;
      continue;
      label217:
      return localList;
      label223:
      if (i == 0) {
        if (!bool) {}
      }
    }
  }
  
  private UserInfo getProfileParent(int paramInt)
  {
    long l = Binder.clearCallingIdentity();
    try
    {
      UserInfo localUserInfo = sUserManager.getProfileParent(paramInt);
      return localUserInfo;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  private String getRequiredButNotReallyRequiredVerifierLPr()
  {
    List localList = queryIntentReceiversInternal(new Intent("android.intent.action.PACKAGE_NEEDS_VERIFICATION"), "application/vnd.android.package-archive", 1835008, 0);
    if (localList.size() == 1) {
      return ((ResolveInfo)localList.get(0)).getComponentInfo().packageName;
    }
    if (localList.size() > 1)
    {
      String str = this.mContext.getResources().getString(17039464);
      if (TextUtils.isEmpty(str)) {
        return ((ResolveInfo)localList.get(0)).getComponentInfo().packageName;
      }
      int i = 0;
      while (i < localList.size())
      {
        if (!((ResolveInfo)localList.get(i)).getComponentInfo().packageName.contains(str)) {
          return ((ResolveInfo)localList.get(i)).getComponentInfo().packageName;
        }
        i += 1;
      }
    }
    if (localList.size() == 0)
    {
      Log.e("PackageManager", "There should probably be a verifier, but, none were found");
      return null;
    }
    throw new RuntimeException("There must be exactly one verifier; found " + localList);
  }
  
  private String getRequiredInstallerLPr()
  {
    Object localObject = new Intent("android.intent.action.INSTALL_PACKAGE");
    ((Intent)localObject).addCategory("android.intent.category.DEFAULT");
    ((Intent)localObject).setDataAndType(Uri.fromFile(new File("foo.apk")), "application/vnd.android.package-archive");
    localObject = queryIntentActivitiesInternal((Intent)localObject, "application/vnd.android.package-archive", 1835008, 0);
    if (((List)localObject).size() == 1)
    {
      if (!((ResolveInfo)((List)localObject).get(0)).activityInfo.applicationInfo.isPrivilegedApp()) {
        throw new RuntimeException("The installer must be a privileged app");
      }
      return ((ResolveInfo)((List)localObject).get(0)).getComponentInfo().packageName;
    }
    throw new RuntimeException("There must be exactly one installer; found " + localObject);
  }
  
  private String getRequiredSharedLibraryLPr(String paramString)
  {
    SharedLibraryEntry localSharedLibraryEntry;
    synchronized (this.mPackages)
    {
      localSharedLibraryEntry = (SharedLibraryEntry)this.mSharedLibraries.get(paramString);
      if (localSharedLibraryEntry == null) {
        throw new IllegalStateException("Missing required shared library:" + paramString);
      }
    }
    paramString = localSharedLibraryEntry.apk;
    return paramString;
  }
  
  private String getRequiredUninstallerLPr()
  {
    Object localObject = new Intent("android.intent.action.UNINSTALL_PACKAGE");
    ((Intent)localObject).addCategory("android.intent.category.DEFAULT");
    ((Intent)localObject).setData(Uri.fromParts("package", "foo.bar", null));
    localObject = resolveIntent((Intent)localObject, null, 1835008, 0);
    if ((localObject == null) || (this.mResolveActivity.name.equals(((ResolveInfo)localObject).getComponentInfo().name))) {
      throw new RuntimeException("There must be exactly one uninstaller; found " + localObject);
    }
    return ((ResolveInfo)localObject).getComponentInfo().packageName;
  }
  
  private static File getSettingsProblemFile()
  {
    return new File(new File(Environment.getDataDirectory(), "system"), "uiderrors.txt");
  }
  
  private Settings.VersionInfo getSettingsVersionForPackage(PackageParser.Package paramPackage)
  {
    if (isExternal(paramPackage))
    {
      if (TextUtils.isEmpty(paramPackage.volumeUuid)) {
        return this.mSettings.getExternalVersion();
      }
      return this.mSettings.findOrCreateVersion(paramPackage.volumeUuid);
    }
    return this.mSettings.getInternalVersion();
  }
  
  private String getSetupWizardPackageName()
  {
    Object localObject = new Intent("android.intent.action.MAIN");
    ((Intent)localObject).addCategory("android.intent.category.SETUP_WIZARD");
    localObject = queryIntentActivitiesInternal((Intent)localObject, null, 1835520, UserHandle.myUserId());
    if (((List)localObject).size() == 1) {
      return ((ResolveInfo)((List)localObject).get(0)).getComponentInfo().packageName;
    }
    Slog.e("PackageManager", "There should probably be exactly one setup wizard; found " + ((List)localObject).size() + ": matches=" + localObject);
    return null;
  }
  
  private String getStorageManagerPackageName()
  {
    List localList = queryIntentActivitiesInternal(new Intent("android.os.storage.action.MANAGE_STORAGE"), null, 1835520, UserHandle.myUserId());
    if (localList.size() == 1) {
      return ((ResolveInfo)localList.get(0)).getComponentInfo().packageName;
    }
    Slog.e("PackageManager", "There should probably be exactly one storage manager; found " + localList.size() + ": matches=" + localList);
    return null;
  }
  
  private int getUidForVerifier(VerifierInfo paramVerifierInfo)
  {
    synchronized (this.mPackages)
    {
      PackageParser.Package localPackage = (PackageParser.Package)this.mPackages.get(paramVerifierInfo.packageName);
      if (localPackage == null) {
        return -1;
      }
      if (localPackage.mSignatures.length != 1)
      {
        Slog.i("PackageManager", "Verifier package " + paramVerifierInfo.packageName + " has more than one signature; ignoring");
        return -1;
      }
      try
      {
        byte[] arrayOfByte = localPackage.mSignatures[0].getPublicKey().getEncoded();
        if (!Arrays.equals(paramVerifierInfo.publicKey.getEncoded(), arrayOfByte))
        {
          Slog.i("PackageManager", "Verifier package " + paramVerifierInfo.packageName + " does not have the expected public key; ignoring");
          return -1;
        }
      }
      catch (CertificateException paramVerifierInfo)
      {
        return -1;
      }
      int i = localPackage.applicationInfo.uid;
      return i;
    }
  }
  
  private int getUidTargetSdkVersionLockedLPr(int paramInt)
  {
    Object localObject = this.mSettings.getUserIdLPr(paramInt);
    if ((localObject instanceof SharedUserSetting))
    {
      localObject = (SharedUserSetting)localObject;
      paramInt = 10000;
      localObject = ((SharedUserSetting)localObject).packages.iterator();
      while (((Iterator)localObject).hasNext())
      {
        PackageSetting localPackageSetting = (PackageSetting)((Iterator)localObject).next();
        if (localPackageSetting.pkg != null)
        {
          int i = localPackageSetting.pkg.applicationInfo.targetSdkVersion;
          if (i < paramInt) {
            paramInt = i;
          }
        }
      }
      return paramInt;
    }
    if ((localObject instanceof PackageSetting))
    {
      localObject = (PackageSetting)localObject;
      if (((PackageSetting)localObject).pkg != null) {
        return ((PackageSetting)localObject).pkg.applicationInfo.targetSdkVersion;
      }
    }
    return 10000;
  }
  
  private int getUnknownSourcesSettings()
  {
    return Settings.Secure.getInt(this.mContext.getContentResolver(), "install_non_market_apps", -1);
  }
  
  private UserManagerInternal getUserManagerInternal()
  {
    if (this.mUserManagerInternal == null) {
      this.mUserManagerInternal = ((UserManagerInternal)LocalServices.getService(UserManagerInternal.class));
    }
    return this.mUserManagerInternal;
  }
  
  private long getVerificationTimeout()
  {
    return Settings.Global.getLong(this.mContext.getContentResolver(), "verifier_timeout", 10000L);
  }
  
  private String getVolumeUuidForPackage(PackageParser.Package paramPackage)
  {
    if (isExternal(paramPackage))
    {
      if (TextUtils.isEmpty(paramPackage.volumeUuid)) {
        return "primary_physical";
      }
      return paramPackage.volumeUuid;
    }
    return StorageManager.UUID_PRIVATE_INTERNAL;
  }
  
  private void grantPermissionsLPw(PackageParser.Package paramPackage, boolean paramBoolean, String paramString)
  {
    PackageSetting localPackageSetting = (PackageSetting)paramPackage.mExtras;
    if (localPackageSetting == null) {
      return;
    }
    Trace.traceBegin(262144L, "grantPermissions");
    PermissionsState localPermissionsState = localPackageSetting.getPermissionsState();
    Object localObject2 = localPermissionsState;
    int[] arrayOfInt = UserManagerService.getInstance().getUserIds();
    boolean bool2 = false;
    Object localObject3 = EMPTY_INT_ARRAY;
    int j = 0;
    Object localObject1 = localObject3;
    Object localObject4 = localObject2;
    boolean bool1 = bool2;
    int i2;
    label129:
    BasePermission localBasePermission;
    int i;
    if (paramBoolean)
    {
      localPackageSetting.installPermissionsFixed = false;
      if (!localPackageSetting.isSharedUser())
      {
        localObject4 = new PermissionsState(localPermissionsState);
        localPermissionsState.reset();
        bool1 = bool2;
        localObject1 = localObject3;
      }
    }
    else
    {
      localPermissionsState.setGlobalGids(this.mGlobalGids);
      int i5 = paramPackage.requestedPermissions.size();
      i2 = 0;
      if (i2 >= i5) {
        break label1736;
      }
      localObject3 = (String)paramPackage.requestedPermissions.get(i2);
      localBasePermission = (BasePermission)this.mSettings.mPermissions.get(localObject3);
      if (DEBUG_INSTALL) {
        Log.i("PackageManager", "Package " + paramPackage.packageName + " checking " + (String)localObject3 + ": " + localBasePermission);
      }
      if ((localBasePermission != null) && (localBasePermission.packageSetting != null)) {
        break label378;
      }
      if (paramString != null)
      {
        i = j;
        localObject2 = localObject1;
        if (!paramString.equals(paramPackage.packageName)) {}
      }
      else
      {
        Slog.w("PackageManager", "Unknown permission " + (String)localObject3 + " in package " + paramPackage.packageName);
        localObject2 = localObject1;
        i = j;
      }
    }
    label310:
    label378:
    int k;
    for (;;)
    {
      i2 += 1;
      j = i;
      localObject1 = localObject2;
      break label129;
      localObject3 = revokeUnusedSharedUserPermissionsLPw(localPackageSetting.sharedUser, UserManagerService.getInstance().getUserIds());
      localObject1 = localObject3;
      localObject4 = localObject2;
      bool1 = bool2;
      if (ArrayUtils.isEmpty((int[])localObject3)) {
        break;
      }
      bool1 = true;
      localObject1 = localObject3;
      localObject4 = localObject2;
      break;
      Object localObject5 = localBasePermission.name;
      k = 0;
      i = 1;
      if ((localBasePermission.protectionLevel & 0x40) != 0)
      {
        localObject3 = (ArraySet)this.mAppOpPermissionPackages.get(localBasePermission.name);
        localObject2 = localObject3;
        if (localObject3 == null)
        {
          localObject2 = new ArraySet();
          this.mAppOpPermissionPackages.put(localBasePermission.name, localObject2);
        }
        ((ArraySet)localObject2).add(paramPackage.packageName);
      }
      int m = localBasePermission.protectionLevel;
      int i3;
      if (paramPackage.applicationInfo.targetSdkVersion >= 23)
      {
        i3 = 1;
        label484:
        switch (m & 0xF)
        {
        default: 
          label516:
          if (DEBUG_INSTALL) {
            Log.i("PackageManager", "Package " + paramPackage.packageName + " granting " + (String)localObject5);
          }
          if (i == 1) {
            break label1489;
          }
          m = i;
          if (!isSystemApp(localPackageSetting))
          {
            m = i;
            if (localPackageSetting.installPermissionsFixed)
            {
              if (!paramPackage.codePath.startsWith("/system/reserve")) {
                break label851;
              }
              m = i;
            }
          }
          break;
        }
      }
      for (;;)
      {
        switch (m)
        {
        default: 
          if (paramString != null)
          {
            i = j;
            localObject2 = localObject1;
            if (!paramString.equals(paramPackage.packageName)) {
              break label310;
            }
          }
          Slog.w("PackageManager", "Not granting permission " + (String)localObject5 + " to package " + paramPackage.packageName + " because it was previously installed without");
          i = j;
          localObject2 = localObject1;
          break label310;
          i3 = 0;
          break label484;
          i = 2;
          break label516;
          if ((i3 != 0) || (Build.PERMISSIONS_REVIEW_REQUIRED))
          {
            if (!((PermissionsState)localObject4).hasInstallPermission(localBasePermission.name)) {
              break label769;
            }
            i = 4;
            break label516;
          }
          i = 2;
          break label516;
          label769:
          if ((this.mPromoteSystemApps) && (isSystemApp(localPackageSetting)) && (this.mExistingSystemPackages.contains(localPackageSetting.name)))
          {
            i = 4;
            break label516;
          }
          i = 3;
          break label516;
          int n = grantSignaturePermission((String)localObject5, paramPackage, localBasePermission, (PermissionsState)localObject4) | OemPackageManagerHelper.isTrustedSystemSignature(paramPackage.mSignatures);
          k = n;
          if (n == 0) {
            break label516;
          }
          i = 2;
          k = n;
          break label516;
          label851:
          n = i;
          if (k == 0)
          {
            n = i;
            if (!((PermissionsState)localObject4).hasInstallPermission((String)localObject5))
            {
              n = i;
              if (!isNewPlatformPermissionForPackage((String)localObject5, paramPackage)) {
                n = 1;
              }
            }
          }
          break;
        }
      }
      localObject3 = UserManagerService.getInstance().getUserIds();
      i = 0;
      k = localObject3.length;
      int i1;
      while (i < k)
      {
        i1 = localObject3[i];
        localObject2 = localObject1;
        if (((PermissionsState)localObject4).getRuntimePermissionState(localBasePermission.name, i1) != null)
        {
          ((PermissionsState)localObject4).revokeRuntimePermission(localBasePermission, i1);
          ((PermissionsState)localObject4).updatePermissionFlags(localBasePermission, i1, 255, 0);
          localObject2 = ArrayUtils.appendInt((int[])localObject1, i1);
        }
        i += 1;
        localObject1 = localObject2;
      }
      i = j;
      localObject2 = localObject1;
      if (localPermissionsState.grantInstallPermission(localBasePermission) != -1)
      {
        i = 1;
        localObject2 = localObject1;
        continue;
        localObject5 = UserManagerService.getInstance().getUserIds();
        int i4 = 0;
        int i6 = localObject5.length;
        i = j;
        localObject2 = localObject1;
        if (i4 < i6)
        {
          int i7 = localObject5[i4];
          localObject2 = ((PermissionsState)localObject4).getRuntimePermissionState(localBasePermission.name, i7);
          if (localObject2 != null)
          {
            i = ((PermissionsState.PermissionState)localObject2).getFlags();
            label1082:
            if (!((PermissionsState)localObject4).hasRuntimePermission(localBasePermission.name, i7)) {
              break label1215;
            }
            localObject3 = localObject1;
            if (localPermissionsState.grantRuntimePermission(localBasePermission, i7) == -1) {
              localObject3 = ArrayUtils.appendInt((int[])localObject1, i7);
            }
            localObject2 = localObject3;
            k = i;
            if (Build.PERMISSIONS_REVIEW_REQUIRED)
            {
              localObject2 = localObject3;
              k = i;
              if (i3 != 0)
              {
                localObject2 = localObject3;
                k = i;
                if ((i & 0x40) != 0)
                {
                  k = i & 0xFFFFFFBF;
                  localObject2 = ArrayUtils.appendInt((int[])localObject3, i7);
                }
              }
            }
          }
          for (;;)
          {
            localPermissionsState.updatePermissionFlags(localBasePermission, i7, k, k);
            i4 += 1;
            localObject1 = localObject2;
            break;
            i = 0;
            break label1082;
            label1215:
            localObject2 = localObject1;
            k = i;
            if (Build.PERMISSIONS_REVIEW_REQUIRED)
            {
              localObject2 = localObject1;
              k = i;
              if (i3 == 0)
              {
                localObject3 = localObject1;
                i1 = i;
                if ("android".equals(localBasePermission.sourcePackage))
                {
                  localObject3 = localObject1;
                  i1 = i;
                  if ((i & 0x40) == 0)
                  {
                    i1 = i | 0x40;
                    localObject3 = ArrayUtils.appendInt((int[])localObject1, i7);
                  }
                }
                localObject2 = localObject3;
                k = i1;
                if (localPermissionsState.grantRuntimePermission(localBasePermission, i7) != -1)
                {
                  localObject2 = ArrayUtils.appendInt((int[])localObject3, i7);
                  k = i1;
                }
              }
            }
          }
          localObject2 = ((PermissionsState)localObject4).getInstallPermissionState(localBasePermission.name);
          if (localObject2 != null) {}
          for (k = ((PermissionsState.PermissionState)localObject2).getFlags();; k = 0)
          {
            if (((PermissionsState)localObject4).revokeInstallPermission(localBasePermission) != -1)
            {
              ((PermissionsState)localObject4).updatePermissionFlags(localBasePermission, -1, 255, 0);
              j = 1;
            }
            i = j;
            localObject2 = localObject1;
            if ((k & 0x8) != 0) {
              break;
            }
            i1 = 0;
            i3 = arrayOfInt.length;
            for (;;)
            {
              i = j;
              localObject2 = localObject1;
              if (i1 >= i3) {
                break;
              }
              i = arrayOfInt[i1];
              localObject2 = localObject1;
              if (localPermissionsState.grantRuntimePermission(localBasePermission, i) != -1)
              {
                localPermissionsState.updatePermissionFlags(localBasePermission, i, k, k);
                localObject2 = ArrayUtils.appendInt((int[])localObject1, i);
              }
              i1 += 1;
              localObject1 = localObject2;
            }
          }
          label1489:
          if (localPermissionsState.revokeInstallPermission(localBasePermission) != -1)
          {
            localPermissionsState.updatePermissionFlags(localBasePermission, -1, 255, 0);
            i = 1;
            Slog.i("PackageManager", "Un-granting permission " + (String)localObject5 + " from package " + paramPackage.packageName + " (protectionLevel=" + localBasePermission.protectionLevel + " flags=0x" + Integer.toHexString(paramPackage.applicationInfo.flags) + ")");
            localObject2 = localObject1;
          }
          else
          {
            i = j;
            localObject2 = localObject1;
            if ((localBasePermission.protectionLevel & 0x40) == 0) {
              if (paramString != null)
              {
                i = j;
                localObject2 = localObject1;
                if (!paramString.equals(paramPackage.packageName)) {}
              }
              else
              {
                Slog.w("PackageManager", "Not granting permission " + (String)localObject5 + " to package " + paramPackage.packageName + " (protectionLevel=" + localBasePermission.protectionLevel + " flags=0x" + Integer.toHexString(paramPackage.applicationInfo.flags) + ")");
                i = j;
                localObject2 = localObject1;
              }
            }
          }
        }
      }
    }
    label1736:
    if (((j == 0) && (!paramBoolean)) || (localPackageSetting.installPermissionsFixed)) {}
    for (;;)
    {
      if (isUpdatedSystemApp(localPackageSetting)) {}
      do
      {
        localPackageSetting.installPermissionsFixed = true;
        i = 0;
        j = localObject1.length;
        while (i < j)
        {
          k = localObject1[i];
          this.mSettings.writeRuntimePermissionsForUserLPr(k, bool1);
          i += 1;
        }
      } while (!isSystemApp(localPackageSetting));
    }
    Trace.traceEnd(262144L);
  }
  
  private void grantRequestedRuntimePermissions(PackageParser.Package arg1, int[] paramArrayOfInt, String[] paramArrayOfString)
  {
    int i = 0;
    int j = paramArrayOfInt.length;
    while (i < j)
    {
      grantRequestedRuntimePermissionsForUser(???, paramArrayOfInt[i], paramArrayOfString);
      i += 1;
    }
    synchronized (this.mPackages)
    {
      this.mSettings.writePackageListLPr();
      return;
    }
  }
  
  private void grantRequestedRuntimePermissionsForUser(PackageParser.Package paramPackage, int paramInt, String[] paramArrayOfString)
  {
    ??? = (SettingBase)paramPackage.mExtras;
    if (??? == null) {
      return;
    }
    PermissionsState localPermissionsState = ((SettingBase)???).getPermissionsState();
    Iterator localIterator = paramPackage.requestedPermissions.iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      synchronized (this.mPackages)
      {
        BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(str);
        if ((localBasePermission != null) && ((localBasePermission.isRuntime()) || (localBasePermission.isDevelopment())) && ((paramArrayOfString == null) || (ArrayUtils.contains(paramArrayOfString, str))) && ((localPermissionsState.getPermissionFlags(str, paramInt) & 0x14) == 0)) {
          grantRuntimePermission(paramPackage.packageName, str, paramInt);
        }
      }
    }
  }
  
  private void grantRuntimePermissionsGrantedToDisabledPrivSysPackageParentLPw(PackageParser.Package paramPackage)
  {
    if (paramPackage.parentPackage == null) {
      return;
    }
    if (paramPackage.requestedPermissions == null) {
      return;
    }
    PackageSetting localPackageSetting = this.mSettings.getDisabledSystemPkgLPr(paramPackage.parentPackage.packageName);
    if ((localPackageSetting == null) || (localPackageSetting.pkg == null)) {}
    while ((!localPackageSetting.isPrivileged()) || ((localPackageSetting.childPackageNames != null) && (!localPackageSetting.childPackageNames.isEmpty()))) {
      return;
    }
    int[] arrayOfInt = sUserManager.getUserIds();
    int k = paramPackage.requestedPermissions.size();
    int i = 0;
    while (i < k)
    {
      String str = (String)paramPackage.requestedPermissions.get(i);
      BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(str);
      if ((localBasePermission != null) && ((localBasePermission.isRuntime()) || (localBasePermission.isDevelopment())))
      {
        int j = 0;
        int m = arrayOfInt.length;
        while (j < m)
        {
          int n = arrayOfInt[j];
          if (localPackageSetting.getPermissionsState().hasRuntimePermission(str, n)) {
            grantRuntimePermission(paramPackage.packageName, str, n);
          }
          j += 1;
        }
      }
      i += 1;
    }
  }
  
  private boolean grantSignaturePermission(String paramString, PackageParser.Package paramPackage, BasePermission paramBasePermission, PermissionsState paramPermissionsState)
  {
    boolean bool1 = true;
    boolean bool2 = bool1;
    PackageSetting localPackageSetting;
    if (compareSignatures(paramBasePermission.packageSetting.signatures.mSignatures, paramPackage.mSignatures) != 0)
    {
      if (compareSignatures(this.mPlatformPackage.mSignatures, paramPackage.mSignatures) == 0) {
        bool2 = bool1;
      }
    }
    else
    {
      bool1 = bool2;
      if (!bool2)
      {
        bool1 = bool2;
        if ((paramBasePermission.protectionLevel & 0x10) != 0)
        {
          bool1 = bool2;
          if (isSystemApp(paramPackage))
          {
            if (!paramPackage.isUpdatedSystemApp()) {
              break label647;
            }
            localPackageSetting = this.mSettings.getDisabledSystemPkgLPr(paramPackage.packageName);
            if ((localPackageSetting == null) || (!localPackageSetting.getPermissionsState().hasInstallPermission(paramString))) {
              break label399;
            }
            bool1 = bool2;
            if (localPackageSetting.isPrivileged()) {
              bool1 = true;
            }
          }
        }
      }
    }
    for (;;)
    {
      boolean bool3 = bool1;
      if (!bool1)
      {
        bool2 = bool1;
        if (!bool1)
        {
          bool2 = bool1;
          if ((paramBasePermission.protectionLevel & 0x80) != 0)
          {
            bool2 = bool1;
            if (paramPackage.applicationInfo.targetSdkVersion < 23) {
              bool2 = true;
            }
          }
        }
        bool1 = bool2;
        if (!bool2)
        {
          bool1 = bool2;
          if ((paramBasePermission.protectionLevel & 0x100) != 0)
          {
            bool1 = bool2;
            if (paramPackage.packageName.equals(this.mRequiredInstallerPackage)) {
              bool1 = true;
            }
          }
        }
        bool2 = bool1;
        if (!bool1)
        {
          bool2 = bool1;
          if ((paramBasePermission.protectionLevel & 0x200) != 0)
          {
            bool2 = bool1;
            if (paramPackage.packageName.equals(this.mRequiredVerifierPackage)) {
              bool2 = true;
            }
          }
        }
        bool1 = bool2;
        if (!bool2)
        {
          bool1 = bool2;
          if ((paramBasePermission.protectionLevel & 0x400) != 0)
          {
            bool1 = bool2;
            if (isSystemApp(paramPackage)) {
              bool1 = true;
            }
          }
        }
        bool2 = bool1;
        if (!bool1)
        {
          bool2 = bool1;
          if ((paramBasePermission.protectionLevel & 0x20) != 0) {
            bool2 = paramPermissionsState.hasInstallPermission(paramString);
          }
        }
        bool3 = bool2;
        if (!bool2)
        {
          bool3 = bool2;
          if ((paramBasePermission.protectionLevel & 0x800) != 0)
          {
            bool3 = bool2;
            if (paramPackage.packageName.equals(this.mSetupWizardPackage)) {
              bool3 = true;
            }
          }
        }
      }
      return bool3;
      bool2 = false;
      break;
      label399:
      bool3 = bool2;
      int i;
      if (localPackageSetting != null)
      {
        bool3 = bool2;
        if (localPackageSetting.pkg != null)
        {
          bool3 = bool2;
          if (localPackageSetting.isPrivileged()) {
            i = 0;
          }
        }
      }
      for (;;)
      {
        bool3 = bool2;
        if (i < localPackageSetting.pkg.requestedPermissions.size())
        {
          if (paramString.equals(localPackageSetting.pkg.requestedPermissions.get(i))) {
            bool3 = true;
          }
        }
        else
        {
          bool1 = bool3;
          if (paramPackage.parentPackage == null) {
            break;
          }
          localPackageSetting = this.mSettings.getDisabledSystemPkgLPr(paramPackage.parentPackage.packageName);
          bool1 = bool3;
          if (localPackageSetting == null) {
            break;
          }
          bool1 = bool3;
          if (localPackageSetting.pkg == null) {
            break;
          }
          bool1 = bool3;
          if (!localPackageSetting.isPrivileged()) {
            break;
          }
          if (!isPackageRequestingPermission(localPackageSetting.pkg, paramString)) {
            break label566;
          }
          bool1 = true;
          break;
        }
        i += 1;
      }
      label566:
      bool1 = bool3;
      if (localPackageSetting.pkg.childPackages != null)
      {
        int j = localPackageSetting.pkg.childPackages.size();
        i = 0;
        for (;;)
        {
          bool1 = bool3;
          if (i >= j) {
            break;
          }
          if (isPackageRequestingPermission((PackageParser.Package)localPackageSetting.pkg.childPackages.get(i), paramString))
          {
            bool1 = true;
            break;
          }
          i += 1;
        }
        label647:
        bool1 = isPrivilegedApp(paramPackage);
      }
    }
  }
  
  /* Error */
  private void handlePackagePostInstall(PackageInstalledInfo paramPackageInstalledInfo, boolean paramBoolean1, boolean paramBoolean2, String[] arg4, boolean paramBoolean3, String paramString, IPackageInstallObserver2 paramIPackageInstallObserver2)
  {
    // Byte code:
    //   0: aload_1
    //   1: getfield 4530	com/android/server/pm/PackageManagerService$PackageInstalledInfo:returnCode	I
    //   4: iconst_1
    //   5: if_icmpne +869 -> 874
    //   8: aload_1
    //   9: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   12: ifnull +11 -> 23
    //   15: aload_1
    //   16: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   19: iload_3
    //   20: invokevirtual 3366	com/android/server/pm/PackageManagerService$PackageRemovedInfo:sendPackageRemovedBroadcasts	(Z)V
    //   23: iload_2
    //   24: ifeq +32 -> 56
    //   27: aload_1
    //   28: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   31: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   34: getfield 4344	android/content/pm/ApplicationInfo:targetSdkVersion	I
    //   37: bipush 23
    //   39: if_icmplt +17 -> 56
    //   42: aload_0
    //   43: aload_1
    //   44: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   47: aload_1
    //   48: getfield 3325	com/android/server/pm/PackageManagerService$PackageInstalledInfo:newUsers	[I
    //   51: aload 4
    //   53: invokespecial 810	com/android/server/pm/PackageManagerService:grantRequestedRuntimePermissions	(Landroid/content/pm/PackageParser$Package;[I[Ljava/lang/String;)V
    //   56: aload_1
    //   57: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   60: ifnull +474 -> 534
    //   63: aload_1
    //   64: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   67: getfield 2955	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedPackage	Ljava/lang/String;
    //   70: ifnull +458 -> 528
    //   73: iconst_1
    //   74: istore 8
    //   76: aload_1
    //   77: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   80: getfield 4511	android/content/pm/PackageParser$Package:parentPackage	Landroid/content/pm/PackageParser$Package;
    //   83: ifnull +23 -> 106
    //   86: aload_0
    //   87: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   90: astore 4
    //   92: aload 4
    //   94: monitorenter
    //   95: aload_0
    //   96: aload_1
    //   97: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   100: invokespecial 4536	com/android/server/pm/PackageManagerService:grantRuntimePermissionsGrantedToDisabledPrivSysPackageParentLPw	(Landroid/content/pm/PackageParser$Package;)V
    //   103: aload 4
    //   105: monitorexit
    //   106: aload_0
    //   107: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   110: astore 4
    //   112: aload 4
    //   114: monitorenter
    //   115: aload_0
    //   116: getfield 2148	com/android/server/pm/PackageManagerService:mEphemeralApplicationRegistry	Lcom/android/server/pm/EphemeralApplicationRegistry;
    //   119: aload_1
    //   120: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   123: invokevirtual 4539	com/android/server/pm/EphemeralApplicationRegistry:onPackageInstalledLPw	(Landroid/content/pm/PackageParser$Package;)V
    //   126: aload 4
    //   128: monitorexit
    //   129: aload_1
    //   130: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   133: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   136: getfield 3113	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   139: astore 19
    //   141: aload_0
    //   142: getfield 1302	com/android/server/pm/PackageManagerService:mOemDeviceIdleWhiteList	Ljava/util/List;
    //   145: astore 4
    //   147: aload 4
    //   149: monitorenter
    //   150: aload_0
    //   151: getfield 1302	com/android/server/pm/PackageManagerService:mOemDeviceIdleWhiteList	Ljava/util/List;
    //   154: aload 19
    //   156: invokeinterface 3402 2 0
    //   161: ifeq +8 -> 169
    //   164: aload 19
    //   166: invokestatic 4541	com/android/server/pm/PackageManagerService:addDozeWhiteList	(Ljava/lang/String;)V
    //   169: aload 4
    //   171: monitorexit
    //   172: new 2779	android/os/Bundle
    //   175: dup
    //   176: iconst_1
    //   177: invokespecial 4542	android/os/Bundle:<init>	(I)V
    //   180: astore 20
    //   182: aload 20
    //   184: ldc_w 4544
    //   187: aload_1
    //   188: getfield 3327	com/android/server/pm/PackageManagerService$PackageInstalledInfo:uid	I
    //   191: invokevirtual 4547	android/os/Bundle:putInt	(Ljava/lang/String;I)V
    //   194: getstatic 1012	com/android/server/pm/PackageManagerService:EMPTY_INT_ARRAY	[I
    //   197: astore 4
    //   199: getstatic 1012	com/android/server/pm/PackageManagerService:EMPTY_INT_ARRAY	[I
    //   202: astore 16
    //   204: aload_1
    //   205: getfield 4548	com/android/server/pm/PackageManagerService$PackageInstalledInfo:origUsers	[I
    //   208: ifnull +11 -> 219
    //   211: aload_1
    //   212: getfield 4548	com/android/server/pm/PackageManagerService$PackageInstalledInfo:origUsers	[I
    //   215: arraylength
    //   216: ifne +342 -> 558
    //   219: aload_1
    //   220: getfield 3325	com/android/server/pm/PackageManagerService$PackageInstalledInfo:newUsers	[I
    //   223: astore 17
    //   225: aload 16
    //   227: astore 18
    //   229: aload_1
    //   230: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   233: invokestatic 4551	com/android/server/pm/PackageManagerService:isEphemeral	(Landroid/content/pm/PackageParser$Package;)Z
    //   236: ifne +208 -> 444
    //   239: aload_0
    //   240: getfield 1454	com/android/server/pm/PackageManagerService:mProcessLoggingHandler	Lcom/android/server/pm/ProcessLoggingHandler;
    //   243: aload_1
    //   244: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   247: getfield 3143	android/content/pm/PackageParser$Package:baseCodePath	Ljava/lang/String;
    //   250: invokevirtual 4554	com/android/server/pm/ProcessLoggingHandler:invalidateProcessLoggingBaseApkHash	(Ljava/lang/String;)V
    //   253: aload_0
    //   254: ldc_w 4556
    //   257: aload 19
    //   259: aload 20
    //   261: iconst_0
    //   262: aconst_null
    //   263: aconst_null
    //   264: aload 17
    //   266: invokevirtual 4560	com/android/server/pm/PackageManagerService:sendPackageBroadcast	(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[I)V
    //   269: iload 8
    //   271: ifeq +12 -> 283
    //   274: aload 20
    //   276: ldc_w 4562
    //   279: iconst_1
    //   280: invokevirtual 2786	android/os/Bundle:putBoolean	(Ljava/lang/String;Z)V
    //   283: aload_0
    //   284: ldc_w 4556
    //   287: aload 19
    //   289: aload 20
    //   291: iconst_0
    //   292: aconst_null
    //   293: aconst_null
    //   294: aload 18
    //   296: invokevirtual 4560	com/android/server/pm/PackageManagerService:sendPackageBroadcast	(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[I)V
    //   299: iload 8
    //   301: ifeq +378 -> 679
    //   304: aload_0
    //   305: ldc_w 4564
    //   308: aload 19
    //   310: aload 20
    //   312: iconst_0
    //   313: aconst_null
    //   314: aconst_null
    //   315: aload 18
    //   317: invokevirtual 4560	com/android/server/pm/PackageManagerService:sendPackageBroadcast	(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[I)V
    //   320: aload_0
    //   321: ldc_w 4566
    //   324: aconst_null
    //   325: aconst_null
    //   326: iconst_0
    //   327: aload 19
    //   329: aconst_null
    //   330: aload 18
    //   332: invokevirtual 4560	com/android/server/pm/PackageManagerService:sendPackageBroadcast	(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[I)V
    //   335: aload_1
    //   336: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   339: invokevirtual 3482	android/content/pm/PackageParser$Package:isForwardLocked	()Z
    //   342: ifne +13 -> 355
    //   345: aload_1
    //   346: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   349: invokestatic 953	com/android/server/pm/PackageManagerService:isExternal	(Landroid/content/pm/PackageParser$Package;)Z
    //   352: ifeq +92 -> 444
    //   355: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   358: ifeq +39 -> 397
    //   361: ldc_w 391
    //   364: new 1320	java/lang/StringBuilder
    //   367: dup
    //   368: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   371: ldc_w 4568
    //   374: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   377: aload_1
    //   378: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   381: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   384: ldc_w 4570
    //   387: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   390: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   393: invokestatic 1955	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   396: pop
    //   397: aload_1
    //   398: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   401: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   404: getfield 2770	android/content/pm/ApplicationInfo:uid	I
    //   407: istore 8
    //   409: new 1139	java/util/ArrayList
    //   412: dup
    //   413: iconst_1
    //   414: invokespecial 4571	java/util/ArrayList:<init>	(I)V
    //   417: astore 4
    //   419: aload 4
    //   421: aload 19
    //   423: invokevirtual 2294	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   426: pop
    //   427: aload_0
    //   428: iconst_1
    //   429: iconst_1
    //   430: aload 4
    //   432: iconst_1
    //   433: newarray <illegal type>
    //   435: dup
    //   436: iconst_0
    //   437: iload 8
    //   439: iastore
    //   440: aconst_null
    //   441: invokespecial 4575	com/android/server/pm/PackageManagerService:sendResourcesChangedBroadcast	(ZZLjava/util/ArrayList;[ILandroid/content/IIntentReceiver;)V
    //   444: aload 17
    //   446: ifnull +312 -> 758
    //   449: aload 17
    //   451: arraylength
    //   452: ifle +306 -> 758
    //   455: aload_0
    //   456: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   459: astore 4
    //   461: aload 4
    //   463: monitorenter
    //   464: iconst_0
    //   465: istore 8
    //   467: aload 17
    //   469: arraylength
    //   470: istore 9
    //   472: iload 8
    //   474: iload 9
    //   476: if_icmpge +279 -> 755
    //   479: aload 17
    //   481: iload 8
    //   483: iaload
    //   484: istore 10
    //   486: aload_0
    //   487: aload 19
    //   489: iload 10
    //   491: invokespecial 4578	com/android/server/pm/PackageManagerService:packageIsBrowser	(Ljava/lang/String;I)Z
    //   494: ifeq +14 -> 508
    //   497: aload_0
    //   498: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   501: aconst_null
    //   502: iload 10
    //   504: invokevirtual 2474	com/android/server/pm/Settings:setDefaultBrowserPackageNameLPw	(Ljava/lang/String;I)Z
    //   507: pop
    //   508: aload_0
    //   509: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   512: aload 19
    //   514: iload 10
    //   516: invokevirtual 4581	com/android/server/pm/Settings:applyPendingPermissionGrantsLPw	(Ljava/lang/String;I)V
    //   519: iload 8
    //   521: iconst_1
    //   522: iadd
    //   523: istore 8
    //   525: goto -53 -> 472
    //   528: iconst_0
    //   529: istore 8
    //   531: goto -455 -> 76
    //   534: iconst_0
    //   535: istore 8
    //   537: goto -461 -> 76
    //   540: astore_1
    //   541: aload 4
    //   543: monitorexit
    //   544: aload_1
    //   545: athrow
    //   546: astore_1
    //   547: aload 4
    //   549: monitorexit
    //   550: aload_1
    //   551: athrow
    //   552: astore_1
    //   553: aload 4
    //   555: monitorexit
    //   556: aload_1
    //   557: athrow
    //   558: aload_1
    //   559: getfield 3325	com/android/server/pm/PackageManagerService$PackageInstalledInfo:newUsers	[I
    //   562: astore 21
    //   564: aload 21
    //   566: arraylength
    //   567: istore 13
    //   569: iconst_0
    //   570: istore 9
    //   572: aload 4
    //   574: astore 17
    //   576: aload 16
    //   578: astore 18
    //   580: iload 9
    //   582: iload 13
    //   584: if_icmpge -355 -> 229
    //   587: aload 21
    //   589: iload 9
    //   591: iaload
    //   592: istore 14
    //   594: iconst_1
    //   595: istore 12
    //   597: aload_1
    //   598: getfield 4548	com/android/server/pm/PackageManagerService$PackageInstalledInfo:origUsers	[I
    //   601: astore 17
    //   603: iconst_0
    //   604: istore 10
    //   606: aload 17
    //   608: arraylength
    //   609: istore 15
    //   611: iload 12
    //   613: istore 11
    //   615: iload 10
    //   617: iload 15
    //   619: if_icmpge +16 -> 635
    //   622: aload 17
    //   624: iload 10
    //   626: iaload
    //   627: iload 14
    //   629: if_icmpne +29 -> 658
    //   632: iconst_0
    //   633: istore 11
    //   635: iload 11
    //   637: ifeq +30 -> 667
    //   640: aload 4
    //   642: iload 14
    //   644: invokestatic 2465	com/android/internal/util/ArrayUtils:appendInt	([II)[I
    //   647: astore 4
    //   649: iload 9
    //   651: iconst_1
    //   652: iadd
    //   653: istore 9
    //   655: goto -83 -> 572
    //   658: iload 10
    //   660: iconst_1
    //   661: iadd
    //   662: istore 10
    //   664: goto -53 -> 611
    //   667: aload 16
    //   669: iload 14
    //   671: invokestatic 2465	com/android/internal/util/ArrayUtils:appendInt	([II)[I
    //   674: astore 16
    //   676: goto -27 -> 649
    //   679: iload 5
    //   681: ifeq -346 -> 335
    //   684: aload_1
    //   685: getfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   688: invokestatic 3487	com/android/server/pm/PackageManagerService:isSystemApp	(Landroid/content/pm/PackageParser$Package;)Z
    //   691: ifne -356 -> 335
    //   694: getstatic 983	com/android/server/pm/PackageManagerService:DEBUG_BACKUP	Z
    //   697: ifeq +45 -> 742
    //   700: ldc_w 391
    //   703: new 1320	java/lang/StringBuilder
    //   706: dup
    //   707: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   710: ldc_w 4583
    //   713: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   716: aload 19
    //   718: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   721: ldc_w 4585
    //   724: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   727: aload 17
    //   729: invokestatic 4587	java/util/Arrays:toString	([I)Ljava/lang/String;
    //   732: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   735: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   738: invokestatic 1955	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   741: pop
    //   742: aload_0
    //   743: aload 19
    //   745: aload 6
    //   747: aload 17
    //   749: invokespecial 904	com/android/server/pm/PackageManagerService:sendFirstLaunchBroadcast	(Ljava/lang/String;Ljava/lang/String;[I)V
    //   752: goto -417 -> 335
    //   755: aload 4
    //   757: monitorexit
    //   758: sipush 3110
    //   761: aload_0
    //   762: invokespecial 4589	com/android/server/pm/PackageManagerService:getUnknownSourcesSettings	()I
    //   765: invokestatic 4591	android/util/EventLog:writeEvent	(II)I
    //   768: pop
    //   769: invokestatic 2154	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   772: invokevirtual 2157	java/lang/Runtime:gc	()V
    //   775: aload_1
    //   776: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   779: ifnull +37 -> 816
    //   782: aload_1
    //   783: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   786: getfield 3245	com/android/server/pm/PackageManagerService$PackageRemovedInfo:args	Lcom/android/server/pm/PackageManagerService$InstallArgs;
    //   789: ifnull +27 -> 816
    //   792: aload_0
    //   793: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   796: astore 4
    //   798: aload 4
    //   800: monitorenter
    //   801: aload_1
    //   802: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   805: getfield 3245	com/android/server/pm/PackageManagerService$PackageRemovedInfo:args	Lcom/android/server/pm/PackageManagerService$InstallArgs;
    //   808: iconst_1
    //   809: invokevirtual 3376	com/android/server/pm/PackageManagerService$InstallArgs:doPostDeleteLI	(Z)Z
    //   812: pop
    //   813: aload 4
    //   815: monitorexit
    //   816: aload_0
    //   817: invokespecial 4594	com/android/server/pm/PackageManagerService:isStrictOpEnable	()Z
    //   820: ifeq +54 -> 874
    //   823: new 620	android/content/Intent
    //   826: dup
    //   827: ldc_w 4596
    //   830: invokespecial 626	android/content/Intent:<init>	(Ljava/lang/String;)V
    //   833: astore 4
    //   835: aload 4
    //   837: ldc_w 4598
    //   840: aload 19
    //   842: invokevirtual 4601	android/content/Intent:putExtra	(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;
    //   845: pop
    //   846: aload 4
    //   848: ldc_w 4603
    //   851: iconst_1
    //   852: invokevirtual 4606	android/content/Intent:putExtra	(Ljava/lang/String;Z)Landroid/content/Intent;
    //   855: pop
    //   856: aload 4
    //   858: ldc_w 4607
    //   861: invokevirtual 4610	android/content/Intent:setFlags	(I)Landroid/content/Intent;
    //   864: pop
    //   865: aload_0
    //   866: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   869: aload 4
    //   871: invokevirtual 4614	android/content/Context:startActivity	(Landroid/content/Intent;)V
    //   874: aload 7
    //   876: ifnull +31 -> 907
    //   879: aload_0
    //   880: aload_1
    //   881: invokevirtual 4618	com/android/server/pm/PackageManagerService:extrasForInstallResult	(Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)Landroid/os/Bundle;
    //   884: astore 4
    //   886: aload 7
    //   888: aload_1
    //   889: getfield 3322	com/android/server/pm/PackageManagerService$PackageInstalledInfo:name	Ljava/lang/String;
    //   892: aload_1
    //   893: getfield 4530	com/android/server/pm/PackageManagerService$PackageInstalledInfo:returnCode	I
    //   896: aload_1
    //   897: getfield 4621	com/android/server/pm/PackageManagerService$PackageInstalledInfo:returnMsg	Ljava/lang/String;
    //   900: aload 4
    //   902: invokeinterface 4627 5 0
    //   907: return
    //   908: astore_1
    //   909: aload 4
    //   911: monitorexit
    //   912: aload_1
    //   913: athrow
    //   914: astore_1
    //   915: aload 4
    //   917: monitorexit
    //   918: aload_1
    //   919: athrow
    //   920: astore_1
    //   921: ldc_w 391
    //   924: ldc_w 4629
    //   927: invokestatic 1955	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   930: pop
    //   931: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	932	0	this	PackageManagerService
    //   0	932	1	paramPackageInstalledInfo	PackageInstalledInfo
    //   0	932	2	paramBoolean1	boolean
    //   0	932	3	paramBoolean2	boolean
    //   0	932	5	paramBoolean3	boolean
    //   0	932	6	paramString	String
    //   0	932	7	paramIPackageInstallObserver2	IPackageInstallObserver2
    //   74	462	8	i	int
    //   470	184	9	j	int
    //   484	179	10	k	int
    //   613	23	11	m	int
    //   595	17	12	n	int
    //   567	18	13	i1	int
    //   592	78	14	i2	int
    //   609	11	15	i3	int
    //   202	473	16	arrayOfInt1	int[]
    //   223	525	17	localObject	Object
    //   227	352	18	arrayOfInt2	int[]
    //   139	702	19	str	String
    //   180	131	20	localBundle	Bundle
    //   562	26	21	arrayOfInt3	int[]
    // Exception table:
    //   from	to	target	type
    //   95	103	540	finally
    //   115	126	546	finally
    //   150	169	552	finally
    //   467	472	908	finally
    //   486	508	908	finally
    //   508	519	908	finally
    //   801	813	914	finally
    //   879	907	920	android/os/RemoteException
  }
  
  private static boolean hasDomainURLs(PackageParser.Package paramPackage)
  {
    boolean bool = false;
    if ((paramPackage.applicationInfo.privateFlags & 0x10) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private boolean hasNonNegativePriority(List<ResolveInfo> paramList)
  {
    return (paramList.size() > 0) && (((ResolveInfo)paramList.get(0)).priority >= 0);
  }
  
  private static boolean hasPermission(PackageParser.Package paramPackage, String paramString)
  {
    int i = paramPackage.permissions.size() - 1;
    while (i >= 0)
    {
      if (((PackageParser.Permission)paramPackage.permissions.get(i)).info.name.equals(paramString)) {
        return true;
      }
      i -= 1;
    }
    return false;
  }
  
  private static boolean hasString(List<String> paramList1, List<String> paramList2)
  {
    if (paramList1 == null) {
      return false;
    }
    int i = paramList1.size() - 1;
    while (i >= 0)
    {
      int j = paramList2.size() - 1;
      while (j >= 0)
      {
        if (((String)paramList2.get(j)).equals(paramList1.get(i))) {
          return true;
        }
        j -= 1;
      }
      i -= 1;
    }
    return false;
  }
  
  private static boolean hasValidDomains(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
  {
    if (paramActivityIntentInfo.hasCategory("android.intent.category.BROWSABLE"))
    {
      if (!paramActivityIntentInfo.hasDataScheme("http")) {
        return paramActivityIntentInfo.hasDataScheme("https");
      }
      return true;
    }
    return false;
  }
  
  private static boolean hasWebURI(Intent paramIntent)
  {
    if (paramIntent.getData() == null) {
      return false;
    }
    paramIntent = paramIntent.getScheme();
    if (TextUtils.isEmpty(paramIntent)) {
      return false;
    }
    if (!paramIntent.equals("http")) {
      return paramIntent.equals("https");
    }
    return true;
  }
  
  private static boolean installForwardLocked(int paramInt)
  {
    boolean bool = false;
    if ((paramInt & 0x1) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private void installNewPackageLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2, UserHandle paramUserHandle, String paramString1, String paramString2, PackageInstalledInfo paramPackageInstalledInfo)
  {
    Trace.traceBegin(262144L, "installNewPackage");
    paramString2 = paramPackage.packageName;
    if (DEBUG_INSTALL) {
      Slog.d("PackageManager", "installNewPackageLI: " + paramPackage);
    }
    synchronized (this.mPackages)
    {
      if (this.mSettings.mRenamedPackages.containsKey(paramString2))
      {
        paramPackageInstalledInfo.setError(-1, "Attempt to re-install " + paramString2 + " without first uninstalling package running as " + (String)this.mSettings.mRenamedPackages.get(paramString2));
        return;
      }
      if (this.mPackages.containsKey(paramString2))
      {
        paramPackageInstalledInfo.setError(-1, "Attempt to re-install " + paramString2 + " without first uninstalling.");
        return;
      }
    }
    try
    {
      ??? = scanPackageTracedLI(paramPackage, paramInt1, paramInt2, System.currentTimeMillis(), paramUserHandle);
      updateSettingsLI((PackageParser.Package)???, paramString1, null, paramPackageInstalledInfo, paramUserHandle);
      if (paramPackageInstalledInfo.returnCode == 1) {
        prepareAppDataAfterInstallLIF((PackageParser.Package)???);
      }
      for (;;)
      {
        Trace.traceEnd(262144L);
        return;
        paramPackage = finally;
        throw paramPackage;
        deletePackageLIF(paramString2, UserHandle.ALL, false, null, 1, paramPackageInstalledInfo.removedInfo, true, null);
      }
    }
    catch (PackageManagerException paramUserHandle)
    {
      for (;;)
      {
        paramPackageInstalledInfo.setError("Package couldn't be installed in " + paramPackage.codePath, paramUserHandle);
      }
    }
  }
  
  private static boolean installOnExternalAsec(int paramInt)
  {
    if ((paramInt & 0x10) != 0) {
      return false;
    }
    return (paramInt & 0x8) != 0;
  }
  
  /* Error */
  private void installPackageLI(InstallArgs arg1, PackageInstalledInfo paramPackageInstalledInfo)
  {
    // Byte code:
    //   0: aload_1
    //   1: getfield 4688	com/android/server/pm/PackageManagerService$InstallArgs:installFlags	I
    //   4: istore 9
    //   6: aload_1
    //   7: getfield 4691	com/android/server/pm/PackageManagerService$InstallArgs:installerPackageName	Ljava/lang/String;
    //   10: astore 21
    //   12: aload_1
    //   13: getfield 4692	com/android/server/pm/PackageManagerService$InstallArgs:volumeUuid	Ljava/lang/String;
    //   16: astore 22
    //   18: new 1335	java/io/File
    //   21: dup
    //   22: aload_1
    //   23: invokevirtual 4695	com/android/server/pm/PackageManagerService$InstallArgs:getCodePath	()Ljava/lang/String;
    //   26: invokespecial 1338	java/io/File:<init>	(Ljava/lang/String;)V
    //   29: astore 15
    //   31: iload 9
    //   33: iconst_1
    //   34: iand
    //   35: ifeq +187 -> 222
    //   38: iconst_1
    //   39: istore 13
    //   41: iload 9
    //   43: bipush 8
    //   45: iand
    //   46: ifne +182 -> 228
    //   49: aload_1
    //   50: getfield 4692	com/android/server/pm/PackageManagerService$InstallArgs:volumeUuid	Ljava/lang/String;
    //   53: ifnull +181 -> 234
    //   56: iconst_1
    //   57: istore 12
    //   59: iload 9
    //   61: sipush 2048
    //   64: iand
    //   65: ifeq +175 -> 240
    //   68: iconst_1
    //   69: istore 5
    //   71: iload 9
    //   73: sipush 8192
    //   76: iand
    //   77: ifeq +169 -> 246
    //   80: iconst_1
    //   81: istore 6
    //   83: iconst_0
    //   84: istore 14
    //   86: iconst_0
    //   87: istore 11
    //   89: bipush 24
    //   91: istore_3
    //   92: aload_1
    //   93: getfield 4696	com/android/server/pm/PackageManagerService$InstallArgs:move	Lcom/android/server/pm/PackageManagerService$MoveInfo;
    //   96: ifnull +7 -> 103
    //   99: sipush 16408
    //   102: istore_3
    //   103: iload_3
    //   104: istore 4
    //   106: iload 9
    //   108: sipush 4096
    //   111: iand
    //   112: ifeq +10 -> 122
    //   115: iload_3
    //   116: ldc_w 351
    //   119: ior
    //   120: istore 4
    //   122: aload_2
    //   123: iconst_1
    //   124: invokevirtual 4699	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setReturnCode	(I)V
    //   127: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   130: ifeq +31 -> 161
    //   133: ldc_w 391
    //   136: new 1320	java/lang/StringBuilder
    //   139: dup
    //   140: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   143: ldc_w 4701
    //   146: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   149: aload 15
    //   151: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   154: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   157: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   160: pop
    //   161: iload 5
    //   163: ifeq +89 -> 252
    //   166: iload 13
    //   168: ifne +8 -> 176
    //   171: iload 12
    //   173: ifeq +79 -> 252
    //   176: ldc_w 391
    //   179: new 1320	java/lang/StringBuilder
    //   182: dup
    //   183: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   186: ldc_w 4703
    //   189: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   192: iload 13
    //   194: invokevirtual 3398	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   197: ldc_w 4705
    //   200: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   203: iload 12
    //   205: invokevirtual 3398	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   208: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   211: invokestatic 1955	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   214: pop
    //   215: aload_2
    //   216: bipush -116
    //   218: invokevirtual 4699	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setReturnCode	(I)V
    //   221: return
    //   222: iconst_0
    //   223: istore 13
    //   225: goto -184 -> 41
    //   228: iconst_1
    //   229: istore 12
    //   231: goto -172 -> 59
    //   234: iconst_0
    //   235: istore 12
    //   237: goto -178 -> 59
    //   240: iconst_0
    //   241: istore 5
    //   243: goto -172 -> 71
    //   246: iconst_0
    //   247: istore 6
    //   249: goto -166 -> 83
    //   252: aload_0
    //   253: getfield 1366	com/android/server/pm/PackageManagerService:mDefParseFlags	I
    //   256: istore 10
    //   258: iload 13
    //   260: ifeq +316 -> 576
    //   263: bipush 16
    //   265: istore_3
    //   266: iload 12
    //   268: ifeq +313 -> 581
    //   271: bipush 32
    //   273: istore 7
    //   275: iload 5
    //   277: ifeq +310 -> 587
    //   280: sipush 2048
    //   283: istore 8
    //   285: iload 6
    //   287: ifeq +306 -> 593
    //   290: sipush 4096
    //   293: istore 6
    //   295: iload 10
    //   297: iconst_2
    //   298: ior
    //   299: sipush 1024
    //   302: ior
    //   303: iload_3
    //   304: ior
    //   305: iload 7
    //   307: ior
    //   308: iload 8
    //   310: ior
    //   311: iload 6
    //   313: ior
    //   314: istore 7
    //   316: new 2982	android/content/pm/PackageParser
    //   319: dup
    //   320: invokespecial 4706	android/content/pm/PackageParser:<init>	()V
    //   323: astore 16
    //   325: aload 16
    //   327: aload_0
    //   328: getfield 1368	com/android/server/pm/PackageManagerService:mSeparateProcesses	[Ljava/lang/String;
    //   331: invokevirtual 4710	android/content/pm/PackageParser:setSeparateProcesses	([Ljava/lang/String;)V
    //   334: aload 16
    //   336: aload_0
    //   337: getfield 1263	com/android/server/pm/PackageManagerService:mMetrics	Landroid/util/DisplayMetrics;
    //   340: invokevirtual 4713	android/content/pm/PackageParser:setDisplayMetrics	(Landroid/util/DisplayMetrics;)V
    //   343: ldc2_w 4367
    //   346: ldc_w 4715
    //   349: invokestatic 4376	android/os/Trace:traceBegin	(JLjava/lang/String;)V
    //   352: aload 16
    //   354: aload 15
    //   356: iload 7
    //   358: invokevirtual 4718	android/content/pm/PackageParser:parsePackage	(Ljava/io/File;I)Landroid/content/pm/PackageParser$Package;
    //   361: astore 20
    //   363: ldc2_w 4367
    //   366: invokestatic 4488	android/os/Trace:traceEnd	(J)V
    //   369: aload_0
    //   370: getfield 651	com/android/server/pm/PackageManagerService:mOemCompatibilityHelper	Lcom/android/server/pm/OemCompatibilityHelper;
    //   373: aload 20
    //   375: invokevirtual 4721	com/android/server/pm/OemCompatibilityHelper:customizePackageIfNeeded	(Landroid/content/pm/PackageParser$Package;)V
    //   378: aload 20
    //   380: getfield 2806	android/content/pm/PackageParser$Package:childPackages	Ljava/util/ArrayList;
    //   383: ifnull +244 -> 627
    //   386: aload_0
    //   387: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   390: astore 15
    //   392: aload 15
    //   394: monitorenter
    //   395: aload 20
    //   397: getfield 2806	android/content/pm/PackageParser$Package:childPackages	Ljava/util/ArrayList;
    //   400: invokevirtual 1868	java/util/ArrayList:size	()I
    //   403: istore 6
    //   405: iconst_0
    //   406: istore_3
    //   407: iload_3
    //   408: iload 6
    //   410: if_icmpge +214 -> 624
    //   413: aload 20
    //   415: getfield 2806	android/content/pm/PackageParser$Package:childPackages	Ljava/util/ArrayList;
    //   418: iload_3
    //   419: invokevirtual 1870	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   422: checkcast 1819	android/content/pm/PackageParser$Package
    //   425: astore 16
    //   427: new 168	com/android/server/pm/PackageManagerService$PackageInstalledInfo
    //   430: dup
    //   431: invokespecial 3321	com/android/server/pm/PackageManagerService$PackageInstalledInfo:<init>	()V
    //   434: astore 17
    //   436: aload 17
    //   438: iconst_1
    //   439: invokevirtual 4699	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setReturnCode	(I)V
    //   442: aload 17
    //   444: aload 16
    //   446: putfield 3326	com/android/server/pm/PackageManagerService$PackageInstalledInfo:pkg	Landroid/content/pm/PackageParser$Package;
    //   449: aload 17
    //   451: aload 16
    //   453: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   456: putfield 3322	com/android/server/pm/PackageManagerService$PackageInstalledInfo:name	Ljava/lang/String;
    //   459: aload_0
    //   460: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   463: aload 16
    //   465: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   468: invokevirtual 1722	com/android/server/pm/Settings:peekPackageLPr	(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
    //   471: astore 18
    //   473: aload 18
    //   475: ifnull +20 -> 495
    //   478: aload 17
    //   480: aload 18
    //   482: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   485: invokevirtual 2891	com/android/server/pm/UserManagerService:getUserIds	()[I
    //   488: iconst_1
    //   489: invokevirtual 3298	com/android/server/pm/PackageSetting:queryInstalledUsers	([IZ)[I
    //   492: putfield 4548	com/android/server/pm/PackageManagerService$PackageInstalledInfo:origUsers	[I
    //   495: aload_0
    //   496: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   499: aload 16
    //   501: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   504: invokevirtual 1916	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   507: ifeq +29 -> 536
    //   510: aload 17
    //   512: new 174	com/android/server/pm/PackageManagerService$PackageRemovedInfo
    //   515: dup
    //   516: aload_0
    //   517: invokespecial 3294	com/android/server/pm/PackageManagerService$PackageRemovedInfo:<init>	(Lcom/android/server/pm/PackageManagerService;)V
    //   520: putfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   523: aload 17
    //   525: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   528: aload 16
    //   530: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   533: putfield 2955	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedPackage	Ljava/lang/String;
    //   536: aload_2
    //   537: getfield 4724	com/android/server/pm/PackageManagerService$PackageInstalledInfo:addedChildPackages	Landroid/util/ArrayMap;
    //   540: ifnonnull +14 -> 554
    //   543: aload_2
    //   544: new 1128	android/util/ArrayMap
    //   547: dup
    //   548: invokespecial 1129	android/util/ArrayMap:<init>	()V
    //   551: putfield 4724	com/android/server/pm/PackageManagerService$PackageInstalledInfo:addedChildPackages	Landroid/util/ArrayMap;
    //   554: aload_2
    //   555: getfield 4724	com/android/server/pm/PackageManagerService$PackageInstalledInfo:addedChildPackages	Landroid/util/ArrayMap;
    //   558: aload 16
    //   560: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   563: aload 17
    //   565: invokevirtual 1545	android/util/ArrayMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   568: pop
    //   569: iload_3
    //   570: iconst_1
    //   571: iadd
    //   572: istore_3
    //   573: goto -166 -> 407
    //   576: iconst_0
    //   577: istore_3
    //   578: goto -312 -> 266
    //   581: iconst_0
    //   582: istore 7
    //   584: goto -309 -> 275
    //   587: iconst_0
    //   588: istore 8
    //   590: goto -305 -> 285
    //   593: iconst_0
    //   594: istore 6
    //   596: goto -301 -> 295
    //   599: astore_1
    //   600: aload_2
    //   601: ldc_w 4726
    //   604: aload_1
    //   605: invokevirtual 4729	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(Ljava/lang/String;Landroid/content/pm/PackageParser$PackageParserException;)V
    //   608: ldc2_w 4367
    //   611: invokestatic 4488	android/os/Trace:traceEnd	(J)V
    //   614: return
    //   615: astore_1
    //   616: ldc2_w 4367
    //   619: invokestatic 4488	android/os/Trace:traceEnd	(J)V
    //   622: aload_1
    //   623: athrow
    //   624: aload 15
    //   626: monitorexit
    //   627: aload 20
    //   629: getfield 3511	android/content/pm/PackageParser$Package:cpuAbiOverride	Ljava/lang/String;
    //   632: invokestatic 1654	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   635: ifeq +12 -> 647
    //   638: aload 20
    //   640: aload_1
    //   641: getfield 4732	com/android/server/pm/PackageManagerService$InstallArgs:abiOverride	Ljava/lang/String;
    //   644: putfield 3511	android/content/pm/PackageParser$Package:cpuAbiOverride	Ljava/lang/String;
    //   647: aload 20
    //   649: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   652: astore 16
    //   654: aload_2
    //   655: aload 16
    //   657: putfield 3322	com/android/server/pm/PackageManagerService$PackageInstalledInfo:name	Ljava/lang/String;
    //   660: aload 20
    //   662: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   665: getfield 1913	android/content/pm/ApplicationInfo:flags	I
    //   668: sipush 256
    //   671: iand
    //   672: ifeq +26 -> 698
    //   675: iload 9
    //   677: iconst_4
    //   678: iand
    //   679: ifne +19 -> 698
    //   682: aload_2
    //   683: bipush -15
    //   685: ldc_w 4733
    //   688: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   691: return
    //   692: astore_1
    //   693: aload 15
    //   695: monitorexit
    //   696: aload_1
    //   697: athrow
    //   698: aload_1
    //   699: getfield 4737	com/android/server/pm/PackageManagerService$InstallArgs:certificates	[[Ljava/security/cert/Certificate;
    //   702: astore 15
    //   704: aload 15
    //   706: ifnull +261 -> 967
    //   709: aload 20
    //   711: aload_1
    //   712: getfield 4737	com/android/server/pm/PackageManagerService$InstallArgs:certificates	[[Ljava/security/cert/Certificate;
    //   715: invokestatic 4741	android/content/pm/PackageParser:populateCertificates	(Landroid/content/pm/PackageParser$Package;[[Ljava/security/cert/Certificate;)V
    //   718: aconst_null
    //   719: astore 18
    //   721: iconst_0
    //   722: istore_3
    //   723: iconst_0
    //   724: istore 6
    //   726: aload_0
    //   727: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   730: astore 19
    //   732: aload 19
    //   734: monitorenter
    //   735: aload 16
    //   737: astore 17
    //   739: iload 9
    //   741: iconst_2
    //   742: iand
    //   743: ifeq +517 -> 1260
    //   746: aload_0
    //   747: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   750: getfield 4662	com/android/server/pm/Settings:mRenamedPackages	Landroid/util/ArrayMap;
    //   753: aload 16
    //   755: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   758: checkcast 1071	java/lang/String
    //   761: astore 17
    //   763: aload 20
    //   765: getfield 4744	android/content/pm/PackageParser$Package:mOriginalPackages	Ljava/util/ArrayList;
    //   768: ifnull +209 -> 977
    //   771: aload 20
    //   773: getfield 4744	android/content/pm/PackageParser$Package:mOriginalPackages	Ljava/util/ArrayList;
    //   776: aload 17
    //   778: invokevirtual 4745	java/util/ArrayList:contains	(Ljava/lang/Object;)Z
    //   781: ifeq +196 -> 977
    //   784: aload_0
    //   785: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   788: aload 17
    //   790: invokevirtual 1916	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   793: ifeq +184 -> 977
    //   796: aload 20
    //   798: aload 17
    //   800: invokevirtual 4748	android/content/pm/PackageParser$Package:setPackageName	(Ljava/lang/String;)V
    //   803: aload 20
    //   805: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   808: astore 16
    //   810: iconst_1
    //   811: istore 14
    //   813: aload 16
    //   815: astore 15
    //   817: iload 14
    //   819: istore 11
    //   821: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   824: ifeq +50 -> 874
    //   827: ldc_w 391
    //   830: new 1320	java/lang/StringBuilder
    //   833: dup
    //   834: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   837: ldc_w 4750
    //   840: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   843: aload 17
    //   845: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   848: ldc_w 4752
    //   851: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   854: aload 16
    //   856: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   859: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   862: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   865: pop
    //   866: iload 14
    //   868: istore 11
    //   870: aload 16
    //   872: astore 15
    //   874: aload 20
    //   876: getfield 4511	android/content/pm/PackageParser$Package:parentPackage	Landroid/content/pm/PackageParser$Package;
    //   879: ifnull +176 -> 1055
    //   882: aload_2
    //   883: bipush -106
    //   885: new 1320	java/lang/StringBuilder
    //   888: dup
    //   889: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   892: ldc_w 2496
    //   895: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   898: aload 20
    //   900: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   903: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   906: ldc_w 4754
    //   909: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   912: aload 20
    //   914: getfield 4511	android/content/pm/PackageParser$Package:parentPackage	Landroid/content/pm/PackageParser$Package;
    //   917: getfield 4511	android/content/pm/PackageParser$Package:parentPackage	Landroid/content/pm/PackageParser$Package;
    //   920: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   923: ldc_w 4756
    //   926: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   929: ldc_w 4758
    //   932: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   935: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   938: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   941: aload 19
    //   943: monitorexit
    //   944: return
    //   945: astore 15
    //   947: aload 20
    //   949: iload 7
    //   951: invokestatic 2985	android/content/pm/PackageParser:collectCertificates	(Landroid/content/pm/PackageParser$Package;I)V
    //   954: goto -236 -> 718
    //   957: astore_1
    //   958: aload_2
    //   959: ldc_w 4760
    //   962: aload_1
    //   963: invokevirtual 4729	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(Ljava/lang/String;Landroid/content/pm/PackageParser$PackageParserException;)V
    //   966: return
    //   967: aload 20
    //   969: iload 7
    //   971: invokestatic 2985	android/content/pm/PackageParser:collectCertificates	(Landroid/content/pm/PackageParser$Package;I)V
    //   974: goto -256 -> 718
    //   977: aload 16
    //   979: astore 15
    //   981: aload_0
    //   982: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   985: aload 16
    //   987: invokevirtual 1916	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   990: ifeq -116 -> 874
    //   993: iconst_1
    //   994: istore 14
    //   996: aload 16
    //   998: astore 15
    //   1000: iload 14
    //   1002: istore 11
    //   1004: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   1007: ifeq -133 -> 874
    //   1010: ldc_w 391
    //   1013: new 1320	java/lang/StringBuilder
    //   1016: dup
    //   1017: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1020: ldc_w 4762
    //   1023: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1026: aload 16
    //   1028: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1031: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1034: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   1037: pop
    //   1038: aload 16
    //   1040: astore 15
    //   1042: iload 14
    //   1044: istore 11
    //   1046: goto -172 -> 874
    //   1049: astore_1
    //   1050: aload 19
    //   1052: monitorexit
    //   1053: aload_1
    //   1054: athrow
    //   1055: aload 15
    //   1057: astore 17
    //   1059: iload 11
    //   1061: istore 14
    //   1063: iload 11
    //   1065: ifeq +195 -> 1260
    //   1068: aload_0
    //   1069: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   1072: aload 15
    //   1074: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   1077: checkcast 1819	android/content/pm/PackageParser$Package
    //   1080: astore 16
    //   1082: aload 16
    //   1084: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   1087: getfield 4344	android/content/pm/ApplicationInfo:targetSdkVersion	I
    //   1090: istore 8
    //   1092: aload 20
    //   1094: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   1097: getfield 4344	android/content/pm/ApplicationInfo:targetSdkVersion	I
    //   1100: istore 10
    //   1102: iload 8
    //   1104: bipush 22
    //   1106: if_icmple +78 -> 1184
    //   1109: iload 10
    //   1111: bipush 22
    //   1113: if_icmpgt +71 -> 1184
    //   1116: aload_2
    //   1117: bipush -26
    //   1119: new 1320	java/lang/StringBuilder
    //   1122: dup
    //   1123: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1126: ldc_w 2496
    //   1129: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1132: aload 20
    //   1134: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1137: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1140: ldc_w 4764
    //   1143: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1146: iload 10
    //   1148: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1151: ldc_w 4766
    //   1154: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1157: ldc_w 4768
    //   1160: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1163: iload 8
    //   1165: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1168: ldc_w 4770
    //   1171: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1174: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1177: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   1180: aload 19
    //   1182: monitorexit
    //   1183: return
    //   1184: aload 15
    //   1186: astore 17
    //   1188: iload 11
    //   1190: istore 14
    //   1192: aload 16
    //   1194: getfield 4511	android/content/pm/PackageParser$Package:parentPackage	Landroid/content/pm/PackageParser$Package;
    //   1197: ifnull +63 -> 1260
    //   1200: aload_2
    //   1201: bipush -106
    //   1203: new 1320	java/lang/StringBuilder
    //   1206: dup
    //   1207: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1210: ldc_w 2496
    //   1213: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1216: aload 20
    //   1218: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1221: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1224: ldc_w 4754
    //   1227: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1230: aload 16
    //   1232: getfield 4511	android/content/pm/PackageParser$Package:parentPackage	Landroid/content/pm/PackageParser$Package;
    //   1235: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1238: ldc_w 4756
    //   1241: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1244: ldc_w 4758
    //   1247: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1250: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1253: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   1256: aload 19
    //   1258: monitorexit
    //   1259: return
    //   1260: aload_0
    //   1261: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   1264: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   1267: aload 17
    //   1269: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   1272: checkcast 1615	com/android/server/pm/PackageSetting
    //   1275: astore 16
    //   1277: aload 18
    //   1279: astore 15
    //   1281: aload 16
    //   1283: ifnull +192 -> 1475
    //   1286: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   1289: ifeq +31 -> 1320
    //   1292: ldc_w 391
    //   1295: new 1320	java/lang/StringBuilder
    //   1298: dup
    //   1299: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1302: ldc_w 4772
    //   1305: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1308: aload 16
    //   1310: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1313: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1316: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   1319: pop
    //   1320: aload_0
    //   1321: aload 16
    //   1323: iload 4
    //   1325: invokespecial 4776	com/android/server/pm/PackageManagerService:shouldCheckUpgradeKeySetLP	(Lcom/android/server/pm/PackageSetting;I)Z
    //   1328: ifeq +60 -> 1388
    //   1331: aload_0
    //   1332: aload 16
    //   1334: aload 20
    //   1336: invokespecial 4778	com/android/server/pm/PackageManagerService:checkUpgradeKeySetLP	(Lcom/android/server/pm/PackageSetting;Landroid/content/pm/PackageParser$Package;)Z
    //   1339: ifne +57 -> 1396
    //   1342: aload_2
    //   1343: bipush -7
    //   1345: new 1320	java/lang/StringBuilder
    //   1348: dup
    //   1349: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1352: ldc_w 2496
    //   1355: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1358: aload 20
    //   1360: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1363: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1366: ldc_w 4780
    //   1369: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1372: ldc_w 4782
    //   1375: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1378: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1381: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   1384: aload 19
    //   1386: monitorexit
    //   1387: return
    //   1388: aload_0
    //   1389: aload 16
    //   1391: aload 20
    //   1393: invokespecial 4786	com/android/server/pm/PackageManagerService:verifySignaturesLP	(Lcom/android/server/pm/PackageSetting;Landroid/content/pm/PackageParser$Package;)V
    //   1396: aload_0
    //   1397: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   1400: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   1403: aload 17
    //   1405: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   1408: checkcast 1615	com/android/server/pm/PackageSetting
    //   1411: getfield 1829	com/android/server/pm/PackageSetting:codePathString	Ljava/lang/String;
    //   1414: astore 15
    //   1416: iload 6
    //   1418: istore_3
    //   1419: aload 16
    //   1421: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   1424: ifnull +35 -> 1459
    //   1427: iload 6
    //   1429: istore_3
    //   1430: aload 16
    //   1432: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   1435: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   1438: ifnull +21 -> 1459
    //   1441: aload 16
    //   1443: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   1446: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   1449: getfield 1913	android/content/pm/ApplicationInfo:flags	I
    //   1452: iconst_1
    //   1453: iand
    //   1454: ifeq +263 -> 1717
    //   1457: iconst_1
    //   1458: istore_3
    //   1459: aload_2
    //   1460: aload 16
    //   1462: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   1465: invokevirtual 2891	com/android/server/pm/UserManagerService:getUserIds	()[I
    //   1468: iconst_1
    //   1469: invokevirtual 3298	com/android/server/pm/PackageSetting:queryInstalledUsers	([IZ)[I
    //   1472: putfield 4548	com/android/server/pm/PackageManagerService$PackageInstalledInfo:origUsers	[I
    //   1475: aload 20
    //   1477: getfield 4638	android/content/pm/PackageParser$Package:permissions	Ljava/util/ArrayList;
    //   1480: invokevirtual 1868	java/util/ArrayList:size	()I
    //   1483: iconst_1
    //   1484: isub
    //   1485: istore 6
    //   1487: iload 6
    //   1489: iflt +447 -> 1936
    //   1492: aload 20
    //   1494: getfield 4638	android/content/pm/PackageParser$Package:permissions	Ljava/util/ArrayList;
    //   1497: iload 6
    //   1499: invokevirtual 1870	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   1502: checkcast 4640	android/content/pm/PackageParser$Permission
    //   1505: astore 16
    //   1507: aload_0
    //   1508: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   1511: getfield 1531	com/android/server/pm/Settings:mPermissions	Landroid/util/ArrayMap;
    //   1514: aload 16
    //   1516: getfield 4643	android/content/pm/PackageParser$Permission:info	Landroid/content/pm/PermissionInfo;
    //   1519: getfield 3026	android/content/pm/PermissionInfo:name	Ljava/lang/String;
    //   1522: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   1525: checkcast 1538	com/android/server/pm/BasePermission
    //   1528: astore 18
    //   1530: aload 18
    //   1532: ifnull +1213 -> 2745
    //   1535: aload 18
    //   1537: getfield 3983	com/android/server/pm/BasePermission:sourcePackage	Ljava/lang/String;
    //   1540: aload 20
    //   1542: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1545: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1548: ifeq +174 -> 1722
    //   1551: aload 18
    //   1553: getfield 4400	com/android/server/pm/BasePermission:packageSetting	Lcom/android/server/pm/PackageSettingBase;
    //   1556: instanceof 1615
    //   1559: ifeq +163 -> 1722
    //   1562: aload_0
    //   1563: aload 18
    //   1565: getfield 4400	com/android/server/pm/BasePermission:packageSetting	Lcom/android/server/pm/PackageSettingBase;
    //   1568: checkcast 1615	com/android/server/pm/PackageSetting
    //   1571: iload 4
    //   1573: invokespecial 4776	com/android/server/pm/PackageManagerService:shouldCheckUpgradeKeySetLP	(Lcom/android/server/pm/PackageSetting;I)Z
    //   1576: ifeq +146 -> 1722
    //   1579: aload_0
    //   1580: aload 18
    //   1582: getfield 4400	com/android/server/pm/BasePermission:packageSetting	Lcom/android/server/pm/PackageSettingBase;
    //   1585: checkcast 1615	com/android/server/pm/PackageSetting
    //   1588: aload 20
    //   1590: invokespecial 4778	com/android/server/pm/PackageManagerService:checkUpgradeKeySetLP	(Lcom/android/server/pm/PackageSetting;Landroid/content/pm/PackageParser$Package;)Z
    //   1593: istore 11
    //   1595: iload 11
    //   1597: ifne +221 -> 1818
    //   1600: aload 18
    //   1602: getfield 3983	com/android/server/pm/BasePermission:sourcePackage	Ljava/lang/String;
    //   1605: ldc_w 319
    //   1608: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1611: ifne +139 -> 1750
    //   1614: aload_2
    //   1615: bipush -112
    //   1617: new 1320	java/lang/StringBuilder
    //   1620: dup
    //   1621: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1624: ldc_w 2496
    //   1627: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1630: aload 20
    //   1632: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1635: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1638: ldc_w 4788
    //   1641: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1644: aload 16
    //   1646: getfield 4643	android/content/pm/PackageParser$Permission:info	Landroid/content/pm/PermissionInfo;
    //   1649: getfield 3026	android/content/pm/PermissionInfo:name	Ljava/lang/String;
    //   1652: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1655: ldc_w 4790
    //   1658: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1661: aload 18
    //   1663: getfield 3983	com/android/server/pm/BasePermission:sourcePackage	Ljava/lang/String;
    //   1666: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1669: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1672: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   1675: aload_2
    //   1676: aload 16
    //   1678: getfield 4643	android/content/pm/PackageParser$Permission:info	Landroid/content/pm/PermissionInfo;
    //   1681: getfield 3026	android/content/pm/PermissionInfo:name	Ljava/lang/String;
    //   1684: putfield 4793	com/android/server/pm/PackageManagerService$PackageInstalledInfo:origPermission	Ljava/lang/String;
    //   1687: aload_2
    //   1688: aload 18
    //   1690: getfield 3983	com/android/server/pm/BasePermission:sourcePackage	Ljava/lang/String;
    //   1693: putfield 4796	com/android/server/pm/PackageManagerService$PackageInstalledInfo:origPackage	Ljava/lang/String;
    //   1696: aload 19
    //   1698: monitorexit
    //   1699: return
    //   1700: astore_1
    //   1701: aload_2
    //   1702: aload_1
    //   1703: getfield 4799	com/android/server/pm/PackageManagerException:error	I
    //   1706: aload_1
    //   1707: invokevirtual 1937	com/android/server/pm/PackageManagerException:getMessage	()Ljava/lang/String;
    //   1710: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   1713: aload 19
    //   1715: monitorexit
    //   1716: return
    //   1717: iconst_0
    //   1718: istore_3
    //   1719: goto -260 -> 1459
    //   1722: aload 18
    //   1724: getfield 4400	com/android/server/pm/BasePermission:packageSetting	Lcom/android/server/pm/PackageSettingBase;
    //   1727: getfield 4517	com/android/server/pm/PackageSettingBase:signatures	Lcom/android/server/pm/PackageSignatures;
    //   1730: getfield 3005	com/android/server/pm/PackageSignatures:mSignatures	[Landroid/content/pm/Signature;
    //   1733: aload 20
    //   1735: getfield 3006	android/content/pm/PackageParser$Package:mSignatures	[Landroid/content/pm/Signature;
    //   1738: invokestatic 4519	com/android/server/pm/PackageManagerService:compareSignatures	([Landroid/content/pm/Signature;[Landroid/content/pm/Signature;)I
    //   1741: ifne +998 -> 2739
    //   1744: iconst_1
    //   1745: istore 11
    //   1747: goto -152 -> 1595
    //   1750: ldc_w 391
    //   1753: new 1320	java/lang/StringBuilder
    //   1756: dup
    //   1757: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1760: ldc_w 2496
    //   1763: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1766: aload 20
    //   1768: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1771: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1774: ldc_w 4801
    //   1777: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1780: aload 16
    //   1782: getfield 4643	android/content/pm/PackageParser$Permission:info	Landroid/content/pm/PermissionInfo;
    //   1785: getfield 3026	android/content/pm/PermissionInfo:name	Ljava/lang/String;
    //   1788: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1791: ldc_w 4803
    //   1794: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1797: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1800: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   1803: pop
    //   1804: aload 20
    //   1806: getfield 4638	android/content/pm/PackageParser$Package:permissions	Ljava/util/ArrayList;
    //   1809: iload 6
    //   1811: invokevirtual 4804	java/util/ArrayList:remove	(I)Ljava/lang/Object;
    //   1814: pop
    //   1815: goto +930 -> 2745
    //   1818: ldc_w 319
    //   1821: aload 20
    //   1823: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1826: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1829: ifne +916 -> 2745
    //   1832: aload 16
    //   1834: getfield 4643	android/content/pm/PackageParser$Permission:info	Landroid/content/pm/PermissionInfo;
    //   1837: getfield 3025	android/content/pm/PermissionInfo:protectionLevel	I
    //   1840: bipush 15
    //   1842: iand
    //   1843: iconst_1
    //   1844: if_icmpne +901 -> 2745
    //   1847: aload 18
    //   1849: ifnull +896 -> 2745
    //   1852: aload 18
    //   1854: invokevirtual 3785	com/android/server/pm/BasePermission:isRuntime	()Z
    //   1857: ifne +888 -> 2745
    //   1860: ldc_w 391
    //   1863: new 1320	java/lang/StringBuilder
    //   1866: dup
    //   1867: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1870: ldc_w 2496
    //   1873: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1876: aload 20
    //   1878: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   1881: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1884: ldc_w 4806
    //   1887: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1890: ldc_w 4808
    //   1893: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1896: aload 16
    //   1898: getfield 4643	android/content/pm/PackageParser$Permission:info	Landroid/content/pm/PermissionInfo;
    //   1901: getfield 3026	android/content/pm/PermissionInfo:name	Ljava/lang/String;
    //   1904: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1907: ldc_w 4810
    //   1910: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1913: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1916: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   1919: pop
    //   1920: aload 16
    //   1922: getfield 4643	android/content/pm/PackageParser$Permission:info	Landroid/content/pm/PermissionInfo;
    //   1925: aload 18
    //   1927: getfield 3984	com/android/server/pm/BasePermission:protectionLevel	I
    //   1930: putfield 3025	android/content/pm/PermissionInfo:protectionLevel	I
    //   1933: goto +812 -> 2745
    //   1936: aload 19
    //   1938: monitorexit
    //   1939: iload_3
    //   1940: ifeq +33 -> 1973
    //   1943: iload 12
    //   1945: ifeq +13 -> 1958
    //   1948: aload_2
    //   1949: bipush -19
    //   1951: ldc_w 4812
    //   1954: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   1957: return
    //   1958: iload 5
    //   1960: ifeq +13 -> 1973
    //   1963: aload_2
    //   1964: bipush -116
    //   1966: ldc_w 4814
    //   1969: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   1972: return
    //   1973: aload_1
    //   1974: getfield 4696	com/android/server/pm/PackageManagerService$InstallArgs:move	Lcom/android/server/pm/PackageManagerService$MoveInfo;
    //   1977: ifnull +130 -> 2107
    //   1980: iload 4
    //   1982: iconst_2
    //   1983: ior
    //   1984: sipush 8192
    //   1987: ior
    //   1988: istore_3
    //   1989: aload_0
    //   1990: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   1993: astore 16
    //   1995: aload 16
    //   1997: monitorenter
    //   1998: aload_0
    //   1999: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   2002: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   2005: aload 17
    //   2007: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   2010: checkcast 1615	com/android/server/pm/PackageSetting
    //   2013: astore 18
    //   2015: aload 18
    //   2017: ifnonnull +30 -> 2047
    //   2020: aload_2
    //   2021: bipush -110
    //   2023: new 1320	java/lang/StringBuilder
    //   2026: dup
    //   2027: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   2030: ldc_w 4816
    //   2033: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2036: aload 17
    //   2038: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2041: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2044: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   2047: aload 20
    //   2049: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2052: aload 18
    //   2054: getfield 2392	com/android/server/pm/PackageSetting:primaryCpuAbiString	Ljava/lang/String;
    //   2057: putfield 2386	android/content/pm/ApplicationInfo:primaryCpuAbi	Ljava/lang/String;
    //   2060: aload 20
    //   2062: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2065: aload 18
    //   2067: getfield 4819	com/android/server/pm/PackageSetting:secondaryCpuAbiString	Ljava/lang/String;
    //   2070: putfield 3504	android/content/pm/ApplicationInfo:secondaryCpuAbi	Ljava/lang/String;
    //   2073: aload 16
    //   2075: monitorexit
    //   2076: aload_1
    //   2077: aload_2
    //   2078: getfield 4530	com/android/server/pm/PackageManagerService$PackageInstalledInfo:returnCode	I
    //   2081: aload 20
    //   2083: aload 15
    //   2085: invokevirtual 4823	com/android/server/pm/PackageManagerService$InstallArgs:doRename	(ILandroid/content/pm/PackageParser$Package;Ljava/lang/String;)Z
    //   2088: ifne +230 -> 2318
    //   2091: aload_2
    //   2092: bipush -4
    //   2094: ldc_w 4825
    //   2097: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   2100: return
    //   2101: astore_1
    //   2102: aload 16
    //   2104: monitorexit
    //   2105: aload_1
    //   2106: athrow
    //   2107: iload 4
    //   2109: istore_3
    //   2110: iload 13
    //   2112: ifne -36 -> 2076
    //   2115: iload 4
    //   2117: istore_3
    //   2118: aload 20
    //   2120: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   2123: invokevirtual 3485	android/content/pm/ApplicationInfo:isExternalAsec	()Z
    //   2126: ifne -50 -> 2076
    //   2129: iload 4
    //   2131: iconst_2
    //   2132: ior
    //   2133: istore_3
    //   2134: aload 20
    //   2136: getfield 3511	android/content/pm/PackageParser$Package:cpuAbiOverride	Ljava/lang/String;
    //   2139: invokestatic 1654	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2142: ifeq +102 -> 2244
    //   2145: aload_1
    //   2146: getfield 4732	com/android/server/pm/PackageManagerService$InstallArgs:abiOverride	Ljava/lang/String;
    //   2149: astore 16
    //   2151: aload_0
    //   2152: aload 20
    //   2154: new 1335	java/io/File
    //   2157: dup
    //   2158: aload 20
    //   2160: getfield 2967	android/content/pm/PackageParser$Package:codePath	Ljava/lang/String;
    //   2163: invokespecial 1338	java/io/File:<init>	(Ljava/lang/String;)V
    //   2166: aload 16
    //   2168: iconst_1
    //   2169: invokespecial 4827	com/android/server/pm/PackageManagerService:derivePackageAbi	(Landroid/content/pm/PackageParser$Package;Ljava/io/File;Ljava/lang/String;Z)V
    //   2172: aload_0
    //   2173: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   2176: astore 16
    //   2178: aload 16
    //   2180: monitorenter
    //   2181: aload_0
    //   2182: aload 20
    //   2184: aconst_null
    //   2185: invokespecial 3418	com/android/server/pm/PackageManagerService:updateSharedLibrariesLPw	(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;)V
    //   2188: aload 16
    //   2190: monitorexit
    //   2191: ldc2_w 4367
    //   2194: ldc_w 4828
    //   2197: invokestatic 4376	android/os/Trace:traceBegin	(JLjava/lang/String;)V
    //   2200: aload_0
    //   2201: getfield 1381	com/android/server/pm/PackageManagerService:mPackageDexOptimizer	Lcom/android/server/pm/PackageDexOptimizer;
    //   2204: aload 20
    //   2206: aload 20
    //   2208: getfield 4831	android/content/pm/PackageParser$Package:usesLibraryFiles	[Ljava/lang/String;
    //   2211: aconst_null
    //   2212: iconst_0
    //   2213: iconst_2
    //   2214: invokestatic 1697	com/android/server/pm/PackageManagerServiceCompilerMapping:getCompilerFilterForReason	(I)Ljava/lang/String;
    //   2217: aload_0
    //   2218: aload 20
    //   2220: invokevirtual 4835	com/android/server/pm/PackageManagerService:getOrCreateCompilerPackageStats	(Landroid/content/pm/PackageParser$Package;)Lcom/android/server/pm/CompilerStats$PackageStats;
    //   2223: invokevirtual 4839	com/android/server/pm/PackageDexOptimizer:performDexOpt	(Landroid/content/pm/PackageParser$Package;[Ljava/lang/String;[Ljava/lang/String;ZLjava/lang/String;Lcom/android/server/pm/CompilerStats$PackageStats;)I
    //   2226: pop
    //   2227: ldc2_w 4367
    //   2230: invokestatic 4488	android/os/Trace:traceEnd	(J)V
    //   2233: aload 20
    //   2235: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   2238: invokestatic 4844	com/android/server/pm/BackgroundDexOptService:notifyPackageChanged	(Ljava/lang/String;)V
    //   2241: goto -165 -> 2076
    //   2244: aload 20
    //   2246: getfield 3511	android/content/pm/PackageParser$Package:cpuAbiOverride	Ljava/lang/String;
    //   2249: astore 16
    //   2251: goto -100 -> 2151
    //   2254: astore_1
    //   2255: ldc_w 391
    //   2258: ldc_w 4846
    //   2261: aload_1
    //   2262: invokestatic 4848	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   2265: pop
    //   2266: aload_2
    //   2267: bipush -110
    //   2269: ldc_w 4846
    //   2272: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   2275: return
    //   2276: astore 18
    //   2278: ldc_w 391
    //   2281: new 1320	java/lang/StringBuilder
    //   2284: dup
    //   2285: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   2288: ldc_w 4850
    //   2291: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2294: aload 18
    //   2296: invokevirtual 1937	com/android/server/pm/PackageManagerException:getMessage	()Ljava/lang/String;
    //   2299: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2302: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2305: invokestatic 1934	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   2308: pop
    //   2309: goto -121 -> 2188
    //   2312: astore_1
    //   2313: aload 16
    //   2315: monitorexit
    //   2316: aload_1
    //   2317: athrow
    //   2318: aload_0
    //   2319: aload_1
    //   2320: getfield 4853	com/android/server/pm/PackageManagerService$InstallArgs:user	Landroid/os/UserHandle;
    //   2323: invokevirtual 3272	android/os/UserHandle:getIdentifier	()I
    //   2326: iload 14
    //   2328: aload 20
    //   2330: invokespecial 4857	com/android/server/pm/PackageManagerService:startIntentFilterVerifications	(IZLandroid/content/pm/PackageParser$Package;)V
    //   2333: aconst_null
    //   2334: astore 19
    //   2336: aconst_null
    //   2337: astore 16
    //   2339: aconst_null
    //   2340: astore 15
    //   2342: aload_0
    //   2343: aload 17
    //   2345: iload 9
    //   2347: ldc_w 4733
    //   2350: invokevirtual 4861	com/android/server/pm/PackageManagerService:freezePackageForInstall	(Ljava/lang/String;ILjava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
    //   2353: astore 18
    //   2355: iload 14
    //   2357: ifeq +110 -> 2467
    //   2360: aload 18
    //   2362: astore 15
    //   2364: aload 18
    //   2366: astore 16
    //   2368: aload_0
    //   2369: aload 20
    //   2371: iload 7
    //   2373: iload_3
    //   2374: sipush 2048
    //   2377: ior
    //   2378: aload_1
    //   2379: getfield 4853	com/android/server/pm/PackageManagerService$InstallArgs:user	Landroid/os/UserHandle;
    //   2382: aload 21
    //   2384: aload_2
    //   2385: invokespecial 4865	com/android/server/pm/PackageManagerService:replacePackageLIF	(Landroid/content/pm/PackageParser$Package;IILandroid/os/UserHandle;Ljava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
    //   2388: aload 18
    //   2390: astore 15
    //   2392: aload 18
    //   2394: astore 16
    //   2396: iconst_1
    //   2397: newarray <illegal type>
    //   2399: dup
    //   2400: iconst_0
    //   2401: iconst_0
    //   2402: iastore
    //   2403: invokestatic 1112	android/util/OpFeatures:isSupport	([I)Z
    //   2406: ifeq +39 -> 2445
    //   2409: aload 18
    //   2411: astore 15
    //   2413: aload 18
    //   2415: astore 16
    //   2417: aload 17
    //   2419: ldc_w 274
    //   2422: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2425: ifeq +20 -> 2445
    //   2428: aload 18
    //   2430: astore 15
    //   2432: aload 18
    //   2434: astore 16
    //   2436: aload_0
    //   2437: aload_1
    //   2438: getfield 4853	com/android/server/pm/PackageManagerService$InstallArgs:user	Landroid/os/UserHandle;
    //   2441: iconst_1
    //   2442: invokevirtual 2247	com/android/server/pm/PackageManagerService:setGMSEnabledSetting	(Landroid/os/UserHandle;I)V
    //   2445: aload 19
    //   2447: astore_1
    //   2448: aload 18
    //   2450: ifnull +11 -> 2461
    //   2453: aload 18
    //   2455: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   2458: aload 19
    //   2460: astore_1
    //   2461: aload_1
    //   2462: ifnull +106 -> 2568
    //   2465: aload_1
    //   2466: athrow
    //   2467: aload 18
    //   2469: astore 15
    //   2471: aload 18
    //   2473: astore 16
    //   2475: aload_0
    //   2476: aload 20
    //   2478: iload 7
    //   2480: iload_3
    //   2481: sipush 1024
    //   2484: ior
    //   2485: aload_1
    //   2486: getfield 4853	com/android/server/pm/PackageManagerService$InstallArgs:user	Landroid/os/UserHandle;
    //   2489: aload 21
    //   2491: aload 22
    //   2493: aload_2
    //   2494: invokespecial 4867	com/android/server/pm/PackageManagerService:installNewPackageLIF	(Landroid/content/pm/PackageParser$Package;IILandroid/os/UserHandle;Ljava/lang/String;Ljava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)V
    //   2497: goto -109 -> 2388
    //   2500: astore_1
    //   2501: aload_1
    //   2502: athrow
    //   2503: astore_2
    //   2504: aload_1
    //   2505: astore 16
    //   2507: aload 15
    //   2509: ifnull +11 -> 2520
    //   2512: aload 15
    //   2514: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   2517: aload_1
    //   2518: astore 16
    //   2520: aload 16
    //   2522: ifnull +44 -> 2566
    //   2525: aload 16
    //   2527: athrow
    //   2528: astore_1
    //   2529: goto -68 -> 2461
    //   2532: astore 15
    //   2534: aload_1
    //   2535: ifnonnull +10 -> 2545
    //   2538: aload 15
    //   2540: astore 16
    //   2542: goto -22 -> 2520
    //   2545: aload_1
    //   2546: astore 16
    //   2548: aload_1
    //   2549: aload 15
    //   2551: if_acmpeq -31 -> 2520
    //   2554: aload_1
    //   2555: aload 15
    //   2557: invokevirtual 3359	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   2560: aload_1
    //   2561: astore 16
    //   2563: goto -43 -> 2520
    //   2566: aload_2
    //   2567: athrow
    //   2568: aload_0
    //   2569: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   2572: astore_1
    //   2573: aload_1
    //   2574: monitorenter
    //   2575: aload_0
    //   2576: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   2579: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   2582: aload 17
    //   2584: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   2587: checkcast 1615	com/android/server/pm/PackageSetting
    //   2590: astore 15
    //   2592: aload 15
    //   2594: ifnull +19 -> 2613
    //   2597: aload_2
    //   2598: aload 15
    //   2600: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   2603: invokevirtual 2891	com/android/server/pm/UserManagerService:getUserIds	()[I
    //   2606: iconst_1
    //   2607: invokevirtual 3298	com/android/server/pm/PackageSetting:queryInstalledUsers	([IZ)[I
    //   2610: putfield 3325	com/android/server/pm/PackageManagerService$PackageInstalledInfo:newUsers	[I
    //   2613: aload 20
    //   2615: getfield 2806	android/content/pm/PackageParser$Package:childPackages	Ljava/util/ArrayList;
    //   2618: ifnull +98 -> 2716
    //   2621: aload 20
    //   2623: getfield 2806	android/content/pm/PackageParser$Package:childPackages	Ljava/util/ArrayList;
    //   2626: invokevirtual 1868	java/util/ArrayList:size	()I
    //   2629: istore_3
    //   2630: goto +124 -> 2754
    //   2633: iload 4
    //   2635: iload_3
    //   2636: if_icmpge +85 -> 2721
    //   2639: aload 20
    //   2641: getfield 2806	android/content/pm/PackageParser$Package:childPackages	Ljava/util/ArrayList;
    //   2644: iload 4
    //   2646: invokevirtual 1870	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   2649: checkcast 1819	android/content/pm/PackageParser$Package
    //   2652: astore 16
    //   2654: aload_2
    //   2655: getfield 4724	com/android/server/pm/PackageManagerService$PackageInstalledInfo:addedChildPackages	Landroid/util/ArrayMap;
    //   2658: aload 16
    //   2660: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   2663: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   2666: checkcast 168	com/android/server/pm/PackageManagerService$PackageInstalledInfo
    //   2669: astore 15
    //   2671: aload_0
    //   2672: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   2675: aload 16
    //   2677: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   2680: invokevirtual 1722	com/android/server/pm/Settings:peekPackageLPr	(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
    //   2683: astore 16
    //   2685: aload 16
    //   2687: ifnull +20 -> 2707
    //   2690: aload 15
    //   2692: aload 16
    //   2694: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   2697: invokevirtual 2891	com/android/server/pm/UserManagerService:getUserIds	()[I
    //   2700: iconst_1
    //   2701: invokevirtual 3298	com/android/server/pm/PackageSetting:queryInstalledUsers	([IZ)[I
    //   2704: putfield 3325	com/android/server/pm/PackageManagerService$PackageInstalledInfo:newUsers	[I
    //   2707: iload 4
    //   2709: iconst_1
    //   2710: iadd
    //   2711: istore 4
    //   2713: goto -80 -> 2633
    //   2716: iconst_0
    //   2717: istore_3
    //   2718: goto +36 -> 2754
    //   2721: aload_1
    //   2722: monitorexit
    //   2723: return
    //   2724: astore_2
    //   2725: aload_1
    //   2726: monitorexit
    //   2727: aload_2
    //   2728: athrow
    //   2729: astore_2
    //   2730: aconst_null
    //   2731: astore_1
    //   2732: aload 16
    //   2734: astore 15
    //   2736: goto -232 -> 2504
    //   2739: iconst_0
    //   2740: istore 11
    //   2742: goto -1147 -> 1595
    //   2745: iload 6
    //   2747: iconst_1
    //   2748: isub
    //   2749: istore 6
    //   2751: goto -1264 -> 1487
    //   2754: iconst_0
    //   2755: istore 4
    //   2757: goto -124 -> 2633
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	2760	0	this	PackageManagerService
    //   0	2760	2	paramPackageInstalledInfo	PackageInstalledInfo
    //   91	2627	3	i	int
    //   104	2652	4	j	int
    //   69	1890	5	k	int
    //   81	2669	6	m	int
    //   273	2206	7	n	int
    //   283	881	8	i1	int
    //   4	2342	9	i2	int
    //   256	891	10	i3	int
    //   87	2654	11	bool1	boolean
    //   57	1887	12	bool2	boolean
    //   39	2072	13	bool3	boolean
    //   84	2272	14	bool4	boolean
    //   29	844	15	localObject1	Object
    //   945	1	15	localPackageParserException	PackageParser.PackageParserException
    //   979	1534	15	localObject2	Object
    //   2532	24	15	localThrowable	Throwable
    //   2590	145	15	localObject3	Object
    //   323	2410	16	localObject4	Object
    //   434	2149	17	localObject5	Object
    //   471	1595	18	localObject6	Object
    //   2276	19	18	localPackageManagerException	PackageManagerException
    //   2353	119	18	localPackageFreezer	PackageFreezer
    //   730	1729	19	localArrayMap	ArrayMap
    //   361	2279	20	localPackage	PackageParser.Package
    //   10	2480	21	str1	String
    //   16	2476	22	str2	String
    // Exception table:
    //   from	to	target	type
    //   352	363	599	android/content/pm/PackageParser$PackageParserException
    //   352	363	615	finally
    //   600	608	615	finally
    //   395	405	692	finally
    //   413	473	692	finally
    //   478	495	692	finally
    //   495	536	692	finally
    //   536	554	692	finally
    //   554	569	692	finally
    //   709	718	945	android/content/pm/PackageParser$PackageParserException
    //   698	704	957	android/content/pm/PackageParser$PackageParserException
    //   947	954	957	android/content/pm/PackageParser$PackageParserException
    //   967	974	957	android/content/pm/PackageParser$PackageParserException
    //   746	810	1049	finally
    //   821	866	1049	finally
    //   874	941	1049	finally
    //   981	993	1049	finally
    //   1004	1038	1049	finally
    //   1068	1102	1049	finally
    //   1116	1180	1049	finally
    //   1192	1256	1049	finally
    //   1260	1277	1049	finally
    //   1286	1320	1049	finally
    //   1320	1384	1049	finally
    //   1388	1396	1049	finally
    //   1396	1416	1049	finally
    //   1419	1427	1049	finally
    //   1430	1457	1049	finally
    //   1459	1475	1049	finally
    //   1475	1487	1049	finally
    //   1492	1530	1049	finally
    //   1535	1595	1049	finally
    //   1600	1696	1049	finally
    //   1701	1713	1049	finally
    //   1722	1744	1049	finally
    //   1750	1815	1049	finally
    //   1818	1847	1049	finally
    //   1852	1933	1049	finally
    //   1388	1396	1700	com/android/server/pm/PackageManagerException
    //   1998	2015	2101	finally
    //   2020	2047	2101	finally
    //   2047	2073	2101	finally
    //   2134	2151	2254	com/android/server/pm/PackageManagerException
    //   2151	2172	2254	com/android/server/pm/PackageManagerException
    //   2244	2251	2254	com/android/server/pm/PackageManagerException
    //   2181	2188	2276	com/android/server/pm/PackageManagerException
    //   2181	2188	2312	finally
    //   2278	2309	2312	finally
    //   2342	2355	2500	java/lang/Throwable
    //   2368	2388	2500	java/lang/Throwable
    //   2396	2409	2500	java/lang/Throwable
    //   2417	2428	2500	java/lang/Throwable
    //   2436	2445	2500	java/lang/Throwable
    //   2475	2497	2500	java/lang/Throwable
    //   2501	2503	2503	finally
    //   2453	2458	2528	java/lang/Throwable
    //   2512	2517	2532	java/lang/Throwable
    //   2575	2592	2724	finally
    //   2597	2613	2724	finally
    //   2613	2630	2724	finally
    //   2639	2685	2724	finally
    //   2690	2707	2724	finally
    //   2342	2355	2729	finally
    //   2368	2388	2729	finally
    //   2396	2409	2729	finally
    //   2417	2428	2729	finally
    //   2436	2445	2729	finally
    //   2475	2497	2729	finally
  }
  
  private void installPackageTracedLI(InstallArgs paramInstallArgs, PackageInstalledInfo paramPackageInstalledInfo)
  {
    try
    {
      Trace.traceBegin(262144L, "installPackage");
      installPackageLI(paramInstallArgs, paramPackageInstalledInfo);
      return;
    }
    finally
    {
      Trace.traceEnd(262144L);
    }
  }
  
  private boolean isAsecExternal(String paramString)
  {
    return !PackageHelper.getSdFilesystem(paramString).startsWith(this.mAsecInternalPath);
  }
  
  private boolean isCallerAllowedToSilentlyUninstall(int paramInt, String paramString)
  {
    if ((paramInt == 2000) || (paramInt == 0)) {}
    while (paramInt == 1000) {
      return true;
    }
    int i = UserHandle.getUserId(paramInt);
    if ((OpFeatures.isSupport(new int[] { 0 })) && (paramInt == getPackageUid("com.oneplus.market", 0, i))) {
      return true;
    }
    if (paramInt == getPackageUid(getInstallerPackageName(paramString), 0, i)) {
      return true;
    }
    if ((this.mRequiredVerifierPackage != null) && (paramInt == getPackageUid(this.mRequiredVerifierPackage, 0, i))) {
      return true;
    }
    if ((this.mRequiredUninstallerPackage != null) && (paramInt == getPackageUid(this.mRequiredUninstallerPackage, 0, i))) {
      return true;
    }
    return (this.mStorageManagerPackage != null) && (paramInt == getPackageUid(this.mStorageManagerPackage, 0, i));
  }
  
  private boolean isCallerSameApp(String paramString)
  {
    boolean bool2 = false;
    paramString = (PackageParser.Package)this.mPackages.get(paramString);
    boolean bool1 = bool2;
    if (paramString != null)
    {
      bool1 = bool2;
      if (UserHandle.getAppId(Binder.getCallingUid()) == paramString.applicationInfo.uid) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  private boolean isCompatSignatureUpdateNeeded(PackageParser.Package paramPackage)
  {
    return getSettingsVersionForPackage(paramPackage).databaseVersion < 2;
  }
  
  private static boolean isEphemeral(PackageParser.Package paramPackage)
  {
    return paramPackage.applicationInfo.isEphemeralApp();
  }
  
  private static boolean isEphemeral(PackageSetting paramPackageSetting)
  {
    if (paramPackageSetting.pkg != null) {
      return isEphemeral(paramPackageSetting.pkg);
    }
    return false;
  }
  
  private boolean isEphemeralAllowed(Intent paramIntent, List<ResolveInfo> paramList, int paramInt, boolean paramBoolean)
  {
    if (isEphemeralDisabled()) {
      return false;
    }
    if (UserHandle.getCallingUserId() != 0) {
      return false;
    }
    if (this.mEphemeralResolverConnection == null) {
      return false;
    }
    if (paramIntent.getComponent() != null) {
      return false;
    }
    if ((paramIntent.getFlags() & 0x200) != 0) {
      return false;
    }
    if ((!paramBoolean) && (paramIntent.getPackage() != null)) {
      return false;
    }
    if ((!hasWebURI(paramIntent)) || (paramIntent.getData().getHost() == null)) {
      return false;
    }
    paramIntent = this.mPackages;
    int i;
    if (paramList == null) {
      i = 0;
    }
    for (;;)
    {
      int j = 0;
      label98:
      if (j < i) {}
      try
      {
        String str = ((ResolveInfo)paramList.get(j)).activityInfo.packageName;
        PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(str);
        if (localPackageSetting != null)
        {
          int k = (int)(getDomainVerificationStatusLPr(localPackageSetting, paramInt) >> 32);
          if ((k == 2) || (k == 4))
          {
            if (DEBUG_EPHEMERAL) {
              Slog.v("PackageManager", "DENY ephemeral apps; pkg: " + str + ", status: " + k);
            }
            return false;
            i = paramList.size();
            continue;
          }
        }
        j += 1;
        break label98;
      }
      finally {}
    }
    return true;
  }
  
  private boolean isEphemeralDisabled()
  {
    if (!this.mSystemReady) {
      return true;
    }
    ContentResolver localContentResolver = this.mContext.getContentResolver();
    if (Settings.Global.getInt(localContentResolver, "enable_ephemeral_feature", 1) == 0) {
      return true;
    }
    return Settings.Secure.getInt(localContentResolver, "web_action_enabled", 1) == 0;
  }
  
  private static boolean isExternal(PackageParser.Package paramPackage)
  {
    boolean bool = false;
    if ((paramPackage.applicationInfo.flags & 0x40000) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private static boolean isExternal(PackageSetting paramPackageSetting)
  {
    boolean bool = false;
    if ((paramPackageSetting.pkgFlags & 0x40000) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private boolean isExternalMediaAvailable()
  {
    if (!this.mMediaMounted) {
      return Environment.isExternalStorageEmulated();
    }
    return true;
  }
  
  private static boolean isMultiArch(ApplicationInfo paramApplicationInfo)
  {
    boolean bool = false;
    if ((paramApplicationInfo.flags & 0x80000000) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private boolean isNewPlatformPermissionForPackage(String paramString, PackageParser.Package paramPackage)
  {
    boolean bool2 = false;
    int j = PackageParser.NEW_PERMISSIONS.length;
    int i = 0;
    for (;;)
    {
      boolean bool1 = bool2;
      if (i < j)
      {
        PackageParser.NewPermissionInfo localNewPermissionInfo = PackageParser.NEW_PERMISSIONS[i];
        if ((localNewPermissionInfo.name.equals(paramString)) && (paramPackage.applicationInfo.targetSdkVersion < localNewPermissionInfo.sdkVersion))
        {
          bool1 = true;
          Log.i("PackageManager", "Auto-granting " + paramString + " to old pkg " + paramPackage.packageName);
        }
      }
      else
      {
        return bool1;
      }
      i += 1;
    }
  }
  
  private boolean isPackageDeviceAdmin(String paramString, int paramInt)
  {
    IDevicePolicyManager localIDevicePolicyManager = IDevicePolicyManager.Stub.asInterface(ServiceManager.getService("device_policy"));
    if (localIDevicePolicyManager != null) {}
    for (;;)
    {
      try
      {
        Object localObject = localIDevicePolicyManager.getDeviceOwnerComponent(false);
        if (localObject == null)
        {
          localObject = null;
          if (paramString.equals(localObject)) {
            return true;
          }
        }
        else
        {
          localObject = ((ComponentName)localObject).getPackageName();
          continue;
        }
        if (paramInt == -1)
        {
          localObject = sUserManager.getUserIds();
          break label107;
          if (paramInt >= localObject.length) {
            break label105;
          }
          if (localIDevicePolicyManager.packageHasActiveAdmins(paramString, localObject[paramInt])) {
            return true;
          }
        }
        else
        {
          localObject = new int[1];
          localObject[0] = paramInt;
          break label107;
        }
        paramInt += 1;
        continue;
        return false;
      }
      catch (RemoteException paramString) {}
      label105:
      label107:
      paramInt = 0;
    }
  }
  
  private boolean isPackageRequestingPermission(PackageParser.Package paramPackage, String paramString)
  {
    int j = paramPackage.requestedPermissions.size();
    int i = 0;
    while (i < j)
    {
      if (paramString.equals((String)paramPackage.requestedPermissions.get(i))) {
        return true;
      }
      i += 1;
    }
    return false;
  }
  
  private static boolean isPrivilegedApp(PackageParser.Package paramPackage)
  {
    boolean bool = false;
    if ((paramPackage.applicationInfo.privateFlags & 0x8) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private boolean isRecoverSignatureUpdateNeeded(PackageParser.Package paramPackage)
  {
    return getSettingsVersionForPackage(paramPackage).databaseVersion < 3;
  }
  
  private boolean isStrictOpEnable()
  {
    return SystemProperties.getBoolean("persist.sys.strict_op_enable", false);
  }
  
  private static boolean isSystemApp(PackageParser.Package paramPackage)
  {
    boolean bool = false;
    if ((paramPackage.applicationInfo.flags & 0x1) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private static boolean isSystemApp(PackageSetting paramPackageSetting)
  {
    boolean bool = false;
    if ((paramPackageSetting.pkgFlags & 0x1) != 0) {
      bool = true;
    }
    return bool;
  }
  
  private static boolean isUpdatedSystemApp(PackageSetting paramPackageSetting)
  {
    boolean bool = false;
    if ((paramPackageSetting.pkgFlags & 0x80) != 0) {
      bool = true;
    }
    return bool;
  }
  
  /* Error */
  private boolean isUserEnabled(int paramInt)
  {
    // Byte code:
    //   0: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore_2
    //   4: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   7: iload_1
    //   8: invokevirtual 3099	com/android/server/pm/UserManagerService:getUserInfo	(I)Landroid/content/pm/UserInfo;
    //   11: astore 5
    //   13: aload 5
    //   15: ifnull +17 -> 32
    //   18: aload 5
    //   20: invokevirtual 4951	android/content/pm/UserInfo:isEnabled	()Z
    //   23: istore 4
    //   25: lload_2
    //   26: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   29: iload 4
    //   31: ireturn
    //   32: iconst_0
    //   33: istore 4
    //   35: goto -10 -> 25
    //   38: astore 5
    //   40: lload_2
    //   41: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   44: aload 5
    //   46: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	47	0	this	PackageManagerService
    //   0	47	1	paramInt	int
    //   3	38	2	l	long
    //   23	11	4	bool	boolean
    //   11	8	5	localUserInfo	UserInfo
    //   38	7	5	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   4	13	38	finally
    //   18	25	38	finally
  }
  
  private boolean isVerificationEnabled(int paramInt1, int paramInt2)
  {
    if ((paramInt2 & 0x800) != 0)
    {
      if (DEBUG_EPHEMERAL) {
        Slog.d("PackageManager", "INSTALL_EPHEMERAL so skipping verification");
      }
      return false;
    }
    boolean bool = isUserRestricted(paramInt1, "ensure_verify_apps");
    if ((paramInt2 & 0x20) != 0)
    {
      if (ActivityManager.isRunningInTestHarness()) {
        return false;
      }
      if (bool) {
        return true;
      }
      if (Settings.Global.getInt(this.mContext.getContentResolver(), "verifier_verify_adb_installs", 1) == 0) {
        return false;
      }
    }
    if (bool) {
      return true;
    }
    return Settings.Global.getInt(this.mContext.getContentResolver(), "package_verifier_enable", 1) == 1;
  }
  
  /* Error */
  private void killApplication(String paramString1, int paramInt1, int paramInt2, String paramString2)
  {
    // Byte code:
    //   0: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore 5
    //   5: invokestatic 618	android/app/ActivityManagerNative:getDefault	()Landroid/app/IActivityManager;
    //   8: astore 7
    //   10: aload 7
    //   12: ifnull +15 -> 27
    //   15: aload 7
    //   17: aload_1
    //   18: iload_2
    //   19: iload_3
    //   20: aload 4
    //   22: invokeinterface 4968 5 0
    //   27: lload 5
    //   29: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   32: return
    //   33: astore_1
    //   34: goto -7 -> 27
    //   37: astore_1
    //   38: lload 5
    //   40: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   43: aload_1
    //   44: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	45	0	this	PackageManagerService
    //   0	45	1	paramString1	String
    //   0	45	2	paramInt1	int
    //   0	45	3	paramInt2	int
    //   0	45	4	paramString2	String
    //   3	36	5	l	long
    //   8	8	7	localIActivityManager	IActivityManager
    // Exception table:
    //   from	to	target	type
    //   15	27	33	android/os/RemoteException
    //   5	10	37	finally
    //   15	27	37	finally
  }
  
  private void killApplication(String paramString1, int paramInt, String paramString2)
  {
    killApplication(paramString1, paramInt, -1, paramString2);
  }
  
  /* Error */
  private void killUid(int paramInt1, int paramInt2, String paramString)
  {
    // Byte code:
    //   0: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   3: lstore 4
    //   5: invokestatic 618	android/app/ActivityManagerNative:getDefault	()Landroid/app/IActivityManager;
    //   8: astore 6
    //   10: aload 6
    //   12: ifnull +13 -> 25
    //   15: aload 6
    //   17: iload_1
    //   18: iload_2
    //   19: aload_3
    //   20: invokeinterface 4969 4 0
    //   25: lload 4
    //   27: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   30: return
    //   31: astore_3
    //   32: goto -7 -> 25
    //   35: astore_3
    //   36: lload 4
    //   38: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   41: aload_3
    //   42: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	43	0	this	PackageManagerService
    //   0	43	1	paramInt1	int
    //   0	43	2	paramInt2	int
    //   0	43	3	paramString	String
    //   3	34	4	l	long
    //   8	8	6	localIActivityManager	IActivityManager
    // Exception table:
    //   from	to	target	type
    //   15	25	31	android/os/RemoteException
    //   5	10	35	finally
    //   15	25	35	finally
  }
  
  private void loadMediaPackages(ArrayMap<AsecInstallArgs, String> paramArrayMap, int[] paramArrayOfInt, boolean paramBoolean)
  {
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator = paramArrayMap.keySet().iterator();
    int i;
    Object localObject1;
    if (localIterator.hasNext())
    {
      AsecInstallArgs localAsecInstallArgs = (AsecInstallArgs)localIterator.next();
      String str = (String)paramArrayMap.get(localAsecInstallArgs);
      i = -18;
      int j = i;
      for (;;)
      {
        try
        {
          if (localAsecInstallArgs.doPreInstall(1) != 1)
          {
            j = i;
            Slog.e("PackageManager", "Failed to mount cid : " + localAsecInstallArgs.cid + " when installing from sdcard");
            Log.w("PackageManager", "Container " + localAsecInstallArgs.cid + " is stale, retCode=" + -18);
            break;
          }
          int m;
          if (str != null)
          {
            j = i;
            if (str.startsWith(localAsecInstallArgs.getCodePath()))
            {
              j = i;
              m = this.mDefParseFlags;
              k = m;
              j = i;
              if (localAsecInstallArgs.isExternalAsec()) {
                k = m | 0x20;
              }
              m = k;
              j = i;
              if (localAsecInstallArgs.isFwdLocked()) {
                m = k | 0x10;
              }
              j = i;
              localObject3 = this.mInstallLock;
              j = i;
              localObject1 = null;
              k = i;
            }
          }
          try
          {
            localObject2 = scanPackageTracedLI(new File(str), m, 262144, 0L, null);
            localObject1 = localObject2;
          }
          catch (PackageManagerException localPackageManagerException)
          {
            Object localObject2;
            k = i;
            Slog.w("PackageManager", "Failed to scan " + str + ": " + localPackageManagerException.getMessage());
            continue;
          }
          finally
          {
            j = k;
            j = k;
          }
          if (localObject1 == null) {
            break label639;
          }
          k = i;
          localObject2 = this.mPackages;
          k = i;
          j = 1;
          i = 1;
        }
        finally
        {
          Object localObject3;
          if (j != 1) {
            Log.w("PackageManager", "Container " + localAsecInstallArgs.cid + " is stale, retCode=" + j);
          }
        }
        try
        {
          localArrayList.add(((PackageParser.Package)localObject1).packageName);
          localAsecInstallArgs.doPostInstall(1, ((PackageParser.Package)localObject1).applicationInfo.uid);
          k = j;
          j = i;
          if (i == 1) {
            break;
          }
          Log.w("PackageManager", "Container " + localAsecInstallArgs.cid + " is stale, retCode=" + i);
          break;
        }
        finally
        {
          k = j;
          k = j;
        }
        j = i;
        Slog.e("PackageManager", "Container " + localAsecInstallArgs.cid + " cachepath " + localAsecInstallArgs.getCodePath() + " does not match one in settings " + str);
        Log.w("PackageManager", "Container " + localAsecInstallArgs.cid + " is stale, retCode=" + -18);
        break;
        label639:
        int k = i;
        Slog.i("PackageManager", "Failed to install pkg from  " + str + " from sdcard");
      }
    }
    ArrayMap localArrayMap = this.mPackages;
    if (paramBoolean) {}
    for (;;)
    {
      try
      {
        paramArrayMap = this.mSettings.getExternalVersion();
      }
      finally {}
      i = 1;
      if (paramArrayMap.sdkVersion != this.mSdkVersion)
      {
        logCriticalInfo(4, "Platform changed from " + paramArrayMap.sdkVersion + " to " + this.mSdkVersion + "; regranting permissions for external");
        i = 7;
      }
      updatePermissionsLPw(null, null, (String)localObject1, i);
      paramArrayMap.forceCurrent();
      this.mSettings.writeLPr();
      if (localArrayList.size() > 0) {
        sendResourcesChangedBroadcast(true, false, localArrayList, paramArrayOfInt, null);
      }
      return;
      paramArrayMap = this.mSettings.getInternalVersion();
      break label836;
      localObject1 = StorageManager.UUID_PRIVATE_INTERNAL;
      continue;
      label836:
      if (paramBoolean) {
        localObject1 = "primary_physical";
      }
    }
  }
  
  private void loadPrivatePackages(final VolumeInfo paramVolumeInfo)
  {
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        PackageManagerService.-wrap31(PackageManagerService.this, paramVolumeInfo);
      }
    });
  }
  
  /* Error */
  private void loadPrivatePackagesInner(VolumeInfo paramVolumeInfo)
  {
    // Byte code:
    //   0: aload_1
    //   1: getfield 5020	android/os/storage/VolumeInfo:fsUuid	Ljava/lang/String;
    //   4: astore_3
    //   5: aload_3
    //   6: invokestatic 1654	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   9: ifeq +14 -> 23
    //   12: ldc_w 391
    //   15: ldc_w 5022
    //   18: invokestatic 1934	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   21: pop
    //   22: return
    //   23: new 1139	java/util/ArrayList
    //   26: dup
    //   27: invokespecial 1140	java/util/ArrayList:<init>	()V
    //   30: astore 4
    //   32: new 1139	java/util/ArrayList
    //   35: dup
    //   36: invokespecial 1140	java/util/ArrayList:<init>	()V
    //   39: astore_1
    //   40: aload_0
    //   41: getfield 1366	com/android/server/pm/PackageManagerService:mDefParseFlags	I
    //   44: istore_2
    //   45: aload_0
    //   46: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   49: astore 6
    //   51: aload 6
    //   53: monitorenter
    //   54: aload_0
    //   55: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   58: aload_3
    //   59: invokevirtual 4302	com/android/server/pm/Settings:findOrCreateVersion	(Ljava/lang/String;)Lcom/android/server/pm/Settings$VersionInfo;
    //   62: astore 5
    //   64: aload_0
    //   65: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   68: aload_3
    //   69: invokevirtual 5026	com/android/server/pm/Settings:getVolumePackagesLPr	(Ljava/lang/String;)Ljava/util/List;
    //   72: astore 7
    //   74: aload 6
    //   76: monitorexit
    //   77: aload 7
    //   79: invokeinterface 1308 1 0
    //   84: astore 7
    //   86: aload 7
    //   88: invokeinterface 1313 1 0
    //   93: ifeq +163 -> 256
    //   96: aload 7
    //   98: invokeinterface 1317 1 0
    //   103: checkcast 1615	com/android/server/pm/PackageSetting
    //   106: astore 8
    //   108: aload 4
    //   110: aload_0
    //   111: aload 8
    //   113: getfield 1622	com/android/server/pm/PackageSetting:name	Ljava/lang/String;
    //   116: ldc_w 5027
    //   119: invokevirtual 5031	com/android/server/pm/PackageManagerService:freezePackage	(Ljava/lang/String;Ljava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
    //   122: invokevirtual 2294	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   125: pop
    //   126: aload_0
    //   127: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   130: astore 6
    //   132: aload 6
    //   134: monitorenter
    //   135: aload_1
    //   136: aload_0
    //   137: aload 8
    //   139: getfield 1621	com/android/server/pm/PackageSetting:codePath	Ljava/io/File;
    //   142: iload_2
    //   143: bipush 32
    //   145: ior
    //   146: sipush 16384
    //   149: lconst_0
    //   150: aconst_null
    //   151: invokespecial 715	com/android/server/pm/PackageManagerService:scanPackageTracedLI	(Ljava/io/File;IIJLandroid/os/UserHandle;)Landroid/content/pm/PackageParser$Package;
    //   154: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   157: invokevirtual 2294	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   160: pop
    //   161: getstatic 2190	android/os/Build:FINGERPRINT	Ljava/lang/String;
    //   164: aload 5
    //   166: getfield 2193	com/android/server/pm/Settings$VersionInfo:fingerprint	Ljava/lang/String;
    //   169: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   172: ifne +16 -> 188
    //   175: aload_0
    //   176: aload 8
    //   178: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   181: iconst_m1
    //   182: sipush 515
    //   185: invokespecial 793	com/android/server/pm/PackageManagerService:clearAppDataLIF	(Landroid/content/pm/PackageParser$Package;II)V
    //   188: aload 6
    //   190: monitorexit
    //   191: goto -105 -> 86
    //   194: astore_1
    //   195: aload 6
    //   197: monitorexit
    //   198: aload_1
    //   199: athrow
    //   200: astore 9
    //   202: ldc_w 391
    //   205: new 1320	java/lang/StringBuilder
    //   208: dup
    //   209: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   212: ldc_w 5003
    //   215: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   218: aload 8
    //   220: getfield 1621	com/android/server/pm/PackageSetting:codePath	Ljava/io/File;
    //   223: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   226: ldc_w 3069
    //   229: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   232: aload 9
    //   234: invokevirtual 1937	com/android/server/pm/PackageManagerException:getMessage	()Ljava/lang/String;
    //   237: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   240: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   243: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   246: pop
    //   247: goto -86 -> 161
    //   250: astore_1
    //   251: aload 6
    //   253: monitorexit
    //   254: aload_1
    //   255: athrow
    //   256: aload_0
    //   257: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   260: ldc_w 1705
    //   263: invokevirtual 3604	android/content/Context:getSystemService	(Ljava/lang/Class;)Ljava/lang/Object;
    //   266: checkcast 1705	android/os/storage/StorageManager
    //   269: astore 6
    //   271: aload_0
    //   272: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   275: ldc_w 3719
    //   278: invokevirtual 3604	android/content/Context:getSystemService	(Ljava/lang/Class;)Ljava/lang/Object;
    //   281: checkcast 3719	android/os/UserManager
    //   284: astore 8
    //   286: aload_0
    //   287: invokespecial 2857	com/android/server/pm/PackageManagerService:getUserManagerInternal	()Landroid/os/UserManagerInternal;
    //   290: astore 7
    //   292: aload 8
    //   294: invokevirtual 5033	android/os/UserManager:getUsers	()Ljava/util/List;
    //   297: invokeinterface 1308 1 0
    //   302: astore 8
    //   304: aload 8
    //   306: invokeinterface 1313 1 0
    //   311: ifeq +132 -> 443
    //   314: aload 8
    //   316: invokeinterface 1317 1 0
    //   321: checkcast 2033	android/content/pm/UserInfo
    //   324: astore 10
    //   326: aload 7
    //   328: aload 10
    //   330: getfield 2036	android/content/pm/UserInfo:id	I
    //   333: invokevirtual 2862	android/os/UserManagerInternal:isUserUnlockingOrUnlocked	(I)Z
    //   336: ifeq +81 -> 417
    //   339: iconst_3
    //   340: istore_2
    //   341: aload 6
    //   343: aload_3
    //   344: aload 10
    //   346: getfield 2036	android/content/pm/UserInfo:id	I
    //   349: aload 10
    //   351: getfield 5036	android/content/pm/UserInfo:serialNumber	I
    //   354: iload_2
    //   355: invokevirtual 5040	android/os/storage/StorageManager:prepareUserStorage	(Ljava/lang/String;III)V
    //   358: aload_0
    //   359: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   362: astore 9
    //   364: aload 9
    //   366: monitorenter
    //   367: aload_0
    //   368: aload_3
    //   369: aload 10
    //   371: getfield 2036	android/content/pm/UserInfo:id	I
    //   374: iload_2
    //   375: invokespecial 2053	com/android/server/pm/PackageManagerService:reconcileAppsDataLI	(Ljava/lang/String;II)V
    //   378: aload 9
    //   380: monitorexit
    //   381: goto -77 -> 304
    //   384: astore 9
    //   386: ldc_w 391
    //   389: new 1320	java/lang/StringBuilder
    //   392: dup
    //   393: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   396: ldc_w 5042
    //   399: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   402: aload 9
    //   404: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   407: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   410: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   413: pop
    //   414: goto -110 -> 304
    //   417: aload 7
    //   419: aload 10
    //   421: getfield 2036	android/content/pm/UserInfo:id	I
    //   424: invokevirtual 2868	android/os/UserManagerInternal:isUserRunning	(I)Z
    //   427: ifeq -123 -> 304
    //   430: iconst_1
    //   431: istore_2
    //   432: goto -91 -> 341
    //   435: astore 10
    //   437: aload 9
    //   439: monitorexit
    //   440: aload 10
    //   442: athrow
    //   443: aload_0
    //   444: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   447: astore 6
    //   449: aload 6
    //   451: monitorenter
    //   452: iconst_1
    //   453: istore_2
    //   454: aload 5
    //   456: getfield 1767	com/android/server/pm/Settings$VersionInfo:sdkVersion	I
    //   459: aload_0
    //   460: getfield 1119	com/android/server/pm/PackageManagerService:mSdkVersion	I
    //   463: if_icmpeq +57 -> 520
    //   466: iconst_4
    //   467: new 1320	java/lang/StringBuilder
    //   470: dup
    //   471: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   474: ldc_w 2023
    //   477: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   480: aload 5
    //   482: getfield 1767	com/android/server/pm/Settings$VersionInfo:sdkVersion	I
    //   485: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   488: ldc_w 2025
    //   491: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   494: aload_0
    //   495: getfield 1119	com/android/server/pm/PackageManagerService:mSdkVersion	I
    //   498: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   501: ldc_w 5044
    //   504: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   507: aload_3
    //   508: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   511: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   514: invokestatic 1851	com/android/server/pm/PackageManagerService:logCriticalInfo	(ILjava/lang/String;)V
    //   517: bipush 7
    //   519: istore_2
    //   520: aload_0
    //   521: aconst_null
    //   522: aconst_null
    //   523: aload_3
    //   524: iload_2
    //   525: invokespecial 2031	com/android/server/pm/PackageManagerService:updatePermissionsLPw	(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;Ljava/lang/String;I)V
    //   528: aload 5
    //   530: invokevirtual 5012	com/android/server/pm/Settings$VersionInfo:forceCurrent	()V
    //   533: aload_0
    //   534: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   537: invokevirtual 2063	com/android/server/pm/Settings:writeLPr	()V
    //   540: aload 6
    //   542: monitorexit
    //   543: aload 4
    //   545: invokeinterface 1308 1 0
    //   550: astore_3
    //   551: aload_3
    //   552: invokeinterface 1313 1 0
    //   557: ifeq +24 -> 581
    //   560: aload_3
    //   561: invokeinterface 1317 1 0
    //   566: checkcast 162	com/android/server/pm/PackageManagerService$PackageFreezer
    //   569: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   572: goto -21 -> 551
    //   575: astore_1
    //   576: aload 6
    //   578: monitorexit
    //   579: aload_1
    //   580: athrow
    //   581: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   584: ifeq +30 -> 614
    //   587: ldc_w 391
    //   590: new 1320	java/lang/StringBuilder
    //   593: dup
    //   594: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   597: ldc_w 5046
    //   600: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   603: aload_1
    //   604: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   607: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   610: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   613: pop
    //   614: aload_0
    //   615: iconst_1
    //   616: iconst_0
    //   617: aload_1
    //   618: aconst_null
    //   619: invokespecial 5049	com/android/server/pm/PackageManagerService:sendResourcesChangedBroadcast	(ZZLjava/util/ArrayList;Landroid/content/IIntentReceiver;)V
    //   622: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	623	0	this	PackageManagerService
    //   0	623	1	paramVolumeInfo	VolumeInfo
    //   44	481	2	i	int
    //   4	557	3	localObject1	Object
    //   30	514	4	localArrayList	ArrayList
    //   62	467	5	localVersionInfo	Settings.VersionInfo
    //   49	528	6	localObject2	Object
    //   72	346	7	localObject3	Object
    //   106	209	8	localObject4	Object
    //   200	33	9	localPackageManagerException	PackageManagerException
    //   384	54	9	localIllegalStateException	IllegalStateException
    //   324	96	10	localUserInfo	UserInfo
    //   435	6	10	localObject6	Object
    // Exception table:
    //   from	to	target	type
    //   54	74	194	finally
    //   135	161	200	com/android/server/pm/PackageManagerException
    //   135	161	250	finally
    //   161	188	250	finally
    //   202	247	250	finally
    //   341	367	384	java/lang/IllegalStateException
    //   378	381	384	java/lang/IllegalStateException
    //   437	443	384	java/lang/IllegalStateException
    //   367	378	435	finally
    //   454	517	575	finally
    //   520	540	575	finally
  }
  
  static boolean locationIsPrivileged(File paramFile)
  {
    try
    {
      String str = new File(Environment.getRootDirectory(), "priv-app").getCanonicalPath();
      boolean bool = paramFile.getCanonicalPath().startsWith(str);
      return bool;
    }
    catch (IOException localIOException)
    {
      Slog.e("PackageManager", "Unable to access code path " + paramFile);
    }
    return false;
  }
  
  /* Error */
  static void logCriticalInfo(int paramInt, String paramString)
  {
    // Byte code:
    //   0: ldc 2
    //   2: monitorenter
    //   3: iload_0
    //   4: ldc_w 391
    //   7: aload_1
    //   8: invokestatic 5057	android/util/Slog:println	(ILjava/lang/String;Ljava/lang/String;)I
    //   11: pop
    //   12: aload_1
    //   13: invokestatic 5062	com/android/server/EventLogTags:writePmCriticalInfo	(Ljava/lang/String;)V
    //   16: invokestatic 5064	com/android/server/pm/PackageManagerService:getSettingsProblemFile	()Ljava/io/File;
    //   19: astore_2
    //   20: new 5066	com/android/internal/util/FastPrintWriter
    //   23: dup
    //   24: new 5068	java/io/FileOutputStream
    //   27: dup
    //   28: aload_2
    //   29: iconst_1
    //   30: invokespecial 5071	java/io/FileOutputStream:<init>	(Ljava/io/File;Z)V
    //   33: invokespecial 5074	com/android/internal/util/FastPrintWriter:<init>	(Ljava/io/OutputStream;)V
    //   36: astore_3
    //   37: new 5076	java/text/SimpleDateFormat
    //   40: dup
    //   41: invokespecial 5077	java/text/SimpleDateFormat:<init>	()V
    //   44: new 5079	java/util/Date
    //   47: dup
    //   48: invokestatic 4674	java/lang/System:currentTimeMillis	()J
    //   51: invokespecial 5081	java/util/Date:<init>	(J)V
    //   54: invokevirtual 5085	java/text/SimpleDateFormat:format	(Ljava/util/Date;)Ljava/lang/String;
    //   57: astore 4
    //   59: aload_3
    //   60: new 1320	java/lang/StringBuilder
    //   63: dup
    //   64: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   67: aload 4
    //   69: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   72: ldc_w 3069
    //   75: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   78: aload_1
    //   79: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   82: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   85: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   88: aload_3
    //   89: invokevirtual 5089	java/io/PrintWriter:close	()V
    //   92: aload_2
    //   93: invokevirtual 2978	java/io/File:toString	()Ljava/lang/String;
    //   96: sipush 508
    //   99: iconst_m1
    //   100: iconst_m1
    //   101: invokestatic 5093	android/os/FileUtils:setPermissions	(Ljava/lang/String;III)I
    //   104: pop
    //   105: ldc 2
    //   107: monitorexit
    //   108: return
    //   109: astore_1
    //   110: ldc 2
    //   112: monitorexit
    //   113: aload_1
    //   114: athrow
    //   115: astore_1
    //   116: goto -11 -> 105
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	119	0	paramInt	int
    //   0	119	1	paramString	String
    //   19	74	2	localFile	File
    //   36	53	3	localFastPrintWriter	com.android.internal.util.FastPrintWriter
    //   57	11	4	str	String
    // Exception table:
    //   from	to	target	type
    //   3	16	109	finally
    //   16	105	109	finally
    //   16	105	115	java/io/IOException
  }
  
  public static PackageManagerService main(Context paramContext, Installer paramInstaller, boolean paramBoolean1, boolean paramBoolean2)
  {
    PackageManagerServiceCompilerMapping.checkProperties();
    paramContext = new PackageManagerService(paramContext, paramInstaller, paramBoolean1, paramBoolean2);
    paramContext.enableSystemUserPackages();
    ServiceManager.addService("package", paramContext);
    return paramContext;
  }
  
  private void markPackageUninstalledForUserLPw(PackageSetting paramPackageSetting, UserHandle paramUserHandle)
  {
    if ((paramUserHandle == null) || (paramUserHandle.getIdentifier() == -1)) {}
    int[] arrayOfInt;
    for (paramUserHandle = sUserManager.getUserIds();; paramUserHandle = arrayOfInt)
    {
      int j = paramUserHandle.length;
      int i = 0;
      while (i < j)
      {
        int k = paramUserHandle[i];
        if (DEBUG_REMOVE) {
          Slog.d("PackageManager", "Marking package:" + paramPackageSetting.name + " uninstalled for user:" + k);
        }
        paramPackageSetting.setUserState(k, 0L, 0, false, true, true, false, false, null, null, null, false, paramPackageSetting.readUserState(k).domainVerificationStatus, 0);
        i += 1;
      }
      arrayOfInt = new int[1];
      arrayOfInt[0] = paramUserHandle.getIdentifier();
    }
  }
  
  private ComponentName matchComponentForVerifier(String paramString, List<ResolveInfo> paramList)
  {
    Object localObject2 = null;
    int j = paramList.size();
    int i = 0;
    Object localObject1 = localObject2;
    if (i < j)
    {
      localObject1 = (ResolveInfo)paramList.get(i);
      if (((ResolveInfo)localObject1).activityInfo == null) {}
      while (!paramString.equals(((ResolveInfo)localObject1).activityInfo.packageName))
      {
        i += 1;
        break;
      }
      localObject1 = ((ResolveInfo)localObject1).activityInfo;
    }
    if (localObject1 == null) {
      return null;
    }
    return new ComponentName(((ActivityInfo)localObject1).packageName, ((ActivityInfo)localObject1).name);
  }
  
  private List<ComponentName> matchVerifiers(PackageInfoLite paramPackageInfoLite, List<ResolveInfo> paramList, PackageVerificationState paramPackageVerificationState)
  {
    if (paramPackageInfoLite.verifiers.length == 0) {
      return null;
    }
    int j = paramPackageInfoLite.verifiers.length;
    ArrayList localArrayList = new ArrayList(j + 1);
    int i = 0;
    if (i < j)
    {
      VerifierInfo localVerifierInfo = paramPackageInfoLite.verifiers[i];
      ComponentName localComponentName = matchComponentForVerifier(localVerifierInfo.packageName, paramList);
      if (localComponentName == null) {}
      for (;;)
      {
        i += 1;
        break;
        int k = getUidForVerifier(localVerifierInfo);
        if (k != -1)
        {
          if (DEBUG_VERIFY) {
            Slog.d("PackageManager", "Added sufficient verifier " + localVerifierInfo.packageName + " with the correct signature");
          }
          localArrayList.add(localComponentName);
          paramPackageVerificationState.addSufficientVerifier(k);
        }
      }
    }
    return localArrayList;
  }
  
  private boolean maybeMigrateAppDataLIF(PackageParser.Package paramPackage, int paramInt)
  {
    if ((!paramPackage.isSystemApp()) || (StorageManager.isFileEncryptedNativeOrEmulated())) {
      return false;
    }
    int i;
    if (paramPackage.applicationInfo.isDefaultToDeviceProtectedStorage()) {
      i = 1;
    }
    try
    {
      for (;;)
      {
        this.mInstaller.migrateAppData(paramPackage.volumeUuid, paramPackage.packageName, paramInt, i);
        return true;
        i = 2;
      }
    }
    catch (InstallerConnection.InstallerException localInstallerException)
    {
      for (;;)
      {
        logCriticalInfo(5, "Failed to migrate " + paramPackage.packageName + ": " + localInstallerException.getMessage());
      }
    }
  }
  
  private void maybeRenameForeignDexMarkers(PackageParser.Package paramPackage1, PackageParser.Package paramPackage2, UserHandle paramUserHandle)
  {
    if ((paramPackage1.applicationInfo == null) || (paramPackage2.applicationInfo == null)) {
      return;
    }
    paramPackage1 = new File(paramPackage1.applicationInfo.getCodePath());
    Object localObject1 = new File(paramPackage2.applicationInfo.getCodePath());
    if (Objects.equals(paramPackage1, localObject1)) {
      return;
    }
    Object localObject2;
    try
    {
      localObject2 = new File(PackageManagerServiceUtils.realpath((File)localObject1));
      localObject1 = new File(((File)localObject2).getParentFile(), paramPackage1.getName()).getAbsolutePath().replace('/', '@');
      paramPackage1 = (PackageParser.Package)localObject1;
      if (!((String)localObject1).endsWith("@")) {
        paramPackage1 = (String)localObject1 + "@";
      }
      localObject2 = ((File)localObject2).getAbsolutePath().replace('/', '@');
      localObject1 = localObject2;
      if (!((String)localObject2).endsWith("@")) {
        localObject1 = (String)localObject2 + "@";
      }
      localObject2 = paramPackage2.getAllCodePathsExcludingResourceOnly();
      paramPackage2 = new ArrayList(((List)localObject2).size());
      localObject2 = ((Iterable)localObject2).iterator();
      while (((Iterator)localObject2).hasNext()) {
        paramPackage2.add(new File((String)((Iterator)localObject2).next()).getName().replace('/', '@'));
      }
      paramUserHandle = resolveUserIds(paramUserHandle.getIdentifier());
    }
    catch (IOException paramPackage1)
    {
      Slog.w("PackageManager", "Failed to get canonical path.", paramPackage1);
      return;
    }
    int i = 0;
    int j = paramUserHandle.length;
    while (i < j)
    {
      localObject2 = Environment.getDataProfilesDeForeignDexDirectory(paramUserHandle[i]);
      Iterator localIterator = paramPackage2.iterator();
      while (localIterator.hasNext())
      {
        Object localObject3 = (String)localIterator.next();
        File localFile = new File((File)localObject2, paramPackage1 + (String)localObject3);
        localObject3 = new File((File)localObject2, (String)localObject1 + (String)localObject3);
        if (localFile.exists()) {
          try
          {
            Os.rename(localFile.getAbsolutePath(), ((File)localObject3).getAbsolutePath());
          }
          catch (ErrnoException localErrnoException)
          {
            Slog.w("PackageManager", "Failed to rename foreign use marker", localErrnoException);
            localFile.delete();
          }
        }
      }
      i += 1;
    }
  }
  
  private static void maybeThrowExceptionForMultiArchCopy(String paramString, int paramInt)
    throws PackageManagerException
  {
    if ((paramInt < 0) && (paramInt != -114) && (paramInt != -113)) {
      throw new PackageManagerException(paramInt, paramString);
    }
  }
  
  private void movePackageInternal(String paramString1, String paramString2, final int paramInt, UserHandle paramUserHandle)
    throws PackageManagerException
  {
    Object localObject4 = (StorageManager)this.mContext.getSystemService(StorageManager.class);
    Object localObject7 = this.mContext.getPackageManager();
    synchronized (this.mPackages)
    {
      localObject5 = (PackageParser.Package)this.mPackages.get(paramString1);
      localObject6 = (PackageSetting)this.mSettings.mPackages.get(paramString1);
      if ((localObject5 == null) || (localObject6 == null)) {
        throw new PackageManagerException(-2, "Missing package");
      }
    }
    if (((PackageParser.Package)localObject5).applicationInfo.isSystemApp()) {
      throw new PackageManagerException(-3, "Cannot move system application");
    }
    int i;
    Object localObject1;
    if (((PackageParser.Package)localObject5).applicationInfo.isExternalAsec())
    {
      i = 1;
      localObject1 = "primary_physical";
    }
    while (Objects.equals(localObject1, paramString2))
    {
      throw new PackageManagerException(-6, "Package already moved to " + paramString2);
      if (((PackageParser.Package)localObject5).applicationInfo.isForwardLocked())
      {
        i = 1;
        localObject1 = "forward_locked";
      }
      else
      {
        i = 0;
        localObject1 = ((PackageSetting)localObject6).volumeUuid;
        localObject3 = new File(((PackageParser.Package)localObject5).codePath);
        localFile = new File((File)localObject3, "oat");
        if ((!((File)localObject3).isDirectory()) || (!localFile.isDirectory())) {
          throw new PackageManagerException(-6, "Move only supported for modern cluster style installs");
        }
      }
    }
    if ((((PackageParser.Package)localObject5).applicationInfo.isInternal()) && (isPackageDeviceAdminOnAnyUser(paramString1))) {
      throw new PackageManagerException(-8, "Device admin cannot be moved");
    }
    if (this.mFrozenPackages.contains(paramString1)) {
      throw new PackageManagerException(-7, "Failed to move already frozen package");
    }
    File localFile = new File(((PackageParser.Package)localObject5).codePath);
    Object localObject3 = ((PackageSetting)localObject6).installerPackageName;
    String str1 = ((PackageSetting)localObject6).cpuAbiOverrideString;
    int m = UserHandle.getAppId(((PackageParser.Package)localObject5).applicationInfo.uid);
    String str2 = ((PackageParser.Package)localObject5).applicationInfo.seinfo;
    localObject7 = String.valueOf(((PackageManager)localObject7).getApplicationLabel(((PackageParser.Package)localObject5).applicationInfo));
    int n = ((PackageParser.Package)localObject5).applicationInfo.targetSdkVersion;
    final Object localObject5 = freezePackage(paramString1, "movePackageInternal");
    final Object localObject6 = ((PackageSetting)localObject6).queryInstalledUsers(sUserManager.getUserIds(), true);
    ??? = new Bundle();
    ((Bundle)???).putString("android.intent.extra.PACKAGE_NAME", paramString1);
    ((Bundle)???).putString("android.intent.extra.TITLE", (String)localObject7);
    MoveCallbacks.-wrap0(this.mMoveCallbacks, paramInt, (Bundle)???);
    int k;
    int j;
    label491:
    PackageStats localPackageStats;
    if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, paramString2))
    {
      k = 16;
      if (i != 0)
      {
        j = 0;
        ??? = Environment.getDataAppDirectory(paramString2);
        i = k;
        localPackageStats = new PackageStats(null, -1);
        localObject7 = this.mInstaller;
        k = 0;
      }
    }
    for (;;)
    {
      try
      {
        int i1 = localObject6.length;
        if (k >= i1) {
          break label693;
        }
        if (getPackageSizeInfoLI(paramString1, localObject6[k], localPackageStats)) {
          break label684;
        }
        ((PackageFreezer)localObject5).close();
        throw new PackageManagerException(-6, "Failed to measure package size");
      }
      finally {}
      j = 1;
      break;
      if (Objects.equals("primary_physical", paramString2))
      {
        i = 8;
        j = 0;
        ??? = ((StorageManager)localObject4).getPrimaryPhysicalVolume().getPath();
        break label491;
      }
      ??? = ((StorageManager)localObject4).findVolumeByUuid(paramString2);
      if ((??? == null) || (((VolumeInfo)???).getType() != 1)) {}
      while (!((VolumeInfo)???).isMountedWritable())
      {
        ((PackageFreezer)localObject5).close();
        throw new PackageManagerException(-6, "Move location not mounted private volume");
      }
      if (i != 0) {}
      for (boolean bool = false;; bool = true)
      {
        Preconditions.checkState(bool);
        i = 16;
        j = 1;
        ??? = Environment.getDataAppDirectory(paramString2);
        break;
      }
      label684:
      k += 1;
    }
    label693:
    if (DEBUG_INSTALL) {
      Slog.d("PackageManager", "Measured code size " + localPackageStats.codeSize + ", data size " + localPackageStats.dataSize);
    }
    final long l2 = ((File)???).getFreeSpace();
    if (j != 0) {}
    for (final long l1 = localPackageStats.codeSize + localPackageStats.dataSize; l1 > ((StorageManager)localObject4).getStorageBytesUntilLow((File)???); l1 = localPackageStats.codeSize)
    {
      ((PackageFreezer)localObject5).close();
      throw new PackageManagerException(-6, "Not enough free space to move");
    }
    MoveCallbacks.-wrap1(this.mMoveCallbacks, paramInt, 10);
    localObject6 = new CountDownLatch(1);
    localObject4 = new IPackageInstallObserver2.Stub()
    {
      public void onPackageInstalled(String paramAnonymousString1, int paramAnonymousInt, String paramAnonymousString2, Bundle paramAnonymousBundle)
        throws RemoteException
      {
        if (PackageManagerService.DEBUG_INSTALL) {
          Slog.d("PackageManager", "Install result for move: " + PackageManager.installStatusToString(paramAnonymousInt, paramAnonymousString2));
        }
        localObject6.countDown();
        localObject5.close();
        switch (PackageManager.installStatusToPublicStatus(paramAnonymousInt))
        {
        default: 
          PackageManagerService.MoveCallbacks.-wrap1(PackageManagerService.-get9(PackageManagerService.this), paramInt, -6);
          return;
        case 0: 
          PackageManagerService.MoveCallbacks.-wrap1(PackageManagerService.-get9(PackageManagerService.this), paramInt, -100);
          return;
        }
        PackageManagerService.MoveCallbacks.-wrap1(PackageManagerService.-get9(PackageManagerService.this), paramInt, -1);
      }
      
      public void onUserActionRequired(Intent paramAnonymousIntent)
        throws RemoteException
      {
        throw new IllegalStateException();
      }
    };
    if (j != 0) {
      new Thread()
      {
        public void run()
        {
          for (;;)
          {
            try
            {
              boolean bool = localObject6.await(1L, TimeUnit.SECONDS);
              if (bool) {
                return;
              }
            }
            catch (InterruptedException localInterruptedException)
            {
              int i = (int)MathUtils.constrain((l2 - l1.getFreeSpace()) * 80L / paramInt, 0L, 80L);
              PackageManagerService.MoveCallbacks.-wrap1(PackageManagerService.-get9(PackageManagerService.this), this.val$moveId, i + 10);
            }
          }
        }
      }.start();
    }
    for (paramString1 = new MoveInfo(paramInt, (String)localObject1, paramString2, paramString1, localFile.getName(), m, str2, n);; paramString1 = null)
    {
      localObject1 = this.mHandler.obtainMessage(5);
      paramString1 = new InstallParams(OriginInfo.fromExistingFile(localFile), paramString1, (IPackageInstallObserver2)localObject4, i | 0x2, (String)localObject3, paramString2, null, paramUserHandle, str1, null, null);
      paramString1.setTraceMethod("movePackage").setTraceCookie(System.identityHashCode(paramString1));
      ((Message)localObject1).obj = paramString1;
      Trace.asyncTraceBegin(262144L, "movePackage", System.identityHashCode(((Message)localObject1).obj));
      Trace.asyncTraceBegin(262144L, "queueInstall", System.identityHashCode(((Message)localObject1).obj));
      this.mHandler.sendMessage((Message)localObject1);
      return;
    }
  }
  
  private boolean needsNetworkVerificationLPr(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
  {
    paramActivityIntentInfo = paramActivityIntentInfo.activity.getComponentName().getPackageName();
    paramActivityIntentInfo = this.mSettings.getIntentFilterVerificationLPr(paramActivityIntentInfo);
    if (paramActivityIntentInfo == null) {
      return true;
    }
    switch (paramActivityIntentInfo.getStatus())
    {
    default: 
      return false;
    }
    return true;
  }
  
  private String normalizePackageNameLPr(String paramString)
  {
    String str = (String)this.mSettings.mRenamedPackages.get(paramString);
    if (str != null) {
      return str;
    }
    return paramString;
  }
  
  private int packageFlagsToInstallFlags(PackageSetting paramPackageSetting)
  {
    int j = 0;
    if (isEphemeral(paramPackageSetting)) {
      j = 2048;
    }
    int i = j;
    if (isExternal(paramPackageSetting))
    {
      i = j;
      if (TextUtils.isEmpty(paramPackageSetting.volumeUuid)) {
        i = j | 0x8;
      }
    }
    j = i;
    if (paramPackageSetting.isForwardLocked()) {
      j = i | 0x1;
    }
    return j;
  }
  
  private boolean packageIsBrowser(String paramString, int paramInt)
  {
    List localList = queryIntentActivitiesInternal(sBrowserIntent, null, 131072, paramInt);
    int i = localList.size();
    paramInt = 0;
    while (paramInt < i)
    {
      if (paramString.equals(((ResolveInfo)localList.get(paramInt)).activityInfo.packageName)) {
        return true;
      }
      paramInt += 1;
    }
    return false;
  }
  
  /* Error */
  private int performDexOptInternal(String paramString1, boolean paramBoolean1, String paramString2, boolean paramBoolean2)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   4: astore 8
    //   6: aload 8
    //   8: monitorenter
    //   9: aload_0
    //   10: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   13: aload_1
    //   14: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   17: checkcast 1819	android/content/pm/PackageParser$Package
    //   20: astore_1
    //   21: aload_1
    //   22: ifnonnull +8 -> 30
    //   25: aload 8
    //   27: monitorexit
    //   28: iconst_m1
    //   29: ireturn
    //   30: aload_0
    //   31: getfield 1223	com/android/server/pm/PackageManagerService:mPackageUsage	Lcom/android/server/pm/PackageUsage;
    //   34: aload_0
    //   35: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   38: invokevirtual 5328	com/android/server/pm/PackageUsage:maybeWriteAsync	(Ljava/lang/Object;)Z
    //   41: pop
    //   42: aload_0
    //   43: getfield 1228	com/android/server/pm/PackageManagerService:mCompilerStats	Lcom/android/server/pm/CompilerStats;
    //   46: invokevirtual 5330	com/android/server/pm/CompilerStats:maybeWriteAsync	()Z
    //   49: pop
    //   50: aload 8
    //   52: monitorexit
    //   53: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   56: lstore 6
    //   58: aload_0
    //   59: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   62: astore 8
    //   64: aload 8
    //   66: monitorenter
    //   67: aload_0
    //   68: aload_1
    //   69: iload_2
    //   70: aload_3
    //   71: iload 4
    //   73: invokespecial 5334	com/android/server/pm/PackageManagerService:performDexOptInternalWithDependenciesLI	(Landroid/content/pm/PackageParser$Package;ZLjava/lang/String;Z)I
    //   76: istore 5
    //   78: aload 8
    //   80: monitorexit
    //   81: lload 6
    //   83: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   86: iload 5
    //   88: ireturn
    //   89: astore_1
    //   90: aload 8
    //   92: monitorexit
    //   93: aload_1
    //   94: athrow
    //   95: astore_1
    //   96: aload 8
    //   98: monitorexit
    //   99: aload_1
    //   100: athrow
    //   101: astore_1
    //   102: lload 6
    //   104: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   107: aload_1
    //   108: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	109	0	this	PackageManagerService
    //   0	109	1	paramString1	String
    //   0	109	2	paramBoolean1	boolean
    //   0	109	3	paramString2	String
    //   0	109	4	paramBoolean2	boolean
    //   76	11	5	i	int
    //   56	47	6	l	long
    // Exception table:
    //   from	to	target	type
    //   9	21	89	finally
    //   30	50	89	finally
    //   67	78	95	finally
    //   58	67	101	finally
    //   78	81	101	finally
    //   96	101	101	finally
  }
  
  private int performDexOptInternalWithDependenciesLI(PackageParser.Package paramPackage, boolean paramBoolean1, String paramString, boolean paramBoolean2)
  {
    if (paramBoolean2) {}
    String[] arrayOfString;
    for (Object localObject1 = new PackageDexOptimizer.ForcedUpdatePackageDexOptimizer(this.mPackageDexOptimizer);; localObject1 = this.mPackageDexOptimizer)
    {
      Object localObject2 = findSharedNonSystemLibraries(paramPackage);
      arrayOfString = InstructionSets.getAppDexInstructionSets(paramPackage.applicationInfo);
      if (((Collection)localObject2).isEmpty()) {
        break;
      }
      localObject2 = ((Iterable)localObject2).iterator();
      while (((Iterator)localObject2).hasNext())
      {
        PackageParser.Package localPackage = (PackageParser.Package)((Iterator)localObject2).next();
        ((PackageDexOptimizer)localObject1).performDexOpt(localPackage, null, arrayOfString, false, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(5), getOrCreateCompilerPackageStats(localPackage));
      }
    }
    return ((PackageDexOptimizer)localObject1).performDexOpt(paramPackage, paramPackage.usesLibraryFiles, arrayOfString, paramBoolean1, paramString, getOrCreateCompilerPackageStats(paramPackage));
  }
  
  private int performDexOptTraced(String paramString1, boolean paramBoolean1, String paramString2, boolean paramBoolean2)
  {
    Trace.traceBegin(262144L, "dexopt");
    try
    {
      int i = performDexOptInternal(paramString1, paramBoolean1, paramString2, paramBoolean2);
      return i;
    }
    finally
    {
      Trace.traceEnd(262144L);
    }
  }
  
  private int[] performDexOptUpgrade(List<PackageParser.Package> arg1, boolean paramBoolean, String paramString)
  {
    int m = 0;
    int j = 0;
    int i = 0;
    int k = 0;
    int n = ???.size();
    Iterator localIterator = ???.iterator();
    for (;;)
    {
      PackageParser.Package localPackage;
      if (localIterator.hasNext())
      {
        localPackage = (PackageParser.Package)localIterator.next();
        m += 1;
        if (!PackageDexOptimizer.canOptimizePackage(localPackage))
        {
          if (DEBUG_DEXOPT) {
            Log.i("PackageManager", "Skipping update of of non-optimizable app " + localPackage.packageName);
          }
          i += 1;
          continue;
        }
        if (DEBUG_DEXOPT) {
          Log.i("PackageManager", "Updating app " + m + " of " + n + ": " + localPackage.packageName);
        }
        if (!paramBoolean) {}
      }
      try
      {
        ActivityManagerNative.getDefault().showBootMessage(this.mContext.getResources().getString(17040327, new Object[] { Integer.valueOf(m), Integer.valueOf(n) }), true);
        for (;;)
        {
          synchronized (this.mPackages)
          {
            this.mDexOptDialogShown = true;
            ??? = paramString;
            if (isSystemApp(localPackage))
            {
              ??? = paramString;
              if (DexFile.isProfileGuidedCompilerFilter(paramString))
              {
                if (!Environment.getReferenceProfile(localPackage.packageName).exists()) {
                  continue;
                }
                ??? = paramString;
              }
            }
            int i1 = performDexOptTraced(localPackage.packageName, false, ???, false);
            switch (i1)
            {
            default: 
              Log.e("PackageManager", "Unexpected dexopt return code " + i1);
              paramString = ???;
            }
          }
        }
        j += 1;
        paramString = ???;
        continue;
        i += 1;
        paramString = ???;
        continue;
        k += 1;
        paramString = ???;
        continue;
        return new int[] { j, i, k };
      }
      catch (RemoteException ???)
      {
        for (;;) {}
      }
    }
  }
  
  private void postPreferredActivityChangedBroadcast(int paramInt)
  {
    this.mHandler.post(new -void_postPreferredActivityChangedBroadcast_int_userId_LambdaImpl0(paramInt));
  }
  
  private void prepareAppDataAfterInstallLIF(PackageParser.Package paramPackage)
  {
    for (;;)
    {
      UserInfo localUserInfo;
      synchronized (this.mPackages)
      {
        PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramPackage.packageName);
        this.mSettings.writeKernelMappingLPr(localPackageSetting);
        Object localObject2 = (UserManager)this.mContext.getSystemService(UserManager.class);
        ??? = getUserManagerInternal();
        localObject2 = ((UserManager)localObject2).getUsers().iterator();
        if (!((Iterator)localObject2).hasNext()) {
          break;
        }
        localUserInfo = (UserInfo)((Iterator)localObject2).next();
        if (((UserManagerInternal)???).isUserUnlockingOrUnlocked(localUserInfo.id))
        {
          i = 3;
          if (!localPackageSetting.getInstalled(localUserInfo.id)) {
            continue;
          }
          prepareAppDataLIF(paramPackage, localUserInfo.id, i);
        }
      }
      int i = 1;
    }
  }
  
  private void prepareAppDataContentsLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    if (paramPackage == null)
    {
      Slog.wtf("PackageManager", "Package was null!", new Throwable());
      return;
    }
    prepareAppDataContentsLeafLIF(paramPackage, paramInt1, paramInt2);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        prepareAppDataContentsLeafLIF((PackageParser.Package)paramPackage.childPackages.get(j), paramInt1, paramInt2);
        j += 1;
      }
    }
  }
  
  private void prepareAppDataContentsLeafLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    String str2 = paramPackage.volumeUuid;
    String str1 = paramPackage.packageName;
    paramPackage = paramPackage.applicationInfo;
    if (((paramInt2 & 0x2) == 0) || (paramPackage.primaryCpuAbi == null) || (VMRuntime.is64BitAbi(paramPackage.primaryCpuAbi))) {
      return;
    }
    paramPackage = paramPackage.nativeLibraryDir;
    try
    {
      this.mInstaller.linkNativeLibraryDirectory(str2, str1, paramPackage, paramInt1);
      return;
    }
    catch (InstallerConnection.InstallerException paramPackage)
    {
      Slog.e("PackageManager", "Failed to link native for " + str1 + ": " + paramPackage);
    }
  }
  
  private void prepareAppDataLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    if (paramPackage == null)
    {
      Slog.wtf("PackageManager", "Package was null!", new Throwable());
      return;
    }
    prepareAppDataLeafLIF(paramPackage, paramInt1, paramInt2);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        prepareAppDataLeafLIF((PackageParser.Package)paramPackage.childPackages.get(j), paramInt1, paramInt2);
        j += 1;
      }
    }
  }
  
  private void prepareAppDataLeafLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2)
  {
    ??? = paramPackage.volumeUuid;
    str = paramPackage.packageName;
    Object localObject2 = paramPackage.applicationInfo;
    int i = UserHandle.getAppId(((ApplicationInfo)localObject2).uid);
    Preconditions.checkNotNull(((ApplicationInfo)localObject2).seinfo);
    try
    {
      this.mInstaller.createAppData((String)???, str, paramInt1, paramInt2, i, ((ApplicationInfo)localObject2).seinfo, ((ApplicationInfo)localObject2).targetSdkVersion);
      if ((paramInt2 & 0x2) == 0) {}
    }
    catch (InstallerConnection.InstallerException localInstallerException3)
    {
      for (;;)
      {
        try
        {
          l = this.mInstaller.getAppDataInode((String)???, str, paramInt1, 2);
        }
        catch (InstallerConnection.InstallerException localInstallerException1)
        {
          long l;
          Slog.e("PackageManager", "Failed to find inode for " + str + ": " + localInstallerException1);
          continue;
        }
        synchronized (this.mPackages)
        {
          localObject2 = (PackageSetting)this.mSettings.mPackages.get(str);
          if (localObject2 != null) {
            ((PackageSetting)localObject2).setCeDataInode(l, paramInt1);
          }
          prepareAppDataContentsLeafLIF(paramPackage, paramInt1, paramInt2);
          return;
          localInstallerException3 = localInstallerException3;
          if ((((ApplicationInfo)localObject2).isSystemApp()) || (paramPackage.codePath.startsWith("/system/reserve")))
          {
            logCriticalInfo(6, "Failed to create app data for " + str + ", but trying to recover: " + localInstallerException3);
            destroyAppDataLeafLIF(paramPackage, paramInt1, 3);
            try
            {
              this.mInstaller.createAppData((String)???, str, paramInt1, 3, i, ((ApplicationInfo)localObject2).seinfo, ((ApplicationInfo)localObject2).targetSdkVersion);
              logCriticalInfo(3, "Recovery succeeded!");
            }
            catch (InstallerConnection.InstallerException localInstallerException2)
            {
              logCriticalInfo(3, "Recovery failed!");
            }
            continue;
          }
          Slog.e("PackageManager", "Failed to create app data for " + str + ": " + localInstallerException3);
        }
      }
    }
  }
  
  private void prepareUserDataLI(String paramString, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean)
  {
    ??? = (StorageManager)this.mContext.getSystemService(StorageManager.class);
    try
    {
      ((StorageManager)???).prepareUserStorage(paramString, paramInt1, paramInt2, paramInt3);
      if ((((paramInt3 & 0x1) != 0) && (!this.mOnlyCore)) || (((paramInt3 & 0x2) == 0) || (this.mOnlyCore))) {}
      return;
    }
    catch (Exception localException)
    {
      synchronized (this.mInstallLock)
      {
        do
        {
          for (;;)
          {
            this.mInstaller.createUserData(paramString, paramInt1, paramInt2, paramInt3);
            return;
            UserManagerService.enforceSerialNumber(Environment.getDataUserDeDirectory(paramString, paramInt1), paramInt2);
            if (Objects.equals(paramString, StorageManager.UUID_PRIVATE_INTERNAL)) {
              UserManagerService.enforceSerialNumber(Environment.getDataSystemDeDirectory(paramInt1), paramInt2);
            }
          }
          localException = localException;
          logCriticalInfo(5, "Destroying user " + paramInt1 + " on volume " + paramString + " because we failed to prepare: " + localException);
          destroyUserDataLI(paramString, paramInt1, 3);
          if (!paramBoolean) {
            break;
          }
          prepareUserDataLI(paramString, paramInt1, paramInt2, paramInt3, false);
          return;
          UserManagerService.enforceSerialNumber(Environment.getDataUserCeDirectory(paramString, paramInt1), paramInt2);
        } while (!Objects.equals(paramString, StorageManager.UUID_PRIVATE_INTERNAL));
        UserManagerService.enforceSerialNumber(Environment.getDataSystemCeDirectory(paramInt1), paramInt2);
      }
    }
  }
  
  private void primeDomainVerificationsLPw(int paramInt)
  {
    if (DEBUG_DOMAIN_VERIFICATION) {
      Slog.d("PackageManager", "Priming domain verifications in user " + paramInt);
    }
    Object localObject1 = SystemConfig.getInstance().getLinkedApps();
    ArraySet localArraySet = new ArraySet();
    localObject1 = ((Iterable)localObject1).iterator();
    while (((Iterator)localObject1).hasNext())
    {
      String str = (String)((Iterator)localObject1).next();
      Object localObject2 = (PackageParser.Package)this.mPackages.get(str);
      if (localObject2 != null)
      {
        if (!((PackageParser.Package)localObject2).isSystemApp())
        {
          Slog.w("PackageManager", "Non-system app '" + str + "' in sysconfig <app-link>");
        }
        else
        {
          localArraySet.clear();
          localObject2 = ((PackageParser.Package)localObject2).activities.iterator();
          while (((Iterator)localObject2).hasNext())
          {
            Iterator localIterator = ((PackageParser.Activity)((Iterator)localObject2).next()).intents.iterator();
            while (localIterator.hasNext())
            {
              PackageParser.ActivityIntentInfo localActivityIntentInfo = (PackageParser.ActivityIntentInfo)localIterator.next();
              if (hasValidDomains(localActivityIntentInfo)) {
                localArraySet.addAll(localActivityIntentInfo.getHostsList());
              }
            }
          }
          if (localArraySet.size() > 0)
          {
            if (DEBUG_DOMAIN_VERIFICATION) {
              Slog.v("PackageManager", "      + " + str);
            }
            this.mSettings.createIntentFilterVerificationIfNeededLPw(str, new ArrayList(localArraySet)).setStatus(0);
            this.mSettings.updateIntentFilterVerificationStatusLPw(str, 2, paramInt);
          }
          else
          {
            Slog.w("PackageManager", "Sysconfig <app-link> package '" + str + "' does not handle web links");
          }
        }
      }
      else {
        Slog.w("PackageManager", "Unknown package " + str + " in sysconfig <app-link>");
      }
    }
    scheduleWritePackageRestrictionsLocked(paramInt);
    scheduleWriteSettingsLocked();
  }
  
  private void processPendingInstall(final InstallArgs paramInstallArgs, final int paramInt)
  {
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        PackageManagerService.this.mHandler.removeCallbacks(this);
        Object localObject1 = new PackageManagerService.PackageInstalledInfo();
        ((PackageManagerService.PackageInstalledInfo)localObject1).setReturnCode(paramInt);
        ((PackageManagerService.PackageInstalledInfo)localObject1).uid = -1;
        ((PackageManagerService.PackageInstalledInfo)localObject1).pkg = null;
        ((PackageManagerService.PackageInstalledInfo)localObject1).removedInfo = null;
        if (((PackageManagerService.PackageInstalledInfo)localObject1).returnCode == 1) {
          paramInstallArgs.doPreInstall(((PackageManagerService.PackageInstalledInfo)localObject1).returnCode);
        }
        for (;;)
        {
          synchronized (PackageManagerService.this.mInstallLock)
          {
            PackageManagerService.-wrap27(PackageManagerService.this, paramInstallArgs, (PackageManagerService.PackageInstalledInfo)localObject1);
            paramInstallArgs.doPostInstall(((PackageManagerService.PackageInstalledInfo)localObject1).returnCode, ((PackageManagerService.PackageInstalledInfo)localObject1).uid);
            if (((PackageManagerService.PackageInstalledInfo)localObject1).removedInfo == null) {
              break label452;
            }
            int k;
            if (((PackageManagerService.PackageInstalledInfo)localObject1).removedInfo.removedPackage != null)
            {
              i = 1;
              if (((PackageManagerService.PackageInstalledInfo)localObject1).pkg != null) {
                break label457;
              }
              j = 0;
              if (i != 0) {
                break label477;
              }
              if ((0x8000 & j) == 0) {
                break label472;
              }
              i = 1;
              if (PackageManagerService.this.mNextInstallToken < 0) {
                PackageManagerService.this.mNextInstallToken = 1;
              }
              ??? = PackageManagerService.this;
              k = ((PackageManagerService)???).mNextInstallToken;
              ((PackageManagerService)???).mNextInstallToken = (k + 1);
              ??? = new PackageManagerService.PostInstallData(paramInstallArgs, (PackageManagerService.PackageInstalledInfo)localObject1);
              PackageManagerService.this.mRunningInstalls.put(k, ???);
              if (PackageManagerService.DEBUG_INSTALL) {
                Log.v("PackageManager", "+ starting restore round-trip " + k);
              }
              j = i;
              if (((PackageManagerService.PackageInstalledInfo)localObject1).returnCode == 1)
              {
                j = i;
                if (i != 0)
                {
                  ??? = IBackupManager.Stub.asInterface(ServiceManager.getService("backup"));
                  if (??? == null) {
                    break;
                  }
                  if (PackageManagerService.DEBUG_INSTALL) {
                    Log.v("PackageManager", "token " + k + " to BM for possible restore");
                  }
                  Trace.asyncTraceBegin(262144L, "restore", k);
                }
              }
            }
            try
            {
              if (!((IBackupManager)???).isBackupServiceActive(0)) {
                break label482;
              }
              ((IBackupManager)???).restoreAtInstall(((PackageManagerService.PackageInstalledInfo)localObject1).pkg.applicationInfo.packageName, k);
              j = i;
            }
            catch (Exception localException)
            {
              Slog.e("PackageManager", "Exception trying to enqueue restore", localException);
              j = 0;
              continue;
              Slog.e("PackageManager", "Backup Manager not found!");
              j = 0;
              continue;
            }
            catch (RemoteException localRemoteException)
            {
              j = i;
              continue;
            }
            if (j == 0)
            {
              if (PackageManagerService.DEBUG_INSTALL) {
                Log.v("PackageManager", "No restore - queue post-install for " + k);
              }
              Trace.asyncTraceBegin(262144L, "postInstall", k);
              localObject1 = PackageManagerService.this.mHandler.obtainMessage(9, k, 0);
              PackageManagerService.this.mHandler.sendMessage((Message)localObject1);
            }
            return;
          }
          i = 0;
          continue;
          label452:
          i = 0;
          continue;
          label457:
          j = ((PackageManagerService.PackageInstalledInfo)localObject2).pkg.applicationInfo.flags;
          continue;
          label472:
          i = 0;
          continue;
          label477:
          i = 0;
          continue;
          label482:
          j = 0;
        }
      }
    });
  }
  
  private void processRestoredPermissionGrantsLPr(XmlPullParser paramXmlPullParser, int paramInt)
    throws XmlPullParserException, IOException
  {
    Object localObject1 = null;
    int k = paramXmlPullParser.getDepth();
    for (;;)
    {
      int i = paramXmlPullParser.next();
      if ((i == 1) || ((i == 3) && (paramXmlPullParser.getDepth() <= k))) {
        break;
      }
      if ((i != 3) && (i != 4))
      {
        Object localObject2 = paramXmlPullParser.getName();
        if (((String)localObject2).equals("grant"))
        {
          localObject2 = paramXmlPullParser.getAttributeValue(null, "pkg");
          localObject1 = localObject2;
          if (DEBUG_BACKUP)
          {
            Slog.v("PackageManager", "+++ Restoring grants for package " + (String)localObject2);
            localObject1 = localObject2;
          }
        }
        else if (((String)localObject2).equals("perm"))
        {
          boolean bool = "true".equals(paramXmlPullParser.getAttributeValue(null, "g"));
          localObject2 = paramXmlPullParser.getAttributeValue(null, "name");
          int j = 0;
          if ("true".equals(paramXmlPullParser.getAttributeValue(null, "set"))) {
            j = 1;
          }
          i = j;
          if ("true".equals(paramXmlPullParser.getAttributeValue(null, "fixed"))) {
            i = j | 0x2;
          }
          j = i;
          if ("true".equals(paramXmlPullParser.getAttributeValue(null, "rou"))) {
            j = i | 0x8;
          }
          if (DEBUG_BACKUP) {
            Slog.v("PackageManager", "  + Restoring grant: pkg=" + (String)localObject1 + " perm=" + (String)localObject2 + " granted=" + bool + " bits=0x" + Integer.toHexString(j));
          }
          Object localObject3 = (PackageSetting)this.mSettings.mPackages.get(localObject1);
          if (localObject3 != null)
          {
            if (DEBUG_BACKUP) {
              Slog.v("PackageManager", "        + already installed; applying");
            }
            localObject3 = ((PackageSetting)localObject3).getPermissionsState();
            localObject2 = (BasePermission)this.mSettings.mPermissions.get(localObject2);
            if (localObject2 != null)
            {
              if (bool) {
                ((PermissionsState)localObject3).grantRuntimePermission((BasePermission)localObject2, paramInt);
              }
              if (j != 0) {
                ((PermissionsState)localObject3).updatePermissionFlags((BasePermission)localObject2, paramInt, 11, j);
              }
            }
          }
          else
          {
            if (DEBUG_BACKUP) {
              Slog.v("PackageManager", "        - not yet installed; saving for later");
            }
            this.mSettings.processRestoredPermissionGrantLPr((String)localObject1, (String)localObject2, bool, j, paramInt);
          }
        }
        else
        {
          reportSettingsProblem(5, "Unknown element under <perm-grant-backup>: " + (String)localObject2);
          XmlUtils.skipCurrentTag(paramXmlPullParser);
        }
      }
    }
    scheduleWriteSettingsLocked();
    this.mSettings.writeRuntimePermissionsForUserLPr(paramInt, false);
  }
  
  private void purgeOverlay()
  {
    File[] arrayOfFile = new File("/data/resource-cache").listFiles();
    if (arrayOfFile != null)
    {
      int i = 0;
      int j = arrayOfFile.length;
      while (i < j)
      {
        arrayOfFile[i].delete();
        i += 1;
      }
    }
  }
  
  private ResolveInfo queryCrossProfileIntents(List<CrossProfileIntentFilter> paramList, Intent paramIntent, String paramString, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (paramList != null)
    {
      SparseBooleanArray localSparseBooleanArray = new SparseBooleanArray();
      int m = paramList.size();
      int i = 0;
      if (i < m)
      {
        Object localObject = (CrossProfileIntentFilter)paramList.get(i);
        int n = ((CrossProfileIntentFilter)localObject).getTargetUserId();
        int j;
        label64:
        int k;
        if ((((CrossProfileIntentFilter)localObject).getFlags() & 0x2) != 0)
        {
          j = 1;
          if ((((CrossProfileIntentFilter)localObject).getFlags() & 0x4) == 0) {
            break label107;
          }
          k = 1;
          label77:
          if ((j == 0) && (!localSparseBooleanArray.get(n))) {
            break label113;
          }
        }
        for (;;)
        {
          i += 1;
          break;
          j = 0;
          break label64;
          label107:
          k = 0;
          break label77;
          label113:
          if ((k == 0) || (!paramBoolean))
          {
            localObject = createForwardingResolveInfo((CrossProfileIntentFilter)localObject, paramIntent, paramString, paramInt1, paramInt2);
            if (localObject != null) {
              return (ResolveInfo)localObject;
            }
            localSparseBooleanArray.put(n, true);
          }
        }
      }
    }
    return null;
  }
  
  private List<InstrumentationInfo> queryInstrumentationInternal(String paramString, int paramInt)
  {
    ArrayList localArrayList = new ArrayList();
    synchronized (this.mPackages)
    {
      Iterator localIterator = this.mInstrumentation.values().iterator();
      while (localIterator.hasNext())
      {
        Object localObject = (PackageParser.Instrumentation)localIterator.next();
        if ((paramString == null) || (paramString.equals(((PackageParser.Instrumentation)localObject).info.targetPackage)))
        {
          localObject = PackageParser.generateInstrumentationInfo((PackageParser.Instrumentation)localObject, paramInt);
          if (localObject != null) {
            localArrayList.add(localObject);
          }
        }
      }
    }
    return localArrayList;
  }
  
  private List<ResolveInfo> queryIntentActivitiesInternal(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return Collections.emptyList();
    }
    int m = updateFlagsForResolve(paramInt1, paramInt2, paramIntent);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "query intent activities");
    Object localObject3 = paramIntent.getComponent();
    Object localObject2 = localObject3;
    Object localObject1 = paramIntent;
    if (localObject3 == null)
    {
      localObject2 = localObject3;
      localObject1 = paramIntent;
      if (paramIntent.getSelector() != null)
      {
        localObject1 = paramIntent.getSelector();
        localObject2 = ((Intent)localObject1).getComponent();
      }
    }
    if (localObject2 != null)
    {
      paramIntent = new ArrayList(1);
      paramString = getActivityInfo((ComponentName)localObject2, m, paramInt2);
      if (paramString != null)
      {
        localObject1 = new ResolveInfo();
        ((ResolveInfo)localObject1).activityInfo = paramString;
        paramIntent.add(localObject1);
      }
      return paramIntent;
    }
    int i = 0;
    int j = 0;
    boolean bool1 = false;
    int k = 0;
    localObject3 = ((Intent)localObject1).getPackage();
    Object localObject5 = this.mPackages;
    if (localObject3 == null) {}
    for (;;)
    {
      try
      {
        paramIntent = getMatchingCrossProfileIntentFilters((Intent)localObject1, paramString, paramInt2);
        localObject2 = querySkipCurrentProfileIntents(paramIntent, (Intent)localObject1, paramString, m, paramInt2);
        if (localObject2 != null)
        {
          paramIntent = new ArrayList(1);
          paramIntent.add(localObject2);
          paramIntent = filterIfNotSystemUser(paramIntent, paramInt2);
          return paramIntent;
        }
        Object localObject4 = filterIfNotSystemUser(this.mActivities.queryIntent((Intent)localObject1, paramString, m, paramInt2), paramInt2);
        boolean bool2 = isEphemeralAllowed((Intent)localObject1, (List)localObject4, paramInt2, false);
        ResolveInfo localResolveInfo = queryCrossProfileIntents(paramIntent, (Intent)localObject1, paramString, m, paramInt2, hasNonNegativePriority((List)localObject4));
        paramInt1 = j;
        if (localResolveInfo != null)
        {
          paramInt1 = j;
          if (isUserEnabled(localResolveInfo.targetUserId))
          {
            if (filterIfNotSystemUser(Collections.singletonList(localResolveInfo), paramInt2).size() <= 0) {
              continue;
            }
            i = 1;
            paramInt1 = j;
            if (i != 0)
            {
              ((List)localObject4).add(localResolveInfo);
              paramInt1 = 1;
            }
          }
        }
        bool1 = bool2;
        j = k;
        paramIntent = (Intent)localObject4;
        i = paramInt1;
        if (hasWebURI((Intent)localObject1))
        {
          localObject2 = null;
          paramIntent = getProfileParent(paramInt2);
          if (paramIntent != null) {
            localObject2 = getCrossProfileDomainPreferredLpr((Intent)localObject1, paramString, m, paramInt2, paramIntent.id);
          }
          if (localObject2 != null)
          {
            if (localResolveInfo != null) {
              ((List)localObject4).remove(localResolveInfo);
            }
            if ((((List)localObject4).size() == 0) && (!bool2)) {
              continue;
            }
          }
          if (((List)localObject4).size() <= 1)
          {
            bool1 = bool2;
            j = k;
            paramIntent = (Intent)localObject4;
            i = paramInt1;
            if (!bool2) {}
          }
          else
          {
            paramIntent = filterCandidatesWithDomainPreferredActivitiesLPr((Intent)localObject1, m, (List)localObject4, (CrossProfileDomainInfo)localObject2, paramInt2);
            i = 1;
            j = k;
            bool1 = bool2;
          }
        }
        if (bool1)
        {
          Trace.traceBegin(262144L, "resolveEphemeral");
          localObject4 = this.mContext;
          localObject5 = this.mEphemeralResolverConnection;
          if (j == 0) {
            break label771;
          }
          localObject2 = localObject3;
          paramString = getEphemeralResolveInfo((Context)localObject4, (EphemeralResolverConnection)localObject5, (Intent)localObject1, paramString, paramInt2, (String)localObject2);
          if (paramString != null)
          {
            if (DEBUG_EPHEMERAL) {
              Slog.v("PackageManager", "Adding ephemeral installer to the ResolveInfo list");
            }
            localObject2 = new ResolveInfo(this.mEphemeralInstallerInfo);
            ((ResolveInfo)localObject2).ephemeralResolveInfo = paramString;
            ((ResolveInfo)localObject2).isDefault = true;
            ((ResolveInfo)localObject2).match = 5799936;
            ((ResolveInfo)localObject2).filter = new IntentFilter(((Intent)localObject1).getAction());
            ((ResolveInfo)localObject2).filter.addDataPath(((Intent)localObject1).getData().getPath(), 0);
            paramIntent.add(localObject2);
          }
          Trace.traceEnd(262144L);
        }
        if (i != 0) {
          Collections.sort(paramIntent, mResolvePrioritySorter);
        }
        return paramIntent;
        i = 0;
        continue;
        ((List)localObject4).add(((CrossProfileDomainInfo)localObject2).resolveInfo);
        return (List<ResolveInfo>)localObject4;
      }
      finally {}
      paramIntent = (PackageParser.Package)this.mPackages.get(localObject3);
      if (paramIntent != null)
      {
        paramIntent = filterIfNotSystemUser(this.mActivities.queryIntentForPackage((Intent)localObject1, paramString, m, paramIntent.activities, paramInt2), paramInt2);
        j = k;
      }
      else
      {
        bool1 = isEphemeralAllowed((Intent)localObject1, null, paramInt2, true);
        j = 1;
        paramIntent = new ArrayList();
        continue;
        label771:
        localObject2 = null;
      }
    }
  }
  
  private List<ResolveInfo> queryIntentActivityOptionsInternal(ComponentName paramComponentName, Intent[] paramArrayOfIntent, String[] paramArrayOfString, Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return Collections.emptyList();
    }
    int i1 = updateFlagsForResolve(paramInt1, paramInt2, paramIntent);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "query intent activity options");
    String str = paramIntent.getAction();
    List localList = queryIntentActivitiesInternal(paramIntent, paramString, i1 | 0x40, paramInt2);
    if (DEBUG_INTENT_MATCHING) {
      Log.v("PackageManager", "Query " + paramIntent + ": " + localList);
    }
    int i = 0;
    paramInt1 = 0;
    int j;
    int k;
    if (paramArrayOfIntent != null)
    {
      j = 0;
      i = paramInt1;
      if (j < paramArrayOfIntent.length)
      {
        paramString = paramArrayOfIntent[j];
        if (paramString == null) {
          i = paramInt1;
        }
        for (;;)
        {
          j += 1;
          paramInt1 = i;
          break;
          if (DEBUG_INTENT_MATCHING) {
            Log.v("PackageManager", "Specific #" + j + ": " + paramString);
          }
          paramIntent = paramString.getAction();
          Intent localIntent = paramIntent;
          if (str != null)
          {
            localIntent = paramIntent;
            if (str.equals(paramIntent)) {
              localIntent = null;
            }
          }
          paramIntent = null;
          ComponentName localComponentName = paramString.getComponent();
          Object localObject;
          if (localComponentName == null) {
            if (paramArrayOfString != null)
            {
              paramIntent = paramArrayOfString[j];
              paramIntent = resolveIntent(paramString, paramIntent, i1, paramInt2);
              i = paramInt1;
              if (paramIntent == null) {
                continue;
              }
              if (paramIntent == this.mResolveInfo) {}
              localObject = paramIntent.activityInfo;
              localComponentName = new ComponentName(((ActivityInfo)localObject).applicationInfo.packageName, ((ActivityInfo)localObject).name);
            }
          }
          do
          {
            if (DEBUG_INTENT_MATCHING) {
              Log.v("PackageManager", "Specific #" + j + ": " + localObject);
            }
            k = localList.size();
            i = paramInt1;
            while (i < k)
            {
              ResolveInfo localResolveInfo = (ResolveInfo)localList.get(i);
              int m;
              int n;
              if ((!localResolveInfo.activityInfo.name.equals(localComponentName.getClassName())) || (!localResolveInfo.activityInfo.applicationInfo.packageName.equals(localComponentName.getPackageName())))
              {
                m = k;
                n = i;
                paramString = paramIntent;
                if (localIntent != null)
                {
                  m = k;
                  n = i;
                  paramString = paramIntent;
                  if (!localResolveInfo.filter.matchAction(localIntent)) {}
                }
              }
              else
              {
                localList.remove(i);
                if (DEBUG_INTENT_MATCHING) {
                  Log.v("PackageManager", "Removing duplicate item from " + i + " due to specific " + paramInt1);
                }
                paramString = paramIntent;
                if (paramIntent == null) {
                  paramString = localResolveInfo;
                }
                n = i - 1;
                m = k - 1;
              }
              i = n + 1;
              k = m;
              paramIntent = paramString;
            }
            paramIntent = null;
            break;
            paramString = getActivityInfo(localComponentName, i1, paramInt2);
            localObject = paramString;
          } while (paramString != null);
          i = paramInt1;
          continue;
          paramString = paramIntent;
          if (paramIntent == null)
          {
            paramString = new ResolveInfo();
            paramString.activityInfo = ((ActivityInfo)localObject);
          }
          localList.add(paramInt1, paramString);
          paramString.specificIndex = j;
          i = paramInt1 + 1;
        }
      }
    }
    paramInt1 = localList.size();
    if (i < paramInt1 - 1)
    {
      paramArrayOfIntent = (ResolveInfo)localList.get(i);
      if (paramArrayOfIntent.filter == null) {
        paramInt2 = paramInt1;
      }
      for (;;)
      {
        i += 1;
        paramInt1 = paramInt2;
        break;
        paramArrayOfString = paramArrayOfIntent.filter.actionsIterator();
        paramInt2 = paramInt1;
        if (paramArrayOfString != null)
        {
          while (paramArrayOfString.hasNext())
          {
            paramIntent = (String)paramArrayOfString.next();
            if ((str == null) || (!str.equals(paramIntent)))
            {
              paramInt2 = i + 1;
              for (j = paramInt1;; j = paramInt1)
              {
                paramInt1 = j;
                if (paramInt2 >= j) {
                  break;
                }
                paramString = (ResolveInfo)localList.get(paramInt2);
                paramInt1 = j;
                k = paramInt2;
                if (paramString.filter != null)
                {
                  paramInt1 = j;
                  k = paramInt2;
                  if (paramString.filter.hasAction(paramIntent))
                  {
                    localList.remove(paramInt2);
                    if (DEBUG_INTENT_MATCHING) {
                      Log.v("PackageManager", "Removing duplicate item from " + paramInt2 + " due to action " + paramIntent + " at " + i);
                    }
                    k = paramInt2 - 1;
                    paramInt1 = j - 1;
                  }
                }
                paramInt2 = k + 1;
              }
            }
          }
          paramInt2 = paramInt1;
          if ((i1 & 0x40) == 0)
          {
            paramArrayOfIntent.filter = null;
            paramInt2 = paramInt1;
          }
        }
      }
    }
    if (paramComponentName != null)
    {
      paramInt2 = localList.size();
      paramInt1 = 0;
    }
    for (;;)
    {
      if (paramInt1 < paramInt2)
      {
        paramArrayOfIntent = ((ResolveInfo)localList.get(paramInt1)).activityInfo;
        if ((paramComponentName.getPackageName().equals(paramArrayOfIntent.applicationInfo.packageName)) && (paramComponentName.getClassName().equals(paramArrayOfIntent.name))) {
          localList.remove(paramInt1);
        }
      }
      else
      {
        if ((i1 & 0x40) != 0) {
          break;
        }
        paramInt2 = localList.size();
        paramInt1 = 0;
        while (paramInt1 < paramInt2)
        {
          ((ResolveInfo)localList.get(paramInt1)).filter = null;
          paramInt1 += 1;
        }
      }
      paramInt1 += 1;
    }
    if (DEBUG_INTENT_MATCHING) {
      Log.v("PackageManager", "Result: " + localList);
    }
    return localList;
  }
  
  private List<ResolveInfo> queryIntentContentProvidersInternal(Intent arg1, String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return Collections.emptyList();
    }
    paramInt1 = updateFlagsForResolve(paramInt1, paramInt2, ???);
    ComponentName localComponentName = ???.getComponent();
    Object localObject2 = localComponentName;
    Object localObject1 = ???;
    if (localComponentName == null)
    {
      localObject2 = localComponentName;
      localObject1 = ???;
      if (???.getSelector() != null)
      {
        localObject1 = ???.getSelector();
        localObject2 = ((Intent)localObject1).getComponent();
      }
    }
    if (localObject2 != null)
    {
      ??? = new ArrayList(1);
      paramString = getProviderInfo((ComponentName)localObject2, paramInt1, paramInt2);
      if (paramString != null)
      {
        localObject1 = new ResolveInfo();
        ((ResolveInfo)localObject1).providerInfo = paramString;
        ???.add(localObject1);
      }
      return (List<ResolveInfo>)???;
    }
    synchronized (this.mPackages)
    {
      localObject2 = ((Intent)localObject1).getPackage();
      if (localObject2 == null)
      {
        paramString = this.mProviders.queryIntent((Intent)localObject1, paramString, paramInt1, paramInt2);
        return paramString;
      }
      localObject2 = (PackageParser.Package)this.mPackages.get(localObject2);
      if (localObject2 != null)
      {
        paramString = this.mProviders.queryIntentForPackage((Intent)localObject1, paramString, paramInt1, ((PackageParser.Package)localObject2).providers, paramInt2);
        return paramString;
      }
      paramString = Collections.emptyList();
      return paramString;
    }
  }
  
  private List<ResolveInfo> queryIntentReceiversInternal(Intent arg1, String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return Collections.emptyList();
    }
    paramInt1 = updateFlagsForResolve(paramInt1, paramInt2, ???);
    ComponentName localComponentName = ???.getComponent();
    Object localObject2 = localComponentName;
    Object localObject1 = ???;
    if (localComponentName == null)
    {
      localObject2 = localComponentName;
      localObject1 = ???;
      if (???.getSelector() != null)
      {
        localObject1 = ???.getSelector();
        localObject2 = ((Intent)localObject1).getComponent();
      }
    }
    if (localObject2 != null)
    {
      ??? = new ArrayList(1);
      paramString = getReceiverInfo((ComponentName)localObject2, paramInt1, paramInt2);
      if (paramString != null)
      {
        localObject1 = new ResolveInfo();
        ((ResolveInfo)localObject1).activityInfo = paramString;
        ???.add(localObject1);
      }
      return (List<ResolveInfo>)???;
    }
    synchronized (this.mPackages)
    {
      localObject2 = ((Intent)localObject1).getPackage();
      if (localObject2 == null)
      {
        paramString = this.mReceivers.queryIntent((Intent)localObject1, paramString, paramInt1, paramInt2);
        return paramString;
      }
      localObject2 = (PackageParser.Package)this.mPackages.get(localObject2);
      if (localObject2 != null)
      {
        paramString = this.mReceivers.queryIntentForPackage((Intent)localObject1, paramString, paramInt1, ((PackageParser.Package)localObject2).receivers, paramInt2);
        return paramString;
      }
      paramString = Collections.emptyList();
      return paramString;
    }
  }
  
  private List<ResolveInfo> queryIntentServicesInternal(Intent arg1, String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return Collections.emptyList();
    }
    paramInt1 = updateFlagsForResolve(paramInt1, paramInt2, ???);
    ComponentName localComponentName = ???.getComponent();
    Object localObject2 = localComponentName;
    Object localObject1 = ???;
    if (localComponentName == null)
    {
      localObject2 = localComponentName;
      localObject1 = ???;
      if (???.getSelector() != null)
      {
        localObject1 = ???.getSelector();
        localObject2 = ((Intent)localObject1).getComponent();
      }
    }
    if (localObject2 != null)
    {
      ??? = new ArrayList(1);
      paramString = getServiceInfo((ComponentName)localObject2, paramInt1, paramInt2);
      if (paramString != null)
      {
        localObject1 = new ResolveInfo();
        ((ResolveInfo)localObject1).serviceInfo = paramString;
        ???.add(localObject1);
      }
      return (List<ResolveInfo>)???;
    }
    synchronized (this.mPackages)
    {
      localObject2 = ((Intent)localObject1).getPackage();
      if (localObject2 == null)
      {
        paramString = this.mServices.queryIntent((Intent)localObject1, paramString, paramInt1, paramInt2);
        return paramString;
      }
      localObject2 = (PackageParser.Package)this.mPackages.get(localObject2);
      if (localObject2 != null)
      {
        paramString = this.mServices.queryIntentForPackage((Intent)localObject1, paramString, paramInt1, ((PackageParser.Package)localObject2).services, paramInt2);
        return paramString;
      }
      paramString = Collections.emptyList();
      return paramString;
    }
  }
  
  private ResolveInfo querySkipCurrentProfileIntents(List<CrossProfileIntentFilter> paramList, Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    if (paramList != null)
    {
      int j = paramList.size();
      int i = 0;
      while (i < j)
      {
        Object localObject = (CrossProfileIntentFilter)paramList.get(i);
        if ((((CrossProfileIntentFilter)localObject).getFlags() & 0x2) != 0)
        {
          localObject = createForwardingResolveInfo((CrossProfileIntentFilter)localObject, paramIntent, paramString, paramInt1, paramInt2);
          if (localObject != null) {
            return (ResolveInfo)localObject;
          }
        }
        i += 1;
      }
    }
    return null;
  }
  
  private void reconcileApps(String paramString)
  {
    File[] arrayOfFile = FileUtils.listFilesOrEmpty(Environment.getDataAppDirectory(paramString));
    int k = arrayOfFile.length;
    int j = 0;
    if (j < k)
    {
      File localFile = arrayOfFile[j];
      int i;
      if ((PackageParser.isApkFile(localFile)) || (localFile.isDirectory())) {
        if (PackageInstallerService.isStageName(localFile.getName()))
        {
          i = 0;
          label57:
          if (i != 0) {
            break label78;
          }
        }
      }
      for (;;)
      {
        j += 1;
        break;
        i = 1;
        break label57;
        i = 0;
        break label57;
        try
        {
          label78:
          assertPackageKnown(paramString, PackageParser.parsePackageLite(localFile, 4).packageName);
        }
        catch (PackageParser.PackageParserException|PackageManagerException localPackageParserException)
        {
          logCriticalInfo(5, "Destroying " + localFile + " due to: " + localPackageParserException);
          synchronized (this.mInstallLock)
          {
            removeCodePathLI(localFile);
          }
        }
      }
    }
  }
  
  private void reconcileAppsDataLI(String paramString, int paramInt1, int paramInt2)
  {
    Slog.v("PackageManager", "reconcileAppsData for " + paramString + " u" + paramInt1 + " 0x" + Integer.toHexString(paramInt2));
    Object localObject2 = Environment.getDataUserCeDirectory(paramString, paramInt1);
    ??? = Environment.getDataUserDeDirectory(paramString, paramInt1);
    int j;
    int i;
    if ((paramInt2 & 0x2) != 0)
    {
      if ((!StorageManager.isFileEncryptedNativeOrEmulated()) || (StorageManager.isUserKeyUnlocked(paramInt1)))
      {
        localObject2 = FileUtils.listFilesOrEmpty((File)localObject2);
        j = localObject2.length;
        i = 0;
      }
      for (;;)
      {
        if (i < j)
        {
          Object localObject3 = localObject2[i];
          String str3 = ((File)localObject3).getName();
          try
          {
            assertPackageKnownAndInstalled(paramString, str3, paramInt1);
            i += 1;
            continue;
            throw new RuntimeException("Yikes, someone asked us to reconcile CE storage while " + paramInt1 + " was still locked; this would have caused massive data loss!");
          }
          catch (PackageManagerException localPackageManagerException2)
          {
            for (;;)
            {
              logCriticalInfo(5, "Destroying " + localObject3 + " due to: " + localPackageManagerException2);
              try
              {
                this.mInstaller.destroyAppData(paramString, str3, paramInt1, 2, 0L);
              }
              catch (InstallerConnection.InstallerException localInstallerException2)
              {
                logCriticalInfo(5, "Failed to destroy: " + localInstallerException2);
              }
            }
          }
        }
      }
    }
    if ((paramInt2 & 0x1) != 0)
    {
      ??? = FileUtils.listFilesOrEmpty((File)???);
      j = ???.length;
      i = 0;
      for (;;)
      {
        if (i < j)
        {
          localObject2 = ???[i];
          String str2 = ((File)localObject2).getName();
          try
          {
            assertPackageKnownAndInstalled(paramString, str2, paramInt1);
            i += 1;
          }
          catch (PackageManagerException localPackageManagerException1)
          {
            for (;;)
            {
              logCriticalInfo(5, "Destroying " + localObject2 + " due to: " + localPackageManagerException1);
              try
              {
                this.mInstaller.destroyAppData(paramString, str2, paramInt1, 1, 0L);
              }
              catch (InstallerConnection.InstallerException localInstallerException1)
              {
                logCriticalInfo(5, "Failed to destroy: " + localInstallerException1);
              }
            }
          }
        }
      }
    }
    for (;;)
    {
      synchronized (this.mPackages)
      {
        paramString = this.mSettings.getVolumePackagesLPr(paramString);
        i = 0;
        paramString = paramString.iterator();
        if (!paramString.hasNext()) {
          break;
        }
        ??? = (PackageSetting)paramString.next();
        String str1 = ((PackageSetting)???).name;
        if (((PackageSetting)???).pkg == null) {
          Slog.w("PackageManager", "Odd, missing scanned package " + str1);
        }
      }
      prepareAppDataLIF(((PackageSetting)???).pkg, paramInt1, paramInt2);
      if (maybeMigrateAppDataLIF(((PackageSetting)???).pkg, paramInt1)) {
        prepareAppDataLIF(((PackageSetting)???).pkg, paramInt1, paramInt2);
      }
      i += 1;
    }
    Slog.v("PackageManager", "reconcileAppsData finished " + i + " packages");
  }
  
  /* Error */
  private void reconcileUsers(String paramString)
  {
    // Byte code:
    //   0: new 1139	java/util/ArrayList
    //   3: dup
    //   4: invokespecial 1140	java/util/ArrayList:<init>	()V
    //   7: astore 5
    //   9: aload 5
    //   11: aload_1
    //   12: invokestatic 5746	android/os/Environment:getDataUserDeDirectory	(Ljava/lang/String;)Ljava/io/File;
    //   15: invokestatic 5696	android/os/FileUtils:listFilesOrEmpty	(Ljava/io/File;)[Ljava/io/File;
    //   18: invokestatic 5749	java/util/Collections:addAll	(Ljava/util/Collection;[Ljava/lang/Object;)Z
    //   21: pop
    //   22: aload 5
    //   24: aload_1
    //   25: invokestatic 5751	android/os/Environment:getDataUserCeDirectory	(Ljava/lang/String;)Ljava/io/File;
    //   28: invokestatic 5696	android/os/FileUtils:listFilesOrEmpty	(Ljava/io/File;)[Ljava/io/File;
    //   31: invokestatic 5749	java/util/Collections:addAll	(Ljava/util/Collection;[Ljava/lang/Object;)Z
    //   34: pop
    //   35: aload 5
    //   37: invokestatic 5753	android/os/Environment:getDataSystemDeDirectory	()Ljava/io/File;
    //   40: invokestatic 5696	android/os/FileUtils:listFilesOrEmpty	(Ljava/io/File;)[Ljava/io/File;
    //   43: invokestatic 5749	java/util/Collections:addAll	(Ljava/util/Collection;[Ljava/lang/Object;)Z
    //   46: pop
    //   47: aload 5
    //   49: invokestatic 5755	android/os/Environment:getDataSystemCeDirectory	()Ljava/io/File;
    //   52: invokestatic 5696	android/os/FileUtils:listFilesOrEmpty	(Ljava/io/File;)[Ljava/io/File;
    //   55: invokestatic 5749	java/util/Collections:addAll	(Ljava/util/Collection;[Ljava/lang/Object;)Z
    //   58: pop
    //   59: aload 5
    //   61: invokeinterface 1308 1 0
    //   66: astore 5
    //   68: aload 5
    //   70: invokeinterface 1313 1 0
    //   75: ifeq +216 -> 291
    //   78: aload 5
    //   80: invokeinterface 1317 1 0
    //   85: checkcast 1335	java/io/File
    //   88: astore 6
    //   90: aload 6
    //   92: invokevirtual 3463	java/io/File:isDirectory	()Z
    //   95: ifeq -27 -> 68
    //   98: aload 6
    //   100: invokevirtual 3460	java/io/File:getName	()Ljava/lang/String;
    //   103: invokestatic 4223	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   106: istore 4
    //   108: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   111: iload 4
    //   113: invokevirtual 3099	com/android/server/pm/UserManagerService:getUserInfo	(I)Landroid/content/pm/UserInfo;
    //   116: astore 7
    //   118: iconst_0
    //   119: istore_3
    //   120: aload 7
    //   122: ifnonnull +96 -> 218
    //   125: iconst_5
    //   126: new 1320	java/lang/StringBuilder
    //   129: dup
    //   130: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   133: ldc_w 5757
    //   136: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   139: aload 6
    //   141: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   144: ldc_w 5759
    //   147: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   150: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   153: invokestatic 1851	com/android/server/pm/PackageManagerService:logCriticalInfo	(ILjava/lang/String;)V
    //   156: iconst_1
    //   157: istore_2
    //   158: iload_2
    //   159: ifeq -91 -> 68
    //   162: aload_0
    //   163: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   166: astore 6
    //   168: aload 6
    //   170: monitorenter
    //   171: aload_0
    //   172: aload_1
    //   173: iload 4
    //   175: iconst_3
    //   176: invokespecial 5452	com/android/server/pm/PackageManagerService:destroyUserDataLI	(Ljava/lang/String;II)V
    //   179: aload 6
    //   181: monitorexit
    //   182: goto -114 -> 68
    //   185: astore 7
    //   187: ldc_w 391
    //   190: new 1320	java/lang/StringBuilder
    //   193: dup
    //   194: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   197: ldc_w 5761
    //   200: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   203: aload 6
    //   205: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   208: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   211: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   214: pop
    //   215: goto -147 -> 68
    //   218: iload_3
    //   219: istore_2
    //   220: aload_0
    //   221: getfield 1258	com/android/server/pm/PackageManagerService:mOnlyCore	Z
    //   224: ifne -66 -> 158
    //   227: aload 6
    //   229: aload 7
    //   231: getfield 5036	android/content/pm/UserInfo:serialNumber	I
    //   234: invokestatic 5446	com/android/server/pm/UserManagerService:enforceSerialNumber	(Ljava/io/File;I)V
    //   237: iload_3
    //   238: istore_2
    //   239: goto -81 -> 158
    //   242: astore 7
    //   244: iconst_5
    //   245: new 1320	java/lang/StringBuilder
    //   248: dup
    //   249: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   252: ldc_w 5757
    //   255: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   258: aload 6
    //   260: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   263: ldc_w 5763
    //   266: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   269: aload 7
    //   271: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   274: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   277: invokestatic 1851	com/android/server/pm/PackageManagerService:logCriticalInfo	(ILjava/lang/String;)V
    //   280: iconst_1
    //   281: istore_2
    //   282: goto -124 -> 158
    //   285: astore_1
    //   286: aload 6
    //   288: monitorexit
    //   289: aload_1
    //   290: athrow
    //   291: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	292	0	this	PackageManagerService
    //   0	292	1	paramString	String
    //   157	125	2	i	int
    //   119	119	3	j	int
    //   106	68	4	k	int
    //   7	72	5	localObject1	Object
    //   116	5	7	localUserInfo	UserInfo
    //   185	45	7	localNumberFormatException	NumberFormatException
    //   242	28	7	localIOException	IOException
    // Exception table:
    //   from	to	target	type
    //   98	118	185	java/lang/NumberFormatException
    //   227	237	242	java/io/IOException
    //   171	179	285	finally
  }
  
  private void removeDexFiles(List<String> paramList, String[] paramArrayOfString)
  {
    String str1;
    int i;
    int j;
    if (!paramList.isEmpty())
    {
      if (paramArrayOfString == null) {
        throw new IllegalStateException("instructionSet == null");
      }
      paramArrayOfString = InstructionSets.getDexCodeInstructionSets(paramArrayOfString);
      paramList = paramList.iterator();
      if (paramList.hasNext())
      {
        str1 = (String)paramList.next();
        i = 0;
        j = paramArrayOfString.length;
      }
    }
    while (i < j)
    {
      String str2 = paramArrayOfString[i];
      try
      {
        this.mInstaller.rmdex(str1, str2);
        i += 1;
        continue;
        return;
      }
      catch (InstallerConnection.InstallerException localInstallerException)
      {
        for (;;) {}
      }
    }
  }
  
  private static void removeKeystoreDataIfNeeded(int paramInt1, int paramInt2)
  {
    int i = 0;
    if (paramInt2 < 0) {
      return;
    }
    KeyStore localKeyStore = KeyStore.getInstance();
    if (localKeyStore != null)
    {
      if (paramInt1 == -1)
      {
        int[] arrayOfInt = sUserManager.getUserIds();
        int j = arrayOfInt.length;
        paramInt1 = i;
        while (paramInt1 < j)
        {
          localKeyStore.clearUid(UserHandle.getUid(arrayOfInt[paramInt1], paramInt2));
          paramInt1 += 1;
        }
      }
      localKeyStore.clearUid(UserHandle.getUid(paramInt1, paramInt2));
      return;
    }
    Slog.w("PackageManager", "Could not contact keystore to clear entries for app id " + paramInt2);
  }
  
  private void removeNativeBinariesLI(PackageSetting paramPackageSetting)
  {
    if (paramPackageSetting != null)
    {
      NativeLibraryHelper.removeNativeBinariesLI(paramPackageSetting.legacyNativeLibraryPathString);
      int i;
      if (paramPackageSetting.childPackageNames != null) {
        i = paramPackageSetting.childPackageNames.size();
      }
      for (;;)
      {
        int j = 0;
        label30:
        if (j < i) {
          synchronized (this.mPackages)
          {
            PackageSetting localPackageSetting = this.mSettings.peekPackageLPr((String)paramPackageSetting.childPackageNames.get(j));
            if (localPackageSetting != null) {
              NativeLibraryHelper.removeNativeBinariesLI(localPackageSetting.legacyNativeLibraryPathString);
            }
            j += 1;
            break label30;
            i = 0;
          }
        }
      }
    }
  }
  
  private void removePackageDataLIF(PackageSetting paramPackageSetting, int[] paramArrayOfInt, PackageRemovedInfo paramPackageRemovedInfo, int paramInt, boolean paramBoolean)
  {
    String str = paramPackageSetting.name;
    if (DEBUG_REMOVE) {
      Slog.d("PackageManager", "removePackageDataLI: " + paramPackageSetting);
    }
    for (;;)
    {
      Object localObject2;
      final PackageSetting localPackageSetting;
      Object localObject1;
      boolean bool;
      synchronized (this.mPackages)
      {
        localObject2 = (PackageParser.Package)this.mPackages.get(str);
        localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(str);
        if (paramPackageRemovedInfo != null)
        {
          paramPackageRemovedInfo.removedPackage = str;
          if (localPackageSetting != null)
          {
            localObject1 = localPackageSetting.queryInstalledUsers(sUserManager.getUserIds(), true);
            paramPackageRemovedInfo.removedUsers = ((int[])localObject1);
          }
        }
        else
        {
          if ((0x10000 & paramInt) == 0) {
            break label488;
          }
          bool = true;
          label129:
          removePackageLI(paramPackageSetting, bool);
          if ((paramInt & 0x1) == 0)
          {
            if (localObject2 == null) {
              break label494;
            }
            localObject1 = localObject2;
            label152:
            destroyAppDataLIF((PackageParser.Package)localObject1, -1, 3);
            destroyAppProfilesLIF((PackageParser.Package)localObject1, -1);
            if (paramPackageRemovedInfo != null) {
              paramPackageRemovedInfo.dataRemoved = true;
            }
            schedulePackageCleaning(str, -1, true);
          }
          localObject1 = this.mPackages;
          if (localPackageSetting == null) {
            break label528;
          }
          if ((paramInt & 0x1) != 0) {}
        }
      }
      try
      {
        clearIntentFilterVerificationsLPw(localPackageSetting.name, -1);
        clearDefaultBrowserIfNeeded(str);
        if (paramPackageRemovedInfo != null)
        {
          this.mSettings.mKeySetManagerService.removeAppKeySetDataLPw(str);
          paramPackageRemovedInfo.removedAppId = this.mSettings.removePackageLPw(str);
        }
        updatePermissionsLPw(localPackageSetting.name, null, 0);
        int i;
        if (localPackageSetting.sharedUser != null)
        {
          localObject2 = UserManagerService.getInstance().getUserIds();
          paramInt = 0;
          i = localObject2.length;
        }
        for (;;)
        {
          int j;
          if (paramInt < i)
          {
            j = localObject2[paramInt];
            j = this.mSettings.updateSharedUserPermsLPw(localPackageSetting, j);
            if ((j == -1) || (j >= 0)) {
              this.mHandler.post(new Runnable()
              {
                public void run()
                {
                  PackageManagerService.-wrap29(PackageManagerService.this, localPackageSetting.name, localPackageSetting.appId, "permission grant or revoke changed gids");
                }
              });
            }
          }
          else
          {
            clearPackagePreferredActivitiesLPw(localPackageSetting.name, -1);
            if ((paramArrayOfInt == null) || (paramPackageRemovedInfo == null) || (paramPackageRemovedInfo.origUsers == null)) {
              break label528;
            }
            if (DEBUG_REMOVE) {
              Slog.d("PackageManager", "Propagating install state across downgrade");
            }
            paramInt = 0;
            i = paramArrayOfInt.length;
            while (paramInt < i)
            {
              j = paramArrayOfInt[paramInt];
              bool = ArrayUtils.contains(paramPackageRemovedInfo.origUsers, j);
              if (DEBUG_REMOVE) {
                Slog.d("PackageManager", "    user " + j + " => " + bool);
              }
              paramPackageSetting.setInstalled(bool, j);
              paramInt += 1;
            }
            localObject1 = null;
            break;
            paramPackageSetting = finally;
            throw paramPackageSetting;
            label488:
            bool = false;
            break label129;
            label494:
            localObject1 = new PackageParser.Package(paramPackageSetting.name);
            ((PackageParser.Package)localObject1).setVolumeUuid(paramPackageSetting.volumeUuid);
            break label152;
          }
          paramInt += 1;
        }
        label528:
        if (paramBoolean) {
          this.mSettings.writeLPr();
        }
        if (paramPackageRemovedInfo != null) {
          removeKeystoreDataIfNeeded(-1, paramPackageRemovedInfo.removedAppId);
        }
        return;
      }
      finally {}
    }
  }
  
  private void removePackageLI(PackageParser.Package paramPackage, boolean paramBoolean)
  {
    PackageSetting localPackageSetting = (PackageSetting)paramPackage.mExtras;
    if (localPackageSetting != null) {
      removePackageLI(localPackageSetting, paramBoolean);
    }
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        localPackageSetting = (PackageSetting)((PackageParser.Package)paramPackage.childPackages.get(j)).mExtras;
        if (localPackageSetting != null) {
          removePackageLI(localPackageSetting, paramBoolean);
        }
        j += 1;
      }
    }
  }
  
  private void removeUnusedPackagesLPw(UserManagerService paramUserManagerService, final int paramInt)
  {
    paramUserManagerService = paramUserManagerService.getUserIds();
    Iterator localIterator = this.mSettings.mPackages.values().iterator();
    while (localIterator.hasNext())
    {
      PackageSetting localPackageSetting = (PackageSetting)localIterator.next();
      if (localPackageSetting.pkg != null)
      {
        final String str = localPackageSetting.pkg.packageName;
        if ((localPackageSetting.pkgFlags & 0x1) == 0)
        {
          boolean bool2 = shouldKeepUninstalledPackageLPr(str);
          boolean bool1;
          label89:
          int i;
          if (bool2)
          {
            bool1 = bool2;
            if (!bool1) {
              this.mHandler.post(new Runnable()
              {
                public void run()
                {
                  PackageManagerService.-wrap11(PackageManagerService.this, str, paramInt, 0);
                }
              });
            }
          }
          else
          {
            i = 0;
          }
          for (;;)
          {
            bool1 = bool2;
            if (i >= paramUserManagerService.length) {
              break label89;
            }
            if ((paramUserManagerService[i] != paramInt) && (localPackageSetting.getInstalled(paramUserManagerService[i])))
            {
              bool1 = true;
              break label89;
              break;
            }
            i += 1;
          }
        }
      }
    }
  }
  
  /* Error */
  private void replaceNonSystemPackageLIF(PackageParser.Package arg1, PackageParser.Package arg2, int paramInt1, int paramInt2, UserHandle paramUserHandle, int[] paramArrayOfInt, String paramString, PackageInstalledInfo paramPackageInstalledInfo)
  {
    // Byte code:
    //   0: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   3: ifeq +40 -> 43
    //   6: ldc_w 391
    //   9: new 1320	java/lang/StringBuilder
    //   12: dup
    //   13: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   16: ldc_w 5814
    //   19: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   22: aload_2
    //   23: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   26: ldc_w 5816
    //   29: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   32: aload_1
    //   33: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   36: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   39: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   42: pop
    //   43: aload_1
    //   44: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   47: astore 17
    //   49: iconst_1
    //   50: istore 11
    //   52: iconst_0
    //   53: istore 12
    //   55: ldc_w 351
    //   58: iload 4
    //   60: iand
    //   61: ifne +309 -> 370
    //   64: iconst_1
    //   65: istore 9
    //   67: iload 9
    //   69: ifeq +307 -> 376
    //   72: iconst_0
    //   73: istore 10
    //   75: iload 10
    //   77: iconst_1
    //   78: ior
    //   79: istore 10
    //   81: aload_2
    //   82: getfield 2845	android/content/pm/PackageParser$Package:mExtras	Ljava/lang/Object;
    //   85: ifnull +298 -> 383
    //   88: aload_2
    //   89: getfield 2845	android/content/pm/PackageParser$Package:mExtras	Ljava/lang/Object;
    //   92: checkcast 1615	com/android/server/pm/PackageSetting
    //   95: getfield 3962	com/android/server/pm/PackageSetting:lastUpdateTime	J
    //   98: lstore 14
    //   100: aload_0
    //   101: aload 17
    //   103: aconst_null
    //   104: iconst_1
    //   105: aload 6
    //   107: iload 10
    //   109: aload 8
    //   111: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   114: iconst_1
    //   115: aload_2
    //   116: invokespecial 3354	com/android/server/pm/PackageManagerService:deletePackageLIF	(Ljava/lang/String;Landroid/os/UserHandle;Z[IILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;ZLandroid/content/pm/PackageParser$Package;)Z
    //   119: ifne +270 -> 389
    //   122: aload 8
    //   124: bipush -10
    //   126: ldc_w 5818
    //   129: invokevirtual 4669	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(ILjava/lang/String;)V
    //   132: iconst_0
    //   133: istore 4
    //   135: iload 12
    //   137: istore_3
    //   138: aload 8
    //   140: getfield 4530	com/android/server/pm/PackageManagerService$PackageInstalledInfo:returnCode	I
    //   143: iconst_1
    //   144: if_icmpeq +672 -> 816
    //   147: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   150: ifeq +31 -> 181
    //   153: ldc_w 391
    //   156: new 1320	java/lang/StringBuilder
    //   159: dup
    //   160: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   163: ldc_w 5820
    //   166: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   169: aload 17
    //   171: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   174: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   177: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   180: pop
    //   181: iload_3
    //   182: ifeq +23 -> 205
    //   185: aload_0
    //   186: aload 17
    //   188: aconst_null
    //   189: iconst_1
    //   190: aload 6
    //   192: iload 10
    //   194: aload 8
    //   196: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   199: iconst_1
    //   200: aconst_null
    //   201: invokespecial 3354	com/android/server/pm/PackageManagerService:deletePackageLIF	(Ljava/lang/String;Landroid/os/UserHandle;Z[IILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;ZLandroid/content/pm/PackageParser$Package;)Z
    //   204: pop
    //   205: iload 4
    //   207: ifeq +162 -> 369
    //   210: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   213: ifeq +30 -> 243
    //   216: ldc_w 391
    //   219: new 1320	java/lang/StringBuilder
    //   222: dup
    //   223: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   226: ldc_w 5822
    //   229: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   232: aload_1
    //   233: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   236: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   239: invokestatic 1333	android/util/Slog:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   242: pop
    //   243: new 1335	java/io/File
    //   246: dup
    //   247: aload_1
    //   248: getfield 2967	android/content/pm/PackageParser$Package:codePath	Ljava/lang/String;
    //   251: invokespecial 1338	java/io/File:<init>	(Ljava/lang/String;)V
    //   254: astore_2
    //   255: aload_1
    //   256: invokestatic 953	com/android/server/pm/PackageManagerService:isExternal	(Landroid/content/pm/PackageParser$Package;)Z
    //   259: istore 16
    //   261: aload_0
    //   262: getfield 1366	com/android/server/pm/PackageManagerService:mDefParseFlags	I
    //   265: istore 9
    //   267: aload_1
    //   268: invokevirtual 3482	android/content/pm/PackageParser$Package:isForwardLocked	()Z
    //   271: ifeq +486 -> 757
    //   274: bipush 16
    //   276: istore_3
    //   277: iload 16
    //   279: ifeq +483 -> 762
    //   282: bipush 32
    //   284: istore 4
    //   286: aload_0
    //   287: aload_2
    //   288: iload 9
    //   290: iconst_2
    //   291: ior
    //   292: iload_3
    //   293: ior
    //   294: iload 4
    //   296: ior
    //   297: bipush 72
    //   299: lload 14
    //   301: aconst_null
    //   302: invokespecial 715	com/android/server/pm/PackageManagerService:scanPackageTracedLI	(Ljava/io/File;IIJLandroid/os/UserHandle;)Landroid/content/pm/PackageParser$Package;
    //   305: pop
    //   306: aload_0
    //   307: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   310: astore_2
    //   311: aload_2
    //   312: monitorenter
    //   313: aload_0
    //   314: aload_1
    //   315: aload 7
    //   317: invokespecial 5826	com/android/server/pm/PackageManagerService:setInstallerPackageNameLPw	(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;)V
    //   320: aload_0
    //   321: aload_1
    //   322: iconst_1
    //   323: invokespecial 5828	com/android/server/pm/PackageManagerService:updatePermissionsLPw	(Landroid/content/pm/PackageParser$Package;I)V
    //   326: aload_0
    //   327: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   330: invokevirtual 2063	com/android/server/pm/Settings:writeLPr	()V
    //   333: aload_2
    //   334: monitorexit
    //   335: ldc_w 391
    //   338: new 1320	java/lang/StringBuilder
    //   341: dup
    //   342: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   345: ldc_w 5830
    //   348: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   351: aload 17
    //   353: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   356: ldc_w 5832
    //   359: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   362: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   365: invokestatic 1955	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   368: pop
    //   369: return
    //   370: iconst_0
    //   371: istore 9
    //   373: goto -306 -> 67
    //   376: bipush 8
    //   378: istore 10
    //   380: goto -305 -> 75
    //   383: lconst_0
    //   384: lstore 14
    //   386: goto -286 -> 100
    //   389: aload_1
    //   390: invokevirtual 3482	android/content/pm/PackageParser$Package:isForwardLocked	()Z
    //   393: ifne +10 -> 403
    //   396: aload_1
    //   397: invokestatic 953	com/android/server/pm/PackageManagerService:isExternal	(Landroid/content/pm/PackageParser$Package;)Z
    //   400: ifeq +91 -> 491
    //   403: getstatic 985	com/android/server/pm/PackageManagerService:DEBUG_INSTALL	Z
    //   406: ifeq +36 -> 442
    //   409: ldc_w 391
    //   412: new 1320	java/lang/StringBuilder
    //   415: dup
    //   416: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   419: ldc_w 4568
    //   422: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   425: aload_1
    //   426: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   429: ldc_w 5834
    //   432: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   435: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   438: invokestatic 1955	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   441: pop
    //   442: aload_1
    //   443: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   446: getfield 2770	android/content/pm/ApplicationInfo:uid	I
    //   449: istore 13
    //   451: new 1139	java/util/ArrayList
    //   454: dup
    //   455: iconst_1
    //   456: invokespecial 4571	java/util/ArrayList:<init>	(I)V
    //   459: astore 18
    //   461: aload 18
    //   463: aload_1
    //   464: getfield 1908	android/content/pm/PackageParser$Package:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   467: getfield 3113	android/content/pm/ApplicationInfo:packageName	Ljava/lang/String;
    //   470: invokevirtual 2294	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   473: pop
    //   474: aload_0
    //   475: iconst_0
    //   476: iconst_1
    //   477: aload 18
    //   479: iconst_1
    //   480: newarray <illegal type>
    //   482: dup
    //   483: iconst_0
    //   484: iload 13
    //   486: iastore
    //   487: aconst_null
    //   488: invokespecial 4575	com/android/server/pm/PackageManagerService:sendResourcesChangedBroadcast	(ZZLjava/util/ArrayList;[ILandroid/content/IIntentReceiver;)V
    //   491: aload_0
    //   492: aload_2
    //   493: iconst_m1
    //   494: sipush 515
    //   497: invokespecial 793	com/android/server/pm/PackageManagerService:clearAppDataLIF	(Landroid/content/pm/PackageParser$Package;II)V
    //   500: aload_0
    //   501: aload_1
    //   502: iconst_m1
    //   503: invokespecial 5836	com/android/server/pm/PackageManagerService:clearAppProfilesLIF	(Landroid/content/pm/PackageParser$Package;I)V
    //   506: aload_0
    //   507: aload_2
    //   508: iload_3
    //   509: iload 4
    //   511: bipush 64
    //   513: ior
    //   514: invokestatic 4674	java/lang/System:currentTimeMillis	()J
    //   517: aload 5
    //   519: invokespecial 4677	com/android/server/pm/PackageManagerService:scanPackageTracedLI	(Landroid/content/pm/PackageParser$Package;IIJLandroid/os/UserHandle;)Landroid/content/pm/PackageParser$Package;
    //   522: astore 18
    //   524: aload_0
    //   525: aload 18
    //   527: aload 7
    //   529: aload 6
    //   531: aload 8
    //   533: aload 5
    //   535: invokespecial 4681	com/android/server/pm/PackageManagerService:updateSettingsLI	(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;[ILcom/android/server/pm/PackageManagerService$PackageInstalledInfo;Landroid/os/UserHandle;)V
    //   538: aload_0
    //   539: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   542: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   545: aload 17
    //   547: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   550: checkcast 1615	com/android/server/pm/PackageSetting
    //   553: astore 5
    //   555: iload 9
    //   557: ifne +134 -> 691
    //   560: aload 5
    //   562: getfield 5839	com/android/server/pm/PackageSetting:oldCodePaths	Ljava/util/Set;
    //   565: ifnonnull +15 -> 580
    //   568: aload 5
    //   570: new 1056	android/util/ArraySet
    //   573: dup
    //   574: invokespecial 1057	android/util/ArraySet:<init>	()V
    //   577: putfield 5839	com/android/server/pm/PackageSetting:oldCodePaths	Ljava/util/Set;
    //   580: aload 5
    //   582: getfield 5839	com/android/server/pm/PackageSetting:oldCodePaths	Ljava/util/Set;
    //   585: iconst_1
    //   586: anewarray 1071	java/lang/String
    //   589: dup
    //   590: iconst_0
    //   591: aload_1
    //   592: getfield 3143	android/content/pm/PackageParser$Package:baseCodePath	Ljava/lang/String;
    //   595: aastore
    //   596: invokestatic 5749	java/util/Collections:addAll	(Ljava/util/Collection;[Ljava/lang/Object;)Z
    //   599: pop
    //   600: aload_1
    //   601: getfield 3769	android/content/pm/PackageParser$Package:splitCodePaths	[Ljava/lang/String;
    //   604: ifnull +16 -> 620
    //   607: aload 5
    //   609: getfield 5839	com/android/server/pm/PackageSetting:oldCodePaths	Ljava/util/Set;
    //   612: aload_1
    //   613: getfield 3769	android/content/pm/PackageParser$Package:splitCodePaths	[Ljava/lang/String;
    //   616: invokestatic 5749	java/util/Collections:addAll	(Ljava/util/Collection;[Ljava/lang/Object;)Z
    //   619: pop
    //   620: aload 5
    //   622: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   625: ifnull +117 -> 742
    //   628: aload 5
    //   630: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   633: invokeinterface 1676 1 0
    //   638: iconst_1
    //   639: isub
    //   640: istore_3
    //   641: iload_3
    //   642: iflt +100 -> 742
    //   645: aload 5
    //   647: getfield 3218	com/android/server/pm/PackageSetting:childPackageNames	Ljava/util/List;
    //   650: iload_3
    //   651: invokeinterface 2440 2 0
    //   656: checkcast 1071	java/lang/String
    //   659: astore 19
    //   661: aload_0
    //   662: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   665: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   668: aload 19
    //   670: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   673: checkcast 1615	com/android/server/pm/PackageSetting
    //   676: aload 5
    //   678: getfield 5839	com/android/server/pm/PackageSetting:oldCodePaths	Ljava/util/Set;
    //   681: putfield 5839	com/android/server/pm/PackageSetting:oldCodePaths	Ljava/util/Set;
    //   684: iload_3
    //   685: iconst_1
    //   686: isub
    //   687: istore_3
    //   688: goto -47 -> 641
    //   691: aload 5
    //   693: aconst_null
    //   694: putfield 5839	com/android/server/pm/PackageSetting:oldCodePaths	Ljava/util/Set;
    //   697: goto -77 -> 620
    //   700: astore 5
    //   702: aload 8
    //   704: new 1320	java/lang/StringBuilder
    //   707: dup
    //   708: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   711: ldc_w 4683
    //   714: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   717: aload_2
    //   718: getfield 2967	android/content/pm/PackageParser$Package:codePath	Ljava/lang/String;
    //   721: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   724: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   727: aload 5
    //   729: invokevirtual 4686	com/android/server/pm/PackageManagerService$PackageInstalledInfo:setError	(Ljava/lang/String;Lcom/android/server/pm/PackageManagerException;)V
    //   732: iload 12
    //   734: istore_3
    //   735: iload 11
    //   737: istore 4
    //   739: goto -601 -> 138
    //   742: aload_0
    //   743: aload 18
    //   745: invokespecial 3421	com/android/server/pm/PackageManagerService:prepareAppDataAfterInstallLIF	(Landroid/content/pm/PackageParser$Package;)V
    //   748: iconst_1
    //   749: istore_3
    //   750: iload 11
    //   752: istore 4
    //   754: goto -616 -> 138
    //   757: iconst_0
    //   758: istore_3
    //   759: goto -482 -> 277
    //   762: iconst_0
    //   763: istore 4
    //   765: goto -479 -> 286
    //   768: astore_1
    //   769: ldc_w 391
    //   772: new 1320	java/lang/StringBuilder
    //   775: dup
    //   776: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   779: ldc_w 5841
    //   782: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   785: aload 17
    //   787: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   790: ldc_w 5843
    //   793: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   796: aload_1
    //   797: invokevirtual 1937	com/android/server/pm/PackageManagerException:getMessage	()Ljava/lang/String;
    //   800: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   803: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   806: invokestatic 1934	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   809: pop
    //   810: return
    //   811: astore_1
    //   812: aload_2
    //   813: monitorexit
    //   814: aload_1
    //   815: athrow
    //   816: aload_0
    //   817: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   820: astore_1
    //   821: aload_1
    //   822: monitorenter
    //   823: aload_0
    //   824: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   827: aload_2
    //   828: getfield 2375	android/content/pm/PackageParser$Package:packageName	Ljava/lang/String;
    //   831: invokevirtual 1722	com/android/server/pm/Settings:peekPackageLPr	(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
    //   834: astore_2
    //   835: aload_2
    //   836: ifnull +160 -> 996
    //   839: aload 8
    //   841: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   844: astore 5
    //   846: aload_0
    //   847: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   850: aload_2
    //   851: getfield 1622	com/android/server/pm/PackageSetting:name	Ljava/lang/String;
    //   854: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   857: ifnonnull +149 -> 1006
    //   860: iconst_1
    //   861: istore 16
    //   863: aload 5
    //   865: iload 16
    //   867: putfield 3312	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedForAllUsers	Z
    //   870: aload 8
    //   872: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   875: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   878: ifnull +118 -> 996
    //   881: aload 8
    //   883: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   886: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   889: invokevirtual 1522	android/util/ArrayMap:size	()I
    //   892: iconst_1
    //   893: isub
    //   894: istore_3
    //   895: iload_3
    //   896: iflt +100 -> 996
    //   899: aload 8
    //   901: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   904: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   907: iload_3
    //   908: invokevirtual 1594	android/util/ArrayMap:keyAt	(I)Ljava/lang/Object;
    //   911: checkcast 1071	java/lang/String
    //   914: astore_2
    //   915: aload 8
    //   917: getfield 4724	com/android/server/pm/PackageManagerService$PackageInstalledInfo:addedChildPackages	Landroid/util/ArrayMap;
    //   920: aload_2
    //   921: invokevirtual 1916	android/util/ArrayMap:containsKey	(Ljava/lang/Object;)Z
    //   924: ifeq +19 -> 943
    //   927: aload 8
    //   929: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   932: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   935: iload_3
    //   936: invokevirtual 1629	android/util/ArrayMap:removeAt	(I)Ljava/lang/Object;
    //   939: pop
    //   940: goto +59 -> 999
    //   943: aload 8
    //   945: getfield 4534	com/android/server/pm/PackageManagerService$PackageInstalledInfo:removedInfo	Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
    //   948: getfield 3215	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedChildPackages	Landroid/util/ArrayMap;
    //   951: iload_3
    //   952: invokevirtual 1526	android/util/ArrayMap:valueAt	(I)Ljava/lang/Object;
    //   955: checkcast 174	com/android/server/pm/PackageManagerService$PackageRemovedInfo
    //   958: astore_2
    //   959: aload_0
    //   960: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   963: aload_2
    //   964: getfield 2955	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedPackage	Ljava/lang/String;
    //   967: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   970: ifnonnull +20 -> 990
    //   973: iconst_1
    //   974: istore 16
    //   976: aload_2
    //   977: iload 16
    //   979: putfield 3312	com/android/server/pm/PackageManagerService$PackageRemovedInfo:removedForAllUsers	Z
    //   982: goto +17 -> 999
    //   985: astore_2
    //   986: aload_1
    //   987: monitorexit
    //   988: aload_2
    //   989: athrow
    //   990: iconst_0
    //   991: istore 16
    //   993: goto -17 -> 976
    //   996: aload_1
    //   997: monitorexit
    //   998: return
    //   999: iload_3
    //   1000: iconst_1
    //   1001: isub
    //   1002: istore_3
    //   1003: goto -108 -> 895
    //   1006: iconst_0
    //   1007: istore 16
    //   1009: goto -146 -> 863
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	1012	0	this	PackageManagerService
    //   0	1012	3	paramInt1	int
    //   0	1012	4	paramInt2	int
    //   0	1012	5	paramUserHandle	UserHandle
    //   0	1012	6	paramArrayOfInt	int[]
    //   0	1012	7	paramString	String
    //   0	1012	8	paramPackageInstalledInfo	PackageInstalledInfo
    //   65	491	9	i	int
    //   73	306	10	j	int
    //   50	701	11	k	int
    //   53	680	12	m	int
    //   449	36	13	n	int
    //   98	287	14	l	long
    //   259	749	16	bool	boolean
    //   47	739	17	str1	String
    //   459	285	18	localObject	Object
    //   659	10	19	str2	String
    // Exception table:
    //   from	to	target	type
    //   506	555	700	com/android/server/pm/PackageManagerException
    //   560	580	700	com/android/server/pm/PackageManagerException
    //   580	620	700	com/android/server/pm/PackageManagerException
    //   620	641	700	com/android/server/pm/PackageManagerException
    //   645	684	700	com/android/server/pm/PackageManagerException
    //   691	697	700	com/android/server/pm/PackageManagerException
    //   742	748	700	com/android/server/pm/PackageManagerException
    //   286	306	768	com/android/server/pm/PackageManagerException
    //   313	333	811	finally
    //   823	835	985	finally
    //   839	860	985	finally
    //   863	895	985	finally
    //   899	940	985	finally
    //   943	973	985	finally
    //   976	982	985	finally
  }
  
  private void replacePackageLIF(PackageParser.Package paramPackage, int paramInt1, int paramInt2, UserHandle paramUserHandle, String paramString, PackageInstalledInfo paramPackageInstalledInfo)
  {
    int i;
    Object localObject2;
    if ((paramInt1 & 0x800) != 0)
    {
      i = 1;
      localObject2 = paramPackage.packageName;
    }
    for (;;)
    {
      PackageParser.Package localPackage;
      int j;
      int k;
      Object localObject4;
      Object localObject5;
      synchronized (this.mPackages)
      {
        localPackage = (PackageParser.Package)this.mPackages.get(localObject2);
        if (DEBUG_INSTALL) {
          Slog.d("PackageManager", "replacePackageLI: new=" + paramPackage + ", old=" + localPackage);
        }
        boolean bool;
        if (localPackage.applicationInfo.targetSdkVersion == 10000)
        {
          j = 1;
          if (paramPackage.applicationInfo.targetSdkVersion != 10000) {
            continue;
          }
          k = 1;
          break label1046;
          bool = localPackage.applicationInfo.isEphemeralApp();
          if ((i != 0) && (!bool)) {
            continue;
          }
          ??? = (PackageSetting)this.mSettings.mPackages.get(localObject2);
          if (!shouldCheckUpgradeKeySetLP((PackageSetting)???, paramInt2)) {
            continue;
          }
          if (checkUpgradeKeySetLP((PackageSetting)???, paramPackage)) {
            continue;
          }
          paramPackageInstalledInfo.setError(-7, "New package not signed by keys specified by upgrade-keysets: " + (String)localObject2);
          return;
          i = 0;
          break;
        }
        j = 0;
        continue;
        k = 0;
        break label1046;
        if ((paramInt1 & 0x1000) != 0) {
          continue;
        }
        Slog.w("PackageManager", "Can't install package targeting released sdk");
        paramPackageInstalledInfo.setReturnCode(-7);
        return;
        Slog.w("PackageManager", "Can't replace app with ephemeral: " + (String)localObject2);
        paramPackageInstalledInfo.setReturnCode(-116);
        return;
        if (compareSignatures(localPackage.mSignatures, paramPackage.mSignatures) != 0)
        {
          paramPackageInstalledInfo.setError(-7, "New package has a different signature: " + (String)localObject2);
          return;
        }
        if (localPackage.restrictUpdateHash != null)
        {
          bool = localPackage.isSystemApp();
          if (bool)
          {
            try
            {
              localObject4 = MessageDigest.getInstance("SHA-512");
              updateDigest((MessageDigest)localObject4, new File(paramPackage.baseCodePath));
              if (!ArrayUtils.isEmpty(paramPackage.splitCodePaths))
              {
                localObject5 = paramPackage.splitCodePaths;
                i = 0;
                j = localObject5.length;
                if (i < j)
                {
                  updateDigest((MessageDigest)localObject4, new File(localObject5[i]));
                  i += 1;
                  continue;
                }
              }
              localObject4 = ((MessageDigest)localObject4).digest();
              if (!Arrays.equals(localPackage.restrictUpdateHash, (byte[])localObject4))
              {
                paramPackageInstalledInfo.setError(-2, "New package fails restrict-update check: " + (String)localObject2);
                return;
              }
            }
            catch (NoSuchAlgorithmException|IOException paramPackage)
            {
              paramPackageInstalledInfo.setError(-2, "Could not compute hash: " + (String)localObject2);
              return;
            }
            paramPackage.restrictUpdateHash = localPackage.restrictUpdateHash;
          }
        }
        localObject2 = getParentOrChildPackageChangedSharedUser(localPackage, paramPackage);
        if (localObject2 != null)
        {
          paramPackageInstalledInfo.setError(-8, "Package " + (String)localObject2 + " tried to change user " + localPackage.mSharedUserId);
          return;
        }
        localObject2 = sUserManager.getUserIds();
        ??? = ((PackageSetting)???).queryInstalledUsers((int[])localObject2, true);
        paramPackageInstalledInfo.removedInfo = new PackageRemovedInfo();
        paramPackageInstalledInfo.removedInfo.uid = localPackage.applicationInfo.uid;
        paramPackageInstalledInfo.removedInfo.removedPackage = localPackage.packageName;
        paramPackageInstalledInfo.removedInfo.isUpdate = true;
        paramPackageInstalledInfo.removedInfo.origUsers = ((int[])???);
        if (localPackage.childPackages != null)
        {
          i = localPackage.childPackages.size();
          j = 0;
          if (j >= i) {
            break label958;
          }
          int m = 0;
          ??? = (PackageParser.Package)localPackage.childPackages.get(j);
          k = m;
          if (paramPackageInstalledInfo.addedChildPackages != null)
          {
            ??? = (PackageInstalledInfo)paramPackageInstalledInfo.addedChildPackages.get(((PackageParser.Package)???).packageName);
            k = m;
            if (??? != null)
            {
              ((PackageInstalledInfo)???).removedInfo.uid = ((PackageParser.Package)???).applicationInfo.uid;
              ((PackageInstalledInfo)???).removedInfo.removedPackage = ((PackageParser.Package)???).packageName;
              ((PackageInstalledInfo)???).removedInfo.isUpdate = true;
              k = 1;
            }
          }
          if (k == 0)
          {
            localObject4 = new PackageRemovedInfo();
            ((PackageRemovedInfo)localObject4).removedPackage = ((PackageParser.Package)???).packageName;
            ((PackageRemovedInfo)localObject4).isUpdate = false;
            ((PackageRemovedInfo)localObject4).dataRemoved = true;
          }
        }
      }
      synchronized (this.mPackages)
      {
        localObject5 = this.mSettings.peekPackageLPr(((PackageParser.Package)???).packageName);
        if (localObject5 != null) {
          ((PackageRemovedInfo)localObject4).origUsers = ((PackageSetting)localObject5).queryInstalledUsers((int[])localObject2, true);
        }
        if (paramPackageInstalledInfo.removedInfo.removedChildPackages == null) {
          paramPackageInstalledInfo.removedInfo.removedChildPackages = new ArrayMap();
        }
        paramPackageInstalledInfo.removedInfo.removedChildPackages.put(((PackageParser.Package)???).packageName, localObject4);
        j += 1;
        continue;
        paramPackage = finally;
        throw paramPackage;
        i = 0;
      }
      label958:
      if (isSystemApp(localPackage))
      {
        if ((localPackage.applicationInfo.privateFlags & 0x8) != 0)
        {
          i = 1;
          if (i == 0) {
            break label1022;
          }
        }
        label1022:
        for (i = 128;; i = 0)
        {
          replaceSystemPackageLIF(localPackage, paramPackage, paramInt1 | 0x1 | i, paramInt2, paramUserHandle, (int[])localObject2, paramString, paramPackageInstalledInfo);
          return;
          i = 0;
          break;
        }
      }
      replaceNonSystemPackageLIF(localPackage, paramPackage, paramInt1, paramInt2, paramUserHandle, (int[])localObject2, paramString, paramPackageInstalledInfo);
      return;
      label1046:
      if (j != 0) {
        if (k == 0) {}
      }
    }
  }
  
  private void replaceSystemPackageLIF(PackageParser.Package paramPackage1, PackageParser.Package paramPackage2, int paramInt1, int paramInt2, UserHandle paramUserHandle, int[] paramArrayOfInt, String paramString, PackageInstalledInfo paramPackageInstalledInfo)
  {
    if (DEBUG_INSTALL) {
      Slog.d("PackageManager", "replaceSystemPackageLI: new=" + paramPackage2 + ", old=" + paramPackage1);
    }
    removePackageLI(paramPackage1, true);
    for (;;)
    {
      synchronized (this.mPackages)
      {
        bool2 = disableSystemPackageLPw(paramPackage1, paramPackage2);
        if (!bool2)
        {
          paramPackageInstalledInfo.removedInfo.args = createInstallArgsForExisting(0, paramPackage1.applicationInfo.getCodePath(), paramPackage1.applicationInfo.getResourcePath(), InstructionSets.getAppDexInstructionSets(paramPackage1.applicationInfo));
          clearAppDataLIF(paramPackage2, -1, 515);
          clearAppProfilesLIF(paramPackage1, -1);
          paramPackageInstalledInfo.setReturnCode(1);
          paramPackage2.setApplicationInfoFlags(128, 128);
        }
        for (;;)
        {
          int j;
          try
          {
            ??? = scanPackageTracedLI(paramPackage2, paramInt1, paramInt2, 0L, paramUserHandle);
          }
          catch (PackageManagerException paramArrayOfInt)
          {
            try
            {
              int i;
              int n;
              int k;
              int m;
              Object localObject3;
              boolean bool1;
              scanPackageTracedLI(paramPackage1, paramInt1, 8, 0L, paramUserHandle);
              paramPackage2 = this.mPackages;
              if (bool2) {}
              try
              {
                enableSystemPackageLPw(paramPackage1);
                setInstallerPackageNameLPw(paramPackage1, paramString);
                updatePermissionsLPw(paramPackage1, 1);
                this.mSettings.writeLPr();
                Slog.i("PackageManager", "Successfully restored package : " + paramPackage1.packageName + " after failed upgrade");
                return;
              }
              finally {}
              paramArrayOfInt = paramArrayOfInt;
              ??? = null;
              paramPackageInstalledInfo.setReturnCode(-110);
              paramPackageInstalledInfo.setError("Package couldn't be installed in " + paramPackage2.codePath, paramArrayOfInt);
              Object localObject2 = ???;
            }
            catch (PackageManagerException paramPackage2)
            {
              Slog.e("PackageManager", "Failed to restore original package: " + paramPackage2.getMessage());
              continue;
            }
          }
          try
          {
            setInstallAndUpdateTime((PackageParser.Package)???, ((PackageSetting)paramPackage1.mExtras).firstInstallTime, System.currentTimeMillis());
            localObject2 = ???;
            if (paramPackageInstalledInfo.returnCode != 1) {
              continue;
            }
            if (paramPackage1.childPackages == null) {
              continue;
            }
            paramInt2 = paramPackage1.childPackages.size();
            if (((PackageParser.Package)???).childPackages == null) {
              continue;
            }
            i = ((PackageParser.Package)???).childPackages.size();
          }
          catch (PackageManagerException paramArrayOfInt)
          {
            continue;
            j = 0;
          }
        }
        if (j >= paramInt2) {
          break;
        }
        localObject2 = (PackageParser.Package)paramPackage1.childPackages.get(j);
        n = 1;
        k = 0;
        m = n;
        if (k < i)
        {
          localObject3 = (PackageParser.Package)((PackageParser.Package)???).childPackages.get(k);
          if (!((PackageParser.Package)localObject2).packageName.equals(((PackageParser.Package)localObject3).packageName)) {
            break label425;
          }
          m = 0;
        }
        if (m != 0)
        {
          localObject3 = this.mSettings.getDisabledSystemPkgLPr(((PackageParser.Package)localObject2).packageName);
          if ((localObject3 != null) && (paramPackageInstalledInfo.removedInfo.removedChildPackages != null))
          {
            localObject2 = (PackageRemovedInfo)paramPackageInstalledInfo.removedInfo.removedChildPackages.get(((PackageParser.Package)localObject2).packageName);
            removePackageDataLIF((PackageSetting)localObject3, paramArrayOfInt, (PackageRemovedInfo)localObject2, 0, false);
            if (this.mPackages.get(((PackageSetting)localObject3).name) != null) {
              break label434;
            }
            bool1 = true;
            ((PackageRemovedInfo)localObject2).removedForAllUsers = bool1;
          }
        }
        j += 1;
      }
      continue;
      paramInt2 = 0;
      continue;
      i = 0;
      break label666;
      label425:
      k += 1;
      continue;
      label434:
      bool1 = false;
    }
    updateSettingsLI((PackageParser.Package)???, paramString, paramArrayOfInt, paramPackageInstalledInfo, paramUserHandle);
    prepareAppDataAfterInstallLIF((PackageParser.Package)???);
    localObject2 = ???;
    if (paramPackageInstalledInfo.returnCode != 1) {
      if (localObject2 != null) {
        removeInstalledPackageLI((PackageParser.Package)localObject2, true);
      }
    }
  }
  
  static void reportSettingsProblem(int paramInt, String paramString)
  {
    logCriticalInfo(paramInt, paramString);
  }
  
  private static void requestCopyPreoptedFiles()
  {
    long l;
    if (SystemProperties.getInt("ro.cp_system_other_odex", 0) == 1)
    {
      SystemProperties.set("sys.cppreopt", "requested");
      l = SystemClock.uptimeMillis();
    }
    for (;;)
    {
      if (!SystemProperties.get("sys.cppreopt").equals("finished")) {}
      try
      {
        Thread.sleep(100L);
        if (SystemClock.uptimeMillis() <= l + 100000L) {
          continue;
        }
        SystemProperties.set("sys.cppreopt", "timed-out");
        Slog.wtf("PackageManager", "cppreopt did not finish!");
        return;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;) {}
      }
    }
  }
  
  private void resetNetworkPolicies(int paramInt)
  {
    ((NetworkPolicyManagerInternal)LocalServices.getService(NetworkPolicyManagerInternal.class)).resetUserState(paramInt);
  }
  
  private void resetUserChangesToRuntimePermissionsAndFlagsLPw(int paramInt)
  {
    int j = this.mPackages.size();
    int i = 0;
    while (i < j)
    {
      resetUserChangesToRuntimePermissionsAndFlagsLPw((PackageSetting)((PackageParser.Package)this.mPackages.valueAt(i)).mExtras, paramInt);
      i += 1;
    }
  }
  
  private void resetUserChangesToRuntimePermissionsAndFlagsLPw(PackageSetting paramPackageSetting, final int paramInt)
  {
    if (paramPackageSetting.pkg == null) {
      return;
    }
    if ((OpFeatures.isSupport(new int[] { 0 })) && (paramPackageSetting.pkg.packageName != null) && ((paramPackageSetting.pkg.packageName.equals("com.google.android.gms")) || (paramPackageSetting.pkg.packageName.equals("com.android.vending"))))
    {
      Slog.i("PackageManager", "skip reset gms and google play store pkg's permission state");
      return;
    }
    int k = 0;
    final int j = 0;
    int i4 = paramPackageSetting.pkg.requestedPermissions.size();
    int i1 = 0;
    if (i1 < i4)
    {
      Object localObject = (String)paramPackageSetting.pkg.requestedPermissions.get(i1);
      BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(localObject);
      int i;
      int i2;
      if (localBasePermission == null)
      {
        i = j;
        i2 = k;
      }
      for (;;)
      {
        i1 += 1;
        k = i2;
        j = i;
        break;
        int n;
        int m;
        if (paramPackageSetting.sharedUser != null)
        {
          n = 0;
          i2 = paramPackageSetting.sharedUser.packages.size();
          i = 0;
          m = n;
          if (i < i2)
          {
            PackageSetting localPackageSetting = (PackageSetting)paramPackageSetting.sharedUser.packages.valueAt(i);
            if ((localPackageSetting.pkg == null) || (localPackageSetting.pkg.packageName.equals(paramPackageSetting.pkg.packageName))) {}
            while (!localPackageSetting.pkg.requestedPermissions.contains(localObject))
            {
              i += 1;
              break;
            }
            m = 1;
          }
          i2 = k;
          i = j;
          if (m != 0) {}
        }
        else
        {
          localObject = paramPackageSetting.getPermissionsState();
          int i5 = ((PermissionsState)localObject).getPermissionFlags(localBasePermission.name, paramInt);
          label315:
          int i3;
          if (((PermissionsState)localObject).getInstallPermissionState(localBasePermission.name) != null)
          {
            i = 1;
            m = 0;
            i3 = m;
            if (Build.PERMISSIONS_REVIEW_REQUIRED)
            {
              i3 = m;
              if (paramPackageSetting.pkg.applicationInfo.targetSdkVersion < 23) {
                i3 = 64;
              }
            }
            m = k;
            n = j;
            if (((PermissionsState)localObject).updatePermissionFlags(localBasePermission, paramInt, 75, i3))
            {
              if (i == 0) {
                break label456;
              }
              m = 1;
              n = j;
            }
          }
          for (;;)
          {
            i2 = m;
            i = n;
            if (!localBasePermission.isRuntime()) {
              break;
            }
            i2 = m;
            i = n;
            if ((i5 & 0x14) != 0) {
              break;
            }
            if ((i5 & 0x20) == 0) {
              break label466;
            }
            i2 = m;
            i = n;
            if (((PermissionsState)localObject).grantRuntimePermission(localBasePermission, paramInt) == -1) {
              break;
            }
            i = 1;
            i2 = m;
            break;
            i = 0;
            break label315;
            label456:
            n = 1;
            m = k;
          }
          label466:
          i2 = m;
          i = n;
          if ((i3 & 0x40) == 0) {
            if (OpFeatures.isSupport(new int[] { 12 }))
            {
              i2 = m;
              i = n;
              if (!Permission.isCTAResetTargetSDK23(localBasePermission.name)) {}
            }
            else
            {
              switch (((PermissionsState)localObject).revokeRuntimePermission(localBasePermission, paramInt))
              {
              default: 
                i2 = m;
                i = n;
                break;
              case 0: 
              case 1: 
                i = 1;
                j = paramPackageSetting.appId;
                this.mHandler.post(new Runnable()
                {
                  public void run()
                  {
                    PackageManagerService.-wrap30(PackageManagerService.this, j, paramInt, "permissions revoked");
                  }
                });
                i2 = m;
              }
            }
          }
        }
      }
    }
    if (j != 0) {
      this.mSettings.writeRuntimePermissionsForUserLPr(paramInt, true);
    }
    if (k != 0) {
      this.mSettings.writeLPr();
    }
  }
  
  private List<String> resolveAllBrowserApps(int paramInt)
  {
    List localList = queryIntentActivitiesInternal(sBrowserIntent, null, 131072, paramInt);
    int i = localList.size();
    ArrayList localArrayList = new ArrayList(i);
    paramInt = 0;
    if (paramInt < i)
    {
      ResolveInfo localResolveInfo = (ResolveInfo)localList.get(paramInt);
      if ((localResolveInfo.activityInfo == null) || (!localResolveInfo.handleAllWebDataURI) || ((localResolveInfo.activityInfo.applicationInfo.flags & 0x1) == 0)) {}
      for (;;)
      {
        paramInt += 1;
        break;
        if (!localArrayList.contains(localResolveInfo.activityInfo.packageName)) {
          localArrayList.add(localResolveInfo.activityInfo.packageName);
        }
      }
    }
    return localArrayList;
  }
  
  private void resolveDozeWhitelistConfigFromJSON(JSONArray paramJSONArray)
  {
    if (paramJSONArray == null)
    {
      Slog.v("PackageManager", "[OnlineConfig] DozeWhitelist updated null " + this.mOemDeviceIdleWhiteList);
      return;
    }
    int i = 0;
    for (;;)
    {
      try
      {
        if (i < paramJSONArray.length())
        {
          ??? = paramJSONArray.getJSONObject(i);
          if (!((JSONObject)???).getString("name").equals("config_oemDeviceIdleWhiteList")) {
            break label185;
          }
          JSONArray localJSONArray = ((JSONObject)???).getJSONArray("value");
          synchronized (this.mOemDeviceIdleWhiteList)
          {
            this.mOemDeviceIdleWhiteList.clear();
            int j = 0;
            if (j < localJSONArray.length())
            {
              this.mOemDeviceIdleWhiteList.add(localJSONArray.getString(j));
              j += 1;
              continue;
            }
          }
        }
        Slog.v("PackageManager", "[OnlineConfig] DozeWhitelist updated complete");
      }
      catch (JSONException paramJSONArray)
      {
        Slog.e("PackageManager", "[OnlineConfig] resolveDozeWhitelistConfigFromJSON, error message:" + paramJSONArray.getMessage());
        return;
      }
      return;
      label185:
      i += 1;
    }
  }
  
  private int[] resolveUserIds(int paramInt)
  {
    if (paramInt == -1) {
      return sUserManager.getUserIds();
    }
    return new int[] { paramInt };
  }
  
  private void restoreFromXml(XmlPullParser paramXmlPullParser, int paramInt, String paramString, BlobXmlRestorer paramBlobXmlRestorer)
    throws IOException, XmlPullParserException
  {
    int i;
    do
    {
      i = paramXmlPullParser.next();
    } while ((i != 2) && (i != 1));
    if (i != 2)
    {
      if (DEBUG_BACKUP) {
        Slog.e("PackageManager", "Didn't find start tag during restore");
      }
      return;
    }
    Slog.v("PackageManager", ":: restoreFromXml() : got to tag " + paramXmlPullParser.getName());
    if (!paramString.equals(paramXmlPullParser.getName()))
    {
      if (DEBUG_BACKUP) {
        Slog.e("PackageManager", "Found unexpected tag " + paramXmlPullParser.getName());
      }
      return;
    }
    while (paramXmlPullParser.next() == 4) {}
    Slog.v("PackageManager", ":: stepped forward, applying functor at tag " + paramXmlPullParser.getName());
    paramBlobXmlRestorer.apply(paramXmlPullParser, paramInt);
  }
  
  private int[] revokeUnusedSharedUserPermissionsLPw(SharedUserSetting paramSharedUserSetting, int[] paramArrayOfInt)
  {
    ArraySet localArraySet = new ArraySet();
    int k = paramSharedUserSetting.packages.size();
    int i = 0;
    Object localObject1;
    int m;
    int j;
    if (i < k)
    {
      localObject1 = (PackageSetting)paramSharedUserSetting.packages.valueAt(i);
      if (((PackageSetting)localObject1).pkg == null) {}
      for (;;)
      {
        i += 1;
        break;
        m = ((PackageSetting)localObject1).pkg.requestedPermissions.size();
        j = 0;
        while (j < m)
        {
          localObject2 = (String)((PackageSetting)localObject1).pkg.requestedPermissions.get(j);
          if ((BasePermission)this.mSettings.mPermissions.get(localObject2) != null) {
            localArraySet.add(localObject2);
          }
          j += 1;
        }
      }
    }
    Object localObject2 = paramSharedUserSetting.getPermissionsState();
    paramSharedUserSetting = ((PermissionsState)localObject2).getInstallPermissionStates();
    i = paramSharedUserSetting.size() - 1;
    while (i >= 0)
    {
      localObject1 = (PermissionsState.PermissionState)paramSharedUserSetting.get(i);
      if (!localArraySet.contains(((PermissionsState.PermissionState)localObject1).getName()))
      {
        localObject1 = (BasePermission)this.mSettings.mPermissions.get(((PermissionsState.PermissionState)localObject1).getName());
        if (localObject1 != null)
        {
          ((PermissionsState)localObject2).revokeInstallPermission((BasePermission)localObject1);
          ((PermissionsState)localObject2).updatePermissionFlags((BasePermission)localObject1, -1, 255, 0);
        }
      }
      i -= 1;
    }
    paramSharedUserSetting = EmptyArray.INT;
    i = 0;
    k = paramArrayOfInt.length;
    while (i < k)
    {
      m = paramArrayOfInt[i];
      List localList = ((PermissionsState)localObject2).getRuntimePermissionStates(m);
      j = localList.size() - 1;
      while (j >= 0)
      {
        Object localObject3 = (PermissionsState.PermissionState)localList.get(j);
        localObject1 = paramSharedUserSetting;
        if (!localArraySet.contains(((PermissionsState.PermissionState)localObject3).getName()))
        {
          localObject3 = (BasePermission)this.mSettings.mPermissions.get(((PermissionsState.PermissionState)localObject3).getName());
          localObject1 = paramSharedUserSetting;
          if (localObject3 != null)
          {
            ((PermissionsState)localObject2).revokeRuntimePermission((BasePermission)localObject3, m);
            ((PermissionsState)localObject2).updatePermissionFlags((BasePermission)localObject3, m, 255, 0);
            localObject1 = ArrayUtils.appendInt(paramSharedUserSetting, m);
          }
        }
        j -= 1;
        paramSharedUserSetting = (SharedUserSetting)localObject1;
      }
      i += 1;
    }
    return paramSharedUserSetting;
  }
  
  private void scanDirLI(File paramFile, final int paramInt1, final int paramInt2, final long paramLong)
  {
    File[] arrayOfFile = paramFile.listFiles();
    if (ArrayUtils.isEmpty(arrayOfFile))
    {
      Log.d("PackageManager", "No files in app dir " + paramFile);
      return;
    }
    if (DEBUG_PACKAGE_SCANNING) {
      Log.d("PackageManager", "Scanning app dir " + paramFile + " scanFlags=" + paramInt2 + " flags=0x" + Integer.toHexString(paramInt1));
    }
    Log.d("PackageManager", "start scanDirLI:" + paramFile);
    int i = SystemProperties.getInt("persist.pm.multitask", 6);
    Log.d("PackageManager", "max thread:" + i);
    MultiTaskDealer localMultiTaskDealer;
    int j;
    label187:
    final Object localObject;
    if (i > 1)
    {
      localMultiTaskDealer = MultiTaskDealer.startDealer("packagescan", i);
      int k = arrayOfFile.length;
      j = 0;
      if (j >= k) {
        break label355;
      }
      localObject = arrayOfFile[j];
      if ((!PackageParser.isApkFile((File)localObject)) && (!((File)localObject).isDirectory())) {
        break label257;
      }
      if (!PackageInstallerService.isStageName(((File)localObject).getName())) {
        break label251;
      }
      i = 0;
      label231:
      if (i != 0) {
        break label263;
      }
    }
    for (;;)
    {
      j += 1;
      break label187;
      localMultiTaskDealer = null;
      break;
      label251:
      i = 1;
      break label231;
      label257:
      i = 0;
      break label231;
      label263:
      if ((RegionalizationEnvironment.isSupported()) && (RegionalizationEnvironment.isExcludedApp(((File)localObject).getName())))
      {
        Slog.d("PackageManager", "Regionalization Excluded:" + ((File)localObject).getName());
      }
      else
      {
        localObject = new Runnable()
        {
          public void run()
          {
            try
            {
              PackageManagerService.-wrap1(PackageManagerService.this, localObject, paramInt1 | 0x4, paramInt2, paramLong, null);
              return;
            }
            catch (PackageManagerException localPackageManagerException)
            {
              do
              {
                Slog.w("PackageManager", "Failed to parse " + localObject + ": " + localPackageManagerException.getMessage());
              } while (((paramInt1 & 0x1) != 0) || (localPackageManagerException.error != -2));
              PackageManagerService.logCriticalInfo(5, "Deleting invalid package at " + localObject);
              PackageManagerService.this.removeCodePathLI(localObject);
            }
          }
        };
        if (localMultiTaskDealer != null) {
          localMultiTaskDealer.addTask((Runnable)localObject);
        } else {
          ((Runnable)localObject).run();
        }
      }
    }
    label355:
    if (localMultiTaskDealer != null) {
      localMultiTaskDealer.waitAll();
    }
    Log.d("PackageManager", "end scanDirLI:" + paramFile);
  }
  
  private void scanDirTracedLI(File paramFile, int paramInt1, int paramInt2, long paramLong)
  {
    Trace.traceBegin(262144L, "scanDir");
    try
    {
      scanDirLI(paramFile, paramInt1, paramInt2, paramLong);
      return;
    }
    finally
    {
      Trace.traceEnd(262144L);
    }
  }
  
  private PackageParser.Package scanPackageDirtyLI(PackageParser.Package paramPackage, int paramInt1, int paramInt2, long paramLong, UserHandle arg6)
    throws PackageManagerException
  {
    File localFile1 = new File(paramPackage.codePath);
    if ((paramPackage.applicationInfo.getCodePath() == null) || (paramPackage.applicationInfo.getResourcePath() == null)) {
      throw new PackageManagerException(-2, "Code and resource paths haven't been set correctly");
    }
    Object localObject3;
    Object localObject4;
    if ((paramInt1 & 0x1) != 0)
    {
      ??? = paramPackage.applicationInfo;
      ((ApplicationInfo)???).flags |= 0x1;
      if (paramPackage.applicationInfo.isDirectBootAware())
      {
        ??? = paramPackage.services.iterator();
        while (((Iterator)???).hasNext())
        {
          localObject3 = (PackageParser.Service)((Iterator)???).next();
          localObject4 = ((PackageParser.Service)localObject3).info;
          ((PackageParser.Service)localObject3).info.directBootAware = true;
          ((ServiceInfo)localObject4).encryptionAware = true;
        }
        ??? = paramPackage.providers.iterator();
        while (((Iterator)???).hasNext())
        {
          localObject3 = (PackageParser.Provider)((Iterator)???).next();
          localObject4 = ((PackageParser.Provider)localObject3).info;
          ((PackageParser.Provider)localObject3).info.directBootAware = true;
          ((ProviderInfo)localObject4).encryptionAware = true;
        }
        ??? = paramPackage.activities.iterator();
        while (((Iterator)???).hasNext())
        {
          localObject3 = (PackageParser.Activity)((Iterator)???).next();
          localObject4 = ((PackageParser.Activity)localObject3).info;
          ((PackageParser.Activity)localObject3).info.directBootAware = true;
          ((ActivityInfo)localObject4).encryptionAware = true;
        }
        ??? = paramPackage.receivers.iterator();
        while (((Iterator)???).hasNext())
        {
          localObject3 = (PackageParser.Activity)((Iterator)???).next();
          localObject4 = ((PackageParser.Activity)localObject3).info;
          ((PackageParser.Activity)localObject3).info.directBootAware = true;
          ((ActivityInfo)localObject4).encryptionAware = true;
        }
      }
    }
    else
    {
      paramPackage.coreApp = false;
      ??? = paramPackage.applicationInfo;
      ((ApplicationInfo)???).privateFlags &= 0xFFFFFFDF;
      ??? = paramPackage.applicationInfo;
      ((ApplicationInfo)???).privateFlags &= 0xFFFFFFBF;
    }
    if ((paramInt1 & 0x200) != 0) {}
    for (boolean bool = true;; bool = false)
    {
      paramPackage.mTrustedOverlay = bool;
      if ((paramInt1 & 0x80) != 0)
      {
        ??? = paramPackage.applicationInfo;
        ((ApplicationInfo)???).privateFlags |= 0x8;
      }
      if ((paramInt1 & 0x400) != 0) {
        enforceCodePolicy(paramPackage);
      }
      if ((this.mCustomResolverComponentName != null) && (this.mCustomResolverComponentName.getPackageName().equals(paramPackage.packageName))) {
        setUpCustomResolverActivity(paramPackage);
      }
      if (!paramPackage.packageName.equals("android")) {
        break label768;
      }
      synchronized (this.mPackages)
      {
        if (this.mAndroidApplication == null) {
          break;
        }
        Slog.w("PackageManager", "*************************************************");
        Slog.w("PackageManager", "Core android package being redefined.  Skipping.");
        Slog.w("PackageManager", " file=" + localFile1);
        Slog.w("PackageManager", "*************************************************");
        throw new PackageManagerException(-5, "Core android package being redefined.  Skipping.");
      }
    }
    if ((0x8000 & paramInt2) == 0)
    {
      this.mPlatformPackage = paramPackage;
      paramPackage.mVersionCode = this.mSdkVersion;
      this.mAndroidApplication = paramPackage.applicationInfo;
      if (!this.mResolverReplaced)
      {
        this.mResolveActivity.applicationInfo = this.mAndroidApplication;
        this.mResolveActivity.name = ResolverActivity.class.getName();
        this.mResolveActivity.packageName = this.mAndroidApplication.packageName;
        this.mResolveActivity.processName = "system:ui";
        this.mResolveActivity.launchMode = 0;
        this.mResolveActivity.documentLaunchMode = 3;
        this.mResolveActivity.flags = 32;
        this.mResolveActivity.theme = 16974374;
        this.mResolveActivity.exported = true;
        this.mResolveActivity.enabled = true;
        this.mResolveActivity.resizeMode = 2;
        this.mResolveActivity.configChanges = 3504;
        this.mResolveInfo.activityInfo = this.mResolveActivity;
        this.mResolveInfo.priority = 0;
        this.mResolveInfo.preferredOrder = 0;
        this.mResolveInfo.match = 0;
        this.mResolveComponentName = new ComponentName(this.mAndroidApplication.packageName, this.mResolveActivity.name);
      }
    }
    label768:
    if ((DEBUG_PACKAGE_SCANNING) && ((paramInt1 & 0x2) != 0)) {
      Log.d("PackageManager", "Scanning package " + paramPackage.packageName);
    }
    File localFile2;
    File localFile3;
    PackageSetting localPackageSetting;
    Object localObject7;
    Object localObject6;
    String str;
    int i;
    int k;
    int j;
    Object localObject2;
    long l;
    int m;
    synchronized (this.mPackages)
    {
      if ((this.mPackages.containsKey(paramPackage.packageName)) || (this.mSharedLibraries.containsKey(paramPackage.packageName))) {
        throw new PackageManagerException(-5, "Application package " + paramPackage.packageName + " already installed.  Skipping duplicate.");
      }
    }
  }
  
  private PackageParser.Package scanPackageInternalLI(PackageParser.Package paramPackage, File arg2, int paramInt1, int paramInt2, long paramLong, UserHandle paramUserHandle)
    throws PackageManagerException
  {
    Object localObject1 = null;
    for (;;)
    {
      Object localObject4;
      int i;
      int j;
      synchronized (this.mPackages)
      {
        localObject4 = (String)this.mSettings.mRenamedPackages.get(paramPackage.packageName);
        ??? = localObject1;
        if (paramPackage.mOriginalPackages != null)
        {
          ??? = localObject1;
          if (paramPackage.mOriginalPackages.contains(localObject4)) {
            ??? = this.mSettings.peekPackageLPr((String)localObject4);
          }
        }
        localObject1 = ???;
        if (??? == null) {
          localObject1 = this.mSettings.peekPackageLPr(paramPackage.packageName);
        }
        localObject4 = this.mSettings;
        int m;
        if (localObject1 != null)
        {
          ??? = ((PackageSetting)localObject1).name;
          localObject4 = ((Settings)localObject4).getDisabledSystemPkgLPr((String)???);
          if ((DEBUG_INSTALL) && (localObject4 != null)) {
            Slog.d("PackageManager", "updatedPkg = " + localObject4);
          }
          if ((paramInt1 & 0x1) == 0) {
            continue;
          }
          ??? = this.mSettings.getDisabledSystemPkgLPr(paramPackage.packageName);
          if (??? == null) {
            continue;
          }
          if (paramPackage.childPackages != null)
          {
            i = paramPackage.childPackages.size();
            if (((PackageSetting)???).childPackageNames == null) {
              continue;
            }
            j = ((PackageSetting)???).childPackageNames.size();
            break label1962;
            if (k >= j) {
              continue;
            }
            String str2 = (String)((PackageSetting)???).childPackageNames.get(k);
            int i1 = 0;
            m = 0;
            int n = i1;
            if (m < i)
            {
              if (!((PackageParser.Package)paramPackage.childPackages.get(m)).packageName.equals(str2)) {
                continue;
              }
              n = 1;
            }
            if (n != 0) {
              break label1968;
            }
            this.mSettings.removeDisabledSystemPackageLPw(str2);
            break label1968;
          }
        }
        else
        {
          ??? = paramPackage.packageName;
          continue;
        }
        i = 0;
        continue;
        j = 0;
        break label1962;
        m += 1;
        continue;
        i = 0;
        if ((!this.mSupportResverApp) || (!???.toString().startsWith("/system/reserve"))) {
          break label395;
        }
        if (OemPackageManagerHelper.checkAppHasDeleted(paramPackage.packageName)) {
          return null;
        }
      }
      if ((localObject1 == null) || (((PackageSetting)localObject1).codePath.equals(???)))
      {
        label395:
        j = i;
        if (localObject4 != null)
        {
          j = i;
          if ((paramInt1 & 0x1) != 0)
          {
            if (!locationIsPrivileged(???)) {
              break label836;
            }
            ((PackageSetting)localObject4).pkgPrivateFlags |= 0x8;
            label434:
            j = i;
            if (localObject1 != null)
            {
              if (!((PackageSetting)localObject1).codePath.equals(???)) {
                break label852;
              }
              j = i;
            }
          }
        }
        label459:
        i = paramInt1;
        if (localObject4 != null)
        {
          paramInt1 |= 0x1;
          i = paramInt1;
          if ((((PackageSetting)localObject4).pkgPrivateFlags & 0x8) != 0) {
            i = paramInt1 | 0x80;
          }
        }
        collectCertificatesLI((PackageSetting)localObject1, paramPackage, ???, i);
        k = 0;
        ??? = localObject1;
        paramInt1 = k;
        if (localObject4 == null)
        {
          ??? = localObject1;
          paramInt1 = k;
          if (localObject1 != null)
          {
            ??? = localObject1;
            paramInt1 = k;
            if ((i & 0x40) != 0)
            {
              if (!isSystemApp((PackageSetting)localObject1)) {
                break label1444;
              }
              paramInt1 = k;
              ??? = localObject1;
            }
          }
        }
      }
      for (;;)
      {
        k = i;
        if ((i & 0x40) == 0)
        {
          k = i;
          if (??? != null)
          {
            if (!((PackageSetting)???).codePath.equals(((PackageSetting)???).resourcePath)) {
              break label1879;
            }
            k = i;
          }
        }
        label600:
        localObject1 = null;
        ??? = null;
        if (((k & 0x10) == 0) || (j != 0))
        {
          localObject1 = paramPackage.codePath;
          ??? = paramPackage.baseCodePath;
          label629:
          paramPackage.setApplicationVolumeUuid(paramPackage.volumeUuid);
          paramPackage.setApplicationInfoCodePath(paramPackage.codePath);
          paramPackage.setApplicationInfoBaseCodePath(paramPackage.baseCodePath);
          paramPackage.setApplicationInfoSplitCodePaths(paramPackage.splitCodePaths);
          paramPackage.setApplicationInfoResourcePath((String)localObject1);
          paramPackage.setApplicationInfoBaseResourcePath(???);
          paramPackage.setApplicationInfoSplitResourcePaths(paramPackage.splitCodePaths);
          paramUserHandle = scanPackageLI(paramPackage, k, paramInt2 | 0x8, paramLong, paramUserHandle);
          if (paramInt1 != 0) {}
          synchronized (this.mPackages)
          {
            this.mSettings.disableSystemPackageLPw(paramPackage.packageName, true);
            return paramUserHandle;
            if ((((PackageSetting)localObject1).codePath.exists()) && (paramPackage.mVersionCode <= ((PackageSetting)localObject1).versionCode)) {
              return null;
            }
            synchronized (this.mPackages)
            {
              this.mPackages.remove(((PackageSetting)localObject1).name);
              ??? = createInstallArgsForExisting(packageFlagsToInstallFlags((PackageSetting)localObject1), ((PackageSetting)localObject1).codePathString, ((PackageSetting)localObject1).resourcePathString, InstructionSets.getAppDexInstructionSets((PackageSetting)localObject1));
            }
            synchronized (this.mInstallLock)
            {
              ((InstallArgs)???).cleanUpResourcesLI();
              break;
              paramPackage = finally;
              throw paramPackage;
            }
            label836:
            ((PackageSetting)localObject4).pkgPrivateFlags &= 0xFFFFFFF7;
            break label434;
            label852:
            if (DEBUG_INSTALL) {
              Slog.d("PackageManager", "Path changing from " + ((PackageSetting)localObject1).codePath);
            }
            if (paramPackage.mVersionCode <= ((PackageSetting)localObject1).versionCode)
            {
              if (DEBUG_INSTALL) {
                Slog.i("PackageManager", "Package " + ((PackageSetting)localObject1).name + " at " + ??? + " ignored: updated version " + ((PackageSetting)localObject1).versionCode + " better than this " + paramPackage.mVersionCode);
              }
              if (!((PackageSetting)localObject4).codePath.equals(???))
              {
                Slog.w("PackageManager", "Code path for hidden system pkg " + ((PackageSetting)localObject1).name + " changing from " + ((PackageSetting)localObject4).codePathString + " to " + ???);
                ((PackageSetting)localObject4).codePath = ???;
                ((PackageSetting)localObject4).codePathString = ???.toString();
                ((PackageSetting)localObject4).resourcePath = ???;
                ((PackageSetting)localObject4).resourcePathString = ???.toString();
              }
              ((PackageSetting)localObject4).pkg = paramPackage;
              ((PackageSetting)localObject4).versionCode = paramPackage.mVersionCode;
              if (((PackageSetting)localObject4).childPackageNames != null) {}
              for (paramInt1 = ((PackageSetting)localObject4).childPackageNames.size();; paramInt1 = 0)
              {
                paramInt2 = 0;
                while (paramInt2 < paramInt1)
                {
                  paramUserHandle = (String)((PackageSetting)localObject4).childPackageNames.get(paramInt2);
                  paramUserHandle = this.mSettings.getDisabledSystemPkgLPr(paramUserHandle);
                  if (paramUserHandle != null)
                  {
                    paramUserHandle.pkg = paramPackage;
                    paramUserHandle.versionCode = paramPackage.mVersionCode;
                  }
                  paramInt2 += 1;
                }
              }
              throw new PackageManagerException(5, "Package " + ((PackageSetting)localObject1).name + " at " + ??? + " ignored: updated version " + ((PackageSetting)localObject1).versionCode + " better than this " + paramPackage.mVersionCode);
            }
            synchronized (this.mPackages)
            {
              this.mPackages.remove(((PackageSetting)localObject1).name);
              logCriticalInfo(5, "Package " + ((PackageSetting)localObject1).name + " at " + ??? + " reverting from " + ((PackageSetting)localObject1).codePathString + ": new version " + paramPackage.mVersionCode + " better than installed " + ((PackageSetting)localObject1).versionCode);
              ??? = createInstallArgsForExisting(packageFlagsToInstallFlags((PackageSetting)localObject1), ((PackageSetting)localObject1).codePathString, ((PackageSetting)localObject1).resourcePathString, InstructionSets.getAppDexInstructionSets((PackageSetting)localObject1));
              synchronized (this.mInstallLock)
              {
                ((InstallArgs)???).cleanUpResourcesLI();
              }
            }
            synchronized (this.mPackages)
            {
              this.mSettings.enableSystemPackageLPw(((PackageSetting)localObject1).name);
              j = 1;
              break label459;
              paramPackage = finally;
              throw paramPackage;
              paramPackage = finally;
              throw paramPackage;
            }
            label1444:
            if (compareSignatures(((PackageSetting)localObject1).signatures.mSignatures, paramPackage.mSignatures) != 0)
            {
              logCriticalInfo(5, "Package " + ((PackageSetting)localObject1).name + " appeared on system, but" + " signatures don't match existing userdata copy; removing");
              ??? = null;
              localObject1 = null;
              ??? = null;
            }
          }
        }
        try
        {
          ??? = freezePackage(paramPackage.packageName, "scanPackageInternalLI");
          ??? = (File)???;
          localObject1 = ???;
          deletePackageLIF(paramPackage.packageName, null, true, null, 0, null, false, null);
          ??? = (File)???;
          if (??? != null) {}
          try
          {
            ((PackageFreezer)???).close();
            ??? = (File)???;
          }
          catch (Throwable ???)
          {
            for (;;) {}
          }
          if (??? != null) {
            throw ???;
          }
        }
        catch (Throwable paramPackage)
        {
          try
          {
            throw paramPackage;
          }
          finally
          {
            localObject1 = ???;
          }
          paramUserHandle = paramPackage;
          if (localObject1 != null) {}
          try
          {
            ((PackageFreezer)localObject1).close();
            paramUserHandle = paramPackage;
          }
          catch (Throwable localThrowable)
          {
            for (;;)
            {
              if (paramPackage == null)
              {
                paramUserHandle = localThrowable;
              }
              else
              {
                paramUserHandle = paramPackage;
                if (paramPackage != localThrowable)
                {
                  paramPackage.addSuppressed(localThrowable);
                  paramUserHandle = paramPackage;
                }
              }
            }
          }
          if (paramUserHandle != null) {
            throw paramUserHandle;
          }
          throw ???;
          ??? = null;
          paramInt1 = k;
          continue;
          if (paramPackage.mVersionCode <= localThrowable.versionCode)
          {
            paramInt1 = 1;
            logCriticalInfo(4, "Package " + localThrowable.name + " appeared at " + ??? + " but new version " + paramPackage.mVersionCode + " better than installed " + localThrowable.versionCode + "; hiding system");
            ??? = localThrowable;
          }
          else
          {
            logCriticalInfo(5, "Package " + localThrowable.name + " at " + ??? + " reverting from " + localThrowable.codePathString + ": new version " + paramPackage.mVersionCode + " better than installed " + localThrowable.versionCode);
            ??? = createInstallArgsForExisting(packageFlagsToInstallFlags(localThrowable), localThrowable.codePathString, localThrowable.resourcePathString, InstructionSets.getAppDexInstructionSets(localThrowable));
            label1879:
            synchronized (this.mInstallLock)
            {
              ((InstallArgs)???).cleanUpResourcesLI();
              ??? = localThrowable;
              paramInt1 = k;
            }
            break label600;
            if ((??? != null) && (((PackageSetting)???).resourcePathString != null))
            {
              String str1 = ((PackageSetting)???).resourcePathString;
              ??? = ((PackageSetting)???).resourcePathString;
              break label629;
            }
            Slog.e("PackageManager", "Resource path not set for package " + paramPackage.packageName);
            break label629;
            paramPackage = finally;
            throw paramPackage;
          }
        }
        finally
        {
          for (;;)
          {
            paramPackage = null;
          }
        }
      }
      label1962:
      int k = 0;
      continue;
      label1968:
      k += 1;
    }
  }
  
  private PackageParser.Package scanPackageLI(PackageParser.Package paramPackage, int paramInt1, int paramInt2, long paramLong, UserHandle paramUserHandle)
    throws PackageManagerException
  {
    try
    {
      paramUserHandle = scanPackageDirtyLI(paramPackage, paramInt1, paramInt2, paramLong, paramUserHandle);
      if ((1 == 0) && ((paramInt2 & 0x400) != 0))
      {
        destroyAppDataLIF(paramPackage, -1, 3);
        destroyAppProfilesLIF(paramPackage, -1);
      }
      return paramUserHandle;
    }
    finally
    {
      if ((0 == 0) && ((paramInt2 & 0x400) != 0))
      {
        destroyAppDataLIF(paramPackage, -1, 3);
        destroyAppProfilesLIF(paramPackage, -1);
      }
    }
  }
  
  private PackageParser.Package scanPackageLI(PackageParser.Package paramPackage, File paramFile, int paramInt1, int paramInt2, long paramLong, UserHandle paramUserHandle)
    throws PackageManagerException
  {
    int i;
    PackageParser.Package localPackage;
    if ((0x8000 & paramInt2) == 0)
    {
      i = paramInt2;
      if (paramPackage.childPackages != null)
      {
        i = paramInt2;
        if (paramPackage.childPackages.size() > 0) {
          i = paramInt2 | 0x8000;
        }
      }
      localPackage = scanPackageInternalLI(paramPackage, paramFile, paramInt1, i, paramLong, paramUserHandle);
      if (paramPackage.childPackages == null) {
        break label128;
      }
    }
    label128:
    for (paramInt2 = paramPackage.childPackages.size();; paramInt2 = 0)
    {
      int j = 0;
      while (j < paramInt2)
      {
        scanPackageInternalLI((PackageParser.Package)paramPackage.childPackages.get(j), paramFile, paramInt1, i, paramLong, paramUserHandle);
        j += 1;
      }
      i = paramInt2 & 0xFFFF7FFF;
      break;
    }
    if ((0x8000 & i) != 0) {
      return scanPackageLI(paramPackage, paramFile, paramInt1, i, paramLong, paramUserHandle);
    }
    return localPackage;
  }
  
  private PackageParser.Package scanPackageLI(File paramFile, int paramInt1, int paramInt2, long paramLong, UserHandle paramUserHandle)
    throws PackageManagerException
  {
    if (DEBUG_INSTALL) {
      Slog.d("PackageManager", "Parsing: " + paramFile);
    }
    Object localObject = new PackageParser(this.mContext);
    ((PackageParser)localObject).setSeparateProcesses(this.mSeparateProcesses);
    ((PackageParser)localObject).setOnlyCoreApps(this.mOnlyCore);
    ((PackageParser)localObject).setOnlyPowerOffAlarmApps(this.mOnlyPowerOffAlarm);
    ((PackageParser)localObject).setDisplayMetrics(this.mMetrics);
    int i = paramInt1;
    if ((paramInt2 & 0x200) != 0) {
      i = paramInt1 | 0x200;
    }
    Trace.traceBegin(262144L, "parsePackage");
    try
    {
      localObject = ((PackageParser)localObject).parsePackage(paramFile, i);
      Trace.traceEnd(262144L);
      this.mOemCompatibilityHelper.customizePackageIfNeeded((PackageParser.Package)localObject);
      return scanPackageLI((PackageParser.Package)localObject, paramFile, i, paramInt2, paramLong, paramUserHandle);
    }
    catch (PackageParser.PackageParserException paramFile)
    {
      throw PackageManagerException.from(paramFile);
    }
    finally
    {
      Trace.traceEnd(262144L);
    }
  }
  
  private PackageParser.Package scanPackageTracedLI(PackageParser.Package paramPackage, int paramInt1, int paramInt2, long paramLong, UserHandle paramUserHandle)
    throws PackageManagerException
  {
    Trace.traceBegin(262144L, "scanPackage");
    int i;
    if ((0x8000 & paramInt2) == 0)
    {
      i = paramInt2;
      if (paramPackage.childPackages != null)
      {
        i = paramInt2;
        if (paramPackage.childPackages.size() > 0) {
          i = paramInt2 | 0x8000;
        }
      }
    }
    for (;;)
    {
      PackageParser.Package localPackage;
      try
      {
        localPackage = scanPackageLI(paramPackage, paramInt1, i, paramLong, paramUserHandle);
        if (paramPackage.childPackages != null)
        {
          paramInt2 = paramPackage.childPackages.size();
          break label173;
          if (j < paramInt2)
          {
            scanPackageLI((PackageParser.Package)paramPackage.childPackages.get(j), paramInt1, i, paramLong, paramUserHandle);
            j += 1;
            continue;
            i = paramInt2 & 0xFFFF7FFF;
          }
        }
        else
        {
          paramInt2 = 0;
          break label173;
        }
        Trace.traceEnd(262144L);
        if ((0x8000 & i) != 0) {
          return scanPackageTracedLI(paramPackage, paramInt1, i, paramLong, paramUserHandle);
        }
      }
      finally
      {
        Trace.traceEnd(262144L);
      }
      return localPackage;
      label173:
      int j = 0;
    }
  }
  
  private PackageParser.Package scanPackageTracedLI(File paramFile, int paramInt1, int paramInt2, long paramLong, UserHandle paramUserHandle)
    throws PackageManagerException
  {
    Trace.traceBegin(262144L, "scanPackage");
    try
    {
      paramFile = scanPackageLI(paramFile, paramInt1, paramInt2, paramLong, paramUserHandle);
      return paramFile;
    }
    finally
    {
      Trace.traceEnd(262144L);
    }
  }
  
  private void sendApplicationHiddenForUser(String paramString, PackageSetting paramPackageSetting, int paramInt)
  {
    PackageRemovedInfo localPackageRemovedInfo = new PackageRemovedInfo();
    localPackageRemovedInfo.removedPackage = paramString;
    localPackageRemovedInfo.removedUsers = new int[] { paramInt };
    localPackageRemovedInfo.uid = UserHandle.getUid(paramInt, paramPackageSetting.appId);
    localPackageRemovedInfo.sendPackageRemovedBroadcasts(true);
  }
  
  private void sendFirstLaunchBroadcast(String paramString1, String paramString2, int[] paramArrayOfInt)
  {
    sendPackageBroadcast("android.intent.action.PACKAGE_FIRST_LAUNCH", paramString1, null, 0, paramString2, null, paramArrayOfInt);
  }
  
  private void sendPackageAddedForUser(String paramString, PackageSetting paramPackageSetting, int paramInt)
  {
    if (!isSystemApp(paramPackageSetting)) {}
    for (boolean bool = isUpdatedSystemApp(paramPackageSetting);; bool = true)
    {
      sendPackageAddedForUser(paramString, bool, paramPackageSetting.appId, paramInt);
      return;
    }
  }
  
  private void sendPackageAddedForUser(String paramString, boolean paramBoolean, int paramInt1, int paramInt2)
  {
    Object localObject = new Bundle(1);
    ((Bundle)localObject).putInt("android.intent.extra.UID", UserHandle.getUid(paramInt2, paramInt1));
    sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", paramString, (Bundle)localObject, 0, null, null, new int[] { paramInt2 });
    try
    {
      localObject = ActivityManagerNative.getDefault();
      if ((paramBoolean) && (((IActivityManager)localObject).isUserRunning(paramInt2, 0))) {
        ((IActivityManager)localObject).broadcastIntent(null, new Intent("android.intent.action.BOOT_COMPLETED").addFlags(32).setPackage(paramString), null, null, 0, null, null, null, -1, null, false, false, paramInt2);
      }
      return;
    }
    catch (RemoteException paramString)
    {
      Slog.w("PackageManager", "Unable to bootstrap installed package", paramString);
    }
  }
  
  private void sendPackageChangedBroadcast(String paramString, boolean paramBoolean, ArrayList<String> paramArrayList, int paramInt)
  {
    if (DEBUG_INSTALL) {
      Log.v("PackageManager", "Sending package changed: package=" + paramString + " components=" + paramArrayList);
    }
    Bundle localBundle = new Bundle(4);
    localBundle.putString("android.intent.extra.changed_component_name", (String)paramArrayList.get(0));
    String[] arrayOfString = new String[paramArrayList.size()];
    paramArrayList.toArray(arrayOfString);
    localBundle.putStringArray("android.intent.extra.changed_component_name_list", arrayOfString);
    localBundle.putBoolean("android.intent.extra.DONT_KILL_APP", paramBoolean);
    localBundle.putInt("android.intent.extra.UID", paramInt);
    if (!paramArrayList.contains(paramString)) {}
    for (int i = 1073741824;; i = 0)
    {
      sendPackageBroadcast("android.intent.action.PACKAGE_CHANGED", paramString, localBundle, i, null, null, new int[] { UserHandle.getUserId(paramInt) });
      return;
    }
  }
  
  private void sendPackagesSuspendedForUser(String[] paramArrayOfString, int paramInt, boolean paramBoolean)
  {
    Bundle localBundle;
    if (paramArrayOfString.length > 0)
    {
      localBundle = new Bundle(1);
      localBundle.putStringArray("android.intent.extra.changed_package_list", paramArrayOfString);
      if (!paramBoolean) {
        break label53;
      }
    }
    label53:
    for (paramArrayOfString = "android.intent.action.PACKAGES_SUSPENDED";; paramArrayOfString = "android.intent.action.PACKAGES_UNSUSPENDED")
    {
      sendPackageBroadcast(paramArrayOfString, null, localBundle, 1073741824, null, null, new int[] { paramInt });
      return;
    }
  }
  
  private void sendResourcesChangedBroadcast(boolean paramBoolean1, boolean paramBoolean2, ArrayList<ApplicationInfo> paramArrayList, IIntentReceiver paramIIntentReceiver)
  {
    int j = paramArrayList.size();
    String[] arrayOfString = new String[j];
    int[] arrayOfInt = new int[j];
    int i = 0;
    while (i < j)
    {
      ApplicationInfo localApplicationInfo = (ApplicationInfo)paramArrayList.get(i);
      arrayOfString[i] = localApplicationInfo.packageName;
      arrayOfInt[i] = localApplicationInfo.uid;
      i += 1;
    }
    sendResourcesChangedBroadcast(paramBoolean1, paramBoolean2, arrayOfString, arrayOfInt, paramIIntentReceiver);
  }
  
  private void sendResourcesChangedBroadcast(boolean paramBoolean1, boolean paramBoolean2, ArrayList<String> paramArrayList, int[] paramArrayOfInt, IIntentReceiver paramIIntentReceiver)
  {
    sendResourcesChangedBroadcast(paramBoolean1, paramBoolean2, (String[])paramArrayList.toArray(new String[paramArrayList.size()]), paramArrayOfInt, paramIIntentReceiver);
  }
  
  private void sendResourcesChangedBroadcast(boolean paramBoolean1, boolean paramBoolean2, String[] paramArrayOfString, int[] paramArrayOfInt, IIntentReceiver paramIIntentReceiver)
  {
    Bundle localBundle;
    if (paramArrayOfString.length > 0)
    {
      localBundle = new Bundle();
      localBundle.putStringArray("android.intent.extra.changed_package_list", paramArrayOfString);
      if (paramArrayOfInt != null) {
        localBundle.putIntArray("android.intent.extra.changed_uid_list", paramArrayOfInt);
      }
      if (paramBoolean2) {
        localBundle.putBoolean("android.intent.extra.REPLACING", paramBoolean2);
      }
      if (!paramBoolean1) {
        break label73;
      }
    }
    label73:
    for (paramArrayOfString = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";; paramArrayOfString = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")
    {
      sendPackageBroadcast(paramArrayOfString, null, localBundle, 0, null, paramIIntentReceiver, null);
      return;
    }
  }
  
  private void serializeRuntimePermissionGrantsLPr(XmlSerializer paramXmlSerializer, int paramInt)
    throws IOException
  {
    paramXmlSerializer.startTag(null, "rt-grants");
    int i1 = this.mSettings.mPackages.size();
    int i = 0;
    while (i < i1)
    {
      Object localObject = (PackageSetting)this.mSettings.mPackages.valueAt(i);
      int k = 0;
      localObject = ((PackageSetting)localObject).getPermissionsState().getRuntimePermissionStates(paramInt).iterator();
      while (((Iterator)localObject).hasNext())
      {
        PermissionsState.PermissionState localPermissionState = (PermissionsState.PermissionState)((Iterator)localObject).next();
        int n = localPermissionState.getFlags();
        if ((n & 0x34) == 0)
        {
          boolean bool = localPermissionState.isGranted();
          if ((bool) || ((n & 0xB) != 0))
          {
            String str = (String)this.mSettings.mPackages.keyAt(i);
            int j = k;
            if (k == 0)
            {
              paramXmlSerializer.startTag(null, "grant");
              paramXmlSerializer.attribute(null, "pkg", str);
              j = 1;
            }
            label184:
            int m;
            if ((n & 0x1) != 0)
            {
              k = 1;
              if ((n & 0x2) == 0) {
                break label327;
              }
              m = 1;
              label194:
              if ((n & 0x8) == 0) {
                break label333;
              }
            }
            label327:
            label333:
            for (n = 1;; n = 0)
            {
              paramXmlSerializer.startTag(null, "perm");
              paramXmlSerializer.attribute(null, "name", localPermissionState.getName());
              if (bool) {
                paramXmlSerializer.attribute(null, "g", "true");
              }
              if (k != 0) {
                paramXmlSerializer.attribute(null, "set", "true");
              }
              if (m != 0) {
                paramXmlSerializer.attribute(null, "fixed", "true");
              }
              if (n != 0) {
                paramXmlSerializer.attribute(null, "rou", "true");
              }
              paramXmlSerializer.endTag(null, "perm");
              k = j;
              break;
              k = 0;
              break label184;
              m = 0;
              break label194;
            }
          }
        }
      }
      if (k != 0) {
        paramXmlSerializer.endTag(null, "grant");
      }
      i += 1;
    }
    paramXmlSerializer.endTag(null, "rt-grants");
  }
  
  private static void setBundledAppAbi(PackageParser.Package paramPackage, String paramString1, String paramString2)
  {
    File localFile = new File(paramPackage.codePath);
    boolean bool1;
    boolean bool2;
    if (PackageParser.isApkFile(localFile))
    {
      bool1 = new File(paramString1, new File("lib64", paramString2).getPath()).exists();
      bool2 = new File(paramString1, new File("lib", paramString2).getPath()).exists();
    }
    while ((!bool1) || (bool2))
    {
      if ((bool2) && (!bool1)) {
        break label311;
      }
      if ((!bool2) || (!bool1)) {
        break label357;
      }
      if ((paramPackage.applicationInfo.flags & 0x80000000) == 0) {
        Slog.e("PackageManager", "Package " + paramPackage + " has multiple bundled libs, but is not multiarch.");
      }
      if (!VMRuntime.is64BitInstructionSet(InstructionSets.getPreferredInstructionSet())) {
        break label332;
      }
      paramPackage.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
      paramPackage.applicationInfo.secondaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
      return;
      paramString1 = new File(localFile, "lib");
      if ((ArrayUtils.isEmpty(Build.SUPPORTED_64_BIT_ABIS)) || (TextUtils.isEmpty(Build.SUPPORTED_64_BIT_ABIS[0]))) {}
      for (bool1 = false;; bool1 = new File(paramString1, VMRuntime.getInstructionSet(Build.SUPPORTED_64_BIT_ABIS[0])).exists())
      {
        if ((!ArrayUtils.isEmpty(Build.SUPPORTED_32_BIT_ABIS)) && (!TextUtils.isEmpty(Build.SUPPORTED_32_BIT_ABIS[0]))) {
          break label266;
        }
        bool2 = false;
        break;
      }
      label266:
      bool2 = new File(paramString1, VMRuntime.getInstructionSet(Build.SUPPORTED_32_BIT_ABIS[0])).exists();
    }
    paramPackage.applicationInfo.primaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
    paramPackage.applicationInfo.secondaryCpuAbi = null;
    return;
    label311:
    paramPackage.applicationInfo.primaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
    paramPackage.applicationInfo.secondaryCpuAbi = null;
    return;
    label332:
    paramPackage.applicationInfo.primaryCpuAbi = Build.SUPPORTED_32_BIT_ABIS[0];
    paramPackage.applicationInfo.secondaryCpuAbi = Build.SUPPORTED_64_BIT_ABIS[0];
    return;
    label357:
    paramPackage.applicationInfo.primaryCpuAbi = null;
    paramPackage.applicationInfo.secondaryCpuAbi = null;
  }
  
  private void setBundledAppAbisAndRoots(PackageParser.Package paramPackage, PackageSetting paramPackageSetting)
  {
    String str = deriveCodePathName(paramPackage.applicationInfo.getCodePath());
    setBundledAppAbi(paramPackage, calculateBundledApkRoot(paramPackage.applicationInfo.sourceDir), str);
    if (paramPackageSetting != null)
    {
      paramPackageSetting.primaryCpuAbiString = paramPackage.applicationInfo.primaryCpuAbi;
      paramPackageSetting.secondaryCpuAbiString = paramPackage.applicationInfo.secondaryCpuAbi;
    }
  }
  
  private void setEnabledSetting(String paramString1, String paramString2, int paramInt1, int paramInt2, int paramInt3, String paramString3)
  {
    if ((paramInt1 != 0) && (paramInt1 != 1) && (paramInt1 != 2) && (paramInt1 != 3) && (paramInt1 != 4)) {
      throw new IllegalArgumentException("Invalid new component state: " + paramInt1);
    }
    int m = Binder.getCallingUid();
    int i;
    label89:
    int k;
    int j;
    if (m == 1000)
    {
      i = 0;
      enforceCrossUserPermission(m, paramInt3, false, true, "set enabled");
      if (i != 0) {
        break label190;
      }
      i = 1;
      k = 0;
      if (paramString2 != null) {
        break label196;
      }
      j = 1;
      label99:
      if (j == 0) {
        break label202;
      }
    }
    PackageSetting localPackageSetting;
    label190:
    label196:
    label202:
    for (String str = paramString1;; str = paramString2)
    {
      synchronized (this.mPackages)
      {
        localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString1);
        if (localPackageSetting != null) {
          break label246;
        }
        if (paramString2 != null) {
          break label208;
        }
        throw new IllegalArgumentException("Unknown package: " + paramString1);
      }
      i = this.mContext.checkCallingOrSelfPermission("android.permission.CHANGE_COMPONENT_ENABLED_STATE");
      break;
      i = 0;
      break label89;
      j = 0;
      break label99;
    }
    label208:
    throw new IllegalArgumentException("Unknown component: " + paramString1 + "/" + paramString2);
    label246:
    if (!UserHandle.isSameApp(m, localPackageSetting.appId))
    {
      if (i == 0) {
        throw new SecurityException("Permission Denial: attempt to change component state from pid=" + Binder.getCallingPid() + ", uid=" + m + ", package uid=" + localPackageSetting.appId);
      }
      if (this.mProtectedPackages.isPackageStateProtected(paramInt3, paramString1)) {
        throw new SecurityException("Cannot disable a protected package: " + paramString1);
      }
    }
    ??? = this.mPackages;
    if (m == 2000) {}
    for (;;)
    {
      label435:
      while (paramInt1 != 1) {
        try
        {
          i = localPackageSetting.getEnabled(paramInt3);
          if (paramString2 == null)
          {
            if (i == 3) {
              break label912;
            }
            if (i == 0)
            {
              break label912;
              if (paramString2 != null) {
                break label638;
              }
              i = localPackageSetting.getEnabled(paramInt3);
              if (i != paramInt1) {
                break label498;
              }
              return;
            }
            if (i == 1) {
              break label912;
            }
          }
          throw new SecurityException("Shell cannot change component state for " + paramString1 + "/" + paramString2 + " to " + paramInt1);
        }
        finally {}
      }
    }
    label498:
    if ((paramInt1 == 0) || (paramInt1 == 1)) {
      paramString3 = null;
    }
    localPackageSetting.setEnabled(paramInt1, paramInt3, paramString3);
    label520:
    scheduleWritePackageRestrictionsLocked(paramInt3);
    paramString2 = this.mPendingBroadcasts.get(paramInt3, paramString1);
    label543:
    label590:
    long l;
    if (paramString2 == null)
    {
      paramInt1 = 1;
      if (paramInt1 != 0) {
        paramString2 = new ArrayList();
      }
      if (!paramString2.contains(str)) {
        paramString2.add(str);
      }
      if ((paramInt2 & 0x1) != 0) {
        break label851;
      }
      paramInt1 = 1;
      this.mPendingBroadcasts.remove(paramInt3, paramString1);
      l = Binder.clearCallingIdentity();
      if (paramInt1 == 0) {}
    }
    for (;;)
    {
      try
      {
        paramInt1 = UserHandle.getUid(paramInt3, localPackageSetting.appId);
        if ((paramInt2 & 0x1) != 0)
        {
          bool = true;
          sendPackageChangedBroadcast(paramString1, bool, paramString2, paramInt1);
          return;
          label638:
          paramString3 = localPackageSetting.pkg;
          if ((paramString3 != null) && (paramString3.hasComponentClassName(paramString2)))
          {
            break label924;
            Slog.e("PackageManager", "Invalid new component state: " + paramInt1);
            return;
          }
          if ((paramString3 != null) && (paramString3.applicationInfo.targetSdkVersion >= 16)) {
            throw new IllegalArgumentException("Component class " + paramString2 + " does not exist in " + paramString1);
          }
          Slog.w("PackageManager", "Failed setComponentEnabledSetting: component class " + paramString2 + " does not exist in " + paramString1);
          break label924;
          bool = localPackageSetting.enableComponentLPw(paramString2, paramInt3);
          if (bool) {
            break label520;
          }
          return;
          bool = localPackageSetting.disableComponentLPw(paramString2, paramInt3);
          if (bool) {
            break label520;
          }
          return;
          bool = localPackageSetting.restoreComponentLPw(paramString2, paramInt3);
          if (bool) {
            break label520;
          }
          return;
          paramInt1 = 0;
          break label543;
          label851:
          if (paramInt1 != 0) {
            this.mPendingBroadcasts.put(paramInt3, paramString1, paramString2);
          }
          paramInt1 = k;
          if (this.mHandler.hasMessages(1)) {
            break label590;
          }
          this.mHandler.sendEmptyMessageDelayed(1, 10000L);
          paramInt1 = k;
          break label590;
        }
        boolean bool = false;
        continue;
        if (paramInt1 == 3) {
          break;
        }
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
      label912:
      if (paramInt1 != 0) {
        break label435;
      }
      break;
      label924:
      switch (paramInt1)
      {
      }
    }
  }
  
  private void setInstallAndUpdateTime(PackageParser.Package paramPackage, long paramLong1, long paramLong2)
  {
    PackageSetting localPackageSetting = (PackageSetting)paramPackage.mExtras;
    if (localPackageSetting != null)
    {
      localPackageSetting.firstInstallTime = paramLong1;
      localPackageSetting.lastUpdateTime = paramLong2;
    }
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        localPackageSetting = (PackageSetting)((PackageParser.Package)paramPackage.childPackages.get(j)).mExtras;
        if (localPackageSetting != null)
        {
          localPackageSetting.firstInstallTime = paramLong1;
          localPackageSetting.lastUpdateTime = paramLong2;
        }
        j += 1;
      }
    }
  }
  
  private void setInstallerPackageNameLPw(PackageParser.Package paramPackage, String paramString)
  {
    this.mSettings.setInstallerPackageName(paramPackage.packageName, paramString);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        PackageParser.Package localPackage = (PackageParser.Package)paramPackage.childPackages.get(j);
        this.mSettings.setInstallerPackageName(localPackage.packageName, paramString);
        j += 1;
      }
    }
  }
  
  private void setNativeLibraryPaths(PackageParser.Package paramPackage)
  {
    ApplicationInfo localApplicationInfo = paramPackage.applicationInfo;
    String str1 = paramPackage.codePath;
    Object localObject = new File(str1);
    int i;
    boolean bool;
    if ((!localApplicationInfo.isSystemApp()) || (localApplicationInfo.isUpdatedSystemApp()))
    {
      i = 0;
      if (localApplicationInfo.isForwardLocked()) {
        break label263;
      }
      bool = localApplicationInfo.isExternalAsec();
      label55:
      localApplicationInfo.nativeLibraryRootDir = null;
      localApplicationInfo.nativeLibraryRootRequiresIsa = false;
      localApplicationInfo.nativeLibraryDir = null;
      localApplicationInfo.secondaryNativeLibraryDir = null;
      if (!PackageParser.isApkFile((File)localObject)) {
        break label345;
      }
      if (i == 0) {
        break label284;
      }
      localObject = calculateBundledApkRoot(localApplicationInfo.sourceDir);
      bool = VMRuntime.is64BitInstructionSet(InstructionSets.getPrimaryInstructionSet(localApplicationInfo));
      String str2 = deriveCodePathName(str1);
      if (!bool) {
        break label268;
      }
      str1 = "lib64";
      label126:
      localApplicationInfo.nativeLibraryRootDir = Environment.buildPath(new File((String)localObject), new String[] { str1, str2 }).getAbsolutePath();
      if (localApplicationInfo.secondaryCpuAbi != null)
      {
        if (!bool) {
          break label276;
        }
        str1 = "lib";
        label177:
        localApplicationInfo.secondaryNativeLibraryDir = Environment.buildPath(new File((String)localObject), new String[] { str1, str2 }).getAbsolutePath();
      }
      label211:
      localApplicationInfo.nativeLibraryRootRequiresIsa = false;
      localApplicationInfo.nativeLibraryDir = localApplicationInfo.nativeLibraryRootDir;
    }
    for (;;)
    {
      if ((!localApplicationInfo.isSystemApp()) && (localApplicationInfo.nativeLibraryDir != null) && (!localApplicationInfo.nativeLibraryDir.contains(".tmp"))) {
        break label435;
      }
      return;
      i = 1;
      break;
      label263:
      bool = true;
      break label55;
      label268:
      str1 = "lib";
      break label126;
      label276:
      str1 = "lib64";
      break label177;
      label284:
      if (bool)
      {
        localApplicationInfo.nativeLibraryRootDir = new File(((File)localObject).getParentFile(), "lib").getAbsolutePath();
        break label211;
      }
      str1 = deriveCodePathName(str1);
      localApplicationInfo.nativeLibraryRootDir = new File(this.mAppLib32InstallDir, str1).getAbsolutePath();
      break label211;
      label345:
      localApplicationInfo.nativeLibraryRootDir = new File((File)localObject, "lib").getAbsolutePath();
      localApplicationInfo.nativeLibraryRootRequiresIsa = true;
      localApplicationInfo.nativeLibraryDir = new File(localApplicationInfo.nativeLibraryRootDir, InstructionSets.getPrimaryInstructionSet(localApplicationInfo)).getAbsolutePath();
      if (localApplicationInfo.secondaryCpuAbi != null) {
        localApplicationInfo.secondaryNativeLibraryDir = new File(localApplicationInfo.nativeLibraryRootDir, VMRuntime.getInstructionSet(localApplicationInfo.secondaryCpuAbi)).getAbsolutePath();
      }
    }
    label435:
    this.mOemCompatibilityHelper.customizeNativeLibrariesIfNeeded(paramPackage);
  }
  
  private void setUpCustomResolverActivity(PackageParser.Package paramPackage)
  {
    synchronized (this.mPackages)
    {
      this.mResolverReplaced = true;
      this.mResolveActivity.applicationInfo = paramPackage.applicationInfo;
      this.mResolveActivity.name = this.mCustomResolverComponentName.getClassName();
      this.mResolveActivity.packageName = paramPackage.applicationInfo.packageName;
      this.mResolveActivity.processName = paramPackage.applicationInfo.packageName;
      this.mResolveActivity.launchMode = 0;
      this.mResolveActivity.flags = 288;
      this.mResolveActivity.theme = 0;
      this.mResolveActivity.exported = true;
      this.mResolveActivity.enabled = true;
      this.mResolveInfo.activityInfo = this.mResolveActivity;
      this.mResolveInfo.priority = 0;
      this.mResolveInfo.preferredOrder = 0;
      this.mResolveInfo.match = 0;
      this.mResolveComponentName = this.mCustomResolverComponentName;
      Slog.i("PackageManager", "Replacing default ResolverActivity with custom activity: " + this.mResolveComponentName);
      return;
    }
  }
  
  private void setUpEphemeralInstallerActivityLP(ComponentName paramComponentName)
  {
    paramComponentName = (PackageParser.Package)this.mPackages.get(paramComponentName.getPackageName());
    this.mEphemeralInstallerActivity.applicationInfo = paramComponentName.applicationInfo;
    this.mEphemeralInstallerActivity.name = this.mEphemeralInstallerComponent.getClassName();
    this.mEphemeralInstallerActivity.packageName = paramComponentName.applicationInfo.packageName;
    this.mEphemeralInstallerActivity.processName = paramComponentName.applicationInfo.packageName;
    this.mEphemeralInstallerActivity.launchMode = 0;
    this.mEphemeralInstallerActivity.flags = 288;
    this.mEphemeralInstallerActivity.theme = 0;
    this.mEphemeralInstallerActivity.exported = true;
    this.mEphemeralInstallerActivity.enabled = true;
    this.mEphemeralInstallerInfo.activityInfo = this.mEphemeralInstallerActivity;
    this.mEphemeralInstallerInfo.priority = 0;
    this.mEphemeralInstallerInfo.preferredOrder = 1;
    this.mEphemeralInstallerInfo.isDefault = true;
    this.mEphemeralInstallerInfo.match = 5799936;
    if (DEBUG_EPHEMERAL) {
      Slog.d("PackageManager", "Set ephemeral installer activity: " + this.mEphemeralInstallerComponent);
    }
  }
  
  private boolean shouldCheckUpgradeKeySetLP(PackageSetting paramPackageSetting, int paramInt)
  {
    if ((paramPackageSetting == null) || ((paramInt & 0x4000) != 0)) {}
    while ((paramPackageSetting.sharedUser != null) || (!paramPackageSetting.keySetData.isUsingUpgradeKeySets())) {
      return false;
    }
    Object localObject = this.mSettings.mKeySetManagerService;
    long[] arrayOfLong = paramPackageSetting.keySetData.getUpgradeKeySets();
    paramInt = 0;
    while (paramInt < arrayOfLong.length)
    {
      if (!((KeySetManagerService)localObject).isIdValidKeySetId(arrayOfLong[paramInt]))
      {
        localObject = new StringBuilder().append("Package ");
        if (paramPackageSetting.name != null) {}
        for (paramPackageSetting = paramPackageSetting.name;; paramPackageSetting = "<null>")
        {
          Slog.wtf("PackageManager", paramPackageSetting + " contains upgrade-key-set reference to unknown key-set: " + arrayOfLong[paramInt] + " reverting to signatures check.");
          return false;
        }
      }
      paramInt += 1;
    }
    return true;
  }
  
  private boolean shouldKeepUninstalledPackageLPr(String paramString)
  {
    if (this.mKeepUninstalledPackages != null) {
      return this.mKeepUninstalledPackages.contains(paramString);
    }
    return false;
  }
  
  private void startIntentFilterVerifications(int paramInt, boolean paramBoolean, PackageParser.Package paramPackage)
  {
    if (this.mIntentFilterVerifierComponent == null)
    {
      Slog.w("PackageManager", "No IntentFilter verification will not be done as there is no IntentFilterVerifier available!");
      return;
    }
    Object localObject = this.mIntentFilterVerifierComponent.getPackageName();
    int k;
    if (paramInt == -1)
    {
      i = 0;
      k = getPackageUid((String)localObject, 268435456, i);
      localObject = this.mHandler.obtainMessage(17);
      ((Message)localObject).obj = new IFVerificationParams(paramPackage, paramBoolean, paramInt, k);
      this.mHandler.sendMessage((Message)localObject);
      if (paramPackage.childPackages == null) {
        break label180;
      }
    }
    label180:
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        localObject = (PackageParser.Package)paramPackage.childPackages.get(j);
        Message localMessage = this.mHandler.obtainMessage(17);
        localMessage.obj = new IFVerificationParams((PackageParser.Package)localObject, paramBoolean, paramInt, k);
        this.mHandler.sendMessage(localMessage);
        j += 1;
      }
      i = paramInt;
      break;
    }
  }
  
  private void unloadAllContainers(Set<AsecInstallArgs> arg1)
  {
    Iterator localIterator = ???.iterator();
    while (localIterator.hasNext())
    {
      AsecInstallArgs localAsecInstallArgs = (AsecInstallArgs)localIterator.next();
      synchronized (this.mInstallLock)
      {
        localAsecInstallArgs.doPostDeleteLI(false);
      }
    }
  }
  
  /* Error */
  private void unloadMediaPackages(ArrayMap<AsecInstallArgs, String> arg1, int[] paramArrayOfInt, final boolean paramBoolean)
  {
    // Byte code:
    //   0: new 1139	java/util/ArrayList
    //   3: dup
    //   4: invokespecial 1140	java/util/ArrayList:<init>	()V
    //   7: astore 10
    //   9: new 1139	java/util/ArrayList
    //   12: dup
    //   13: invokespecial 1140	java/util/ArrayList:<init>	()V
    //   16: astore 12
    //   18: aload_1
    //   19: invokevirtual 4974	android/util/ArrayMap:keySet	()Ljava/util/Set;
    //   22: astore 11
    //   24: aload 11
    //   26: invokeinterface 1308 1 0
    //   31: astore 13
    //   33: aload 13
    //   35: invokeinterface 1313 1 0
    //   40: ifeq +234 -> 274
    //   43: aload 13
    //   45: invokeinterface 1317 1 0
    //   50: checkcast 93	com/android/server/pm/PackageManagerService$AsecInstallArgs
    //   53: astore 14
    //   55: aload 14
    //   57: invokevirtual 6738	com/android/server/pm/PackageManagerService$AsecInstallArgs:getPackageName	()Ljava/lang/String;
    //   60: astore 15
    //   62: new 174	com/android/server/pm/PackageManagerService$PackageRemovedInfo
    //   65: dup
    //   66: aload_0
    //   67: invokespecial 3294	com/android/server/pm/PackageManagerService$PackageRemovedInfo:<init>	(Lcom/android/server/pm/PackageManagerService;)V
    //   70: astore 16
    //   72: aload_0
    //   73: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   76: astore 9
    //   78: aload 9
    //   80: monitorenter
    //   81: aconst_null
    //   82: astore 8
    //   84: aconst_null
    //   85: astore 6
    //   87: aconst_null
    //   88: astore_1
    //   89: aload_0
    //   90: aload 15
    //   92: iconst_1
    //   93: ldc_w 6739
    //   96: invokevirtual 6741	com/android/server/pm/PackageManagerService:freezePackageForDelete	(Ljava/lang/String;ILjava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
    //   99: astore 7
    //   101: aload 7
    //   103: astore_1
    //   104: aload 7
    //   106: astore 6
    //   108: aload_0
    //   109: aload 15
    //   111: aconst_null
    //   112: iconst_0
    //   113: aconst_null
    //   114: iconst_1
    //   115: aload 16
    //   117: iconst_0
    //   118: aconst_null
    //   119: invokespecial 3354	com/android/server/pm/PackageManagerService:deletePackageLIF	(Ljava/lang/String;Landroid/os/UserHandle;Z[IILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;ZLandroid/content/pm/PackageParser$Package;)Z
    //   122: istore 5
    //   124: aload 8
    //   126: astore_1
    //   127: aload 7
    //   129: ifnull +11 -> 140
    //   132: aload 7
    //   134: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   137: aload 8
    //   139: astore_1
    //   140: aload_1
    //   141: ifnull +75 -> 216
    //   144: aload_1
    //   145: athrow
    //   146: astore_1
    //   147: aload 9
    //   149: monitorexit
    //   150: aload_1
    //   151: athrow
    //   152: astore_1
    //   153: goto -13 -> 140
    //   156: astore_2
    //   157: aload_2
    //   158: athrow
    //   159: astore 7
    //   161: aload_1
    //   162: astore 6
    //   164: aload_2
    //   165: astore_1
    //   166: aload 7
    //   168: astore_2
    //   169: aload_1
    //   170: astore 7
    //   172: aload 6
    //   174: ifnull +11 -> 185
    //   177: aload 6
    //   179: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   182: aload_1
    //   183: astore 7
    //   185: aload 7
    //   187: ifnull +27 -> 214
    //   190: aload 7
    //   192: athrow
    //   193: aload_1
    //   194: astore 7
    //   196: aload_1
    //   197: aload 6
    //   199: if_acmpeq -14 -> 185
    //   202: aload_1
    //   203: aload 6
    //   205: invokevirtual 3359	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   208: aload_1
    //   209: astore 7
    //   211: goto -26 -> 185
    //   214: aload_2
    //   215: athrow
    //   216: iload 5
    //   218: ifeq +17 -> 235
    //   221: aload 10
    //   223: aload 15
    //   225: invokevirtual 2294	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   228: pop
    //   229: aload 9
    //   231: monitorexit
    //   232: goto -199 -> 33
    //   235: ldc_w 391
    //   238: new 1320	java/lang/StringBuilder
    //   241: dup
    //   242: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   245: ldc_w 6743
    //   248: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   251: aload 15
    //   253: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   256: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   259: invokestatic 1934	android/util/Slog:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   262: pop
    //   263: aload 12
    //   265: aload 14
    //   267: invokevirtual 2294	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   270: pop
    //   271: goto -42 -> 229
    //   274: aload_0
    //   275: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   278: astore_1
    //   279: aload_1
    //   280: monitorenter
    //   281: aload_0
    //   282: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   285: invokevirtual 2063	com/android/server/pm/Settings:writeLPr	()V
    //   288: aload_1
    //   289: monitorexit
    //   290: aload 10
    //   292: invokevirtual 1868	java/util/ArrayList:size	()I
    //   295: ifle +29 -> 324
    //   298: aload_0
    //   299: iconst_0
    //   300: iconst_0
    //   301: aload 10
    //   303: aload_2
    //   304: new 43	com/android/server/pm/PackageManagerService$25
    //   307: dup
    //   308: aload_0
    //   309: iload_3
    //   310: aload 11
    //   312: invokespecial 6746	com/android/server/pm/PackageManagerService$25:<init>	(Lcom/android/server/pm/PackageManagerService;ZLjava/util/Set;)V
    //   315: invokespecial 4575	com/android/server/pm/PackageManagerService:sendResourcesChangedBroadcast	(ZZLjava/util/ArrayList;[ILandroid/content/IIntentReceiver;)V
    //   318: return
    //   319: astore_2
    //   320: aload_1
    //   321: monitorexit
    //   322: aload_2
    //   323: athrow
    //   324: aload_0
    //   325: getfield 1449	com/android/server/pm/PackageManagerService:mHandler	Lcom/android/server/pm/PackageManagerService$PackageHandler;
    //   328: astore_1
    //   329: iload_3
    //   330: ifeq +28 -> 358
    //   333: iconst_1
    //   334: istore 4
    //   336: aload_1
    //   337: bipush 12
    //   339: iload 4
    //   341: iconst_m1
    //   342: aload 11
    //   344: invokevirtual 6749	com/android/server/pm/PackageManagerService$PackageHandler:obtainMessage	(IIILjava/lang/Object;)Landroid/os/Message;
    //   347: astore_1
    //   348: aload_0
    //   349: getfield 1449	com/android/server/pm/PackageManagerService:mHandler	Lcom/android/server/pm/PackageManagerService$PackageHandler;
    //   352: aload_1
    //   353: invokevirtual 5314	com/android/server/pm/PackageManagerService$PackageHandler:sendMessage	(Landroid/os/Message;)Z
    //   356: pop
    //   357: return
    //   358: iconst_0
    //   359: istore 4
    //   361: goto -25 -> 336
    //   364: astore_2
    //   365: aconst_null
    //   366: astore_1
    //   367: goto -198 -> 169
    //   370: astore 6
    //   372: aload_1
    //   373: ifnonnull -180 -> 193
    //   376: aload 6
    //   378: astore 7
    //   380: goto -195 -> 185
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	383	0	this	PackageManagerService
    //   0	383	2	paramArrayOfInt	int[]
    //   0	383	3	paramBoolean	boolean
    //   334	26	4	i	int
    //   122	95	5	bool	boolean
    //   85	119	6	localObject1	Object
    //   370	7	6	localThrowable	Throwable
    //   99	34	7	localPackageFreezer	PackageFreezer
    //   159	8	7	localObject2	Object
    //   170	209	7	localObject3	Object
    //   82	56	8	localObject4	Object
    //   76	154	9	localObject5	Object
    //   7	295	10	localArrayList1	ArrayList
    //   22	321	11	localSet	Set
    //   16	248	12	localArrayList2	ArrayList
    //   31	13	13	localIterator	Iterator
    //   53	213	14	localAsecInstallArgs	AsecInstallArgs
    //   60	192	15	str	String
    //   70	46	16	localPackageRemovedInfo	PackageRemovedInfo
    // Exception table:
    //   from	to	target	type
    //   132	137	146	finally
    //   144	146	146	finally
    //   177	182	146	finally
    //   190	193	146	finally
    //   202	208	146	finally
    //   214	216	146	finally
    //   221	229	146	finally
    //   235	271	146	finally
    //   132	137	152	java/lang/Throwable
    //   89	101	156	java/lang/Throwable
    //   108	124	156	java/lang/Throwable
    //   157	159	159	finally
    //   281	288	319	finally
    //   89	101	364	finally
    //   108	124	364	finally
    //   177	182	370	java/lang/Throwable
  }
  
  private void unloadPrivatePackages(final VolumeInfo paramVolumeInfo)
  {
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        PackageManagerService.-wrap44(PackageManagerService.this, paramVolumeInfo);
      }
    });
  }
  
  private void unloadPrivatePackagesInner(VolumeInfo paramVolumeInfo)
  {
    Object localObject1 = paramVolumeInfo.fsUuid;
    if (TextUtils.isEmpty((CharSequence)localObject1))
    {
      Slog.e("PackageManager", "Unloading internal storage is probably a mistake; ignoring");
      return;
    }
    ArrayList localArrayList = new ArrayList();
    for (;;)
    {
      PackageSetting localPackageSetting;
      ApplicationInfo localApplicationInfo;
      PackageRemovedInfo localPackageRemovedInfo;
      Object localObject6;
      Object localObject3;
      synchronized (this.mInstallLock)
      {
        synchronized (this.mPackages)
        {
          Iterator localIterator = this.mSettings.getVolumePackagesLPr((String)localObject1).iterator();
          if (localIterator.hasNext())
          {
            localPackageSetting = (PackageSetting)localIterator.next();
            if (localPackageSetting.pkg == null) {
              continue;
            }
            localApplicationInfo = localPackageSetting.pkg.applicationInfo;
            localPackageRemovedInfo = new PackageRemovedInfo();
            localObject6 = null;
            localObject3 = null;
            localObject1 = null;
          }
        }
      }
      try
      {
        PackageFreezer localPackageFreezer = freezePackageForDelete(localPackageSetting.name, 1, "unloadPrivatePackagesInner");
        localObject1 = localPackageFreezer;
        localObject3 = localPackageFreezer;
        if (deletePackageLIF(localPackageSetting.name, null, false, null, 1, localPackageRemovedInfo, false, null))
        {
          localObject1 = localPackageFreezer;
          localObject3 = localPackageFreezer;
          localArrayList.add(localApplicationInfo);
        }
        for (;;)
        {
          localObject1 = localObject6;
          if (localPackageFreezer != null) {}
          try
          {
            localPackageFreezer.close();
            localObject1 = localObject6;
          }
          catch (Throwable localThrowable1)
          {
            int i;
            for (;;) {}
          }
          if (localObject1 == null) {
            break;
          }
          throw ((Throwable)localObject1);
          paramVolumeInfo = finally;
          throw paramVolumeInfo;
          paramVolumeInfo = finally;
          throw paramVolumeInfo;
          localObject1 = localPackageFreezer;
          localObject3 = localPackageFreezer;
          Slog.w("PackageManager", "Failed to unload " + localPackageSetting.codePath);
        }
      }
      catch (Throwable paramVolumeInfo)
      {
        try
        {
          throw paramVolumeInfo;
        }
        finally
        {
          localObject3 = localObject1;
        }
        localObject5 = paramVolumeInfo;
        if (localObject3 != null) {}
        for (;;)
        {
          try
          {
            ((PackageFreezer)localObject3).close();
            localObject5 = paramVolumeInfo;
          }
          catch (Throwable localThrowable2)
          {
            if (paramVolumeInfo != null) {
              continue;
            }
            localObject5 = localThrowable2;
            continue;
          }
          if (localObject5 == null) {
            continue;
          }
          throw ((Throwable)localObject5);
          localObject5 = paramVolumeInfo;
          if (paramVolumeInfo != localObject3)
          {
            paramVolumeInfo.addSuppressed((Throwable)localObject3);
            localObject5 = paramVolumeInfo;
          }
        }
        throw ((Throwable)localObject1);
        AttributeCache.instance().removePackage(localPackageSetting.name);
        continue;
        this.mSettings.writeLPr();
        if (DEBUG_INSTALL) {
          Slog.d("PackageManager", "Unloaded packages " + localArrayList);
        }
        sendResourcesChangedBroadcast(false, false, localArrayList, null);
        ResourcesManager.getInstance().invalidatePath(paramVolumeInfo.getPath().getAbsolutePath());
        i = 0;
        while (i < 3)
        {
          System.gc();
          System.runFinalization();
          i += 1;
        }
        return;
      }
      finally
      {
        for (;;)
        {
          paramVolumeInfo = null;
        }
      }
    }
  }
  
  private ArrayList<PackageParser.Package> updateAllSharedLibrariesLPw(PackageParser.Package paramPackage)
  {
    Object localObject2 = null;
    Iterator localIterator = this.mPackages.values().iterator();
    Object localObject3;
    while (localIterator.hasNext())
    {
      PackageParser.Package localPackage = (PackageParser.Package)localIterator.next();
      if ((hasString(localPackage.usesLibraries, paramPackage.libraryNames)) || (hasString(localPackage.usesOptionalLibraries, paramPackage.libraryNames)))
      {
        Object localObject1 = localObject2;
        if (localObject2 == null) {
          localObject1 = new ArrayList();
        }
        ((ArrayList)localObject1).add(localPackage);
        try
        {
          updateSharedLibrariesLPw(localPackage, paramPackage);
          localObject2 = localObject1;
        }
        catch (PackageManagerException localPackageManagerException)
        {
          Slog.e("PackageManager", "updateAllSharedLibrariesLPw failed: " + localPackageManagerException.getMessage());
          localObject3 = localObject1;
        }
      }
    }
    return (ArrayList<PackageParser.Package>)localObject3;
  }
  
  private void updateAllSharedLibrariesLPw()
  {
    Iterator localIterator = this.mPackages.values().iterator();
    while (localIterator.hasNext())
    {
      PackageParser.Package localPackage = (PackageParser.Package)localIterator.next();
      try
      {
        updateSharedLibrariesLPw(localPackage, null);
      }
      catch (PackageManagerException localPackageManagerException)
      {
        Slog.e("PackageManager", "updateAllSharedLibrariesLPw failed: " + localPackageManagerException.getMessage());
      }
    }
  }
  
  /* Error */
  private static void updateDigest(MessageDigest paramMessageDigest, File paramFile)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_3
    //   2: aconst_null
    //   3: astore 5
    //   5: aconst_null
    //   6: astore 6
    //   8: aconst_null
    //   9: astore 4
    //   11: new 6783	java/security/DigestInputStream
    //   14: dup
    //   15: new 6785	java/io/FileInputStream
    //   18: dup
    //   19: aload_1
    //   20: invokespecial 6787	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   23: aload_0
    //   24: invokespecial 6790	java/security/DigestInputStream:<init>	(Ljava/io/InputStream;Ljava/security/MessageDigest;)V
    //   27: astore_0
    //   28: aload_0
    //   29: invokevirtual 6792	java/security/DigestInputStream:read	()I
    //   32: istore_2
    //   33: iload_2
    //   34: iconst_m1
    //   35: if_icmpne -7 -> 28
    //   38: aload 5
    //   40: astore_1
    //   41: aload_0
    //   42: ifnull +10 -> 52
    //   45: aload_0
    //   46: invokevirtual 6793	java/security/DigestInputStream:close	()V
    //   49: aload 5
    //   51: astore_1
    //   52: aload_1
    //   53: ifnull +76 -> 129
    //   56: aload_1
    //   57: athrow
    //   58: astore_1
    //   59: goto -7 -> 52
    //   62: astore_1
    //   63: aload 4
    //   65: astore_0
    //   66: aload_1
    //   67: athrow
    //   68: astore 4
    //   70: aload_1
    //   71: astore_3
    //   72: aload 4
    //   74: astore_1
    //   75: aload_3
    //   76: astore 4
    //   78: aload_0
    //   79: ifnull +10 -> 89
    //   82: aload_0
    //   83: invokevirtual 6793	java/security/DigestInputStream:close	()V
    //   86: aload_3
    //   87: astore 4
    //   89: aload 4
    //   91: ifnull +36 -> 127
    //   94: aload 4
    //   96: athrow
    //   97: astore_0
    //   98: aload_3
    //   99: ifnonnull +9 -> 108
    //   102: aload_0
    //   103: astore 4
    //   105: goto -16 -> 89
    //   108: aload_3
    //   109: astore 4
    //   111: aload_3
    //   112: aload_0
    //   113: if_acmpeq -24 -> 89
    //   116: aload_3
    //   117: aload_0
    //   118: invokevirtual 3359	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   121: aload_3
    //   122: astore 4
    //   124: goto -35 -> 89
    //   127: aload_1
    //   128: athrow
    //   129: return
    //   130: astore_1
    //   131: aload 6
    //   133: astore_0
    //   134: goto -59 -> 75
    //   137: astore_1
    //   138: goto -63 -> 75
    //   141: astore_1
    //   142: goto -76 -> 66
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	145	0	paramMessageDigest	MessageDigest
    //   0	145	1	paramFile	File
    //   32	4	2	i	int
    //   1	121	3	localFile	File
    //   9	55	4	localObject1	Object
    //   68	5	4	localObject2	Object
    //   76	47	4	localObject3	Object
    //   3	47	5	localObject4	Object
    //   6	126	6	localObject5	Object
    // Exception table:
    //   from	to	target	type
    //   45	49	58	java/lang/Throwable
    //   11	28	62	java/lang/Throwable
    //   66	68	68	finally
    //   82	86	97	java/lang/Throwable
    //   11	28	130	finally
    //   28	33	137	finally
    //   28	33	141	java/lang/Throwable
  }
  
  private void updateExternalMediaStatusInner(boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    ArrayMap localArrayMap1 = new ArrayMap();
    int[] arrayOfInt1 = EmptyArray.INT;
    String[] arrayOfString = PackageHelper.getSecureContainerList();
    ArrayMap localArrayMap2;
    int i;
    label79:
    String str;
    Object localObject2;
    PackageSetting localPackageSetting;
    if (ArrayUtils.isEmpty(arrayOfString))
    {
      Log.i("PackageManager", "No secure containers found");
      if (paramBoolean1)
      {
        loadMediaPackages(localArrayMap1, arrayOfInt1, paramBoolean3);
        startCleaningPackages();
        this.mInstallerService.onSecureContainersAvailable();
      }
    }
    else
    {
      localArrayMap2 = this.mPackages;
      i = 0;
      try
      {
        int j = arrayOfString.length;
        if (i >= j) {
          break label384;
        }
        str = arrayOfString[i];
        if (PackageInstallerService.isStageName(str))
        {
          localObject2 = arrayOfInt1;
        }
        else
        {
          localObject2 = getAsecPackageName(str);
          if (localObject2 == null)
          {
            Slog.i("PackageManager", "Found stale container " + str + " with no package name");
            localObject2 = arrayOfInt1;
          }
        }
      }
      finally {}
      localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(localObject2);
      if (localPackageSetting != null) {
        break label418;
      }
      Slog.i("PackageManager", "Found stale container " + str + " with no matching settings");
      localObject2 = arrayOfInt2;
      break label405;
    }
    for (;;)
    {
      label232:
      localObject2 = new AsecInstallArgs(str, InstructionSets.getAppDexInstructionSets(localPackageSetting), localPackageSetting.isForwardLocked());
      if ((localPackageSetting.codePathString != null) && (localPackageSetting.codePathString.startsWith(((AsecInstallArgs)localObject2).getCodePath())))
      {
        localArrayMap1.put(localObject2, localPackageSetting.codePathString);
        int k = localPackageSetting.appId;
        localObject2 = arrayOfInt2;
        if (k == -1) {
          break label405;
        }
        localObject2 = ArrayUtils.appendInt(arrayOfInt2, k);
      }
      label384:
      label405:
      label418:
      do
      {
        localObject2 = arrayOfInt2;
        if (isExternal(localPackageSetting))
        {
          break label232;
          Slog.i("PackageManager", "Found stale container " + str + ": expected codePath=" + localPackageSetting.codePathString);
          localObject2 = arrayOfInt2;
          break label405;
          Arrays.sort(arrayOfInt2);
          break;
          unloadMediaPackages(localArrayMap1, arrayOfInt2, paramBoolean2);
          return;
        }
        i += 1;
        Object localObject1 = localObject2;
        break label79;
        if (!paramBoolean3) {
          break label232;
        }
      } while (!paramBoolean1);
    }
  }
  
  private int updateFlags(int paramInt1, int paramInt2)
  {
    if ((paramInt1 & 0xC0000) != 0) {
      return paramInt1;
    }
    if (getUserManagerInternal().isUserUnlockingOrUnlocked(paramInt2)) {
      return paramInt1 | 0xC0000;
    }
    return paramInt1 | 0x80000;
  }
  
  private int updateFlagsForApplication(int paramInt1, int paramInt2, Object paramObject)
  {
    return updateFlagsForPackage(paramInt1, paramInt2, paramObject);
  }
  
  private int updateFlagsForComponent(int paramInt1, int paramInt2, Object paramObject)
  {
    int i = paramInt1;
    if ((paramObject instanceof Intent))
    {
      i = paramInt1;
      if ((((Intent)paramObject).getFlags() & 0x100) != 0) {
        i = paramInt1 | 0x10000000;
      }
    }
    if ((0x100C0000 & i) == 0) {}
    return updateFlags(i, paramInt2);
  }
  
  private int updateFlagsForPackage(int paramInt1, int paramInt2, Object paramObject)
  {
    if ((((paramInt1 & 0xF) == 0) || ((0x100C0000 & paramInt1) != 0)) || ((0x10102000 & paramInt1) == 0)) {}
    return updateFlags(paramInt1, paramInt2);
  }
  
  private void updatePermissionsLPw(PackageParser.Package paramPackage, int paramInt)
  {
    updatePermissionsLPw(paramPackage.packageName, paramPackage, paramInt);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        PackageParser.Package localPackage = (PackageParser.Package)paramPackage.childPackages.get(j);
        updatePermissionsLPw(localPackage.packageName, localPackage, paramInt);
        j += 1;
      }
    }
  }
  
  private void updatePermissionsLPw(String paramString, PackageParser.Package paramPackage, int paramInt)
  {
    String str = null;
    if (paramPackage != null) {
      str = getVolumeUuidForPackage(paramPackage);
    }
    updatePermissionsLPw(paramString, paramPackage, str, paramInt);
  }
  
  private void updatePermissionsLPw(String paramString1, PackageParser.Package paramPackage, String paramString2, int paramInt)
  {
    Object localObject1 = this.mSettings.mPermissionTrees.values().iterator();
    Object localObject2;
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (BasePermission)((Iterator)localObject1).next();
      if (((BasePermission)localObject2).packageSetting == null) {
        ((BasePermission)localObject2).packageSetting = ((PackageSettingBase)this.mSettings.mPackages.get(((BasePermission)localObject2).sourcePackage));
      }
      if (((BasePermission)localObject2).packageSetting == null)
      {
        Slog.w("PackageManager", "Removing dangling permission tree: " + ((BasePermission)localObject2).name + " from package " + ((BasePermission)localObject2).sourcePackage);
        ((Iterator)localObject1).remove();
      }
      else if ((paramString1 != null) && (paramString1.equals(((BasePermission)localObject2).sourcePackage)) && ((paramPackage == null) || (!hasPermission(paramPackage, ((BasePermission)localObject2).name))))
      {
        Slog.i("PackageManager", "Removing old permission tree: " + ((BasePermission)localObject2).name + " from package " + ((BasePermission)localObject2).sourcePackage);
        paramInt |= 0x1;
        ((Iterator)localObject1).remove();
      }
    }
    localObject1 = this.mSettings.mPermissions.values().iterator();
    Object localObject3;
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (BasePermission)((Iterator)localObject1).next();
      if (((BasePermission)localObject2).type == 2)
      {
        if (DEBUG_SETTINGS) {
          Log.v("PackageManager", "Dynamic permission: name=" + ((BasePermission)localObject2).name + " pkg=" + ((BasePermission)localObject2).sourcePackage + " info=" + ((BasePermission)localObject2).pendingInfo);
        }
        if ((((BasePermission)localObject2).packageSetting == null) && (((BasePermission)localObject2).pendingInfo != null))
        {
          localObject3 = findPermissionTreeLP(((BasePermission)localObject2).name);
          if ((localObject3 != null) && (((BasePermission)localObject3).perm != null))
          {
            ((BasePermission)localObject2).packageSetting = ((BasePermission)localObject3).packageSetting;
            ((BasePermission)localObject2).perm = new PackageParser.Permission(((BasePermission)localObject3).perm.owner, new PermissionInfo(((BasePermission)localObject2).pendingInfo));
            ((BasePermission)localObject2).perm.info.packageName = ((BasePermission)localObject3).perm.info.packageName;
            ((BasePermission)localObject2).perm.info.name = ((BasePermission)localObject2).name;
            ((BasePermission)localObject2).uid = ((BasePermission)localObject3).uid;
          }
        }
      }
      if (((BasePermission)localObject2).packageSetting == null) {
        ((BasePermission)localObject2).packageSetting = ((PackageSettingBase)this.mSettings.mPackages.get(((BasePermission)localObject2).sourcePackage));
      }
      if (((BasePermission)localObject2).packageSetting == null)
      {
        Slog.w("PackageManager", "Removing dangling permission: " + ((BasePermission)localObject2).name + " from package " + ((BasePermission)localObject2).sourcePackage);
        ((Iterator)localObject1).remove();
      }
      else if ((paramString1 != null) && (paramString1.equals(((BasePermission)localObject2).sourcePackage)) && ((paramPackage == null) || (!hasPermission(paramPackage, ((BasePermission)localObject2).name))))
      {
        Slog.i("PackageManager", "Removing old permission: " + ((BasePermission)localObject2).name + " from package " + ((BasePermission)localObject2).sourcePackage);
        paramInt |= 0x1;
        ((Iterator)localObject1).remove();
      }
    }
    if ((paramInt & 0x1) != 0)
    {
      localObject1 = this.mPackages.values().iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (PackageParser.Package)((Iterator)localObject1).next();
        if (localObject2 != paramPackage)
        {
          localObject3 = getVolumeUuidForPackage((PackageParser.Package)localObject2);
          if ((paramInt & 0x4) != 0) {}
          for (bool = Objects.equals(paramString2, localObject3);; bool = false)
          {
            grantPermissionsLPw((PackageParser.Package)localObject2, bool, paramString1);
            break;
          }
        }
      }
    }
    if (paramPackage != null)
    {
      localObject1 = getVolumeUuidForPackage(paramPackage);
      if ((paramInt & 0x2) == 0) {
        break label781;
      }
    }
    label781:
    for (boolean bool = Objects.equals(paramString2, localObject1);; bool = false)
    {
      grantPermissionsLPw(paramPackage, bool, paramString1);
      return;
    }
  }
  
  private void updateSettingsInternalLI(PackageParser.Package paramPackage, String paramString, int[] paramArrayOfInt1, int[] paramArrayOfInt2, PackageInstalledInfo paramPackageInstalledInfo, UserHandle paramUserHandle)
  {
    Trace.traceBegin(262144L, "updateSettings");
    String str = paramPackage.packageName;
    synchronized (this.mPackages)
    {
      this.mSettings.setInstallStatus(str, 0);
      Trace.traceBegin(262144L, "writeSettings");
      this.mSettings.writeLPr();
      Trace.traceEnd(262144L);
      if (DEBUG_INSTALL) {
        Slog.d("PackageManager", "New package installed in " + paramPackage.codePath);
      }
    }
    for (;;)
    {
      int i;
      int j;
      int k;
      int m;
      synchronized (this.mPackages)
      {
        Object localObject = paramPackage.packageName;
        if (paramPackage.permissions.size() > 0)
        {
          i = 1;
          updatePermissionsLPw((String)localObject, paramPackage, i | 0x2);
          localObject = (PackageSetting)this.mSettings.mPackages.get(str);
          j = paramUserHandle.getIdentifier();
          if (localObject == null) {
            continue;
          }
          if (!isSystemApp(paramPackage)) {
            continue;
          }
          if (DEBUG_INSTALL) {
            Slog.d("PackageManager", "Implicitly enabling system package on upgrade: " + str);
          }
          if (paramPackageInstalledInfo.origUsers != null)
          {
            paramUserHandle = paramPackageInstalledInfo.origUsers;
            i = 0;
            k = paramUserHandle.length;
            break label473;
            ((PackageSetting)localObject).setEnabled(0, m, paramString);
            i += 1;
            break label473;
            paramPackage = finally;
            throw paramPackage;
          }
        }
        else
        {
          i = 0;
          continue;
        }
        if ((paramArrayOfInt1 != null) && (paramArrayOfInt2 != null))
        {
          i = 0;
          k = paramArrayOfInt1.length;
          if (i < k)
          {
            m = paramArrayOfInt1[i];
            boolean bool = ArrayUtils.contains(paramArrayOfInt2, m);
            if (DEBUG_INSTALL) {
              Slog.d("PackageManager", "    user " + m + " => " + bool);
            }
            ((PackageSetting)localObject).setInstalled(bool, m);
            i += 1;
            continue;
          }
        }
        if (j != -1)
        {
          ((PackageSetting)localObject).setInstalled(true, j);
          ((PackageSetting)localObject).setEnabled(0, j, paramString);
        }
        paramPackageInstalledInfo.name = str;
        paramPackageInstalledInfo.uid = paramPackage.applicationInfo.uid;
        paramPackageInstalledInfo.pkg = paramPackage;
        this.mSettings.setInstallStatus(str, 1);
        this.mSettings.setInstallerPackageName(str, paramString);
        paramPackageInstalledInfo.setReturnCode(1);
        Trace.traceBegin(262144L, "writeSettings");
        this.mSettings.writeLPr();
        Trace.traceEnd(262144L);
        Trace.traceEnd(262144L);
        return;
      }
      label473:
      if (i < k)
      {
        m = paramUserHandle[i];
        if (j != -1) {
          if (j != m) {}
        }
      }
    }
  }
  
  private void updateSettingsLI(PackageParser.Package paramPackage, String paramString, int[] paramArrayOfInt, PackageInstalledInfo paramPackageInstalledInfo, UserHandle paramUserHandle)
  {
    updateSettingsInternalLI(paramPackage, paramString, paramArrayOfInt, paramPackageInstalledInfo.origUsers, paramPackageInstalledInfo, paramUserHandle);
    if (paramPackage.childPackages != null) {}
    for (int i = paramPackage.childPackages.size();; i = 0)
    {
      int j = 0;
      while (j < i)
      {
        PackageParser.Package localPackage = (PackageParser.Package)paramPackage.childPackages.get(j);
        PackageInstalledInfo localPackageInstalledInfo = (PackageInstalledInfo)paramPackageInstalledInfo.addedChildPackages.get(localPackage.packageName);
        updateSettingsInternalLI(localPackage, paramString, paramArrayOfInt, localPackageInstalledInfo.origUsers, localPackageInstalledInfo, paramUserHandle);
        j += 1;
      }
    }
  }
  
  private void updateSharedLibrariesLPw(PackageParser.Package paramPackage1, PackageParser.Package paramPackage2)
    throws PackageManagerException
  {
    if ((paramPackage1.usesLibraries != null) || (paramPackage1.usesOptionalLibraries != null))
    {
      ArraySet localArraySet = new ArraySet();
      int j;
      if (paramPackage1.usesLibraries != null)
      {
        i = paramPackage1.usesLibraries.size();
        j = 0;
      }
      SharedLibraryEntry localSharedLibraryEntry;
      for (;;)
      {
        if (j >= i) {
          break label156;
        }
        localSharedLibraryEntry = (SharedLibraryEntry)this.mSharedLibraries.get(paramPackage1.usesLibraries.get(j));
        if (localSharedLibraryEntry == null)
        {
          throw new PackageManagerException(-9, "Package " + paramPackage1.packageName + " requires unavailable shared library " + (String)paramPackage1.usesLibraries.get(j) + "; failing!");
          i = 0;
          break;
        }
        addSharedLibraryLPw(localArraySet, localSharedLibraryEntry, paramPackage2);
        j += 1;
      }
      label156:
      if (paramPackage1.usesOptionalLibraries != null)
      {
        i = paramPackage1.usesOptionalLibraries.size();
        j = 0;
        label174:
        if (j >= i) {
          break label289;
        }
        localSharedLibraryEntry = (SharedLibraryEntry)this.mSharedLibraries.get(paramPackage1.usesOptionalLibraries.get(j));
        if (localSharedLibraryEntry != null) {
          break label277;
        }
        Slog.w("PackageManager", "Package " + paramPackage1.packageName + " desires unavailable shared library " + (String)paramPackage1.usesOptionalLibraries.get(j) + "; ignoring!");
      }
      for (;;)
      {
        j += 1;
        break label174;
        i = 0;
        break;
        label277:
        addSharedLibraryLPw(localArraySet, localSharedLibraryEntry, paramPackage2);
      }
      label289:
      int i = localArraySet.size();
      if (i > 0) {
        paramPackage1.usesLibraryFiles = ((String[])localArraySet.toArray(new String[i]));
      }
    }
    else
    {
      return;
    }
    paramPackage1.usesLibraryFiles = null;
  }
  
  private boolean userNeedsBadging(int paramInt)
  {
    int i = this.mUserNeedsBadging.indexOfKey(paramInt);
    if (i < 0)
    {
      long l = Binder.clearCallingIdentity();
      for (;;)
      {
        try
        {
          UserInfo localUserInfo = sUserManager.getUserInfo(paramInt);
          Binder.restoreCallingIdentity(l);
          if ((localUserInfo != null) && (localUserInfo.isManagedProfile()))
          {
            bool = true;
            this.mUserNeedsBadging.put(paramInt, bool);
            return bool;
          }
        }
        finally
        {
          Binder.restoreCallingIdentity(l);
        }
        boolean bool = false;
      }
    }
    return this.mUserNeedsBadging.valueAt(i);
  }
  
  private void verifyIntentFiltersIfNeeded(int paramInt1, int paramInt2, boolean paramBoolean, PackageParser.Package paramPackage)
  {
    int i = paramPackage.activities.size();
    if (i == 0)
    {
      if (DEBUG_DOMAIN_VERIFICATION) {
        Slog.d("PackageManager", "No activity, so no need to verify any IntentFilter!");
      }
      return;
    }
    if (!hasDomainURLs(paramPackage))
    {
      if (DEBUG_DOMAIN_VERIFICATION) {
        Slog.d("PackageManager", "No domain URLs, so no need to verify any IntentFilter!");
      }
      return;
    }
    if (DEBUG_DOMAIN_VERIFICATION) {
      Slog.d("PackageManager", "Checking for userId:" + paramInt1 + " if any IntentFilter from the " + i + " Activities needs verification ...");
    }
    int j = 0;
    int k = 0;
    String str = paramPackage.packageName;
    Object localObject1 = this.mPackages;
    if (!paramBoolean) {}
    for (;;)
    {
      try
      {
        Object localObject2 = this.mSettings.getIntentFilterVerificationLPr(str);
        if (localObject2 != null)
        {
          if (DEBUG_DOMAIN_VERIFICATION) {
            Slog.i("PackageManager", "Package " + str + " already verified: status=" + ((IntentFilterVerificationInfo)localObject2).getStatusString());
          }
          return;
        }
        i = 0;
        localObject2 = paramPackage.activities.iterator();
        Object localObject3;
        if (((Iterator)localObject2).hasNext())
        {
          localObject3 = ((PackageParser.Activity)((Iterator)localObject2).next()).intents.iterator();
          if (!((Iterator)localObject3).hasNext()) {
            continue;
          }
          PackageParser.ActivityIntentInfo localActivityIntentInfo = (PackageParser.ActivityIntentInfo)((Iterator)localObject3).next();
          if ((!localActivityIntentInfo.needsVerification()) || (!needsNetworkVerificationLPr(localActivityIntentInfo))) {
            continue;
          }
          if (!DEBUG_DOMAIN_VERIFICATION) {
            break label625;
          }
          Slog.d("PackageManager", "Intent filter needs verification, so processing all filters");
          break label625;
        }
        if (i != 0)
        {
          int m = this.mIntentFilterVerificationToken;
          this.mIntentFilterVerificationToken = (m + 1);
          paramPackage = paramPackage.activities.iterator();
          i = k;
          j = i;
          if (paramPackage.hasNext())
          {
            localObject2 = ((PackageParser.Activity)paramPackage.next()).intents.iterator();
            j = i;
            i = j;
            if (!((Iterator)localObject2).hasNext()) {
              continue;
            }
            localObject3 = (PackageParser.ActivityIntentInfo)((Iterator)localObject2).next();
            if ((!((PackageParser.ActivityIntentInfo)localObject3).handlesWebUris(true)) || (!needsNetworkVerificationLPr((PackageParser.ActivityIntentInfo)localObject3))) {
              continue;
            }
            if (DEBUG_DOMAIN_VERIFICATION) {
              Slog.d("PackageManager", "Verification needed for IntentFilter:" + ((PackageParser.ActivityIntentInfo)localObject3).toString());
            }
            this.mIntentFilterVerifier.addOneIntentFilterVerification(paramInt2, paramInt1, m, (IntentFilter)localObject3, str);
            j += 1;
            continue;
          }
        }
        if (j <= 0) {
          break label590;
        }
        if (DEBUG_DOMAIN_VERIFICATION)
        {
          localObject1 = new StringBuilder().append("Starting ").append(j).append(" IntentFilter verification");
          if (j > 1)
          {
            paramPackage = "s";
            Slog.d("PackageManager", paramPackage + " for userId:" + paramInt1);
          }
        }
        else
        {
          this.mIntentFilterVerifier.startVerifications(paramInt1);
          return;
        }
      }
      finally {}
      paramPackage = "";
      continue;
      label590:
      if (DEBUG_DOMAIN_VERIFICATION)
      {
        Slog.d("PackageManager", "No filters or not all autoVerify for " + str);
        return;
        label625:
        i = 1;
      }
    }
  }
  
  private boolean verifyPackageUpdateLPr(PackageSetting paramPackageSetting, PackageParser.Package paramPackage)
  {
    if ((paramPackageSetting.pkgFlags & 0x1) == 0)
    {
      Slog.w("PackageManager", "Unable to update from " + paramPackageSetting.name + " to " + paramPackage.packageName + ": old package not in system partition");
      return false;
    }
    if (this.mPackages.get(paramPackageSetting.name) != null)
    {
      Slog.w("PackageManager", "Unable to update from " + paramPackageSetting.name + " to " + paramPackage.packageName + ": old package still exists");
      return false;
    }
    return true;
  }
  
  private void verifySignaturesLP(PackageSetting paramPackageSetting, PackageParser.Package paramPackage)
    throws PackageManagerException
  {
    int j;
    int i;
    if (paramPackageSetting.signatures.mSignatures != null)
    {
      if (compareSignatures(paramPackageSetting.signatures.mSignatures, paramPackage.mSignatures) == 0)
      {
        j = 1;
        i = j;
        if (j == 0)
        {
          if (compareSignaturesCompat(paramPackageSetting.signatures, paramPackage) != 0) {
            break label130;
          }
          i = 1;
        }
        label52:
        j = i;
        if (i == 0) {
          if (compareSignaturesRecover(paramPackageSetting.signatures, paramPackage) != 0) {
            break label135;
          }
        }
      }
      label130:
      label135:
      for (j = 1;; j = 0)
      {
        if (j != 0) {
          break label141;
        }
        throw new PackageManagerException(-7, "Package " + paramPackage.packageName + " signatures do not match the " + "previously installed version; ignoring!");
        j = 0;
        break;
        i = 0;
        break label52;
      }
    }
    label141:
    if ((paramPackageSetting.sharedUser != null) && (paramPackageSetting.sharedUser.signatures.mSignatures != null))
    {
      if (compareSignatures(paramPackageSetting.sharedUser.signatures.mSignatures, paramPackage.mSignatures) == 0)
      {
        j = 1;
        i = j;
        if (j == 0)
        {
          if (compareSignaturesCompat(paramPackageSetting.sharedUser.signatures, paramPackage) != 0) {
            break label300;
          }
          i = 1;
        }
        label209:
        j = i;
        if (i == 0) {
          if (compareSignaturesRecover(paramPackageSetting.sharedUser.signatures, paramPackage) != 0) {
            break label305;
          }
        }
      }
      label300:
      label305:
      for (j = 1;; j = 0)
      {
        if (j != 0) {
          return;
        }
        throw new PackageManagerException(-8, "Package " + paramPackage.packageName + " has no signatures that match those in shared user " + paramPackageSetting.sharedUser.name + "; ignoring!");
        j = 0;
        break;
        i = 0;
        break label209;
      }
    }
  }
  
  public boolean activitySupportsIntent(ComponentName paramComponentName, Intent paramIntent, String paramString)
  {
    synchronized (this.mPackages)
    {
      boolean bool = paramComponentName.equals(this.mResolveComponentName);
      if (bool) {
        return true;
      }
      paramComponentName = (PackageParser.Activity)ActivityIntentResolver.-get0(this.mActivities).get(paramComponentName);
      if (paramComponentName == null) {
        return false;
      }
      int i = 0;
      while (i < paramComponentName.intents.size())
      {
        int j = ((PackageParser.ActivityIntentInfo)paramComponentName.intents.get(i)).match(paramIntent.getAction(), paramString, paramIntent.getScheme(), paramIntent.getData(), paramIntent.getCategories(), "PackageManager");
        if (j >= 0) {
          return true;
        }
        i += 1;
      }
      return false;
    }
  }
  
  public void addCrossProfileIntentFilter(IntentFilter paramIntentFilter, String paramString, int paramInt1, int paramInt2, int paramInt3)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", null);
    int i = Binder.getCallingUid();
    enforceOwnerRights(paramString, i);
    enforceShellRestriction("no_debugging_features", i, paramInt1);
    if (paramIntentFilter.countActions() == 0)
    {
      Slog.w("PackageManager", "Cannot set a crossProfile intent filter with no filter actions");
      return;
    }
    synchronized (this.mPackages)
    {
      paramString = new CrossProfileIntentFilter(paramIntentFilter, paramString, paramInt2, paramInt3);
      CrossProfileIntentResolver localCrossProfileIntentResolver = this.mSettings.editCrossProfileIntentResolverLPw(paramInt1);
      paramIntentFilter = localCrossProfileIntentResolver.findFilters(paramIntentFilter);
      if (paramIntentFilter != null)
      {
        paramInt3 = paramIntentFilter.size();
        paramInt2 = 0;
        while (paramInt2 < paramInt3)
        {
          boolean bool = paramString.equalsIgnoreFilter((CrossProfileIntentFilter)paramIntentFilter.get(paramInt2));
          if (bool) {
            return;
          }
          paramInt2 += 1;
        }
      }
      localCrossProfileIntentResolver.addFilter(paramString);
      scheduleWritePackageRestrictionsLocked(paramInt1);
      return;
    }
  }
  
  public void addOnPermissionsChangeListener(IOnPermissionsChangeListener paramIOnPermissionsChangeListener)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS", "addOnPermissionsChangeListener");
    synchronized (this.mPackages)
    {
      this.mOnPermissionChangeListeners.addListenerLocked(paramIOnPermissionsChangeListener);
      return;
    }
  }
  
  public boolean addPermission(PermissionInfo paramPermissionInfo)
  {
    synchronized (this.mPackages)
    {
      boolean bool = addPermissionLocked(paramPermissionInfo, false);
      return bool;
    }
  }
  
  public boolean addPermissionAsync(PermissionInfo paramPermissionInfo)
  {
    synchronized (this.mPackages)
    {
      boolean bool = addPermissionLocked(paramPermissionInfo, true);
      return bool;
    }
  }
  
  boolean addPermissionLocked(PermissionInfo paramPermissionInfo, boolean paramBoolean)
  {
    if ((paramPermissionInfo.labelRes == 0) && (paramPermissionInfo.nonLocalizedLabel == null)) {
      throw new SecurityException("Label must be specified in permission");
    }
    BasePermission localBasePermission3 = checkPermissionTreeLP(paramPermissionInfo.name);
    BasePermission localBasePermission2 = (BasePermission)this.mSettings.mPermissions.get(paramPermissionInfo.name);
    boolean bool;
    int j;
    int k;
    BasePermission localBasePermission1;
    int i;
    if (localBasePermission2 == null)
    {
      bool = true;
      j = 1;
      k = PermissionInfo.fixProtectionLevel(paramPermissionInfo.protectionLevel);
      if (!bool) {
        break label229;
      }
      enforcePermissionCapLocked(paramPermissionInfo, localBasePermission3);
      localBasePermission1 = new BasePermission(paramPermissionInfo.name, localBasePermission3.sourcePackage, 2);
      i = j;
    }
    for (;;)
    {
      localBasePermission1.protectionLevel = k;
      paramPermissionInfo = new PermissionInfo(paramPermissionInfo);
      paramPermissionInfo.protectionLevel = k;
      localBasePermission1.perm = new PackageParser.Permission(localBasePermission3.perm.owner, paramPermissionInfo);
      localBasePermission1.perm.info.packageName = localBasePermission3.perm.info.packageName;
      localBasePermission1.uid = localBasePermission3.uid;
      if (bool) {
        this.mSettings.mPermissions.put(paramPermissionInfo.name, localBasePermission1);
      }
      if (i != 0)
      {
        if (paramBoolean) {
          break label366;
        }
        this.mSettings.writeLPr();
      }
      return bool;
      bool = false;
      break;
      label229:
      if (localBasePermission2.type != 2) {
        throw new SecurityException("Not allowed to modify non-dynamic permission " + paramPermissionInfo.name);
      }
      localBasePermission1 = localBasePermission2;
      i = j;
      if (localBasePermission2.protectionLevel == k)
      {
        localBasePermission1 = localBasePermission2;
        i = j;
        if (localBasePermission2.perm.owner.equals(localBasePermission3.perm.owner))
        {
          localBasePermission1 = localBasePermission2;
          i = j;
          if (localBasePermission2.uid == localBasePermission3.uid)
          {
            localBasePermission1 = localBasePermission2;
            i = j;
            if (comparePermissionInfos(localBasePermission2.perm.info, paramPermissionInfo))
            {
              i = 0;
              localBasePermission1 = localBasePermission2;
            }
          }
        }
      }
    }
    label366:
    scheduleWriteSettingsLocked();
    return bool;
  }
  
  public void addPersistentPreferredActivity(IntentFilter paramIntentFilter, ComponentName paramComponentName, int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("addPersistentPreferredActivity can only be run by the system");
    }
    if (paramIntentFilter.countActions() == 0)
    {
      Slog.w("PackageManager", "Cannot set a preferred activity with no filter actions");
      return;
    }
    synchronized (this.mPackages)
    {
      Slog.i("PackageManager", "Adding persistent preferred activity " + paramComponentName + " for user " + paramInt + ":");
      paramIntentFilter.dump(new LogPrinter(4, "PackageManager"), "  ");
      this.mSettings.editPersistentPreferredActivitiesLPw(paramInt).addFilter(new PersistentPreferredActivity(paramIntentFilter, paramComponentName));
      scheduleWritePackageRestrictionsLocked(paramInt);
      postPreferredActivityChangedBroadcast(paramInt);
      return;
    }
  }
  
  public void addPreferredActivity(IntentFilter paramIntentFilter, int paramInt1, ComponentName[] paramArrayOfComponentName, ComponentName paramComponentName, int paramInt2)
  {
    addPreferredActivityInternal(paramIntentFilter, paramInt1, paramArrayOfComponentName, paramComponentName, true, paramInt2, "Adding preferred");
  }
  
  int calculateCurrentPermissionFootprintLocked(BasePermission paramBasePermission)
  {
    int i = 0;
    Iterator localIterator = this.mSettings.mPermissions.values().iterator();
    while (localIterator.hasNext())
    {
      BasePermission localBasePermission = (BasePermission)localIterator.next();
      if (localBasePermission.uid == paramBasePermission.uid) {
        i += localBasePermission.name.length() + permissionInfoFootprint(localBasePermission.perm.info);
      }
    }
    return i;
  }
  
  public boolean canForwardTo(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", null);
    ??? = getMatchingCrossProfileIntentFilters(paramIntent, paramString, paramInt1);
    if (??? != null)
    {
      int j = ((List)???).size();
      int i = 0;
      while (i < j)
      {
        if (((CrossProfileIntentFilter)((List)???).get(i)).getTargetUserId() == paramInt2) {
          return true;
        }
        i += 1;
      }
    }
    if (hasWebURI(paramIntent))
    {
      UserInfo localUserInfo = getProfileParent(paramInt1);
      synchronized (this.mPackages)
      {
        paramIntent = getCrossProfileDomainPreferredLpr(paramIntent, paramString, updateFlagsForResolve(0, localUserInfo.id, paramIntent), paramInt1, localUserInfo.id);
        if (paramIntent != null)
        {
          bool = true;
          return bool;
        }
        boolean bool = false;
      }
    }
    return false;
  }
  
  public String[] canonicalToCurrentPackageNames(String[] paramArrayOfString)
  {
    String[] arrayOfString = new String[paramArrayOfString.length];
    for (;;)
    {
      int i;
      String str;
      synchronized (this.mPackages)
      {
        i = paramArrayOfString.length - 1;
        if (i >= 0)
        {
          str = (String)this.mSettings.mRenamedPackages.get(paramArrayOfString[i]);
          if (str == null) {
            str = paramArrayOfString[i];
          }
        }
        else
        {
          return arrayOfString;
        }
      }
      arrayOfString[i] = str;
      i -= 1;
    }
  }
  
  public void checkPackageStartable(String paramString, int paramInt)
  {
    boolean bool = StorageManager.isUserKeyUnlocked(paramInt);
    PackageSetting localPackageSetting;
    synchronized (this.mPackages)
    {
      localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
      if (localPackageSetting == null) {
        throw new SecurityException("Package " + paramString + " was not found!");
      }
    }
    if (!localPackageSetting.getInstalled(paramInt)) {
      throw new SecurityException("Package " + paramString + " was not installed for user " + paramInt + "!");
    }
    if ((!this.mSafeMode) || (localPackageSetting.isSystem()))
    {
      if (this.mFrozenPackages.contains(paramString)) {
        throw new SecurityException("Package " + paramString + " is currently frozen!");
      }
    }
    else {
      throw new SecurityException("Package " + paramString + " not a system app!");
    }
    if ((!bool) && (!localPackageSetting.pkg.applicationInfo.isDirectBootAware()))
    {
      bool = localPackageSetting.pkg.applicationInfo.isPartiallyDirectBootAware();
      if (!bool) {}
    }
    else
    {
      return;
    }
    throw new SecurityException("Package " + paramString + " is not encryption aware!");
  }
  
  public int checkPermission(String paramString1, String paramString2, int paramInt)
  {
    if (!sUserManager.exists(paramInt)) {
      return -1;
    }
    synchronized (this.mPackages)
    {
      paramString2 = (PackageParser.Package)this.mPackages.get(paramString2);
      if ((paramString2 != null) && (paramString2.mExtras != null))
      {
        paramString2 = ((PackageSetting)paramString2.mExtras).getPermissionsState();
        boolean bool = paramString2.hasPermission(paramString1, paramInt);
        if (bool) {
          return 0;
        }
        if ("android.permission.ACCESS_COARSE_LOCATION".equals(paramString1))
        {
          bool = paramString2.hasPermission("android.permission.ACCESS_FINE_LOCATION", paramInt);
          if (bool) {
            return 0;
          }
        }
      }
      return -1;
    }
  }
  
  public int checkSignatures(String paramString1, String paramString2)
  {
    synchronized (this.mPackages)
    {
      paramString1 = (PackageParser.Package)this.mPackages.get(paramString1);
      paramString2 = (PackageParser.Package)this.mPackages.get(paramString2);
      if (paramString1 != null)
      {
        Object localObject = paramString1.mExtras;
        if (localObject != null) {
          break label54;
        }
      }
      label54:
      while ((paramString2 == null) || (paramString2.mExtras == null)) {
        return -4;
      }
      int i = compareSignatures(paramString1.mSignatures, paramString2.mSignatures);
      return i;
    }
  }
  
  public int checkUidPermission(String paramString, int paramInt)
  {
    int i = UserHandle.getUserId(paramInt);
    if (!sUserManager.exists(i)) {
      return -1;
    }
    synchronized (this.mPackages)
    {
      Object localObject = this.mSettings.getUserIdLPr(UserHandle.getAppId(paramInt));
      boolean bool;
      if (localObject != null)
      {
        localObject = ((SettingBase)localObject).getPermissionsState();
        bool = ((PermissionsState)localObject).hasPermission(paramString, i);
        if (bool) {
          return 0;
        }
        if ("android.permission.ACCESS_COARSE_LOCATION".equals(paramString))
        {
          bool = ((PermissionsState)localObject).hasPermission("android.permission.ACCESS_FINE_LOCATION", i);
          if (bool) {
            return 0;
          }
        }
      }
      else
      {
        localObject = (ArraySet)this.mSystemPermissions.get(paramInt);
        if (localObject != null)
        {
          bool = ((ArraySet)localObject).contains(paramString);
          if (bool) {
            return 0;
          }
          if ("android.permission.ACCESS_COARSE_LOCATION".equals(paramString))
          {
            bool = ((ArraySet)localObject).contains("android.permission.ACCESS_FINE_LOCATION");
            if (bool) {
              return 0;
            }
          }
        }
      }
      return -1;
    }
  }
  
  public int checkUidSignatures(int paramInt1, int paramInt2)
  {
    paramInt1 = UserHandle.getAppId(paramInt1);
    paramInt2 = UserHandle.getAppId(paramInt2);
    synchronized (this.mPackages)
    {
      Object localObject1 = this.mSettings.getUserIdLPr(paramInt1);
      if (localObject1 != null) {
        if ((localObject1 instanceof SharedUserSetting))
        {
          localObject1 = ((SharedUserSetting)localObject1).signatures.mSignatures;
          localObject3 = this.mSettings.getUserIdLPr(paramInt2);
          if (localObject3 == null) {
            break label161;
          }
          if (!(localObject3 instanceof SharedUserSetting)) {
            break label131;
          }
        }
      }
      for (Object localObject3 = ((SharedUserSetting)localObject3).signatures.mSignatures;; localObject3 = ((PackageSetting)localObject3).signatures.mSignatures)
      {
        paramInt1 = compareSignatures((Signature[])localObject1, (Signature[])localObject3);
        return paramInt1;
        if ((localObject1 instanceof PackageSetting))
        {
          localObject1 = ((PackageSetting)localObject1).signatures.mSignatures;
          break;
        }
        return -4;
        return -4;
        label131:
        if (!(localObject3 instanceof PackageSetting)) {
          break label155;
        }
      }
      label155:
      return -4;
      label161:
      return -4;
    }
  }
  
  void cleanPackageDataStructuresLILPw(PackageParser.Package paramPackage, boolean paramBoolean)
  {
    int k = paramPackage.providers.size();
    Object localObject1 = null;
    int i = 0;
    if (i < k)
    {
      localObject3 = (PackageParser.Provider)paramPackage.providers.get(i);
      this.mProviders.removeProvider((PackageParser.Provider)localObject3);
      if (((PackageParser.Provider)localObject3).info.authority == null) {
        localObject2 = localObject1;
      }
      do
      {
        do
        {
          i += 1;
          localObject1 = localObject2;
          break;
          localObject2 = ((PackageParser.Provider)localObject3).info.authority.split(";");
          j = 0;
          while (j < localObject2.length)
          {
            if (this.mProvidersByAuthority.get(localObject2[j]) == localObject3)
            {
              this.mProvidersByAuthority.remove(localObject2[j]);
              if ((DEBUG_REMOVE) && (paramBoolean)) {
                Log.d("PackageManager", "Unregistered content provider: " + localObject2[j] + ", className = " + ((PackageParser.Provider)localObject3).info.name + ", isSyncable = " + ((PackageParser.Provider)localObject3).info.isSyncable);
              }
            }
            j += 1;
          }
          localObject2 = localObject1;
        } while (!DEBUG_REMOVE);
        localObject2 = localObject1;
      } while (!paramBoolean);
      if (localObject1 == null) {
        localObject1 = new StringBuilder(256);
      }
      for (;;)
      {
        ((StringBuilder)localObject1).append(((PackageParser.Provider)localObject3).info.name);
        localObject2 = localObject1;
        break;
        ((StringBuilder)localObject1).append(' ');
      }
    }
    if ((localObject1 != null) && (DEBUG_REMOVE)) {
      Log.d("PackageManager", "  Providers: " + localObject1);
    }
    int j = paramPackage.services.size();
    localObject1 = null;
    i = 0;
    if (i < j)
    {
      localObject3 = (PackageParser.Service)paramPackage.services.get(i);
      this.mServices.removeService((PackageParser.Service)localObject3);
      localObject2 = localObject1;
      if (paramBoolean)
      {
        if (localObject1 != null) {
          break label411;
        }
        localObject1 = new StringBuilder(256);
      }
      for (;;)
      {
        ((StringBuilder)localObject1).append(((PackageParser.Service)localObject3).info.name);
        localObject2 = localObject1;
        i += 1;
        localObject1 = localObject2;
        break;
        label411:
        ((StringBuilder)localObject1).append(' ');
      }
    }
    if ((localObject1 != null) && (DEBUG_REMOVE)) {
      Log.d("PackageManager", "  Services: " + localObject1);
    }
    j = paramPackage.receivers.size();
    localObject1 = null;
    i = 0;
    if (i < j)
    {
      localObject3 = (PackageParser.Activity)paramPackage.receivers.get(i);
      this.mReceivers.removeActivity((PackageParser.Activity)localObject3, "receiver");
      localObject2 = localObject1;
      if (DEBUG_REMOVE)
      {
        localObject2 = localObject1;
        if (paramBoolean)
        {
          if (localObject1 != null) {
            break label570;
          }
          localObject1 = new StringBuilder(256);
        }
      }
      for (;;)
      {
        ((StringBuilder)localObject1).append(((PackageParser.Activity)localObject3).info.name);
        localObject2 = localObject1;
        i += 1;
        localObject1 = localObject2;
        break;
        label570:
        ((StringBuilder)localObject1).append(' ');
      }
    }
    if ((localObject1 != null) && (DEBUG_REMOVE)) {
      Log.d("PackageManager", "  Receivers: " + localObject1);
    }
    j = paramPackage.activities.size();
    localObject1 = null;
    i = 0;
    if (i < j)
    {
      localObject3 = (PackageParser.Activity)paramPackage.activities.get(i);
      this.mActivities.removeActivity((PackageParser.Activity)localObject3, "activity");
      localObject2 = localObject1;
      if (DEBUG_REMOVE)
      {
        localObject2 = localObject1;
        if (paramBoolean)
        {
          if (localObject1 != null) {
            break label729;
          }
          localObject1 = new StringBuilder(256);
        }
      }
      for (;;)
      {
        ((StringBuilder)localObject1).append(((PackageParser.Activity)localObject3).info.name);
        localObject2 = localObject1;
        i += 1;
        localObject1 = localObject2;
        break;
        label729:
        ((StringBuilder)localObject1).append(' ');
      }
    }
    if ((localObject1 != null) && (DEBUG_REMOVE)) {
      Log.d("PackageManager", "  Activities: " + localObject1);
    }
    j = paramPackage.permissions.size();
    localObject1 = null;
    i = 0;
    Object localObject4;
    if (i < j)
    {
      localObject4 = (PackageParser.Permission)paramPackage.permissions.get(i);
      localObject3 = (BasePermission)this.mSettings.mPermissions.get(((PackageParser.Permission)localObject4).info.name);
      localObject2 = localObject3;
      if (localObject3 == null) {
        localObject2 = (BasePermission)this.mSettings.mPermissionTrees.get(((PackageParser.Permission)localObject4).info.name);
      }
      localObject3 = localObject1;
      if (localObject2 != null)
      {
        localObject3 = localObject1;
        if (((BasePermission)localObject2).perm == localObject4)
        {
          ((BasePermission)localObject2).perm = null;
          localObject3 = localObject1;
          if (DEBUG_REMOVE)
          {
            localObject3 = localObject1;
            if (paramBoolean)
            {
              if (localObject1 != null) {
                break label1009;
              }
              localObject1 = new StringBuilder(256);
            }
          }
        }
      }
      for (;;)
      {
        ((StringBuilder)localObject1).append(((PackageParser.Permission)localObject4).info.name);
        localObject3 = localObject1;
        if ((((PackageParser.Permission)localObject4).info.protectionLevel & 0x40) != 0)
        {
          localObject1 = (ArraySet)this.mAppOpPermissionPackages.get(((PackageParser.Permission)localObject4).info.name);
          if (localObject1 != null) {
            ((ArraySet)localObject1).remove(paramPackage.packageName);
          }
        }
        i += 1;
        localObject1 = localObject3;
        break;
        label1009:
        ((StringBuilder)localObject1).append(' ');
      }
    }
    if ((localObject1 != null) && (DEBUG_REMOVE)) {
      Log.d("PackageManager", "  Permissions: " + localObject1);
    }
    j = paramPackage.requestedPermissions.size();
    i = 0;
    while (i < j)
    {
      localObject1 = (String)paramPackage.requestedPermissions.get(i);
      localObject2 = (BasePermission)this.mSettings.mPermissions.get(localObject1);
      if ((localObject2 != null) && ((((BasePermission)localObject2).protectionLevel & 0x40) != 0))
      {
        localObject2 = (ArraySet)this.mAppOpPermissionPackages.get(localObject1);
        if (localObject2 != null)
        {
          ((ArraySet)localObject2).remove(paramPackage.packageName);
          if (((ArraySet)localObject2).isEmpty()) {
            this.mAppOpPermissionPackages.remove(localObject1);
          }
        }
      }
      i += 1;
    }
    j = paramPackage.instrumentation.size();
    localObject1 = null;
    i = 0;
    if (i < j)
    {
      localObject3 = (PackageParser.Instrumentation)paramPackage.instrumentation.get(i);
      this.mInstrumentation.remove(((PackageParser.Instrumentation)localObject3).getComponentName());
      localObject2 = localObject1;
      if (DEBUG_REMOVE)
      {
        localObject2 = localObject1;
        if (paramBoolean)
        {
          if (localObject1 != null) {
            break label1286;
          }
          localObject1 = new StringBuilder(256);
        }
      }
      for (;;)
      {
        ((StringBuilder)localObject1).append(((PackageParser.Instrumentation)localObject3).info.name);
        localObject2 = localObject1;
        i += 1;
        localObject1 = localObject2;
        break;
        label1286:
        ((StringBuilder)localObject1).append(' ');
      }
    }
    if ((localObject1 != null) && (DEBUG_REMOVE)) {
      Log.d("PackageManager", "  Instrumentation: " + localObject1);
    }
    Object localObject3 = null;
    localObject1 = null;
    Object localObject2 = localObject3;
    if ((paramPackage.applicationInfo.flags & 0x1) != 0)
    {
      localObject2 = localObject3;
      if (paramPackage.libraryNames != null)
      {
        i = 0;
        localObject2 = localObject1;
        if (i < paramPackage.libraryNames.size())
        {
          localObject3 = (String)paramPackage.libraryNames.get(i);
          localObject4 = (SharedLibraryEntry)this.mSharedLibraries.get(localObject3);
          localObject2 = localObject1;
          if (localObject4 != null)
          {
            localObject2 = localObject1;
            if (((SharedLibraryEntry)localObject4).apk != null)
            {
              localObject2 = localObject1;
              if (((SharedLibraryEntry)localObject4).apk.equals(paramPackage.packageName))
              {
                this.mSharedLibraries.remove(localObject3);
                localObject2 = localObject1;
                if (DEBUG_REMOVE)
                {
                  localObject2 = localObject1;
                  if (paramBoolean)
                  {
                    if (localObject1 != null) {
                      break label1521;
                    }
                    localObject1 = new StringBuilder(256);
                  }
                }
              }
            }
          }
          for (;;)
          {
            ((StringBuilder)localObject1).append((String)localObject3);
            localObject2 = localObject1;
            i += 1;
            localObject1 = localObject2;
            break;
            label1521:
            ((StringBuilder)localObject1).append(' ');
          }
        }
      }
    }
    if ((localObject2 != null) && (DEBUG_REMOVE)) {
      Log.d("PackageManager", "  Libraries: " + localObject2);
    }
  }
  
  void cleanUpUser(UserManagerService paramUserManagerService, int paramInt)
  {
    synchronized (this.mPackages)
    {
      this.mDirtyUsers.remove(Integer.valueOf(paramInt));
      this.mUserNeedsBadging.delete(paramInt);
      this.mSettings.removeUserLPw(paramInt);
      this.mPendingBroadcasts.remove(paramInt);
      this.mEphemeralApplicationRegistry.onUserRemovedLPw(paramInt);
      removeUnusedPackagesLPw(paramUserManagerService, paramInt);
      return;
    }
  }
  
  /* Error */
  public void clearApplicationProfileData(String paramString)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 4
    //   3: aconst_null
    //   4: astore 5
    //   6: ldc_w 7113
    //   9: invokestatic 7115	com/android/server/pm/PackageManagerService:enforceSystemOrRoot	(Ljava/lang/String;)V
    //   12: aload_0
    //   13: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   16: astore_2
    //   17: aload_2
    //   18: monitorenter
    //   19: aload_0
    //   20: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   23: aload_1
    //   24: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   27: checkcast 1819	android/content/pm/PackageParser$Package
    //   30: astore 6
    //   32: aload_2
    //   33: monitorexit
    //   34: aconst_null
    //   35: astore_3
    //   36: aconst_null
    //   37: astore_2
    //   38: aload_0
    //   39: aload_1
    //   40: ldc_w 7116
    //   43: invokevirtual 5031	com/android/server/pm/PackageManagerService:freezePackage	(Ljava/lang/String;Ljava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
    //   46: astore_1
    //   47: aload_1
    //   48: astore_2
    //   49: aload_1
    //   50: astore_3
    //   51: aload_0
    //   52: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   55: astore 7
    //   57: aload_1
    //   58: astore_2
    //   59: aload_1
    //   60: astore_3
    //   61: aload 7
    //   63: monitorenter
    //   64: aload_0
    //   65: aload 6
    //   67: iconst_m1
    //   68: invokespecial 5836	com/android/server/pm/PackageManagerService:clearAppProfilesLIF	(Landroid/content/pm/PackageParser$Package;I)V
    //   71: aload_0
    //   72: aload 6
    //   74: iconst_m1
    //   75: iconst_1
    //   76: invokespecial 2833	com/android/server/pm/PackageManagerService:destroyAppReferenceProfileLeafLIF	(Landroid/content/pm/PackageParser$Package;IZ)V
    //   79: aload_1
    //   80: astore_2
    //   81: aload_1
    //   82: astore_3
    //   83: aload 7
    //   85: monitorexit
    //   86: aload 5
    //   88: astore_2
    //   89: aload_1
    //   90: ifnull +10 -> 100
    //   93: aload_1
    //   94: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   97: aload 5
    //   99: astore_2
    //   100: aload_2
    //   101: ifnull +88 -> 189
    //   104: aload_2
    //   105: athrow
    //   106: astore_1
    //   107: aload_2
    //   108: monitorexit
    //   109: aload_1
    //   110: athrow
    //   111: astore 5
    //   113: aload_1
    //   114: astore_2
    //   115: aload_1
    //   116: astore_3
    //   117: aload 7
    //   119: monitorexit
    //   120: aload_1
    //   121: astore_2
    //   122: aload_1
    //   123: astore_3
    //   124: aload 5
    //   126: athrow
    //   127: astore_1
    //   128: aload_1
    //   129: athrow
    //   130: astore_3
    //   131: aload_1
    //   132: astore 4
    //   134: aload_2
    //   135: ifnull +10 -> 145
    //   138: aload_2
    //   139: invokevirtual 3355	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
    //   142: aload_1
    //   143: astore 4
    //   145: aload 4
    //   147: ifnull +40 -> 187
    //   150: aload 4
    //   152: athrow
    //   153: astore_2
    //   154: goto -54 -> 100
    //   157: astore_2
    //   158: aload_1
    //   159: ifnonnull +9 -> 168
    //   162: aload_2
    //   163: astore 4
    //   165: goto -20 -> 145
    //   168: aload_1
    //   169: astore 4
    //   171: aload_1
    //   172: aload_2
    //   173: if_acmpeq -28 -> 145
    //   176: aload_1
    //   177: aload_2
    //   178: invokevirtual 3359	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   181: aload_1
    //   182: astore 4
    //   184: goto -39 -> 145
    //   187: aload_3
    //   188: athrow
    //   189: return
    //   190: astore_1
    //   191: aload_3
    //   192: astore_2
    //   193: aload_1
    //   194: astore_3
    //   195: aload 4
    //   197: astore_1
    //   198: goto -67 -> 131
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	201	0	this	PackageManagerService
    //   0	201	1	paramString	String
    //   16	123	2	localObject1	Object
    //   153	1	2	localThrowable1	Throwable
    //   157	21	2	localThrowable2	Throwable
    //   192	1	2	localObject2	Object
    //   35	89	3	str1	String
    //   130	62	3	localObject3	Object
    //   194	1	3	str2	String
    //   1	195	4	localObject4	Object
    //   4	94	5	localObject5	Object
    //   111	14	5	localObject6	Object
    //   30	43	6	localPackage	PackageParser.Package
    //   55	63	7	localObject7	Object
    // Exception table:
    //   from	to	target	type
    //   19	32	106	finally
    //   64	79	111	finally
    //   38	47	127	java/lang/Throwable
    //   51	57	127	java/lang/Throwable
    //   61	64	127	java/lang/Throwable
    //   83	86	127	java/lang/Throwable
    //   117	120	127	java/lang/Throwable
    //   124	127	127	java/lang/Throwable
    //   128	130	130	finally
    //   93	97	153	java/lang/Throwable
    //   138	142	157	java/lang/Throwable
    //   38	47	190	finally
    //   51	57	190	finally
    //   61	64	190	finally
    //   83	86	190	finally
    //   117	120	190	finally
    //   124	127	190	finally
  }
  
  public void clearApplicationUserData(final String paramString, final IPackageDataObserver paramIPackageDataObserver, final int paramInt)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_USER_DATA", null);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, true, false, "clear application data");
    if (this.mProtectedPackages.isPackageDataProtected(paramInt, paramString)) {
      throw new SecurityException("Cannot clear data for a protected package: " + paramString);
    }
    this.mHandler.post(new Runnable()
    {
      /* Error */
      public void run()
      {
        // Byte code:
        //   0: aconst_null
        //   1: astore 5
        //   3: aconst_null
        //   4: astore 6
        //   6: aload_0
        //   7: getfield 23	com/android/server/pm/PackageManagerService$16:this$0	Lcom/android/server/pm/PackageManagerService;
        //   10: getfield 42	com/android/server/pm/PackageManagerService:mHandler	Lcom/android/server/pm/PackageManagerService$PackageHandler;
        //   13: aload_0
        //   14: invokevirtual 48	com/android/server/pm/PackageManagerService$PackageHandler:removeCallbacks	(Ljava/lang/Runnable;)V
        //   17: aconst_null
        //   18: astore_3
        //   19: aconst_null
        //   20: astore_2
        //   21: aload_0
        //   22: getfield 23	com/android/server/pm/PackageManagerService$16:this$0	Lcom/android/server/pm/PackageManagerService;
        //   25: aload_0
        //   26: getfield 25	com/android/server/pm/PackageManagerService$16:val$packageName	Ljava/lang/String;
        //   29: ldc 49
        //   31: invokevirtual 53	com/android/server/pm/PackageManagerService:freezePackage	(Ljava/lang/String;Ljava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
        //   34: astore 4
        //   36: aload 4
        //   38: astore_2
        //   39: aload 4
        //   41: astore_3
        //   42: aload_0
        //   43: getfield 23	com/android/server/pm/PackageManagerService$16:this$0	Lcom/android/server/pm/PackageManagerService;
        //   46: getfield 57	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
        //   49: astore 7
        //   51: aload 4
        //   53: astore_2
        //   54: aload 4
        //   56: astore_3
        //   57: aload 7
        //   59: monitorenter
        //   60: aload_0
        //   61: getfield 23	com/android/server/pm/PackageManagerService$16:this$0	Lcom/android/server/pm/PackageManagerService;
        //   64: aload_0
        //   65: getfield 25	com/android/server/pm/PackageManagerService$16:val$packageName	Ljava/lang/String;
        //   68: aload_0
        //   69: getfield 27	com/android/server/pm/PackageManagerService$16:val$userId	I
        //   72: invokestatic 61	com/android/server/pm/PackageManagerService:-wrap2	(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;I)Z
        //   75: istore_1
        //   76: aload 4
        //   78: astore_2
        //   79: aload 4
        //   81: astore_3
        //   82: aload 7
        //   84: monitorexit
        //   85: aload 4
        //   87: astore_2
        //   88: aload 4
        //   90: astore_3
        //   91: aload_0
        //   92: getfield 23	com/android/server/pm/PackageManagerService$16:this$0	Lcom/android/server/pm/PackageManagerService;
        //   95: aload_0
        //   96: getfield 25	com/android/server/pm/PackageManagerService$16:val$packageName	Ljava/lang/String;
        //   99: aload_0
        //   100: getfield 27	com/android/server/pm/PackageManagerService$16:val$userId	I
        //   103: iconst_1
        //   104: invokestatic 65	com/android/server/pm/PackageManagerService:-wrap23	(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;IZ)V
        //   107: aload 6
        //   109: astore_2
        //   110: aload 4
        //   112: ifnull +11 -> 123
        //   115: aload 4
        //   117: invokevirtual 70	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
        //   120: aload 6
        //   122: astore_2
        //   123: aload_2
        //   124: ifnull +89 -> 213
        //   127: aload_2
        //   128: athrow
        //   129: astore 6
        //   131: aload 4
        //   133: astore_2
        //   134: aload 4
        //   136: astore_3
        //   137: aload 7
        //   139: monitorexit
        //   140: aload 4
        //   142: astore_2
        //   143: aload 4
        //   145: astore_3
        //   146: aload 6
        //   148: athrow
        //   149: astore_3
        //   150: aload_3
        //   151: athrow
        //   152: astore 4
        //   154: aload_3
        //   155: astore 5
        //   157: aload_2
        //   158: ifnull +10 -> 168
        //   161: aload_2
        //   162: invokevirtual 70	com/android/server/pm/PackageManagerService$PackageFreezer:close	()V
        //   165: aload_3
        //   166: astore 5
        //   168: aload 5
        //   170: ifnull +40 -> 210
        //   173: aload 5
        //   175: athrow
        //   176: astore_2
        //   177: goto -54 -> 123
        //   180: astore_2
        //   181: aload_3
        //   182: ifnonnull +9 -> 191
        //   185: aload_2
        //   186: astore 5
        //   188: goto -20 -> 168
        //   191: aload_3
        //   192: astore 5
        //   194: aload_3
        //   195: aload_2
        //   196: if_acmpeq -28 -> 168
        //   199: aload_3
        //   200: aload_2
        //   201: invokevirtual 74	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
        //   204: aload_3
        //   205: astore 5
        //   207: goto -39 -> 168
        //   210: aload 4
        //   212: athrow
        //   213: iload_1
        //   214: ifeq +22 -> 236
        //   217: ldc 76
        //   219: invokestatic 82	com/android/server/LocalServices:getService	(Ljava/lang/Class;)Ljava/lang/Object;
        //   222: checkcast 76	com/android/server/storage/DeviceStorageMonitorInternal
        //   225: astore_2
        //   226: aload_2
        //   227: ifnull +9 -> 236
        //   230: aload_2
        //   231: invokeinterface 85 1 0
        //   236: aload_0
        //   237: getfield 29	com/android/server/pm/PackageManagerService$16:val$observer	Landroid/content/pm/IPackageDataObserver;
        //   240: ifnull +17 -> 257
        //   243: aload_0
        //   244: getfield 29	com/android/server/pm/PackageManagerService$16:val$observer	Landroid/content/pm/IPackageDataObserver;
        //   247: aload_0
        //   248: getfield 25	com/android/server/pm/PackageManagerService$16:val$packageName	Ljava/lang/String;
        //   251: iload_1
        //   252: invokeinterface 91 3 0
        //   257: return
        //   258: astore_2
        //   259: ldc 93
        //   261: ldc 95
        //   263: invokestatic 101	android/util/Log:i	(Ljava/lang/String;Ljava/lang/String;)I
        //   266: pop
        //   267: return
        //   268: astore 4
        //   270: aload_3
        //   271: astore_2
        //   272: aload 5
        //   274: astore_3
        //   275: goto -121 -> 154
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	278	0	this	16
        //   75	177	1	bool	boolean
        //   20	142	2	localObject1	Object
        //   176	1	2	localThrowable1	Throwable
        //   180	21	2	localThrowable2	Throwable
        //   225	6	2	localDeviceStorageMonitorInternal	DeviceStorageMonitorInternal
        //   258	1	2	localRemoteException	RemoteException
        //   271	1	2	localThrowable3	Throwable
        //   18	128	3	localObject2	Object
        //   149	122	3	localThrowable4	Throwable
        //   274	1	3	localObject3	Object
        //   34	110	4	localPackageFreezer	PackageManagerService.PackageFreezer
        //   152	59	4	localObject4	Object
        //   268	1	4	localObject5	Object
        //   1	272	5	localObject6	Object
        //   4	117	6	localObject7	Object
        //   129	18	6	localObject8	Object
        //   49	89	7	localObject9	Object
        // Exception table:
        //   from	to	target	type
        //   60	76	129	finally
        //   21	36	149	java/lang/Throwable
        //   42	51	149	java/lang/Throwable
        //   57	60	149	java/lang/Throwable
        //   82	85	149	java/lang/Throwable
        //   91	107	149	java/lang/Throwable
        //   137	140	149	java/lang/Throwable
        //   146	149	149	java/lang/Throwable
        //   150	152	152	finally
        //   115	120	176	java/lang/Throwable
        //   161	165	180	java/lang/Throwable
        //   243	257	258	android/os/RemoteException
        //   21	36	268	finally
        //   42	51	268	finally
        //   57	60	268	finally
        //   82	85	268	finally
        //   91	107	268	finally
        //   137	140	268	finally
        //   146	149	268	finally
      }
    });
  }
  
  public void clearCrossProfileIntentFilters(int paramInt, String paramString)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", null);
    int i = Binder.getCallingUid();
    enforceOwnerRights(paramString, i);
    enforceShellRestriction("no_debugging_features", i, paramInt);
    synchronized (this.mPackages)
    {
      CrossProfileIntentResolver localCrossProfileIntentResolver = this.mSettings.editCrossProfileIntentResolverLPw(paramInt);
      Iterator localIterator = new ArraySet(localCrossProfileIntentResolver.filterSet()).iterator();
      while (localIterator.hasNext())
      {
        CrossProfileIntentFilter localCrossProfileIntentFilter = (CrossProfileIntentFilter)localIterator.next();
        if (localCrossProfileIntentFilter.getOwnerPackage().equals(paramString)) {
          localCrossProfileIntentResolver.removeFilter(localCrossProfileIntentFilter);
        }
      }
    }
    scheduleWritePackageRestrictionsLocked(paramInt);
  }
  
  void clearDefaultBrowserIfNeeded(String paramString)
  {
    int[] arrayOfInt = sUserManager.getUserIds();
    int i = 0;
    int j = arrayOfInt.length;
    if (i < j)
    {
      int k = arrayOfInt[i];
      String str = getDefaultBrowserPackageName(k);
      if (TextUtils.isEmpty(str)) {}
      for (;;)
      {
        i += 1;
        break;
        if (paramString.equals(str)) {
          setDefaultBrowserPackageName(null, k);
        }
      }
    }
  }
  
  void clearIntentFilterVerificationsLPw(String paramString, int paramInt)
  {
    if (paramInt == -1)
    {
      if (this.mSettings.removeIntentFilterVerificationLPw(paramString, sUserManager.getUserIds()))
      {
        paramString = sUserManager.getUserIds();
        paramInt = 0;
        int i = paramString.length;
        while (paramInt < i)
        {
          scheduleWritePackageRestrictionsLocked(paramString[paramInt]);
          paramInt += 1;
        }
      }
    }
    else if (this.mSettings.removeIntentFilterVerificationLPw(paramString, paramInt)) {
      scheduleWritePackageRestrictionsLocked(paramInt);
    }
  }
  
  /* Error */
  public void clearPackagePersistentPreferredActivities(String paramString, int paramInt)
  {
    // Byte code:
    //   0: invokestatic 2303	android/os/Binder:getCallingUid	()I
    //   3: sipush 1000
    //   6: if_icmpeq +14 -> 20
    //   9: new 2665	java/lang/SecurityException
    //   12: dup
    //   13: ldc_w 7152
    //   16: invokespecial 2673	java/lang/SecurityException:<init>	(Ljava/lang/String;)V
    //   19: athrow
    //   20: aconst_null
    //   21: astore 6
    //   23: iconst_0
    //   24: istore 4
    //   26: aload_0
    //   27: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   30: astore 7
    //   32: aload 7
    //   34: monitorenter
    //   35: iconst_0
    //   36: istore_3
    //   37: iload_3
    //   38: aload_0
    //   39: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   42: getfield 3882	com/android/server/pm/Settings:mPersistentPreferredActivities	Landroid/util/SparseArray;
    //   45: invokevirtual 7153	android/util/SparseArray:size	()I
    //   48: if_icmpge +158 -> 206
    //   51: aload_0
    //   52: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   55: getfield 3882	com/android/server/pm/Settings:mPersistentPreferredActivities	Landroid/util/SparseArray;
    //   58: iload_3
    //   59: invokevirtual 7155	android/util/SparseArray:keyAt	(I)I
    //   62: istore 5
    //   64: aload_0
    //   65: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   68: getfield 3882	com/android/server/pm/Settings:mPersistentPreferredActivities	Landroid/util/SparseArray;
    //   71: iload_3
    //   72: invokevirtual 7156	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   75: checkcast 3885	com/android/server/pm/PersistentPreferredIntentResolver
    //   78: astore 8
    //   80: iload_2
    //   81: iload 5
    //   83: if_icmpeq +6 -> 89
    //   86: goto +158 -> 244
    //   89: aload 8
    //   91: invokevirtual 7159	com/android/server/pm/PersistentPreferredIntentResolver:filterIterator	()Ljava/util/Iterator;
    //   94: astore 9
    //   96: aload 9
    //   98: invokeinterface 1313 1 0
    //   103: ifeq +55 -> 158
    //   106: aload 9
    //   108: invokeinterface 1317 1 0
    //   113: checkcast 3892	com/android/server/pm/PersistentPreferredActivity
    //   116: astore 10
    //   118: aload 10
    //   120: getfield 3905	com/android/server/pm/PersistentPreferredActivity:mComponent	Landroid/content/ComponentName;
    //   123: invokevirtual 4943	android/content/ComponentName:getPackageName	()Ljava/lang/String;
    //   126: aload_1
    //   127: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   130: ifeq +111 -> 241
    //   133: aload 6
    //   135: ifnonnull +103 -> 238
    //   138: new 1139	java/util/ArrayList
    //   141: dup
    //   142: invokespecial 1140	java/util/ArrayList:<init>	()V
    //   145: astore 6
    //   147: aload 6
    //   149: aload 10
    //   151: invokevirtual 2294	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   154: pop
    //   155: goto -59 -> 96
    //   158: aload 6
    //   160: ifnull +75 -> 235
    //   163: iconst_0
    //   164: istore 4
    //   166: iload 4
    //   168: aload 6
    //   170: invokevirtual 1868	java/util/ArrayList:size	()I
    //   173: if_icmpge +27 -> 200
    //   176: aload 8
    //   178: aload 6
    //   180: iload 4
    //   182: invokevirtual 1870	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   185: checkcast 3892	com/android/server/pm/PersistentPreferredActivity
    //   188: invokevirtual 7160	com/android/server/pm/PersistentPreferredIntentResolver:removeFilter	(Landroid/content/IntentFilter;)V
    //   191: iload 4
    //   193: iconst_1
    //   194: iadd
    //   195: istore 4
    //   197: goto -31 -> 166
    //   200: iconst_1
    //   201: istore 4
    //   203: goto +41 -> 244
    //   206: iload 4
    //   208: ifeq +13 -> 221
    //   211: aload_0
    //   212: iload_2
    //   213: invokevirtual 2366	com/android/server/pm/PackageManagerService:scheduleWritePackageRestrictionsLocked	(I)V
    //   216: aload_0
    //   217: iload_2
    //   218: invokespecial 2369	com/android/server/pm/PackageManagerService:postPreferredActivityChangedBroadcast	(I)V
    //   221: aload 7
    //   223: monitorexit
    //   224: return
    //   225: astore_1
    //   226: aload 7
    //   228: monitorexit
    //   229: aload_1
    //   230: athrow
    //   231: astore_1
    //   232: goto -6 -> 226
    //   235: goto +9 -> 244
    //   238: goto -91 -> 147
    //   241: goto -86 -> 155
    //   244: iload_3
    //   245: iconst_1
    //   246: iadd
    //   247: istore_3
    //   248: goto -211 -> 37
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	251	0	this	PackageManagerService
    //   0	251	1	paramString	String
    //   0	251	2	paramInt	int
    //   36	212	3	i	int
    //   24	183	4	j	int
    //   62	22	5	k	int
    //   21	158	6	localArrayList	ArrayList
    //   30	197	7	localArrayMap	ArrayMap
    //   78	99	8	localPersistentPreferredIntentResolver	PersistentPreferredIntentResolver
    //   94	13	9	localIterator	Iterator
    //   116	34	10	localPersistentPreferredActivity	PersistentPreferredActivity
    // Exception table:
    //   from	to	target	type
    //   37	80	225	finally
    //   89	96	225	finally
    //   147	155	225	finally
    //   211	221	225	finally
    //   96	133	231	finally
    //   138	147	231	finally
    //   166	191	231	finally
  }
  
  public void clearPackagePreferredActivities(String paramString)
  {
    int i = Binder.getCallingUid();
    synchronized (this.mPackages)
    {
      PackageParser.Package localPackage = (PackageParser.Package)this.mPackages.get(paramString);
      if (((localPackage == null) || (localPackage.applicationInfo.uid != i)) && (this.mContext.checkCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS") != 0))
      {
        if (getUidTargetSdkVersionLockedLPr(Binder.getCallingUid()) < 8)
        {
          Slog.w("PackageManager", "Ignoring clearPackagePreferredActivities() from uid " + Binder.getCallingUid());
          return;
        }
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
      }
      i = UserHandle.getCallingUserId();
      if (clearPackagePreferredActivitiesLPw(paramString, i)) {
        scheduleWritePackageRestrictionsLocked(i);
      }
      return;
    }
  }
  
  boolean clearPackagePreferredActivitiesLPw(String paramString, int paramInt)
  {
    Object localObject1 = null;
    boolean bool = false;
    int i = 0;
    if (i < this.mSettings.mPreferredActivities.size())
    {
      int j = this.mSettings.mPreferredActivities.keyAt(i);
      PreferredIntentResolver localPreferredIntentResolver = (PreferredIntentResolver)this.mSettings.mPreferredActivities.valueAt(i);
      Object localObject2;
      if ((paramInt != -1) && (paramInt != j)) {
        localObject2 = localObject1;
      }
      for (;;)
      {
        i += 1;
        localObject1 = localObject2;
        break;
        Iterator localIterator = localPreferredIntentResolver.filterIterator();
        while (localIterator.hasNext())
        {
          PreferredActivity localPreferredActivity = (PreferredActivity)localIterator.next();
          if ((paramString == null) || ((localPreferredActivity.mPref.mComponent.getPackageName().equals(paramString)) && (localPreferredActivity.mPref.mAlways)))
          {
            localObject2 = localObject1;
            if (localObject1 == null) {
              localObject2 = new ArrayList();
            }
            ((ArrayList)localObject2).add(localPreferredActivity);
            localObject1 = localObject2;
          }
        }
        localObject2 = localObject1;
        if (localObject1 != null)
        {
          j = 0;
          while (j < ((ArrayList)localObject1).size())
          {
            localPreferredIntentResolver.removeFilter((PreferredActivity)((ArrayList)localObject1).get(j));
            j += 1;
          }
          bool = true;
          localObject2 = localObject1;
        }
      }
    }
    if (bool) {
      postPreferredActivityChangedBroadcast(paramInt);
    }
    return bool;
  }
  
  void createNewUser(int paramInt)
  {
    synchronized (this.mInstallLock)
    {
      this.mSettings.createNewUserLI(this, this.mInstaller, paramInt);
    }
    synchronized (this.mPackages)
    {
      scheduleWritePackageRestrictionsLocked(paramInt);
      scheduleWritePackageListLocked(paramInt);
      applyFactoryDefaultBrowserLPw(paramInt);
      primeDomainVerificationsLPw(paramInt);
      return;
      localObject2 = finally;
      throw ((Throwable)localObject2);
    }
  }
  
  public String[] currentToCanonicalPackageNames(String[] paramArrayOfString)
  {
    String[] arrayOfString = new String[paramArrayOfString.length];
    for (;;)
    {
      int i;
      Object localObject;
      synchronized (this.mPackages)
      {
        i = paramArrayOfString.length - 1;
        if (i >= 0)
        {
          localObject = (PackageSetting)this.mSettings.mPackages.get(paramArrayOfString[i]);
          if ((localObject != null) && (((PackageSetting)localObject).realName != null)) {
            localObject = ((PackageSetting)localObject).realName;
          } else {
            localObject = paramArrayOfString[i];
          }
        }
        else
        {
          return arrayOfString;
        }
      }
      arrayOfString[i] = localObject;
      i -= 1;
    }
  }
  
  public void deleteApplicationCacheFiles(String paramString, IPackageDataObserver paramIPackageDataObserver)
  {
    deleteApplicationCacheFilesAsUser(paramString, UserHandle.getCallingUserId(), paramIPackageDataObserver);
  }
  
  public void deleteApplicationCacheFilesAsUser(final String paramString, final int paramInt, final IPackageDataObserver paramIPackageDataObserver)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_CACHE_FILES", null);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, true, false, "delete application cache files");
    synchronized (this.mPackages)
    {
      final PackageParser.Package localPackage = (PackageParser.Package)this.mPackages.get(paramString);
      this.mHandler.post(new Runnable()
      {
        public void run()
        {
          synchronized (PackageManagerService.this.mInstallLock)
          {
            PackageManagerService.-wrap22(PackageManagerService.this, localPackage, paramInt, 259);
            PackageManagerService.-wrap22(PackageManagerService.this, localPackage, paramInt, 515);
            PackageManagerService.-wrap23(PackageManagerService.this, paramString, paramInt, false);
            if (paramIPackageDataObserver == null) {}
          }
        }
      });
      return;
    }
  }
  
  public void deleteCompilerPackageStats(String paramString)
  {
    this.mCompilerStats.deletePackageStats(paramString);
  }
  
  public void deletePackage(final String paramString, final IPackageDeleteObserver2 paramIPackageDeleteObserver2, final int paramInt1, final int paramInt2)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_PACKAGES", null);
    Preconditions.checkNotNull(paramString);
    Preconditions.checkNotNull(paramIPackageDeleteObserver2);
    int i = Binder.getCallingUid();
    final boolean bool;
    final Object localObject;
    if ((isOrphaned(paramString)) || (isCallerAllowedToSilentlyUninstall(i, paramString)))
    {
      if ((paramInt2 & 0x2) == 0) {
        break label190;
      }
      bool = true;
      if (!bool) {
        break label196;
      }
      localObject = sUserManager.getUserIds();
    }
    for (;;)
    {
      if ((UserHandle.getUserId(i) != paramInt1) || ((bool) && (localObject.length > 1))) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "deletePackage for user " + paramInt1);
      }
      if (!isUserRestricted(paramInt1, "no_uninstall_apps")) {
        break label211;
      }
      try
      {
        paramIPackageDeleteObserver2.onPackageDeleted(paramString, -3, null);
        return;
      }
      catch (RemoteException paramString)
      {
        label190:
        label196:
        return;
      }
      try
      {
        localObject = new Intent("android.intent.action.UNINSTALL_PACKAGE");
        ((Intent)localObject).setData(Uri.fromParts("package", paramString, null));
        ((Intent)localObject).putExtra("android.content.pm.extra.CALLBACK", paramIPackageDeleteObserver2.asBinder());
        paramIPackageDeleteObserver2.onUserActionRequired((Intent)localObject);
        return;
      }
      catch (RemoteException paramString) {}
      bool = false;
      break;
      localObject = new int[1];
      localObject[0] = paramInt1;
    }
    label211:
    if ((!bool) && (getBlockUninstallForUser(paramString, paramInt1))) {
      try
      {
        paramIPackageDeleteObserver2.onPackageDeleted(paramString, -4, null);
        return;
      }
      catch (RemoteException paramString)
      {
        return;
      }
    }
    if (DEBUG_REMOVE) {
      Slog.d("PackageManager", "deletePackageAsUser: pkg=" + paramString + " user=" + paramInt1 + " deleteAllUsers: " + bool);
    }
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        PackageManagerService.this.mHandler.removeCallbacks(this);
        int i;
        if (!bool) {
          i = PackageManagerService.-wrap11(PackageManagerService.this, paramString, paramInt1, paramInt2);
        }
        for (;;)
        {
          try
          {
            paramIPackageDeleteObserver2.onPackageDeleted(paramString, i, null);
            return;
          }
          catch (RemoteException localRemoteException)
          {
            int[] arrayOfInt1;
            int j;
            int[] arrayOfInt2;
            int k;
            int m;
            int n;
            Log.i("PackageManager", "Observer no longer exists.");
          }
          arrayOfInt1 = PackageManagerService.-wrap10(PackageManagerService.this, paramString, localObject);
          if (ArrayUtils.isEmpty(arrayOfInt1))
          {
            i = PackageManagerService.-wrap11(PackageManagerService.this, paramString, paramInt1, paramInt2);
          }
          else
          {
            j = paramInt2;
            arrayOfInt2 = localObject;
            i = 0;
            k = arrayOfInt2.length;
            if (i < k)
            {
              m = arrayOfInt2[i];
              if (!ArrayUtils.contains(arrayOfInt1, m))
              {
                n = PackageManagerService.-wrap11(PackageManagerService.this, paramString, m, j & 0xFFFFFFFD);
                if (n != 1) {
                  Slog.w("PackageManager", "Package delete failed for user " + m + ", returnCode " + n);
                }
              }
              i += 1;
            }
            else
            {
              i = -4;
            }
          }
        }
      }
    });
    return;
  }
  
  public void deletePackageAsUser(String paramString, IPackageDeleteObserver paramIPackageDeleteObserver, int paramInt1, int paramInt2)
  {
    deletePackage(paramString, new PackageManager.LegacyPackageDeleteObserver(paramIPackageDeleteObserver).getBinder(), paramInt1, paramInt2);
  }
  
  void destroyUserData(int paramInt1, int paramInt2)
  {
    synchronized (this.mInstallLock)
    {
      Iterator localIterator = ((StorageManager)this.mContext.getSystemService(StorageManager.class)).getWritablePrivateVolumes().iterator();
      if (localIterator.hasNext()) {
        destroyUserDataLI(((VolumeInfo)localIterator.next()).getFsUuid(), paramInt1, paramInt2);
      }
    }
  }
  
  /* Error */
  protected void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   4: ldc_w 7262
    //   7: invokevirtual 2321	android/content/Context:checkCallingOrSelfPermission	(Ljava/lang/String;)I
    //   10: ifeq +54 -> 64
    //   13: aload_2
    //   14: new 1320	java/lang/StringBuilder
    //   17: dup
    //   18: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   21: ldc_w 7264
    //   24: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   27: invokestatic 6653	android/os/Binder:getCallingPid	()I
    //   30: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   33: ldc_w 6655
    //   36: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   39: invokestatic 2303	android/os/Binder:getCallingUid	()I
    //   42: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   45: ldc_w 7266
    //   48: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   51: ldc_w 7262
    //   54: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   57: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   60: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   63: return
    //   64: new 111	com/android/server/pm/PackageManagerService$DumpState
    //   67: dup
    //   68: invokespecial 7267	com/android/server/pm/PackageManagerService$DumpState:<init>	()V
    //   71: astore 18
    //   73: iconst_0
    //   74: istore 10
    //   76: iconst_0
    //   77: istore 8
    //   79: aconst_null
    //   80: astore 15
    //   82: aconst_null
    //   83: astore 16
    //   85: iconst_0
    //   86: istore 4
    //   88: iload 4
    //   90: aload_3
    //   91: arraylength
    //   92: if_icmpge +22 -> 114
    //   95: aload_3
    //   96: iload 4
    //   98: aaload
    //   99: astore 13
    //   101: aload 13
    //   103: ifnull +11 -> 114
    //   106: aload 13
    //   108: invokevirtual 1359	java/lang/String:length	()I
    //   111: ifgt +503 -> 614
    //   114: aload 15
    //   116: astore 13
    //   118: iload 10
    //   120: istore 9
    //   122: aload 16
    //   124: astore 14
    //   126: iload 4
    //   128: aload_3
    //   129: arraylength
    //   130: if_icmpge +55 -> 185
    //   133: aload_3
    //   134: iload 4
    //   136: aaload
    //   137: astore 17
    //   139: iload 4
    //   141: iconst_1
    //   142: iadd
    //   143: istore 4
    //   145: ldc_w 319
    //   148: aload 17
    //   150: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   153: ifne +14 -> 167
    //   156: aload 17
    //   158: ldc_w 7269
    //   161: invokevirtual 4230	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   164: ifeq +773 -> 937
    //   167: aload 17
    //   169: astore 13
    //   171: aload 18
    //   173: iconst_1
    //   174: invokevirtual 7272	com/android/server/pm/PackageManagerService$DumpState:setOptionEnabled	(I)V
    //   177: aload 16
    //   179: astore 14
    //   181: iload 10
    //   183: istore 9
    //   185: iload 8
    //   187: ifeq +10 -> 197
    //   190: aload_2
    //   191: ldc_w 7274
    //   194: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   197: aload_0
    //   198: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   201: astore 15
    //   203: aload 15
    //   205: monitorenter
    //   206: aload 18
    //   208: ldc_w 298
    //   211: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   214: ifeq +50 -> 264
    //   217: aload 13
    //   219: ifnonnull +45 -> 264
    //   222: iload 8
    //   224: ifne +40 -> 264
    //   227: aload 18
    //   229: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   232: ifeq +7 -> 239
    //   235: aload_2
    //   236: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   239: aload_2
    //   240: ldc_w 7283
    //   243: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   246: aload_0
    //   247: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   250: new 3633	com/android/internal/util/IndentingPrintWriter
    //   253: dup
    //   254: aload_2
    //   255: ldc_w 2348
    //   258: invokespecial 7286	com/android/internal/util/IndentingPrintWriter:<init>	(Ljava/io/Writer;Ljava/lang/String;)V
    //   261: invokevirtual 7289	com/android/server/pm/Settings:dumpVersionLPr	(Lcom/android/internal/util/IndentingPrintWriter;)V
    //   264: aload 18
    //   266: sipush 2048
    //   269: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   272: ifeq +77 -> 349
    //   275: aload 13
    //   277: ifnonnull +72 -> 349
    //   280: iload 8
    //   282: ifne +1993 -> 2275
    //   285: aload 18
    //   287: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   290: ifeq +7 -> 297
    //   293: aload_2
    //   294: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   297: aload_2
    //   298: ldc_w 7291
    //   301: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   304: aload_2
    //   305: ldc_w 7293
    //   308: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   311: aload_2
    //   312: aload_0
    //   313: getfield 2076	com/android/server/pm/PackageManagerService:mRequiredVerifierPackage	Ljava/lang/String;
    //   316: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   319: aload_2
    //   320: ldc_w 6151
    //   323: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   326: aload_2
    //   327: aload_0
    //   328: aload_0
    //   329: getfield 2076	com/android/server/pm/PackageManagerService:mRequiredVerifierPackage	Ljava/lang/String;
    //   332: ldc_w 4607
    //   335: iconst_0
    //   336: invokevirtual 4882	com/android/server/pm/PackageManagerService:getPackageUid	(Ljava/lang/String;II)I
    //   339: invokevirtual 7298	java/io/PrintWriter:print	(I)V
    //   342: aload_2
    //   343: ldc_w 2229
    //   346: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   349: aload 18
    //   351: ldc_w 351
    //   354: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   357: ifeq +86 -> 443
    //   360: aload 13
    //   362: ifnonnull +81 -> 443
    //   365: aload_0
    //   366: getfield 2097	com/android/server/pm/PackageManagerService:mIntentFilterVerifierComponent	Landroid/content/ComponentName;
    //   369: ifnull +1993 -> 2362
    //   372: aload_0
    //   373: getfield 2097	com/android/server/pm/PackageManagerService:mIntentFilterVerifierComponent	Landroid/content/ComponentName;
    //   376: invokevirtual 4943	android/content/ComponentName:getPackageName	()Ljava/lang/String;
    //   379: astore_3
    //   380: iload 8
    //   382: ifne +1941 -> 2323
    //   385: aload 18
    //   387: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   390: ifeq +7 -> 397
    //   393: aload_2
    //   394: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   397: aload_2
    //   398: ldc_w 7300
    //   401: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   404: aload_2
    //   405: ldc_w 7302
    //   408: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   411: aload_2
    //   412: aload_3
    //   413: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   416: aload_2
    //   417: ldc_w 6151
    //   420: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   423: aload_2
    //   424: aload_0
    //   425: aload_3
    //   426: ldc_w 4607
    //   429: iconst_0
    //   430: invokevirtual 4882	com/android/server/pm/PackageManagerService:getPackageUid	(Ljava/lang/String;II)I
    //   433: invokevirtual 7298	java/io/PrintWriter:print	(I)V
    //   436: aload_2
    //   437: ldc_w 2229
    //   440: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   443: aload 18
    //   445: iconst_1
    //   446: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   449: ifeq +1999 -> 2448
    //   452: aload 13
    //   454: ifnonnull +1994 -> 2448
    //   457: iconst_0
    //   458: istore 4
    //   460: aload_0
    //   461: getfield 1146	com/android/server/pm/PackageManagerService:mSharedLibraries	Landroid/util/ArrayMap;
    //   464: invokevirtual 4974	android/util/ArrayMap:keySet	()Ljava/util/Set;
    //   467: invokeinterface 7303 1 0
    //   472: astore_3
    //   473: aload_3
    //   474: invokeinterface 1313 1 0
    //   479: ifeq +1969 -> 2448
    //   482: aload_3
    //   483: invokeinterface 1317 1 0
    //   488: checkcast 1071	java/lang/String
    //   491: astore 16
    //   493: aload_0
    //   494: getfield 1146	com/android/server/pm/PackageManagerService:mSharedLibraries	Landroid/util/ArrayMap;
    //   497: aload 16
    //   499: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   502: checkcast 189	com/android/server/pm/PackageManagerService$SharedLibraryEntry
    //   505: astore 17
    //   507: iload 8
    //   509: ifne +1867 -> 2376
    //   512: iload 4
    //   514: istore 5
    //   516: iload 4
    //   518: ifne +25 -> 543
    //   521: aload 18
    //   523: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   526: ifeq +7 -> 533
    //   529: aload_2
    //   530: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   533: aload_2
    //   534: ldc_w 7305
    //   537: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   540: iconst_1
    //   541: istore 5
    //   543: aload_2
    //   544: ldc_w 2348
    //   547: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   550: iload 5
    //   552: istore 4
    //   554: aload_2
    //   555: aload 16
    //   557: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   560: iload 8
    //   562: ifne +10 -> 572
    //   565: aload_2
    //   566: ldc_w 7307
    //   569: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   572: aload 17
    //   574: getfield 1692	com/android/server/pm/PackageManagerService$SharedLibraryEntry:path	Ljava/lang/String;
    //   577: ifnull +1828 -> 2405
    //   580: iload 8
    //   582: ifne +1804 -> 2386
    //   585: aload_2
    //   586: ldc_w 7309
    //   589: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   592: aload_2
    //   593: aload 17
    //   595: getfield 1692	com/android/server/pm/PackageManagerService$SharedLibraryEntry:path	Ljava/lang/String;
    //   598: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   601: aload_2
    //   602: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   605: goto -132 -> 473
    //   608: astore_1
    //   609: aload 15
    //   611: monitorexit
    //   612: aload_1
    //   613: athrow
    //   614: aload 13
    //   616: iconst_0
    //   617: invokevirtual 3877	java/lang/String:charAt	(I)C
    //   620: bipush 45
    //   622: if_icmpne -508 -> 114
    //   625: iload 4
    //   627: iconst_1
    //   628: iadd
    //   629: istore 5
    //   631: iload 5
    //   633: istore 4
    //   635: ldc_w 7311
    //   638: aload 13
    //   640: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   643: ifne -555 -> 88
    //   646: ldc_w 7313
    //   649: aload 13
    //   651: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   654: ifeq +200 -> 854
    //   657: aload_2
    //   658: ldc_w 7315
    //   661: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   664: aload_2
    //   665: ldc_w 7317
    //   668: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   671: aload_2
    //   672: ldc_w 7319
    //   675: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   678: aload_2
    //   679: ldc_w 7321
    //   682: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   685: aload_2
    //   686: ldc_w 7323
    //   689: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   692: aload_2
    //   693: ldc_w 7325
    //   696: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   699: aload_2
    //   700: ldc_w 7327
    //   703: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   706: aload_2
    //   707: ldc_w 7329
    //   710: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   713: aload_2
    //   714: ldc_w 7331
    //   717: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   720: aload_2
    //   721: ldc_w 7333
    //   724: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   727: aload_2
    //   728: ldc_w 7335
    //   731: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   734: aload_2
    //   735: ldc_w 7337
    //   738: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   741: aload_2
    //   742: ldc_w 7339
    //   745: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   748: aload_2
    //   749: ldc_w 7341
    //   752: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   755: aload_2
    //   756: ldc_w 7343
    //   759: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   762: aload_2
    //   763: ldc_w 7345
    //   766: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   769: aload_2
    //   770: ldc_w 7347
    //   773: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   776: aload_2
    //   777: ldc_w 7349
    //   780: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   783: aload_2
    //   784: ldc_w 7351
    //   787: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   790: aload_2
    //   791: ldc_w 7353
    //   794: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   797: aload_2
    //   798: ldc_w 7355
    //   801: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   804: aload_2
    //   805: ldc_w 7357
    //   808: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   811: aload_2
    //   812: ldc_w 7359
    //   815: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   818: aload_2
    //   819: ldc_w 7361
    //   822: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   825: aload_2
    //   826: ldc_w 7363
    //   829: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   832: aload_2
    //   833: ldc_w 7365
    //   836: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   839: aload_2
    //   840: ldc_w 7367
    //   843: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   846: aload_2
    //   847: ldc_w 7369
    //   850: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   853: return
    //   854: ldc_w 7371
    //   857: aload 13
    //   859: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   862: ifeq +13 -> 875
    //   865: iconst_1
    //   866: istore 8
    //   868: iload 5
    //   870: istore 4
    //   872: goto -784 -> 88
    //   875: ldc_w 7373
    //   878: aload 13
    //   880: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   883: ifeq +16 -> 899
    //   886: aload 18
    //   888: iconst_1
    //   889: invokevirtual 7272	com/android/server/pm/PackageManagerService$DumpState:setOptionEnabled	(I)V
    //   892: iload 5
    //   894: istore 4
    //   896: goto -808 -> 88
    //   899: aload_2
    //   900: new 1320	java/lang/StringBuilder
    //   903: dup
    //   904: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   907: ldc_w 7375
    //   910: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   913: aload 13
    //   915: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   918: ldc_w 7377
    //   921: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   924: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   927: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   930: iload 5
    //   932: istore 4
    //   934: goto -846 -> 88
    //   937: ldc_w 7379
    //   940: aload 17
    //   942: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   945: ifeq +123 -> 1068
    //   948: iload 4
    //   950: aload_3
    //   951: arraylength
    //   952: if_icmplt +11 -> 963
    //   955: aload_2
    //   956: ldc_w 7381
    //   959: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   962: return
    //   963: aload_3
    //   964: iload 4
    //   966: aaload
    //   967: astore_1
    //   968: iload 4
    //   970: iconst_1
    //   971: iadd
    //   972: istore 4
    //   974: iload 4
    //   976: aload_3
    //   977: arraylength
    //   978: if_icmplt +11 -> 989
    //   981: aload_2
    //   982: ldc_w 7383
    //   985: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   988: return
    //   989: aload_3
    //   990: iload 4
    //   992: aaload
    //   993: astore 13
    //   995: iload 4
    //   997: iconst_1
    //   998: iadd
    //   999: istore 5
    //   1001: invokestatic 2303	android/os/Binder:getCallingUid	()I
    //   1004: invokestatic 3803	android/os/UserHandle:getUserId	(I)I
    //   1007: istore 4
    //   1009: iload 5
    //   1011: aload_3
    //   1012: arraylength
    //   1013: if_icmpge +12 -> 1025
    //   1016: aload_3
    //   1017: iload 5
    //   1019: aaload
    //   1020: invokestatic 4223	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1023: istore 4
    //   1025: aload_2
    //   1026: aload_0
    //   1027: aload_1
    //   1028: aload 13
    //   1030: iload 4
    //   1032: invokevirtual 4200	com/android/server/pm/PackageManagerService:checkPermission	(Ljava/lang/String;Ljava/lang/String;I)I
    //   1035: invokevirtual 7385	java/io/PrintWriter:println	(I)V
    //   1038: return
    //   1039: astore_1
    //   1040: aload_2
    //   1041: new 1320	java/lang/StringBuilder
    //   1044: dup
    //   1045: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1048: ldc_w 7387
    //   1051: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1054: aload_3
    //   1055: iload 5
    //   1057: aaload
    //   1058: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1061: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1064: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1067: return
    //   1068: ldc_w 7389
    //   1071: aload 17
    //   1073: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1076: ifne +14 -> 1090
    //   1079: ldc_w 7391
    //   1082: aload 17
    //   1084: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1087: ifeq +24 -> 1111
    //   1090: aload 18
    //   1092: iconst_1
    //   1093: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1096: aload 15
    //   1098: astore 13
    //   1100: iload 10
    //   1102: istore 9
    //   1104: aload 16
    //   1106: astore 14
    //   1108: goto -923 -> 185
    //   1111: ldc_w 7396
    //   1114: aload 17
    //   1116: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1119: ifne +14 -> 1133
    //   1122: ldc_w 7398
    //   1125: aload 17
    //   1127: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1130: ifeq +24 -> 1154
    //   1133: aload 18
    //   1135: iconst_2
    //   1136: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1139: aload 15
    //   1141: astore 13
    //   1143: iload 10
    //   1145: istore 9
    //   1147: aload 16
    //   1149: astore 14
    //   1151: goto -966 -> 185
    //   1154: ldc_w 7400
    //   1157: aload 17
    //   1159: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1162: ifne +14 -> 1176
    //   1165: ldc_w 7402
    //   1168: aload 17
    //   1170: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1173: ifeq +220 -> 1393
    //   1176: iload 4
    //   1178: istore 5
    //   1180: iload 4
    //   1182: aload_3
    //   1183: arraylength
    //   1184: if_icmplt +25 -> 1209
    //   1187: aload 18
    //   1189: bipush 60
    //   1191: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1194: aload 15
    //   1196: astore 13
    //   1198: iload 10
    //   1200: istore 9
    //   1202: aload 16
    //   1204: astore 14
    //   1206: goto -1021 -> 185
    //   1209: aload 15
    //   1211: astore 13
    //   1213: iload 10
    //   1215: istore 9
    //   1217: aload 16
    //   1219: astore 14
    //   1221: iload 5
    //   1223: aload_3
    //   1224: arraylength
    //   1225: if_icmpge -1040 -> 185
    //   1228: aload_3
    //   1229: iload 5
    //   1231: aaload
    //   1232: astore 13
    //   1234: ldc_w 7404
    //   1237: aload 13
    //   1239: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1242: ifne +14 -> 1256
    //   1245: ldc_w 6342
    //   1248: aload 13
    //   1250: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1253: ifeq +18 -> 1271
    //   1256: aload 18
    //   1258: iconst_4
    //   1259: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1262: iload 5
    //   1264: iconst_1
    //   1265: iadd
    //   1266: istore 5
    //   1268: goto -59 -> 1209
    //   1271: ldc_w 6931
    //   1274: aload 13
    //   1276: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1279: ifne +14 -> 1293
    //   1282: ldc_w 7406
    //   1285: aload 13
    //   1287: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1290: ifeq +13 -> 1303
    //   1293: aload 18
    //   1295: bipush 8
    //   1297: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1300: goto -38 -> 1262
    //   1303: ldc_w 7400
    //   1306: aload 13
    //   1308: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1311: ifne +14 -> 1325
    //   1314: ldc_w 6335
    //   1317: aload 13
    //   1319: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1322: ifeq +13 -> 1335
    //   1325: aload 18
    //   1327: bipush 16
    //   1329: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1332: goto -70 -> 1262
    //   1335: ldc_w 7408
    //   1338: aload 13
    //   1340: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1343: ifne +14 -> 1357
    //   1346: ldc_w 7410
    //   1349: aload 13
    //   1351: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1354: ifeq +13 -> 1367
    //   1357: aload 18
    //   1359: bipush 32
    //   1361: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1364: goto -102 -> 1262
    //   1367: aload_2
    //   1368: new 1320	java/lang/StringBuilder
    //   1371: dup
    //   1372: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   1375: ldc_w 7412
    //   1378: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1381: aload 13
    //   1383: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1386: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1389: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1392: return
    //   1393: ldc_w 406
    //   1396: aload 17
    //   1398: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1401: ifne +14 -> 1415
    //   1404: ldc_w 7413
    //   1407: aload 17
    //   1409: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1412: ifeq +25 -> 1437
    //   1415: aload 18
    //   1417: bipush 64
    //   1419: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1422: aload 15
    //   1424: astore 13
    //   1426: iload 10
    //   1428: istore 9
    //   1430: aload 16
    //   1432: astore 14
    //   1434: goto -1249 -> 185
    //   1437: ldc_w 7415
    //   1440: aload 17
    //   1442: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1445: ifeq +72 -> 1517
    //   1448: iload 4
    //   1450: aload_3
    //   1451: arraylength
    //   1452: if_icmplt +11 -> 1463
    //   1455: aload_2
    //   1456: ldc_w 7417
    //   1459: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   1462: return
    //   1463: new 1056	android/util/ArraySet
    //   1466: dup
    //   1467: invokespecial 1057	android/util/ArraySet:<init>	()V
    //   1470: astore 14
    //   1472: iload 4
    //   1474: aload_3
    //   1475: arraylength
    //   1476: if_icmpge +22 -> 1498
    //   1479: aload 14
    //   1481: aload_3
    //   1482: iload 4
    //   1484: aaload
    //   1485: invokevirtual 1780	android/util/ArraySet:add	(Ljava/lang/Object;)Z
    //   1488: pop
    //   1489: iload 4
    //   1491: iconst_1
    //   1492: iadd
    //   1493: istore 4
    //   1495: goto -23 -> 1472
    //   1498: aload 18
    //   1500: sipush 448
    //   1503: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1506: aload 15
    //   1508: astore 13
    //   1510: iload 10
    //   1512: istore 9
    //   1514: goto -1329 -> 185
    //   1517: ldc_w 7419
    //   1520: aload 17
    //   1522: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1525: ifne +14 -> 1539
    //   1528: ldc_w 7421
    //   1531: aload 17
    //   1533: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1536: ifeq +26 -> 1562
    //   1539: aload 18
    //   1541: sipush 4096
    //   1544: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1547: aload 15
    //   1549: astore 13
    //   1551: iload 10
    //   1553: istore 9
    //   1555: aload 16
    //   1557: astore 14
    //   1559: goto -1374 -> 185
    //   1562: ldc_w 7423
    //   1565: aload 17
    //   1567: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1570: ifeq +69 -> 1639
    //   1573: aload 18
    //   1575: sipush 8192
    //   1578: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1581: aload 15
    //   1583: astore 13
    //   1585: iload 10
    //   1587: istore 9
    //   1589: aload 16
    //   1591: astore 14
    //   1593: iload 4
    //   1595: aload_3
    //   1596: arraylength
    //   1597: if_icmpge -1412 -> 185
    //   1600: aload 15
    //   1602: astore 13
    //   1604: iload 10
    //   1606: istore 9
    //   1608: aload 16
    //   1610: astore 14
    //   1612: ldc_w 7425
    //   1615: aload_3
    //   1616: iload 4
    //   1618: aaload
    //   1619: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1622: ifeq -1437 -> 185
    //   1625: iconst_1
    //   1626: istore 9
    //   1628: aload 15
    //   1630: astore 13
    //   1632: aload 16
    //   1634: astore 14
    //   1636: goto -1451 -> 185
    //   1639: ldc_w 7426
    //   1642: aload 17
    //   1644: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1647: ifne +14 -> 1661
    //   1650: ldc_w 7428
    //   1653: aload 17
    //   1655: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1658: ifeq +26 -> 1684
    //   1661: aload 18
    //   1663: ldc_w 354
    //   1666: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1669: aload 15
    //   1671: astore 13
    //   1673: iload 10
    //   1675: istore 9
    //   1677: aload 16
    //   1679: astore 14
    //   1681: goto -1496 -> 185
    //   1684: ldc_w 7430
    //   1687: aload 17
    //   1689: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1692: ifne +14 -> 1706
    //   1695: ldc_w 7431
    //   1698: aload 17
    //   1700: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1703: ifeq +26 -> 1729
    //   1706: aload 18
    //   1708: sipush 128
    //   1711: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1714: aload 15
    //   1716: astore 13
    //   1718: iload 10
    //   1720: istore 9
    //   1722: aload 16
    //   1724: astore 14
    //   1726: goto -1541 -> 185
    //   1729: ldc_w 6931
    //   1732: aload 17
    //   1734: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1737: ifne +14 -> 1751
    //   1740: ldc_w 7433
    //   1743: aload 17
    //   1745: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1748: ifeq +26 -> 1774
    //   1751: aload 18
    //   1753: sipush 256
    //   1756: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1759: aload 15
    //   1761: astore 13
    //   1763: iload 10
    //   1765: istore 9
    //   1767: aload 16
    //   1769: astore 14
    //   1771: goto -1586 -> 185
    //   1774: ldc_w 7435
    //   1777: aload 17
    //   1779: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1782: ifne +14 -> 1796
    //   1785: ldc_w 7436
    //   1788: aload 17
    //   1790: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1793: ifeq +26 -> 1819
    //   1796: aload 18
    //   1798: sipush 1024
    //   1801: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1804: aload 15
    //   1806: astore 13
    //   1808: iload 10
    //   1810: istore 9
    //   1812: aload 16
    //   1814: astore 14
    //   1816: goto -1631 -> 185
    //   1819: ldc_w 7438
    //   1822: aload 17
    //   1824: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1827: ifne +14 -> 1841
    //   1830: ldc_w 7440
    //   1833: aload 17
    //   1835: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1838: ifeq +26 -> 1864
    //   1841: aload 18
    //   1843: sipush 512
    //   1846: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1849: aload 15
    //   1851: astore 13
    //   1853: iload 10
    //   1855: istore 9
    //   1857: aload 16
    //   1859: astore 14
    //   1861: goto -1676 -> 185
    //   1864: ldc_w 7441
    //   1867: aload 17
    //   1869: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1872: ifne +14 -> 1886
    //   1875: ldc_w 7442
    //   1878: aload 17
    //   1880: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1883: ifeq +26 -> 1909
    //   1886: aload 18
    //   1888: sipush 2048
    //   1891: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1894: aload 15
    //   1896: astore 13
    //   1898: iload 10
    //   1900: istore 9
    //   1902: aload 16
    //   1904: astore 14
    //   1906: goto -1721 -> 185
    //   1909: ldc_w 7443
    //   1912: aload 17
    //   1914: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1917: ifne +25 -> 1942
    //   1920: ldc_w 7445
    //   1923: aload 17
    //   1925: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1928: ifne +14 -> 1942
    //   1931: ldc_w 7447
    //   1934: aload 17
    //   1936: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1939: ifeq +26 -> 1965
    //   1942: aload 18
    //   1944: ldc_w 351
    //   1947: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1950: aload 15
    //   1952: astore 13
    //   1954: iload 10
    //   1956: istore 9
    //   1958: aload 16
    //   1960: astore 14
    //   1962: goto -1777 -> 185
    //   1965: ldc_w 7449
    //   1968: aload 17
    //   1970: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1973: ifeq +26 -> 1999
    //   1976: aload 18
    //   1978: ldc_w 298
    //   1981: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   1984: aload 15
    //   1986: astore 13
    //   1988: iload 10
    //   1990: istore 9
    //   1992: aload 16
    //   1994: astore 14
    //   1996: goto -1811 -> 185
    //   1999: ldc_w 7451
    //   2002: aload 17
    //   2004: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2007: ifne +14 -> 2021
    //   2010: ldc_w 7453
    //   2013: aload 17
    //   2015: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2018: ifeq +26 -> 2044
    //   2021: aload 18
    //   2023: sipush 16384
    //   2026: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   2029: aload 15
    //   2031: astore 13
    //   2033: iload 10
    //   2035: istore 9
    //   2037: aload 16
    //   2039: astore 14
    //   2041: goto -1856 -> 185
    //   2044: ldc_w 7455
    //   2047: aload 17
    //   2049: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2052: ifeq +26 -> 2078
    //   2055: aload 18
    //   2057: ldc_w 339
    //   2060: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   2063: aload 15
    //   2065: astore 13
    //   2067: iload 10
    //   2069: istore 9
    //   2071: aload 16
    //   2073: astore 14
    //   2075: goto -1890 -> 185
    //   2078: ldc_w 7457
    //   2081: aload 17
    //   2083: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2086: ifeq +26 -> 2112
    //   2089: aload 18
    //   2091: ldc_w 4254
    //   2094: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   2097: aload 15
    //   2099: astore 13
    //   2101: iload 10
    //   2103: istore 9
    //   2105: aload 16
    //   2107: astore 14
    //   2109: goto -1924 -> 185
    //   2112: ldc_w 4828
    //   2115: aload 17
    //   2117: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2120: ifeq +26 -> 2146
    //   2123: aload 18
    //   2125: ldc_w 4089
    //   2128: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   2131: aload 15
    //   2133: astore 13
    //   2135: iload 10
    //   2137: istore 9
    //   2139: aload 16
    //   2141: astore 14
    //   2143: goto -1958 -> 185
    //   2146: ldc_w 7459
    //   2149: aload 17
    //   2151: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2154: ifeq +26 -> 2180
    //   2157: aload 18
    //   2159: ldc_w 7460
    //   2162: invokevirtual 7394	com/android/server/pm/PackageManagerService$DumpState:setDump	(I)V
    //   2165: aload 15
    //   2167: astore 13
    //   2169: iload 10
    //   2171: istore 9
    //   2173: aload 16
    //   2175: astore 14
    //   2177: goto -1992 -> 185
    //   2180: ldc_w 7462
    //   2183: aload 17
    //   2185: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2188: ifeq +32 -> 2220
    //   2191: aload_0
    //   2192: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   2195: astore_1
    //   2196: aload_1
    //   2197: monitorenter
    //   2198: aload_0
    //   2199: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   2202: invokevirtual 2063	com/android/server/pm/Settings:writeLPr	()V
    //   2205: aload_2
    //   2206: ldc_w 7464
    //   2209: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2212: aload_1
    //   2213: monitorexit
    //   2214: return
    //   2215: astore_2
    //   2216: aload_1
    //   2217: monitorexit
    //   2218: aload_2
    //   2219: athrow
    //   2220: ldc_w 7466
    //   2223: aload 17
    //   2225: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2228: ifeq +12 -> 2240
    //   2231: aload_0
    //   2232: aload_2
    //   2233: aload_3
    //   2234: iload 4
    //   2236: invokestatic 7472	com/android/server/pm/PackageManagerServiceDynamicLogConfig:dynamicallyConfigLogTag	(Lcom/android/server/pm/PackageManagerService;Ljava/io/PrintWriter;[Ljava/lang/String;I)V
    //   2239: return
    //   2240: aload 15
    //   2242: astore 13
    //   2244: iload 10
    //   2246: istore 9
    //   2248: aload 16
    //   2250: astore 14
    //   2252: ldc_w 7474
    //   2255: aload 17
    //   2257: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2260: ifeq -2075 -> 185
    //   2263: aload_2
    //   2264: aload_0
    //   2265: getfield 651	com/android/server/pm/PackageManagerService:mOemCompatibilityHelper	Lcom/android/server/pm/OemCompatibilityHelper;
    //   2268: invokevirtual 7477	com/android/server/pm/OemCompatibilityHelper:dumpToString	()Ljava/lang/String;
    //   2271: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2274: return
    //   2275: aload_0
    //   2276: getfield 2076	com/android/server/pm/PackageManagerService:mRequiredVerifierPackage	Ljava/lang/String;
    //   2279: ifnull -1930 -> 349
    //   2282: aload_2
    //   2283: ldc_w 7479
    //   2286: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2289: aload_2
    //   2290: aload_0
    //   2291: getfield 2076	com/android/server/pm/PackageManagerService:mRequiredVerifierPackage	Ljava/lang/String;
    //   2294: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2297: aload_2
    //   2298: ldc_w 1582
    //   2301: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2304: aload_2
    //   2305: aload_0
    //   2306: aload_0
    //   2307: getfield 2076	com/android/server/pm/PackageManagerService:mRequiredVerifierPackage	Ljava/lang/String;
    //   2310: ldc_w 4607
    //   2313: iconst_0
    //   2314: invokevirtual 4882	com/android/server/pm/PackageManagerService:getPackageUid	(Ljava/lang/String;II)I
    //   2317: invokevirtual 7385	java/io/PrintWriter:println	(I)V
    //   2320: goto -1971 -> 349
    //   2323: aload_3
    //   2324: ifnull -1881 -> 443
    //   2327: aload_2
    //   2328: ldc_w 7481
    //   2331: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2334: aload_2
    //   2335: aload_3
    //   2336: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2339: aload_2
    //   2340: ldc_w 1582
    //   2343: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2346: aload_2
    //   2347: aload_0
    //   2348: aload_3
    //   2349: ldc_w 4607
    //   2352: iconst_0
    //   2353: invokevirtual 4882	com/android/server/pm/PackageManagerService:getPackageUid	(Ljava/lang/String;II)I
    //   2356: invokevirtual 7385	java/io/PrintWriter:println	(I)V
    //   2359: goto -1916 -> 443
    //   2362: aload_2
    //   2363: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   2366: aload_2
    //   2367: ldc_w 7483
    //   2370: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2373: goto -1930 -> 443
    //   2376: aload_2
    //   2377: ldc_w 7485
    //   2380: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2383: goto -1829 -> 554
    //   2386: aload_2
    //   2387: ldc_w 7487
    //   2390: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2393: aload_2
    //   2394: aload 17
    //   2396: getfield 1692	com/android/server/pm/PackageManagerService$SharedLibraryEntry:path	Ljava/lang/String;
    //   2399: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2402: goto -1801 -> 601
    //   2405: iload 8
    //   2407: ifne +22 -> 2429
    //   2410: aload_2
    //   2411: ldc_w 7489
    //   2414: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2417: aload_2
    //   2418: aload 17
    //   2420: getfield 2374	com/android/server/pm/PackageManagerService$SharedLibraryEntry:apk	Ljava/lang/String;
    //   2423: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2426: goto -1825 -> 601
    //   2429: aload_2
    //   2430: ldc_w 7491
    //   2433: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2436: aload_2
    //   2437: aload 17
    //   2439: getfield 2374	com/android/server/pm/PackageManagerService$SharedLibraryEntry:apk	Ljava/lang/String;
    //   2442: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2445: goto -1844 -> 601
    //   2448: aload 18
    //   2450: iconst_2
    //   2451: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   2454: ifeq +152 -> 2606
    //   2457: aload 13
    //   2459: ifnonnull +147 -> 2606
    //   2462: aload 18
    //   2464: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   2467: ifeq +7 -> 2474
    //   2470: aload_2
    //   2471: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   2474: iload 8
    //   2476: ifne +10 -> 2486
    //   2479: aload_2
    //   2480: ldc_w 7493
    //   2483: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   2486: aload_0
    //   2487: getfield 1424	com/android/server/pm/PackageManagerService:mAvailableFeatures	Landroid/util/ArrayMap;
    //   2490: invokevirtual 1689	android/util/ArrayMap:values	()Ljava/util/Collection;
    //   2493: invokeinterface 1308 1 0
    //   2498: astore_3
    //   2499: aload_3
    //   2500: invokeinterface 1313 1 0
    //   2505: ifeq +101 -> 2606
    //   2508: aload_3
    //   2509: invokeinterface 1317 1 0
    //   2514: checkcast 7495	android/content/pm/FeatureInfo
    //   2517: astore 16
    //   2519: iload 8
    //   2521: ifeq +38 -> 2559
    //   2524: aload_2
    //   2525: ldc_w 7497
    //   2528: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2531: aload_2
    //   2532: aload 16
    //   2534: getfield 7498	android/content/pm/FeatureInfo:name	Ljava/lang/String;
    //   2537: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2540: aload_2
    //   2541: ldc_w 1582
    //   2544: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2547: aload_2
    //   2548: aload 16
    //   2550: getfield 7500	android/content/pm/FeatureInfo:version	I
    //   2553: invokevirtual 7385	java/io/PrintWriter:println	(I)V
    //   2556: goto -57 -> 2499
    //   2559: aload_2
    //   2560: ldc_w 2348
    //   2563: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2566: aload_2
    //   2567: aload 16
    //   2569: getfield 7498	android/content/pm/FeatureInfo:name	Ljava/lang/String;
    //   2572: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2575: aload 16
    //   2577: getfield 7500	android/content/pm/FeatureInfo:version	I
    //   2580: ifle +19 -> 2599
    //   2583: aload_2
    //   2584: ldc_w 7502
    //   2587: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   2590: aload_2
    //   2591: aload 16
    //   2593: getfield 7500	android/content/pm/FeatureInfo:version	I
    //   2596: invokevirtual 7298	java/io/PrintWriter:print	(I)V
    //   2599: aload_2
    //   2600: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   2603: goto -104 -> 2499
    //   2606: iload 8
    //   2608: ifne +58 -> 2666
    //   2611: aload 18
    //   2613: iconst_4
    //   2614: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   2617: ifeq +49 -> 2666
    //   2620: aload_0
    //   2621: getfield 1151	com/android/server/pm/PackageManagerService:mActivities	Lcom/android/server/pm/PackageManagerService$ActivityIntentResolver;
    //   2624: astore 16
    //   2626: aload 18
    //   2628: invokevirtual 7505	com/android/server/pm/PackageManagerService$DumpState:getTitlePrinted	()Z
    //   2631: ifeq +2180 -> 4811
    //   2634: ldc_w 7507
    //   2637: astore_3
    //   2638: aload 16
    //   2640: aload_2
    //   2641: aload_3
    //   2642: ldc_w 2348
    //   2645: aload 13
    //   2647: aload 18
    //   2649: iconst_1
    //   2650: invokevirtual 7510	com/android/server/pm/PackageManagerService$DumpState:isOptionEnabled	(I)Z
    //   2653: iconst_1
    //   2654: invokevirtual 7513	com/android/server/pm/PackageManagerService$ActivityIntentResolver:dump	(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Z
    //   2657: ifeq +9 -> 2666
    //   2660: aload 18
    //   2662: iconst_1
    //   2663: invokevirtual 7516	com/android/server/pm/PackageManagerService$DumpState:setTitlePrinted	(Z)V
    //   2666: iload 8
    //   2668: ifne +59 -> 2727
    //   2671: aload 18
    //   2673: bipush 16
    //   2675: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   2678: ifeq +49 -> 2727
    //   2681: aload_0
    //   2682: getfield 1153	com/android/server/pm/PackageManagerService:mReceivers	Lcom/android/server/pm/PackageManagerService$ActivityIntentResolver;
    //   2685: astore 16
    //   2687: aload 18
    //   2689: invokevirtual 7505	com/android/server/pm/PackageManagerService$DumpState:getTitlePrinted	()Z
    //   2692: ifeq +2126 -> 4818
    //   2695: ldc_w 7518
    //   2698: astore_3
    //   2699: aload 16
    //   2701: aload_2
    //   2702: aload_3
    //   2703: ldc_w 2348
    //   2706: aload 13
    //   2708: aload 18
    //   2710: iconst_1
    //   2711: invokevirtual 7510	com/android/server/pm/PackageManagerService$DumpState:isOptionEnabled	(I)Z
    //   2714: iconst_1
    //   2715: invokevirtual 7513	com/android/server/pm/PackageManagerService$ActivityIntentResolver:dump	(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Z
    //   2718: ifeq +9 -> 2727
    //   2721: aload 18
    //   2723: iconst_1
    //   2724: invokevirtual 7516	com/android/server/pm/PackageManagerService$DumpState:setTitlePrinted	(Z)V
    //   2727: iload 8
    //   2729: ifne +59 -> 2788
    //   2732: aload 18
    //   2734: bipush 8
    //   2736: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   2739: ifeq +49 -> 2788
    //   2742: aload_0
    //   2743: getfield 1158	com/android/server/pm/PackageManagerService:mServices	Lcom/android/server/pm/PackageManagerService$ServiceIntentResolver;
    //   2746: astore 16
    //   2748: aload 18
    //   2750: invokevirtual 7505	com/android/server/pm/PackageManagerService$DumpState:getTitlePrinted	()Z
    //   2753: ifeq +2072 -> 4825
    //   2756: ldc_w 7520
    //   2759: astore_3
    //   2760: aload 16
    //   2762: aload_2
    //   2763: aload_3
    //   2764: ldc_w 2348
    //   2767: aload 13
    //   2769: aload 18
    //   2771: iconst_1
    //   2772: invokevirtual 7510	com/android/server/pm/PackageManagerService$DumpState:isOptionEnabled	(I)Z
    //   2775: iconst_1
    //   2776: invokevirtual 7521	com/android/server/pm/PackageManagerService$ServiceIntentResolver:dump	(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Z
    //   2779: ifeq +9 -> 2788
    //   2782: aload 18
    //   2784: iconst_1
    //   2785: invokevirtual 7516	com/android/server/pm/PackageManagerService$DumpState:setTitlePrinted	(Z)V
    //   2788: iload 8
    //   2790: ifne +59 -> 2849
    //   2793: aload 18
    //   2795: bipush 32
    //   2797: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   2800: ifeq +49 -> 2849
    //   2803: aload_0
    //   2804: getfield 1163	com/android/server/pm/PackageManagerService:mProviders	Lcom/android/server/pm/PackageManagerService$ProviderIntentResolver;
    //   2807: astore 16
    //   2809: aload 18
    //   2811: invokevirtual 7505	com/android/server/pm/PackageManagerService$DumpState:getTitlePrinted	()Z
    //   2814: ifeq +2018 -> 4832
    //   2817: ldc_w 7523
    //   2820: astore_3
    //   2821: aload 16
    //   2823: aload_2
    //   2824: aload_3
    //   2825: ldc_w 2348
    //   2828: aload 13
    //   2830: aload 18
    //   2832: iconst_1
    //   2833: invokevirtual 7510	com/android/server/pm/PackageManagerService$DumpState:isOptionEnabled	(I)Z
    //   2836: iconst_1
    //   2837: invokevirtual 7524	com/android/server/pm/PackageManagerService$ProviderIntentResolver:dump	(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Z
    //   2840: ifeq +9 -> 2849
    //   2843: aload 18
    //   2845: iconst_1
    //   2846: invokevirtual 7516	com/android/server/pm/PackageManagerService$DumpState:setTitlePrinted	(Z)V
    //   2849: iload 8
    //   2851: ifne +156 -> 3007
    //   2854: aload 18
    //   2856: sipush 4096
    //   2859: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   2862: ifeq +145 -> 3007
    //   2865: iconst_0
    //   2866: istore 4
    //   2868: iload 4
    //   2870: aload_0
    //   2871: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   2874: getfield 7166	com/android/server/pm/Settings:mPreferredActivities	Landroid/util/SparseArray;
    //   2877: invokevirtual 7153	android/util/SparseArray:size	()I
    //   2880: if_icmpge +127 -> 3007
    //   2883: aload_0
    //   2884: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   2887: getfield 7166	com/android/server/pm/Settings:mPreferredActivities	Landroid/util/SparseArray;
    //   2890: iload 4
    //   2892: invokevirtual 7156	android/util/SparseArray:valueAt	(I)Ljava/lang/Object;
    //   2895: checkcast 2359	com/android/server/pm/PreferredIntentResolver
    //   2898: astore 16
    //   2900: aload_0
    //   2901: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   2904: getfield 7166	com/android/server/pm/Settings:mPreferredActivities	Landroid/util/SparseArray;
    //   2907: iload 4
    //   2909: invokevirtual 7155	android/util/SparseArray:keyAt	(I)I
    //   2912: istore 5
    //   2914: aload 18
    //   2916: invokevirtual 7505	com/android/server/pm/PackageManagerService$DumpState:getTitlePrinted	()Z
    //   2919: ifeq +57 -> 2976
    //   2922: new 1320	java/lang/StringBuilder
    //   2925: dup
    //   2926: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   2929: ldc_w 7526
    //   2932: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2935: iload 5
    //   2937: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   2940: ldc_w 2342
    //   2943: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2946: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2949: astore_3
    //   2950: aload 16
    //   2952: aload_2
    //   2953: aload_3
    //   2954: ldc_w 2348
    //   2957: aload 13
    //   2959: iconst_1
    //   2960: iconst_0
    //   2961: invokevirtual 7527	com/android/server/pm/PreferredIntentResolver:dump	(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Z
    //   2964: ifeq +1838 -> 4802
    //   2967: aload 18
    //   2969: iconst_1
    //   2970: invokevirtual 7516	com/android/server/pm/PackageManagerService$DumpState:setTitlePrinted	(Z)V
    //   2973: goto +1829 -> 4802
    //   2976: new 1320	java/lang/StringBuilder
    //   2979: dup
    //   2980: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   2983: ldc_w 7529
    //   2986: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2989: iload 5
    //   2991: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   2994: ldc_w 2342
    //   2997: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3000: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3003: astore_3
    //   3004: goto -54 -> 2950
    //   3007: iload 8
    //   3009: ifne +99 -> 3108
    //   3012: aload 18
    //   3014: sipush 8192
    //   3017: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   3020: ifeq +88 -> 3108
    //   3023: aload_2
    //   3024: invokevirtual 7532	java/io/PrintWriter:flush	()V
    //   3027: new 7534	java/io/BufferedOutputStream
    //   3030: dup
    //   3031: new 5068	java/io/FileOutputStream
    //   3034: dup
    //   3035: aload_1
    //   3036: invokespecial 7537	java/io/FileOutputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   3039: invokespecial 7538	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   3042: astore_1
    //   3043: new 7540	com/android/internal/util/FastXmlSerializer
    //   3046: dup
    //   3047: invokespecial 7541	com/android/internal/util/FastXmlSerializer:<init>	()V
    //   3050: astore_3
    //   3051: aload_3
    //   3052: aload_1
    //   3053: getstatic 7547	java/nio/charset/StandardCharsets:UTF_8	Ljava/nio/charset/Charset;
    //   3056: invokevirtual 7551	java/nio/charset/Charset:name	()Ljava/lang/String;
    //   3059: invokeinterface 7555 3 0
    //   3064: aload_3
    //   3065: aconst_null
    //   3066: iconst_1
    //   3067: invokestatic 7560	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   3070: invokeinterface 7564 3 0
    //   3075: aload_3
    //   3076: ldc_w 7566
    //   3079: iconst_1
    //   3080: invokeinterface 7569 3 0
    //   3085: aload_0
    //   3086: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   3089: aload_3
    //   3090: iconst_0
    //   3091: iload 9
    //   3093: invokevirtual 7573	com/android/server/pm/Settings:writePreferredActivitiesLPr	(Lorg/xmlpull/v1/XmlSerializer;IZ)V
    //   3096: aload_3
    //   3097: invokeinterface 7576 1 0
    //   3102: aload_3
    //   3103: invokeinterface 7577 1 0
    //   3108: iload 8
    //   3110: ifne +47 -> 3157
    //   3113: aload 18
    //   3115: ldc_w 354
    //   3118: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   3121: ifeq +36 -> 3157
    //   3124: aload 13
    //   3126: ifnonnull +31 -> 3157
    //   3129: aload_2
    //   3130: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3133: aload_0
    //   3134: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   3137: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   3140: invokevirtual 1522	android/util/ArrayMap:size	()I
    //   3143: ifne +260 -> 3403
    //   3146: aload_2
    //   3147: ldc_w 7579
    //   3150: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3153: aload_2
    //   3154: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3157: iload 8
    //   3159: ifne +686 -> 3845
    //   3162: aload 18
    //   3164: bipush 64
    //   3166: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   3169: ifeq +676 -> 3845
    //   3172: aload_0
    //   3173: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   3176: aload_2
    //   3177: aload 13
    //   3179: aload 14
    //   3181: aload 18
    //   3183: invokevirtual 7583	com/android/server/pm/Settings:dumpPermissionsLPr	(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/util/ArraySet;Lcom/android/server/pm/PackageManagerService$DumpState;)V
    //   3186: aload 13
    //   3188: ifnonnull +657 -> 3845
    //   3191: aload 14
    //   3193: ifnonnull +652 -> 3845
    //   3196: iconst_0
    //   3197: istore 4
    //   3199: iload 4
    //   3201: aload_0
    //   3202: getfield 1180	com/android/server/pm/PackageManagerService:mAppOpPermissionPackages	Landroid/util/ArrayMap;
    //   3205: invokevirtual 1522	android/util/ArrayMap:size	()I
    //   3208: if_icmpge +637 -> 3845
    //   3211: iload 4
    //   3213: ifne +22 -> 3235
    //   3216: aload 18
    //   3218: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   3221: ifeq +7 -> 3228
    //   3224: aload_2
    //   3225: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3228: aload_2
    //   3229: ldc_w 7585
    //   3232: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3235: aload_2
    //   3236: ldc_w 7587
    //   3239: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3242: aload_2
    //   3243: aload_0
    //   3244: getfield 1180	com/android/server/pm/PackageManagerService:mAppOpPermissionPackages	Landroid/util/ArrayMap;
    //   3247: iload 4
    //   3249: invokevirtual 1594	android/util/ArrayMap:keyAt	(I)Ljava/lang/Object;
    //   3252: checkcast 1071	java/lang/String
    //   3255: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3258: aload_2
    //   3259: ldc_w 2342
    //   3262: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3265: aload_0
    //   3266: getfield 1180	com/android/server/pm/PackageManagerService:mAppOpPermissionPackages	Landroid/util/ArrayMap;
    //   3269: iload 4
    //   3271: invokevirtual 1526	android/util/ArrayMap:valueAt	(I)Ljava/lang/Object;
    //   3274: checkcast 1056	android/util/ArraySet
    //   3277: astore_1
    //   3278: iconst_0
    //   3279: istore 5
    //   3281: iload 5
    //   3283: aload_1
    //   3284: invokevirtual 3712	android/util/ArraySet:size	()I
    //   3287: if_icmpge +1561 -> 4848
    //   3290: aload_2
    //   3291: ldc_w 7589
    //   3294: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3297: aload_2
    //   3298: aload_1
    //   3299: iload 5
    //   3301: invokevirtual 5940	android/util/ArraySet:valueAt	(I)Ljava/lang/Object;
    //   3304: checkcast 1071	java/lang/String
    //   3307: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3310: iload 5
    //   3312: iconst_1
    //   3313: iadd
    //   3314: istore 5
    //   3316: goto -35 -> 3281
    //   3319: astore_1
    //   3320: aload_2
    //   3321: new 1320	java/lang/StringBuilder
    //   3324: dup
    //   3325: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3328: ldc_w 7591
    //   3331: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3334: aload_1
    //   3335: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   3338: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3341: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3344: goto -236 -> 3108
    //   3347: astore_1
    //   3348: aload_2
    //   3349: new 1320	java/lang/StringBuilder
    //   3352: dup
    //   3353: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3356: ldc_w 7591
    //   3359: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3362: aload_1
    //   3363: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   3366: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3369: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3372: goto -264 -> 3108
    //   3375: astore_1
    //   3376: aload_2
    //   3377: new 1320	java/lang/StringBuilder
    //   3380: dup
    //   3381: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3384: ldc_w 7591
    //   3387: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3390: aload_1
    //   3391: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   3394: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3397: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3400: goto -292 -> 3108
    //   3403: aload_0
    //   3404: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   3407: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   3410: invokevirtual 1689	android/util/ArrayMap:values	()Ljava/util/Collection;
    //   3413: astore_1
    //   3414: aload_1
    //   3415: invokeinterface 7592 1 0
    //   3420: ifne +17 -> 3437
    //   3423: aload_2
    //   3424: ldc_w 7594
    //   3427: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3430: aload_2
    //   3431: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3434: goto -277 -> 3157
    //   3437: aload_2
    //   3438: ldc_w 7596
    //   3441: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3444: aload_2
    //   3445: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3448: iconst_0
    //   3449: istore 4
    //   3451: aload_1
    //   3452: invokeinterface 1308 1 0
    //   3457: astore_3
    //   3458: aload_3
    //   3459: invokeinterface 1313 1 0
    //   3464: ifeq +127 -> 3591
    //   3467: aload_3
    //   3468: invokeinterface 1317 1 0
    //   3473: checkcast 1615	com/android/server/pm/PackageSetting
    //   3476: invokevirtual 4054	com/android/server/pm/PackageSetting:getIntentFilterVerificationInfo	()Landroid/content/pm/IntentFilterVerificationInfo;
    //   3479: astore 16
    //   3481: aload 16
    //   3483: ifnull -25 -> 3458
    //   3486: aload 16
    //   3488: invokevirtual 7597	android/content/pm/IntentFilterVerificationInfo:getPackageName	()Ljava/lang/String;
    //   3491: ifnull -33 -> 3458
    //   3494: aload_2
    //   3495: new 1320	java/lang/StringBuilder
    //   3498: dup
    //   3499: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3502: ldc_w 7599
    //   3505: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3508: aload 16
    //   3510: invokevirtual 7597	android/content/pm/IntentFilterVerificationInfo:getPackageName	()Ljava/lang/String;
    //   3513: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3516: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3519: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3522: aload_2
    //   3523: new 1320	java/lang/StringBuilder
    //   3526: dup
    //   3527: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3530: ldc_w 7601
    //   3533: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3536: aload 16
    //   3538: invokevirtual 7604	android/content/pm/IntentFilterVerificationInfo:getDomainsString	()Ljava/lang/String;
    //   3541: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3544: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3547: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3550: aload_2
    //   3551: new 1320	java/lang/StringBuilder
    //   3554: dup
    //   3555: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3558: ldc_w 7606
    //   3561: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3564: aload 16
    //   3566: invokevirtual 6908	android/content/pm/IntentFilterVerificationInfo:getStatusString	()Ljava/lang/String;
    //   3569: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3572: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3575: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3578: aload_2
    //   3579: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3582: iload 4
    //   3584: iconst_1
    //   3585: iadd
    //   3586: istore 4
    //   3588: goto -130 -> 3458
    //   3591: iload 4
    //   3593: ifne +14 -> 3607
    //   3596: aload_2
    //   3597: ldc_w 7608
    //   3600: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3603: aload_2
    //   3604: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3607: getstatic 1516	com/android/server/pm/PackageManagerService:sUserManager	Lcom/android/server/pm/UserManagerService;
    //   3610: invokevirtual 2891	com/android/server/pm/UserManagerService:getUserIds	()[I
    //   3613: astore_3
    //   3614: iconst_0
    //   3615: istore 4
    //   3617: aload_3
    //   3618: arraylength
    //   3619: istore 6
    //   3621: iload 4
    //   3623: iload 6
    //   3625: if_icmpge -468 -> 3157
    //   3628: aload_3
    //   3629: iload 4
    //   3631: iaload
    //   3632: istore 7
    //   3634: aload_2
    //   3635: new 1320	java/lang/StringBuilder
    //   3638: dup
    //   3639: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3642: ldc_w 7610
    //   3645: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3648: iload 7
    //   3650: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3653: ldc_w 2342
    //   3656: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3659: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3662: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3665: aload_2
    //   3666: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3669: iconst_0
    //   3670: istore 5
    //   3672: aload_1
    //   3673: invokeinterface 1308 1 0
    //   3678: astore 16
    //   3680: aload 16
    //   3682: invokeinterface 1313 1 0
    //   3687: ifeq +139 -> 3826
    //   3690: aload 16
    //   3692: invokeinterface 1317 1 0
    //   3697: checkcast 1615	com/android/server/pm/PackageSetting
    //   3700: astore 17
    //   3702: aload 17
    //   3704: iload 7
    //   3706: invokevirtual 4050	com/android/server/pm/PackageSetting:getDomainVerificationStatusForUser	(I)J
    //   3709: lstore 11
    //   3711: lload 11
    //   3713: bipush 32
    //   3715: lshr
    //   3716: lconst_0
    //   3717: lcmp
    //   3718: ifeq -38 -> 3680
    //   3721: aload_2
    //   3722: new 1320	java/lang/StringBuilder
    //   3725: dup
    //   3726: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3729: ldc_w 7599
    //   3732: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3735: aload 17
    //   3737: getfield 1622	com/android/server/pm/PackageSetting:name	Ljava/lang/String;
    //   3740: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3743: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3746: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3749: aload_2
    //   3750: new 1320	java/lang/StringBuilder
    //   3753: dup
    //   3754: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3757: ldc_w 7601
    //   3760: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3763: aload_0
    //   3764: aload 17
    //   3766: getfield 1622	com/android/server/pm/PackageSetting:name	Ljava/lang/String;
    //   3769: invokespecial 7612	com/android/server/pm/PackageManagerService:dumpDomainString	(Ljava/lang/String;)Ljava/lang/String;
    //   3772: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3775: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3778: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3781: lload 11
    //   3783: invokestatic 7616	android/content/pm/IntentFilterVerificationInfo:getStatusStringFromValue	(J)Ljava/lang/String;
    //   3786: astore 17
    //   3788: aload_2
    //   3789: new 1320	java/lang/StringBuilder
    //   3792: dup
    //   3793: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   3796: ldc_w 7606
    //   3799: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3802: aload 17
    //   3804: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3807: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3810: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3813: aload_2
    //   3814: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3817: iload 5
    //   3819: iconst_1
    //   3820: iadd
    //   3821: istore 5
    //   3823: goto -143 -> 3680
    //   3826: iload 5
    //   3828: ifne +1011 -> 4839
    //   3831: aload_2
    //   3832: ldc_w 7618
    //   3835: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3838: aload_2
    //   3839: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3842: goto +997 -> 4839
    //   3845: iload 8
    //   3847: ifne +343 -> 4190
    //   3850: aload 18
    //   3852: sipush 1024
    //   3855: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   3858: ifeq +332 -> 4190
    //   3861: iconst_0
    //   3862: istore 4
    //   3864: aload_0
    //   3865: getfield 1163	com/android/server/pm/PackageManagerService:mProviders	Lcom/android/server/pm/PackageManagerService$ProviderIntentResolver;
    //   3868: invokestatic 7621	com/android/server/pm/PackageManagerService$ProviderIntentResolver:-get0	(Lcom/android/server/pm/PackageManagerService$ProviderIntentResolver;)Landroid/util/ArrayMap;
    //   3871: invokevirtual 1689	android/util/ArrayMap:values	()Ljava/util/Collection;
    //   3874: invokeinterface 1308 1 0
    //   3879: astore_1
    //   3880: aload_1
    //   3881: invokeinterface 1313 1 0
    //   3886: ifeq +105 -> 3991
    //   3889: aload_1
    //   3890: invokeinterface 1317 1 0
    //   3895: checkcast 6062	android/content/pm/PackageParser$Provider
    //   3898: astore_3
    //   3899: aload 13
    //   3901: ifnull +18 -> 3919
    //   3904: aload 13
    //   3906: aload_3
    //   3907: getfield 6064	android/content/pm/PackageParser$Provider:info	Landroid/content/pm/ProviderInfo;
    //   3910: getfield 7622	android/content/pm/ProviderInfo:packageName	Ljava/lang/String;
    //   3913: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3916: ifeq -36 -> 3880
    //   3919: iload 4
    //   3921: istore 5
    //   3923: iload 4
    //   3925: ifne +25 -> 3950
    //   3928: aload 18
    //   3930: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   3933: ifeq +7 -> 3940
    //   3936: aload_2
    //   3937: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   3940: aload_2
    //   3941: ldc_w 7624
    //   3944: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3947: iconst_1
    //   3948: istore 5
    //   3950: aload_2
    //   3951: ldc_w 2348
    //   3954: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3957: aload_3
    //   3958: aload_2
    //   3959: invokevirtual 7628	android/content/pm/PackageParser$Provider:printComponentShortName	(Ljava/io/PrintWriter;)V
    //   3962: aload_2
    //   3963: ldc_w 2342
    //   3966: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3969: aload_2
    //   3970: ldc_w 7589
    //   3973: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   3976: aload_2
    //   3977: aload_3
    //   3978: invokevirtual 7629	android/content/pm/PackageParser$Provider:toString	()Ljava/lang/String;
    //   3981: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   3984: iload 5
    //   3986: istore 4
    //   3988: goto -108 -> 3880
    //   3991: iconst_0
    //   3992: istore 4
    //   3994: aload_0
    //   3995: getfield 1165	com/android/server/pm/PackageManagerService:mProvidersByAuthority	Landroid/util/ArrayMap;
    //   3998: invokevirtual 7632	android/util/ArrayMap:entrySet	()Ljava/util/Set;
    //   4001: invokeinterface 1308 1 0
    //   4006: astore_1
    //   4007: aload_1
    //   4008: invokeinterface 1313 1 0
    //   4013: ifeq +177 -> 4190
    //   4016: aload_1
    //   4017: invokeinterface 1317 1 0
    //   4022: checkcast 7634	java/util/Map$Entry
    //   4025: astore_3
    //   4026: aload_3
    //   4027: invokeinterface 7637 1 0
    //   4032: checkcast 6062	android/content/pm/PackageParser$Provider
    //   4035: astore 16
    //   4037: aload 13
    //   4039: ifnull +19 -> 4058
    //   4042: aload 13
    //   4044: aload 16
    //   4046: getfield 6064	android/content/pm/PackageParser$Provider:info	Landroid/content/pm/ProviderInfo;
    //   4049: getfield 7622	android/content/pm/ProviderInfo:packageName	Ljava/lang/String;
    //   4052: invokevirtual 1364	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4055: ifeq -48 -> 4007
    //   4058: iload 4
    //   4060: istore 5
    //   4062: iload 4
    //   4064: ifne +25 -> 4089
    //   4067: aload 18
    //   4069: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   4072: ifeq +7 -> 4079
    //   4075: aload_2
    //   4076: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   4079: aload_2
    //   4080: ldc_w 7639
    //   4083: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   4086: iconst_1
    //   4087: istore 5
    //   4089: aload_2
    //   4090: ldc_w 7641
    //   4093: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   4096: aload_2
    //   4097: aload_3
    //   4098: invokeinterface 7644 1 0
    //   4103: checkcast 1071	java/lang/String
    //   4106: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   4109: aload_2
    //   4110: ldc_w 7646
    //   4113: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   4116: aload_2
    //   4117: ldc_w 7589
    //   4120: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   4123: aload_2
    //   4124: aload 16
    //   4126: invokevirtual 7629	android/content/pm/PackageParser$Provider:toString	()Ljava/lang/String;
    //   4129: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   4132: iload 5
    //   4134: istore 4
    //   4136: aload 16
    //   4138: getfield 6064	android/content/pm/PackageParser$Provider:info	Landroid/content/pm/ProviderInfo;
    //   4141: ifnull -134 -> 4007
    //   4144: iload 5
    //   4146: istore 4
    //   4148: aload 16
    //   4150: getfield 6064	android/content/pm/PackageParser$Provider:info	Landroid/content/pm/ProviderInfo;
    //   4153: getfield 7647	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   4156: ifnull -149 -> 4007
    //   4159: aload 16
    //   4161: getfield 6064	android/content/pm/PackageParser$Provider:info	Landroid/content/pm/ProviderInfo;
    //   4164: getfield 7647	android/content/pm/ProviderInfo:applicationInfo	Landroid/content/pm/ApplicationInfo;
    //   4167: invokevirtual 7648	android/content/pm/ApplicationInfo:toString	()Ljava/lang/String;
    //   4170: astore_3
    //   4171: aload_2
    //   4172: ldc_w 7650
    //   4175: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   4178: aload_2
    //   4179: aload_3
    //   4180: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   4183: iload 5
    //   4185: istore 4
    //   4187: goto -180 -> 4007
    //   4190: iload 8
    //   4192: ifne +29 -> 4221
    //   4195: aload 18
    //   4197: sipush 16384
    //   4200: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4203: ifeq +18 -> 4221
    //   4206: aload_0
    //   4207: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   4210: getfield 2691	com/android/server/pm/Settings:mKeySetManagerService	Lcom/android/server/pm/KeySetManagerService;
    //   4213: aload_2
    //   4214: aload 13
    //   4216: aload 18
    //   4218: invokevirtual 7654	com/android/server/pm/KeySetManagerService:dumpLPr	(Ljava/io/PrintWriter;Ljava/lang/String;Lcom/android/server/pm/PackageManagerService$DumpState;)V
    //   4221: aload 18
    //   4223: sipush 128
    //   4226: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4229: ifeq +19 -> 4248
    //   4232: aload_0
    //   4233: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   4236: aload_2
    //   4237: aload 13
    //   4239: aload 14
    //   4241: aload 18
    //   4243: iload 8
    //   4245: invokevirtual 7658	com/android/server/pm/Settings:dumpPackagesLPr	(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/util/ArraySet;Lcom/android/server/pm/PackageManagerService$DumpState;Z)V
    //   4248: aload 18
    //   4250: sipush 256
    //   4253: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4256: ifeq +19 -> 4275
    //   4259: aload_0
    //   4260: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   4263: aload_2
    //   4264: aload 13
    //   4266: aload 14
    //   4268: aload 18
    //   4270: iload 8
    //   4272: invokevirtual 7661	com/android/server/pm/Settings:dumpSharedUsersLPr	(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/util/ArraySet;Lcom/android/server/pm/PackageManagerService$DumpState;Z)V
    //   4275: iload 8
    //   4277: ifne +28 -> 4305
    //   4280: aload 18
    //   4282: bipush 64
    //   4284: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4287: ifeq +18 -> 4305
    //   4290: aload 13
    //   4292: ifnonnull +13 -> 4305
    //   4295: aload_0
    //   4296: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   4299: aload_2
    //   4300: aload 18
    //   4302: invokevirtual 7665	com/android/server/pm/Settings:dumpRestoredPermissionGrantsLPr	(Ljava/io/PrintWriter;Lcom/android/server/pm/PackageManagerService$DumpState;)V
    //   4305: iload 8
    //   4307: ifne +51 -> 4358
    //   4310: aload 18
    //   4312: ldc_w 339
    //   4315: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4318: ifeq +40 -> 4358
    //   4321: aload 13
    //   4323: ifnonnull +35 -> 4358
    //   4326: aload 18
    //   4328: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   4331: ifeq +7 -> 4338
    //   4334: aload_2
    //   4335: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   4338: aload_0
    //   4339: getfield 2118	com/android/server/pm/PackageManagerService:mInstallerService	Lcom/android/server/pm/PackageInstallerService;
    //   4342: new 3633	com/android/internal/util/IndentingPrintWriter
    //   4345: dup
    //   4346: aload_2
    //   4347: ldc_w 2348
    //   4350: bipush 120
    //   4352: invokespecial 3636	com/android/internal/util/IndentingPrintWriter:<init>	(Ljava/io/Writer;Ljava/lang/String;I)V
    //   4355: invokevirtual 7666	com/android/server/pm/PackageInstallerService:dump	(Lcom/android/internal/util/IndentingPrintWriter;)V
    //   4358: iload 8
    //   4360: ifne +81 -> 4441
    //   4363: aload 18
    //   4365: ldc_w 4254
    //   4368: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4371: ifeq +70 -> 4441
    //   4374: aload 13
    //   4376: ifnonnull +65 -> 4441
    //   4379: aload 18
    //   4381: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   4384: ifeq +7 -> 4391
    //   4387: aload_2
    //   4388: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   4391: new 3633	com/android/internal/util/IndentingPrintWriter
    //   4394: dup
    //   4395: aload_2
    //   4396: ldc_w 2348
    //   4399: bipush 120
    //   4401: invokespecial 3636	com/android/internal/util/IndentingPrintWriter:<init>	(Ljava/io/Writer;Ljava/lang/String;I)V
    //   4404: astore_1
    //   4405: aload_1
    //   4406: invokevirtual 3639	com/android/internal/util/IndentingPrintWriter:println	()V
    //   4409: aload_1
    //   4410: ldc_w 7668
    //   4413: invokevirtual 3643	com/android/internal/util/IndentingPrintWriter:println	(Ljava/lang/String;)V
    //   4416: aload_1
    //   4417: invokevirtual 3646	com/android/internal/util/IndentingPrintWriter:increaseIndent	()V
    //   4420: aload_0
    //   4421: getfield 1144	com/android/server/pm/PackageManagerService:mFrozenPackages	Landroid/util/ArraySet;
    //   4424: invokevirtual 3712	android/util/ArraySet:size	()I
    //   4427: ifne +279 -> 4706
    //   4430: aload_1
    //   4431: ldc_w 7670
    //   4434: invokevirtual 3643	com/android/internal/util/IndentingPrintWriter:println	(Ljava/lang/String;)V
    //   4437: aload_1
    //   4438: invokevirtual 3665	com/android/internal/util/IndentingPrintWriter:decreaseIndent	()V
    //   4441: iload 8
    //   4443: ifne +33 -> 4476
    //   4446: aload 18
    //   4448: ldc_w 4089
    //   4451: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4454: ifeq +22 -> 4476
    //   4457: aload 18
    //   4459: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   4462: ifeq +7 -> 4469
    //   4465: aload_2
    //   4466: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   4469: aload_0
    //   4470: aload_2
    //   4471: aload 13
    //   4473: invokespecial 7672	com/android/server/pm/PackageManagerService:dumpDexoptStateLPr	(Ljava/io/PrintWriter;Ljava/lang/String;)V
    //   4476: iload 8
    //   4478: ifne +33 -> 4511
    //   4481: aload 18
    //   4483: ldc_w 7460
    //   4486: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4489: ifeq +22 -> 4511
    //   4492: aload 18
    //   4494: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   4497: ifeq +7 -> 4504
    //   4500: aload_2
    //   4501: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   4504: aload_0
    //   4505: aload_2
    //   4506: aload 13
    //   4508: invokespecial 7674	com/android/server/pm/PackageManagerService:dumpCompilerStatsLPr	(Ljava/io/PrintWriter;Ljava/lang/String;)V
    //   4511: iload 8
    //   4513: ifne +107 -> 4620
    //   4516: aload 18
    //   4518: sipush 512
    //   4521: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4524: ifeq +96 -> 4620
    //   4527: aload 13
    //   4529: ifnonnull +91 -> 4620
    //   4532: aload 18
    //   4534: invokevirtual 7280	com/android/server/pm/PackageManagerService$DumpState:onTitlePrinted	()Z
    //   4537: ifeq +7 -> 4544
    //   4540: aload_2
    //   4541: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   4544: aload_0
    //   4545: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   4548: aload_2
    //   4549: aload 18
    //   4551: invokevirtual 7677	com/android/server/pm/Settings:dumpReadMessagesLPr	(Ljava/io/PrintWriter;Lcom/android/server/pm/PackageManagerService$DumpState;)V
    //   4554: aload_2
    //   4555: invokevirtual 7281	java/io/PrintWriter:println	()V
    //   4558: aload_2
    //   4559: ldc_w 7679
    //   4562: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   4565: aconst_null
    //   4566: astore_3
    //   4567: aconst_null
    //   4568: astore 13
    //   4570: new 7681	java/io/BufferedReader
    //   4573: dup
    //   4574: new 7683	java/io/FileReader
    //   4577: dup
    //   4578: invokestatic 5064	com/android/server/pm/PackageManagerService:getSettingsProblemFile	()Ljava/io/File;
    //   4581: invokespecial 7684	java/io/FileReader:<init>	(Ljava/io/File;)V
    //   4584: invokespecial 7687	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   4587: astore_1
    //   4588: aload_1
    //   4589: invokevirtual 7690	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   4592: astore_3
    //   4593: aload_3
    //   4594: ifnull +152 -> 4746
    //   4597: aload_3
    //   4598: ldc_w 7692
    //   4601: invokevirtual 4230	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   4604: ifne -16 -> 4588
    //   4607: aload_2
    //   4608: aload_3
    //   4609: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   4612: goto -24 -> 4588
    //   4615: astore_3
    //   4616: aload_1
    //   4617: invokestatic 3539	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   4620: iload 8
    //   4622: ifeq +80 -> 4702
    //   4625: aload 18
    //   4627: sipush 512
    //   4630: invokevirtual 7277	com/android/server/pm/PackageManagerService$DumpState:isDumping	(I)Z
    //   4633: istore 8
    //   4635: iload 8
    //   4637: ifeq +65 -> 4702
    //   4640: aconst_null
    //   4641: astore_3
    //   4642: aconst_null
    //   4643: astore 13
    //   4645: new 7681	java/io/BufferedReader
    //   4648: dup
    //   4649: new 7683	java/io/FileReader
    //   4652: dup
    //   4653: invokestatic 5064	com/android/server/pm/PackageManagerService:getSettingsProblemFile	()Ljava/io/File;
    //   4656: invokespecial 7684	java/io/FileReader:<init>	(Ljava/io/File;)V
    //   4659: invokespecial 7687	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   4662: astore_1
    //   4663: aload_1
    //   4664: invokevirtual 7690	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   4667: astore_3
    //   4668: aload_3
    //   4669: ifnull +90 -> 4759
    //   4672: aload_3
    //   4673: ldc_w 7692
    //   4676: invokevirtual 4230	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   4679: ifne -16 -> 4663
    //   4682: aload_2
    //   4683: ldc_w 7694
    //   4686: invokevirtual 7296	java/io/PrintWriter:print	(Ljava/lang/String;)V
    //   4689: aload_2
    //   4690: aload_3
    //   4691: invokevirtual 5088	java/io/PrintWriter:println	(Ljava/lang/String;)V
    //   4694: goto -31 -> 4663
    //   4697: astore_2
    //   4698: aload_1
    //   4699: invokestatic 3539	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   4702: aload 15
    //   4704: monitorexit
    //   4705: return
    //   4706: iconst_0
    //   4707: istore 4
    //   4709: iload 4
    //   4711: aload_0
    //   4712: getfield 1144	com/android/server/pm/PackageManagerService:mFrozenPackages	Landroid/util/ArraySet;
    //   4715: invokevirtual 3712	android/util/ArraySet:size	()I
    //   4718: if_icmpge -281 -> 4437
    //   4721: aload_1
    //   4722: aload_0
    //   4723: getfield 1144	com/android/server/pm/PackageManagerService:mFrozenPackages	Landroid/util/ArraySet;
    //   4726: iload 4
    //   4728: invokevirtual 5940	android/util/ArraySet:valueAt	(I)Ljava/lang/Object;
    //   4731: checkcast 1071	java/lang/String
    //   4734: invokevirtual 3643	com/android/internal/util/IndentingPrintWriter:println	(Ljava/lang/String;)V
    //   4737: iload 4
    //   4739: iconst_1
    //   4740: iadd
    //   4741: istore 4
    //   4743: goto -34 -> 4709
    //   4746: aload_1
    //   4747: invokestatic 3539	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   4750: goto -130 -> 4620
    //   4753: aload_2
    //   4754: invokestatic 3539	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   4757: aload_1
    //   4758: athrow
    //   4759: aload_1
    //   4760: invokestatic 3539	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   4763: goto -61 -> 4702
    //   4766: aload_2
    //   4767: invokestatic 3539	libcore/io/IoUtils:closeQuietly	(Ljava/lang/AutoCloseable;)V
    //   4770: aload_1
    //   4771: athrow
    //   4772: astore_3
    //   4773: aload_1
    //   4774: astore_2
    //   4775: aload_3
    //   4776: astore_1
    //   4777: goto -11 -> 4766
    //   4780: astore_1
    //   4781: aload 13
    //   4783: astore_1
    //   4784: goto -86 -> 4698
    //   4787: astore_3
    //   4788: aload_1
    //   4789: astore_2
    //   4790: aload_3
    //   4791: astore_1
    //   4792: goto -39 -> 4753
    //   4795: astore_1
    //   4796: aload 13
    //   4798: astore_1
    //   4799: goto -183 -> 4616
    //   4802: iload 4
    //   4804: iconst_1
    //   4805: iadd
    //   4806: istore 4
    //   4808: goto -1940 -> 2868
    //   4811: ldc_w 7696
    //   4814: astore_3
    //   4815: goto -2177 -> 2638
    //   4818: ldc_w 7698
    //   4821: astore_3
    //   4822: goto -2123 -> 2699
    //   4825: ldc_w 7700
    //   4828: astore_3
    //   4829: goto -2069 -> 2760
    //   4832: ldc_w 7702
    //   4835: astore_3
    //   4836: goto -2015 -> 2821
    //   4839: iload 4
    //   4841: iconst_1
    //   4842: iadd
    //   4843: istore 4
    //   4845: goto -1224 -> 3621
    //   4848: iload 4
    //   4850: iconst_1
    //   4851: iadd
    //   4852: istore 4
    //   4854: goto -1655 -> 3199
    //   4857: astore_1
    //   4858: aload_3
    //   4859: astore_2
    //   4860: goto -107 -> 4753
    //   4863: astore_1
    //   4864: aload_3
    //   4865: astore_2
    //   4866: goto -100 -> 4766
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	4869	0	this	PackageManagerService
    //   0	4869	1	paramFileDescriptor	FileDescriptor
    //   0	4869	2	paramPrintWriter	PrintWriter
    //   0	4869	3	paramArrayOfString	String[]
    //   86	4767	4	i	int
    //   514	3670	5	j	int
    //   3619	7	6	k	int
    //   3632	73	7	m	int
    //   77	4559	8	bool1	boolean
    //   120	2972	9	bool2	boolean
    //   74	2171	10	bool3	boolean
    //   3709	73	11	l	long
    //   99	4698	13	localObject1	Object
    //   124	4143	14	localObject2	Object
    //   80	4623	15	localArrayMap	ArrayMap
    //   83	4077	16	localObject3	Object
    //   137	3666	17	localObject4	Object
    //   71	4555	18	localDumpState	DumpState
    // Exception table:
    //   from	to	target	type
    //   206	217	608	finally
    //   227	239	608	finally
    //   239	264	608	finally
    //   264	275	608	finally
    //   285	297	608	finally
    //   297	349	608	finally
    //   349	360	608	finally
    //   365	380	608	finally
    //   385	397	608	finally
    //   397	443	608	finally
    //   443	452	608	finally
    //   460	473	608	finally
    //   473	507	608	finally
    //   521	533	608	finally
    //   533	540	608	finally
    //   543	550	608	finally
    //   554	560	608	finally
    //   565	572	608	finally
    //   572	580	608	finally
    //   585	601	608	finally
    //   601	605	608	finally
    //   2275	2320	608	finally
    //   2327	2359	608	finally
    //   2362	2373	608	finally
    //   2376	2383	608	finally
    //   2386	2402	608	finally
    //   2410	2426	608	finally
    //   2429	2445	608	finally
    //   2448	2457	608	finally
    //   2462	2474	608	finally
    //   2479	2486	608	finally
    //   2486	2499	608	finally
    //   2499	2519	608	finally
    //   2524	2556	608	finally
    //   2559	2599	608	finally
    //   2599	2603	608	finally
    //   2611	2634	608	finally
    //   2638	2666	608	finally
    //   2671	2695	608	finally
    //   2699	2727	608	finally
    //   2732	2756	608	finally
    //   2760	2788	608	finally
    //   2793	2817	608	finally
    //   2821	2849	608	finally
    //   2854	2865	608	finally
    //   2868	2950	608	finally
    //   2950	2973	608	finally
    //   2976	3004	608	finally
    //   3012	3051	608	finally
    //   3051	3108	608	finally
    //   3113	3124	608	finally
    //   3129	3157	608	finally
    //   3162	3186	608	finally
    //   3199	3211	608	finally
    //   3216	3228	608	finally
    //   3228	3235	608	finally
    //   3235	3278	608	finally
    //   3281	3310	608	finally
    //   3320	3344	608	finally
    //   3348	3372	608	finally
    //   3376	3400	608	finally
    //   3403	3434	608	finally
    //   3437	3448	608	finally
    //   3451	3458	608	finally
    //   3458	3481	608	finally
    //   3486	3582	608	finally
    //   3596	3607	608	finally
    //   3607	3614	608	finally
    //   3617	3621	608	finally
    //   3634	3669	608	finally
    //   3672	3680	608	finally
    //   3680	3711	608	finally
    //   3721	3817	608	finally
    //   3831	3842	608	finally
    //   3850	3861	608	finally
    //   3864	3880	608	finally
    //   3880	3899	608	finally
    //   3904	3919	608	finally
    //   3928	3940	608	finally
    //   3940	3947	608	finally
    //   3950	3984	608	finally
    //   3994	4007	608	finally
    //   4007	4037	608	finally
    //   4042	4058	608	finally
    //   4067	4079	608	finally
    //   4079	4086	608	finally
    //   4089	4132	608	finally
    //   4136	4144	608	finally
    //   4148	4183	608	finally
    //   4195	4221	608	finally
    //   4221	4248	608	finally
    //   4248	4275	608	finally
    //   4280	4290	608	finally
    //   4295	4305	608	finally
    //   4310	4321	608	finally
    //   4326	4338	608	finally
    //   4338	4358	608	finally
    //   4363	4374	608	finally
    //   4379	4391	608	finally
    //   4391	4437	608	finally
    //   4437	4441	608	finally
    //   4446	4469	608	finally
    //   4469	4476	608	finally
    //   4481	4504	608	finally
    //   4504	4511	608	finally
    //   4516	4527	608	finally
    //   4532	4544	608	finally
    //   4544	4565	608	finally
    //   4616	4620	608	finally
    //   4625	4635	608	finally
    //   4698	4702	608	finally
    //   4709	4737	608	finally
    //   4746	4750	608	finally
    //   4753	4759	608	finally
    //   4759	4763	608	finally
    //   4766	4772	608	finally
    //   1016	1025	1039	java/lang/NumberFormatException
    //   2198	2212	2215	finally
    //   3051	3108	3319	java/io/IOException
    //   3051	3108	3347	java/lang/IllegalStateException
    //   3051	3108	3375	java/lang/IllegalArgumentException
    //   4588	4593	4615	java/io/IOException
    //   4597	4612	4615	java/io/IOException
    //   4663	4668	4697	java/io/IOException
    //   4672	4694	4697	java/io/IOException
    //   4663	4668	4772	finally
    //   4672	4694	4772	finally
    //   4645	4663	4780	java/io/IOException
    //   4588	4593	4787	finally
    //   4597	4612	4787	finally
    //   4570	4588	4795	java/io/IOException
    //   4570	4588	4857	finally
    //   4645	4663	4863	finally
  }
  
  public void dumpProfiles(String paramString)
  {
    Object localObject2;
    synchronized (this.mPackages)
    {
      localObject2 = (PackageParser.Package)this.mPackages.get(paramString);
      if (localObject2 == null) {
        throw new IllegalArgumentException("Unknown package: " + paramString);
      }
    }
    int i = Binder.getCallingUid();
    if ((i != 2000) && (i != 0) && (i != ((PackageParser.Package)localObject2).applicationInfo.uid)) {
      throw new SecurityException("dumpProfiles");
    }
    synchronized (this.mInstallLock)
    {
      Trace.traceBegin(262144L, "dump profiles");
      i = UserHandle.getSharedAppGid(((PackageParser.Package)localObject2).applicationInfo.uid);
      try
      {
        Object localObject3 = ((PackageParser.Package)localObject2).getAllCodePathsExcludingResourceOnly();
        localObject2 = Integer.toString(i);
        localObject3 = TextUtils.join(";", (Iterable)localObject3);
        this.mInstaller.dumpProfiles((String)localObject2, paramString, (String)localObject3);
        Trace.traceEnd(262144L);
        return;
      }
      catch (InstallerConnection.InstallerException paramString)
      {
        for (;;)
        {
          Slog.w("PackageManager", "Failed to dump profiles", paramString);
        }
      }
    }
  }
  
  void enforceCrossUserPermission(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2, String paramString)
  {
    if (paramInt2 < 0) {
      throw new IllegalArgumentException("Invalid userId " + paramInt2);
    }
    if (paramBoolean2) {
      enforceShellRestriction("no_debugging_features", paramInt1, paramInt2);
    }
    if (paramInt2 == UserHandle.getUserId(paramInt1)) {
      return;
    }
    if ((paramInt1 != 1000) && (paramInt1 != 0))
    {
      if (paramBoolean1) {
        this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", paramString);
      }
    }
    else {
      return;
    }
    try
    {
      this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", paramString);
      return;
    }
    catch (SecurityException localSecurityException)
    {
      this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS", paramString);
    }
  }
  
  void enforcePermissionCapLocked(PermissionInfo paramPermissionInfo, BasePermission paramBasePermission)
  {
    if (paramBasePermission.uid != 1000)
    {
      int i = calculateCurrentPermissionFootprintLocked(paramBasePermission);
      if (permissionInfoFootprint(paramPermissionInfo) + i > 32768) {
        throw new SecurityException("Permission tree size cap exceeded");
      }
    }
  }
  
  void enforceShellRestriction(String paramString, int paramInt1, int paramInt2)
  {
    if (paramInt1 == 2000)
    {
      if ((paramInt2 >= 0) && (sUserManager.hasUserRestriction(paramString, paramInt2))) {
        throw new SecurityException("Shell does not have permission to access user " + paramInt2);
      }
      if (paramInt2 < 0) {
        Slog.e("PackageManager", "Unable to check shell permission for user " + paramInt2 + "\n\t" + Debug.getCallers(3));
      }
    }
  }
  
  public void enterSafeMode()
  {
    enforceSystemOrRoot("Only the system can request entering safe mode");
    if (!this.mSystemReady) {
      this.mSafeMode = true;
    }
  }
  
  public void extendVerificationTimeout(int paramInt1, int paramInt2, long paramLong)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can extend verification timeouts");
    Object localObject = (PackageVerificationState)this.mPendingVerification.get(paramInt1);
    PackageVerificationResponse localPackageVerificationResponse = new PackageVerificationResponse(paramInt2, Binder.getCallingUid());
    long l = paramLong;
    if (paramLong > 3600000L) {
      l = 3600000L;
    }
    paramLong = l;
    if (l < 0L) {
      paramLong = 0L;
    }
    if (((paramInt2 == 1) || (paramInt2 == -1)) || ((localObject == null) || (((PackageVerificationState)localObject).timeoutExtended()))) {
      return;
    }
    ((PackageVerificationState)localObject).extendTimeout();
    localObject = this.mHandler.obtainMessage(15);
    ((Message)localObject).arg1 = paramInt1;
    ((Message)localObject).obj = localPackageVerificationResponse;
    this.mHandler.sendMessageDelayed((Message)localObject, paramLong);
  }
  
  Bundle extrasForInstallResult(PackageInstalledInfo paramPackageInstalledInfo)
  {
    boolean bool2 = false;
    switch (paramPackageInstalledInfo.returnCode)
    {
    default: 
      return null;
    case -112: 
      localBundle = new Bundle();
      localBundle.putString("android.content.pm.extra.FAILURE_EXISTING_PERMISSION", paramPackageInstalledInfo.origPermission);
      localBundle.putString("android.content.pm.extra.FAILURE_EXISTING_PACKAGE", paramPackageInstalledInfo.origPackage);
      return localBundle;
    }
    Bundle localBundle = new Bundle();
    boolean bool1 = bool2;
    if (paramPackageInstalledInfo.removedInfo != null)
    {
      bool1 = bool2;
      if (paramPackageInstalledInfo.removedInfo.removedPackage != null) {
        bool1 = true;
      }
    }
    localBundle.putBoolean("android.intent.extra.REPLACING", bool1);
    return localBundle;
  }
  
  ResolveInfo findPreferredActivity(Intent paramIntent, String paramString, int paramInt1, List<ResolveInfo> paramList, int paramInt2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, int paramInt3)
  {
    if (!sUserManager.exists(paramInt3)) {
      return null;
    }
    int n = updateFlagsForResolve(paramInt1, paramInt3, paramIntent);
    ArrayMap localArrayMap = this.mPackages;
    Intent localIntent = paramIntent;
    PreferredIntentResolver localPreferredIntentResolver;
    boolean bool;
    label141:
    int k;
    int m;
    int j;
    try
    {
      if (paramIntent.getSelector() != null) {
        localIntent = paramIntent.getSelector();
      }
      if (DEBUG_PREFERRED) {
        localIntent.addFlags(8);
      }
      paramIntent = findPersistentPreferredActivityLP(localIntent, paramString, n, paramList, paramBoolean3, paramInt3);
      if (paramIntent != null) {
        return paramIntent;
      }
      localPreferredIntentResolver = (PreferredIntentResolver)this.mSettings.mPreferredActivities.get(paramInt3);
      if ((!DEBUG_PREFERRED) && (!paramBoolean3)) {
        break label1362;
      }
      Slog.v("PackageManager", "Looking for preferred activities...");
    }
    finally {}
    paramIntent = localPreferredIntentResolver.queryIntent(localIntent, paramString, bool, paramInt3);
    int i1;
    label207:
    Object localObject1;
    int i;
    label389:
    PreferredActivity localPreferredActivity;
    Object localObject2;
    if (paramIntent != null)
    {
      paramInt1 = paramIntent.size();
      if (paramInt1 > 0)
      {
        k = 0;
        m = 0;
        j = 0;
        paramInt1 = k;
        for (;;)
        {
          try
          {
            if ((DEBUG_PREFERRED) || (paramBoolean3))
            {
              paramInt1 = k;
              Slog.v("PackageManager", "Figuring out best match...");
            }
            paramInt1 = k;
            i1 = paramList.size();
            paramInt2 = 0;
            if (paramInt2 < i1)
            {
              paramInt1 = k;
              localObject1 = (ResolveInfo)paramList.get(paramInt2);
              paramInt1 = k;
              if ((DEBUG_PREFERRED) || (paramBoolean3))
              {
                paramInt1 = k;
                Slog.v("PackageManager", "Match for " + ((ResolveInfo)localObject1).activityInfo + ": 0x" + Integer.toHexString(j));
              }
              paramInt1 = k;
              i = j;
              if (((ResolveInfo)localObject1).match <= j) {
                break label1382;
              }
              paramInt1 = k;
              i = ((ResolveInfo)localObject1).match;
              break label1382;
            }
            paramInt1 = k;
            if ((DEBUG_PREFERRED) || (paramBoolean3))
            {
              paramInt1 = k;
              Slog.v("PackageManager", "Best match: 0x" + Integer.toHexString(j));
            }
            paramInt1 = k;
            int i2 = paramIntent.size();
            k = 0;
            paramInt2 = m;
            if (k >= i2) {
              break;
            }
            paramInt1 = paramInt2;
            localPreferredActivity = (PreferredActivity)paramIntent.get(k);
            paramInt1 = paramInt2;
            if ((DEBUG_PREFERRED) || (paramBoolean3))
            {
              paramInt1 = paramInt2;
              localObject2 = new StringBuilder().append("Checking PreferredActivity ds=");
              paramInt1 = paramInt2;
              if (localPreferredActivity.countDataSchemes() <= 0) {
                break label1419;
              }
              paramInt1 = paramInt2;
              localObject1 = localPreferredActivity.getDataScheme(0);
              label466:
              paramInt1 = paramInt2;
              Slog.v("PackageManager", (String)localObject1 + "\n  component=" + localPreferredActivity.mPref.mComponent);
              paramInt1 = paramInt2;
              localPreferredActivity.dump(new LogPrinter(2, "PackageManager", 3), "  ");
            }
            paramInt1 = paramInt2;
            if (localPreferredActivity.mPref.mMatch != (j & 0xFFF0000))
            {
              paramInt1 = paramInt2;
              if (!DEBUG_PREFERRED)
              {
                i = paramInt2;
                if (!paramBoolean3) {}
              }
              else
              {
                paramInt1 = paramInt2;
                Slog.v("PackageManager", "Skipping bad match " + Integer.toHexString(localPreferredActivity.mPref.mMatch));
                i = paramInt2;
              }
            }
            else
            {
              if (paramBoolean1)
              {
                paramInt1 = paramInt2;
                if (!localPreferredActivity.mPref.mAlways) {}
              }
              else
              {
                paramInt1 = paramInt2;
                localObject1 = getActivityInfo(localPreferredActivity.mPref.mComponent, n | 0x200 | 0x80000 | 0x40000, paramInt3);
                paramInt1 = paramInt2;
                if ((DEBUG_PREFERRED) || (paramBoolean3))
                {
                  paramInt1 = paramInt2;
                  Slog.v("PackageManager", "Found preferred activity:");
                  if (localObject1 == null) {
                    break label849;
                  }
                  paramInt1 = paramInt2;
                  ((ActivityInfo)localObject1).dump(new LogPrinter(2, "PackageManager", 3), "  ");
                }
                if (localObject1 != null) {
                  break label1427;
                }
                paramInt1 = paramInt2;
                Slog.w("PackageManager", "Removing dangling preferred activity: " + localPreferredActivity.mPref.mComponent);
                paramInt1 = paramInt2;
                localPreferredIntentResolver.removeFilter(localPreferredActivity);
                i = 1;
                break label1406;
              }
              paramInt1 = paramInt2;
              if (!DEBUG_PREFERRED)
              {
                i = paramInt2;
                if (!paramBoolean3) {}
              }
              else
              {
                paramInt1 = paramInt2;
                Slog.v("PackageManager", "Skipping mAlways=false entry");
                i = paramInt2;
              }
            }
          }
          finally
          {
            if (paramInt1 != 0)
            {
              if (DEBUG_PREFERRED) {
                Slog.v("PackageManager", "Preferred activity bookkeeping changed; writing restrictions");
              }
              scheduleWritePackageRestrictionsLocked(paramInt3);
            }
          }
          label849:
          paramInt1 = paramInt2;
          Slog.v("PackageManager", "  null");
        }
      }
    }
    for (;;)
    {
      i = paramInt2;
      if (m < i1)
      {
        paramInt1 = paramInt2;
        localObject2 = (ResolveInfo)paramList.get(m);
        paramInt1 = paramInt2;
        if (!((ResolveInfo)localObject2).activityInfo.applicationInfo.packageName.equals(((ActivityInfo)localObject1).applicationInfo.packageName)) {
          break label1433;
        }
        paramInt1 = paramInt2;
        if (!((ResolveInfo)localObject2).activityInfo.name.equals(((ActivityInfo)localObject1).name)) {
          break label1433;
        }
        if (paramBoolean2)
        {
          paramInt1 = paramInt2;
          localPreferredIntentResolver.removeFilter(localPreferredActivity);
          m = 1;
          paramInt2 = 1;
          paramInt1 = paramInt2;
          i = m;
          if (DEBUG_PREFERRED)
          {
            paramInt1 = paramInt2;
            Slog.v("PackageManager", "Removing match " + localPreferredActivity.mPref.mComponent);
            i = m;
          }
        }
        else
        {
          if (paramBoolean1)
          {
            paramInt1 = paramInt2;
            if (!localPreferredActivity.mPref.sameSet(paramList)) {}
          }
          else
          {
            paramInt1 = paramInt2;
            if ((DEBUG_PREFERRED) || (paramBoolean3))
            {
              paramInt1 = paramInt2;
              Slog.v("PackageManager", "Returning preferred activity: " + ((ResolveInfo)localObject2).activityInfo.packageName + "/" + ((ResolveInfo)localObject2).activityInfo.name);
            }
            if (paramInt2 != 0)
            {
              if (DEBUG_PREFERRED) {
                Slog.v("PackageManager", "Preferred activity bookkeeping changed; writing restrictions");
              }
              scheduleWritePackageRestrictionsLocked(paramInt3);
            }
            return (ResolveInfo)localObject2;
          }
          paramInt1 = paramInt2;
          Slog.i("PackageManager", "Result set changed, dropping preferred activity for " + localIntent + " type " + paramString);
          paramInt1 = paramInt2;
          if (DEBUG_PREFERRED)
          {
            paramInt1 = paramInt2;
            Slog.v("PackageManager", "Removing preferred activity since set changed " + localPreferredActivity.mPref.mComponent);
          }
          paramInt1 = paramInt2;
          localPreferredIntentResolver.removeFilter(localPreferredActivity);
          paramInt1 = paramInt2;
          localPreferredIntentResolver.addFilter(new PreferredActivity(localPreferredActivity, localPreferredActivity.mPref.mMatch, null, localPreferredActivity.mPref.mComponent, false));
          if (1 != 0)
          {
            if (DEBUG_PREFERRED) {
              Slog.v("PackageManager", "Preferred activity bookkeeping changed; writing restrictions");
            }
            scheduleWritePackageRestrictionsLocked(paramInt3);
          }
          return null;
          if (paramInt2 != 0)
          {
            if (DEBUG_PREFERRED) {
              Slog.v("PackageManager", "Preferred activity bookkeeping changed; writing restrictions");
            }
            scheduleWritePackageRestrictionsLocked(paramInt3);
          }
          if ((DEBUG_PREFERRED) || (paramBoolean3)) {
            Slog.v("PackageManager", "No preferred activity to return");
          }
          return null;
          label1362:
          if (localPreferredIntentResolver != null)
          {
            if ((0x10000 & n) != 0)
            {
              bool = true;
              break;
              label1382:
              paramInt2 += 1;
              j = i;
              break label207;
            }
            bool = false;
            break;
          }
          paramIntent = null;
          break label141;
        }
      }
      label1406:
      k += 1;
      paramInt2 = i;
      break label389;
      label1419:
      localObject1 = "<none>";
      break label466;
      label1427:
      m = 0;
      continue;
      label1433:
      m += 1;
    }
  }
  
  Collection<PackageParser.Package> findSharedNonSystemLibraries(PackageParser.Package paramPackage)
  {
    if ((paramPackage.usesLibraries != null) || (paramPackage.usesOptionalLibraries != null))
    {
      ArrayList localArrayList = new ArrayList();
      findSharedNonSystemLibrariesRecursive(paramPackage, localArrayList, new HashSet());
      localArrayList.remove(paramPackage);
      return localArrayList;
    }
    return Collections.emptyList();
  }
  
  public void finishPackageInstall(int paramInt, boolean paramBoolean)
  {
    enforceSystemOrRoot("Only the system is allowed to finish installs");
    if (DEBUG_INSTALL) {
      Slog.v("PackageManager", "BM finishing package install for " + paramInt);
    }
    Trace.asyncTraceEnd(262144L, "restore", paramInt);
    Object localObject = this.mHandler;
    if (paramBoolean) {}
    for (int i = 1;; i = 0)
    {
      localObject = ((PackageHandler)localObject).obtainMessage(9, paramInt, i);
      this.mHandler.sendMessage((Message)localObject);
      return;
    }
  }
  
  public void flushPackageRestrictionsAsUser(int paramInt)
  {
    if (!sUserManager.exists(paramInt)) {
      return;
    }
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, false, false, "flushPackageRestrictions");
    synchronized (this.mPackages)
    {
      this.mSettings.writePackageRestrictionsLPr(paramInt);
      this.mDirtyUsers.remove(Integer.valueOf(paramInt));
      if (this.mDirtyUsers.isEmpty()) {
        this.mHandler.removeMessages(14);
      }
      return;
    }
  }
  
  public void forceDexOpt(String arg1)
  {
    enforceSystemOrRoot("forceDexOpt");
    PackageParser.Package localPackage;
    synchronized (this.mPackages)
    {
      localPackage = (PackageParser.Package)this.mPackages.get(???);
      if (localPackage == null) {
        throw new IllegalArgumentException("Unknown package: " + ???);
      }
    }
    synchronized (this.mInstallLock)
    {
      Trace.traceBegin(262144L, "dexopt");
      int i = performDexOptInternalWithDependenciesLI(localPackage, false, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(7), true);
      Trace.traceEnd(262144L);
      if (i != 1) {
        throw new IllegalStateException("Failed to dexopt: " + i);
      }
    }
  }
  
  void freeStorage(String paramString, long paramLong)
    throws IOException
  {
    synchronized (this.mInstallLock)
    {
      try
      {
        this.mInstaller.freeCache(paramString, paramLong);
        return;
      }
      catch (InstallerConnection.InstallerException paramString)
      {
        throw new IOException("Failed to free enough space", paramString);
      }
    }
  }
  
  public void freeStorage(final String paramString, final long paramLong, IntentSender paramIntentSender)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_CACHE", null);
    this.mHandler.post(new Runnable()
    {
      /* Error */
      public void run()
      {
        // Byte code:
        //   0: aload_0
        //   1: getfield 23	com/android/server/pm/PackageManagerService$5:this$0	Lcom/android/server/pm/PackageManagerService;
        //   4: getfield 42	com/android/server/pm/PackageManagerService:mHandler	Lcom/android/server/pm/PackageManagerService$PackageHandler;
        //   7: aload_0
        //   8: invokevirtual 48	com/android/server/pm/PackageManagerService$PackageHandler:removeCallbacks	(Ljava/lang/Runnable;)V
        //   11: iconst_1
        //   12: istore_1
        //   13: aload_0
        //   14: getfield 23	com/android/server/pm/PackageManagerService$5:this$0	Lcom/android/server/pm/PackageManagerService;
        //   17: getfield 52	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
        //   20: astore_2
        //   21: aload_2
        //   22: monitorenter
        //   23: aload_0
        //   24: getfield 23	com/android/server/pm/PackageManagerService$5:this$0	Lcom/android/server/pm/PackageManagerService;
        //   27: getfield 56	com/android/server/pm/PackageManagerService:mInstaller	Lcom/android/server/pm/Installer;
        //   30: aload_0
        //   31: getfield 25	com/android/server/pm/PackageManagerService$5:val$volumeUuid	Ljava/lang/String;
        //   34: aload_0
        //   35: getfield 27	com/android/server/pm/PackageManagerService$5:val$freeStorageSize	J
        //   38: invokevirtual 62	com/android/server/pm/Installer:freeCache	(Ljava/lang/String;J)V
        //   41: aload_2
        //   42: monitorexit
        //   43: aload_0
        //   44: getfield 29	com/android/server/pm/PackageManagerService$5:val$pi	Landroid/content/IntentSender;
        //   47: ifnull +21 -> 68
        //   50: iload_1
        //   51: ifeq +54 -> 105
        //   54: iconst_1
        //   55: istore_1
        //   56: aload_0
        //   57: getfield 29	com/android/server/pm/PackageManagerService$5:val$pi	Landroid/content/IntentSender;
        //   60: aconst_null
        //   61: iload_1
        //   62: aconst_null
        //   63: aconst_null
        //   64: aconst_null
        //   65: invokevirtual 68	android/content/IntentSender:sendIntent	(Landroid/content/Context;ILandroid/content/Intent;Landroid/content/IntentSender$OnFinished;Landroid/os/Handler;)V
        //   68: return
        //   69: astore_3
        //   70: ldc 70
        //   72: new 72	java/lang/StringBuilder
        //   75: dup
        //   76: invokespecial 73	java/lang/StringBuilder:<init>	()V
        //   79: ldc 75
        //   81: invokevirtual 79	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   84: aload_3
        //   85: invokevirtual 82	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   88: invokevirtual 86	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //   91: invokestatic 92	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //   94: pop
        //   95: iconst_0
        //   96: istore_1
        //   97: goto -56 -> 41
        //   100: astore_3
        //   101: aload_2
        //   102: monitorexit
        //   103: aload_3
        //   104: athrow
        //   105: iconst_0
        //   106: istore_1
        //   107: goto -51 -> 56
        //   110: astore_2
        //   111: ldc 70
        //   113: ldc 94
        //   115: invokestatic 97	android/util/Slog:i	(Ljava/lang/String;Ljava/lang/String;)I
        //   118: pop
        //   119: return
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	120	0	this	5
        //   12	95	1	i	int
        //   20	82	2	localObject1	Object
        //   110	1	2	localSendIntentException	android.content.IntentSender.SendIntentException
        //   69	16	3	localInstallerException	InstallerConnection.InstallerException
        //   100	4	3	localObject2	Object
        // Exception table:
        //   from	to	target	type
        //   23	41	69	com/android/internal/os/InstallerConnection$InstallerException
        //   23	41	100	finally
        //   70	95	100	finally
        //   56	68	110	android/content/IntentSender$SendIntentException
      }
    });
  }
  
  public void freeStorageAndNotify(final String paramString, final long paramLong, IPackageDataObserver paramIPackageDataObserver)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.CLEAR_APP_CACHE", null);
    this.mHandler.post(new Runnable()
    {
      /* Error */
      public void run()
      {
        // Byte code:
        //   0: aload_0
        //   1: getfield 23	com/android/server/pm/PackageManagerService$4:this$0	Lcom/android/server/pm/PackageManagerService;
        //   4: getfield 42	com/android/server/pm/PackageManagerService:mHandler	Lcom/android/server/pm/PackageManagerService$PackageHandler;
        //   7: aload_0
        //   8: invokevirtual 48	com/android/server/pm/PackageManagerService$PackageHandler:removeCallbacks	(Ljava/lang/Runnable;)V
        //   11: iconst_1
        //   12: istore_1
        //   13: aload_0
        //   14: getfield 23	com/android/server/pm/PackageManagerService$4:this$0	Lcom/android/server/pm/PackageManagerService;
        //   17: getfield 52	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
        //   20: astore_2
        //   21: aload_2
        //   22: monitorenter
        //   23: aload_0
        //   24: getfield 23	com/android/server/pm/PackageManagerService$4:this$0	Lcom/android/server/pm/PackageManagerService;
        //   27: getfield 56	com/android/server/pm/PackageManagerService:mInstaller	Lcom/android/server/pm/Installer;
        //   30: aload_0
        //   31: getfield 25	com/android/server/pm/PackageManagerService$4:val$volumeUuid	Ljava/lang/String;
        //   34: aload_0
        //   35: getfield 27	com/android/server/pm/PackageManagerService$4:val$freeStorageSize	J
        //   38: invokevirtual 62	com/android/server/pm/Installer:freeCache	(Ljava/lang/String;J)V
        //   41: aload_2
        //   42: monitorexit
        //   43: aload_0
        //   44: getfield 29	com/android/server/pm/PackageManagerService$4:val$observer	Landroid/content/pm/IPackageDataObserver;
        //   47: ifnull +14 -> 61
        //   50: aload_0
        //   51: getfield 29	com/android/server/pm/PackageManagerService$4:val$observer	Landroid/content/pm/IPackageDataObserver;
        //   54: aconst_null
        //   55: iload_1
        //   56: invokeinterface 68 3 0
        //   61: return
        //   62: astore_3
        //   63: ldc 70
        //   65: new 72	java/lang/StringBuilder
        //   68: dup
        //   69: invokespecial 73	java/lang/StringBuilder:<init>	()V
        //   72: ldc 75
        //   74: invokevirtual 79	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   77: aload_3
        //   78: invokevirtual 82	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   81: invokevirtual 86	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //   84: invokestatic 92	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //   87: pop
        //   88: iconst_0
        //   89: istore_1
        //   90: goto -49 -> 41
        //   93: astore_3
        //   94: aload_2
        //   95: monitorexit
        //   96: aload_3
        //   97: athrow
        //   98: astore_2
        //   99: ldc 70
        //   101: ldc 94
        //   103: invokestatic 92	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
        //   106: pop
        //   107: return
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	108	0	this	4
        //   12	78	1	bool	boolean
        //   20	75	2	localObject1	Object
        //   98	1	2	localRemoteException	RemoteException
        //   62	16	3	localInstallerException	InstallerConnection.InstallerException
        //   93	4	3	localObject2	Object
        // Exception table:
        //   from	to	target	type
        //   23	41	62	com/android/internal/os/InstallerConnection$InstallerException
        //   23	41	93	finally
        //   63	88	93	finally
        //   50	61	98	android/os/RemoteException
      }
    });
  }
  
  public PackageFreezer freezePackage(String paramString1, int paramInt, String paramString2)
  {
    return new PackageFreezer(paramString1, paramInt, paramString2);
  }
  
  public PackageFreezer freezePackage(String paramString1, String paramString2)
  {
    return freezePackage(paramString1, -1, paramString2);
  }
  
  public PackageFreezer freezePackageForDelete(String paramString1, int paramInt1, int paramInt2, String paramString2)
  {
    if ((paramInt2 & 0x8) != 0) {
      return new PackageFreezer();
    }
    return freezePackage(paramString1, paramInt1, paramString2);
  }
  
  public PackageFreezer freezePackageForDelete(String paramString1, int paramInt, String paramString2)
  {
    return freezePackageForDelete(paramString1, -1, paramInt, paramString2);
  }
  
  public PackageFreezer freezePackageForInstall(String paramString1, int paramInt1, int paramInt2, String paramString2)
  {
    if ((paramInt2 & 0x1000) != 0) {
      return new PackageFreezer();
    }
    return freezePackage(paramString1, paramInt1, paramString2);
  }
  
  public PackageFreezer freezePackageForInstall(String paramString1, int paramInt, String paramString2)
  {
    return freezePackageForInstall(paramString1, -1, paramInt, paramString2);
  }
  
  public ActivityInfo getActivityInfo(ComponentName paramComponentName, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramInt1 = updateFlagsForComponent(paramInt1, paramInt2, paramComponentName);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "get activity info");
    synchronized (this.mPackages)
    {
      PackageParser.Activity localActivity = (PackageParser.Activity)ActivityIntentResolver.-get0(this.mActivities).get(paramComponentName);
      if (DEBUG_PACKAGE_INFO) {
        Log.v("PackageManager", "getActivityInfo " + paramComponentName + ": " + localActivity);
      }
      if ((localActivity != null) && (this.mSettings.isEnabledAndMatchLPr(localActivity.info, paramInt1, paramInt2)))
      {
        paramComponentName = (PackageSetting)this.mSettings.mPackages.get(paramComponentName.getPackageName());
        if (paramComponentName == null) {
          return null;
        }
        paramComponentName = PackageParser.generateActivityInfo(localActivity, paramInt1, paramComponentName.readUserState(paramInt2), paramInt2);
        return paramComponentName;
      }
      if (this.mResolveComponentName.equals(paramComponentName))
      {
        paramComponentName = PackageParser.generateActivityInfo(this.mResolveActivity, paramInt1, new PackageUserState(), paramInt2);
        return paramComponentName;
      }
      return null;
    }
  }
  
  public ParceledListSlice<IntentFilter> getAllIntentFilters(String paramString)
  {
    if (TextUtils.isEmpty(paramString)) {
      return ParceledListSlice.emptyList();
    }
    for (;;)
    {
      int i;
      synchronized (this.mPackages)
      {
        paramString = (PackageParser.Package)this.mPackages.get(paramString);
        if ((paramString == null) || (paramString.activities == null))
        {
          paramString = ParceledListSlice.emptyList();
          return paramString;
        }
        int j = paramString.activities.size();
        ArrayList localArrayList = new ArrayList();
        i = 0;
        if (i < j)
        {
          PackageParser.Activity localActivity = (PackageParser.Activity)paramString.activities.get(i);
          if ((localActivity.intents != null) && (localActivity.intents.size() > 0)) {
            localArrayList.addAll(localActivity.intents);
          }
        }
        else
        {
          paramString = new ParceledListSlice(localArrayList);
          return paramString;
        }
      }
      i += 1;
    }
  }
  
  public List<String> getAllPackages()
  {
    synchronized (this.mPackages)
    {
      ArrayList localArrayList = new ArrayList(this.mPackages.keySet());
      return localArrayList;
    }
  }
  
  public ParceledListSlice<PermissionGroupInfo> getAllPermissionGroups(int paramInt)
  {
    synchronized (this.mPackages)
    {
      ArrayList localArrayList = new ArrayList(this.mPermissionGroups.size());
      Iterator localIterator = this.mPermissionGroups.values().iterator();
      if (localIterator.hasNext()) {
        localArrayList.add(PackageParser.generatePermissionGroupInfo((PackageParser.PermissionGroup)localIterator.next(), paramInt));
      }
    }
    ParceledListSlice localParceledListSlice = new ParceledListSlice(localList);
    return localParceledListSlice;
  }
  
  public String[] getAppOpPermissionPackages(String paramString)
  {
    synchronized (this.mPackages)
    {
      paramString = (ArraySet)this.mAppOpPermissionPackages.get(paramString);
      if (paramString == null) {
        return null;
      }
      paramString = (String[])paramString.toArray(new String[paramString.size()]);
      return paramString;
    }
  }
  
  public int getApplicationEnabledSetting(String paramString, int paramInt)
  {
    if (!sUserManager.exists(paramInt)) {
      return 2;
    }
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, false, false, "get enabled");
    synchronized (this.mPackages)
    {
      paramInt = this.mSettings.getApplicationEnabledSettingLPr(paramString, paramInt);
      return paramInt;
    }
  }
  
  /* Error */
  public boolean getApplicationHiddenSettingAsUser(String paramString, int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   4: ldc_w 7915
    //   7: aconst_null
    //   8: invokevirtual 2329	android/content/Context:enforceCallingOrSelfPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   11: aload_0
    //   12: invokestatic 2303	android/os/Binder:getCallingUid	()I
    //   15: iload_2
    //   16: iconst_1
    //   17: iconst_0
    //   18: new 1320	java/lang/StringBuilder
    //   21: dup
    //   22: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   25: ldc_w 7917
    //   28: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   31: iload_2
    //   32: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   35: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   38: invokevirtual 2309	com/android/server/pm/PackageManagerService:enforceCrossUserPermission	(IIZZLjava/lang/String;)V
    //   41: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   44: lstore_3
    //   45: aload_0
    //   46: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   49: astore 6
    //   51: aload 6
    //   53: monitorenter
    //   54: aload_0
    //   55: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   58: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   61: aload_1
    //   62: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   65: checkcast 1615	com/android/server/pm/PackageSetting
    //   68: astore_1
    //   69: aload_1
    //   70: ifnonnull +12 -> 82
    //   73: aload 6
    //   75: monitorexit
    //   76: lload_3
    //   77: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   80: iconst_1
    //   81: ireturn
    //   82: aload_1
    //   83: iload_2
    //   84: invokevirtual 7920	com/android/server/pm/PackageSetting:getHidden	(I)Z
    //   87: istore 5
    //   89: aload 6
    //   91: monitorexit
    //   92: lload_3
    //   93: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   96: iload 5
    //   98: ireturn
    //   99: astore_1
    //   100: aload 6
    //   102: monitorexit
    //   103: aload_1
    //   104: athrow
    //   105: astore_1
    //   106: lload_3
    //   107: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   110: aload_1
    //   111: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	112	0	this	PackageManagerService
    //   0	112	1	paramString	String
    //   0	112	2	paramInt	int
    //   44	63	3	l	long
    //   87	10	5	bool	boolean
    // Exception table:
    //   from	to	target	type
    //   54	69	99	finally
    //   82	89	99	finally
    //   45	54	105	finally
    //   73	76	105	finally
    //   89	92	105	finally
    //   100	105	105	finally
  }
  
  public ApplicationInfo getApplicationInfo(String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramInt1 = updateFlagsForApplication(paramInt1, paramInt2, paramString);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "get application info");
    synchronized (this.mPackages)
    {
      Object localObject = normalizePackageNameLPr(paramString);
      paramString = (PackageParser.Package)this.mPackages.get(localObject);
      if (DEBUG_PACKAGE_INFO) {
        Log.v("PackageManager", "getApplicationInfo " + (String)localObject + ": " + paramString);
      }
      if (paramString != null)
      {
        localObject = (PackageSetting)this.mSettings.mPackages.get(localObject);
        if (localObject == null) {
          return null;
        }
        paramString = PackageParser.generateApplicationInfo(paramString, paramInt1, ((PackageSetting)localObject).readUserState(paramInt2), paramInt2);
        return paramString;
      }
      if (("android".equals(localObject)) || ("system".equals(localObject)))
      {
        paramString = this.mAndroidApplication;
        return paramString;
      }
      if ((paramInt1 & 0x2000) != 0)
      {
        paramString = generateApplicationInfoFromSettingsLPw((String)localObject, paramInt1, paramInt2);
        return paramString;
      }
      return null;
    }
  }
  
  public boolean getBlockUninstallForUser(String paramString, int paramInt)
  {
    synchronized (this.mPackages)
    {
      PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
      if (localPackageSetting == null)
      {
        Log.i("PackageManager", "Package doesn't exist in get block uninstall " + paramString);
        return false;
      }
      boolean bool = localPackageSetting.getBlockUninstall(paramInt);
      return bool;
    }
  }
  
  public CompilerStats.PackageStats getCompilerPackageStats(String paramString)
  {
    return this.mCompilerStats.getPackageStats(paramString);
  }
  
  public int getComponentEnabledSetting(ComponentName paramComponentName, int paramInt)
  {
    if (!sUserManager.exists(paramInt)) {
      return 2;
    }
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, false, false, "get component enabled");
    synchronized (this.mPackages)
    {
      paramInt = this.mSettings.getComponentEnabledSettingLPr(paramComponentName, paramInt);
      return paramInt;
    }
  }
  
  public byte[] getDefaultAppsBackup(int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call getDefaultAppsBackup()");
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    try
    {
      FastXmlSerializer localFastXmlSerializer = new FastXmlSerializer();
      localFastXmlSerializer.setOutput(localByteArrayOutputStream, StandardCharsets.UTF_8.name());
      localFastXmlSerializer.startDocument(null, Boolean.valueOf(true));
      localFastXmlSerializer.startTag(null, "da");
      synchronized (this.mPackages)
      {
        this.mSettings.writeDefaultAppsLPr(localFastXmlSerializer, paramInt);
        localFastXmlSerializer.endTag(null, "da");
        localFastXmlSerializer.endDocument();
        localFastXmlSerializer.flush();
        return localByteArrayOutputStream.toByteArray();
      }
      return null;
    }
    catch (Exception localException)
    {
      if (DEBUG_BACKUP) {
        Slog.e("PackageManager", "Unable to write default apps for backup", localException);
      }
    }
  }
  
  public String getDefaultBrowserPackageName(int paramInt)
  {
    synchronized (this.mPackages)
    {
      String str = this.mSettings.getDefaultBrowserPackageNameLPw(paramInt);
      return str;
    }
  }
  
  public byte[] getEphemeralApplicationCookie(String paramString, int paramInt)
  {
    return null;
  }
  
  public Bitmap getEphemeralApplicationIcon(String paramString, int paramInt)
  {
    return null;
  }
  
  public ParceledListSlice<EphemeralApplicationInfo> getEphemeralApplications(int paramInt)
  {
    return null;
  }
  
  public int getFlagsForUid(int paramInt)
  {
    synchronized (this.mPackages)
    {
      Object localObject1 = this.mSettings.getUserIdLPr(UserHandle.getAppId(paramInt));
      if ((localObject1 instanceof SharedUserSetting))
      {
        paramInt = ((SharedUserSetting)localObject1).pkgFlags;
        return paramInt;
      }
      if ((localObject1 instanceof PackageSetting))
      {
        paramInt = ((PackageSetting)localObject1).pkgFlags;
        return paramInt;
      }
      return 0;
    }
  }
  
  public ComponentName getHomeActivities(List<ResolveInfo> paramList)
  {
    return getHomeActivitiesAsUser(paramList, UserHandle.getCallingUserId());
  }
  
  ComponentName getHomeActivitiesAsUser(List<ResolveInfo> paramList, int paramInt)
  {
    Object localObject2 = getHomeIntent();
    Object localObject1 = queryIntentActivitiesInternal((Intent)localObject2, null, 128, paramInt);
    localObject2 = findPreferredActivity((Intent)localObject2, null, 0, (List)localObject1, 0, true, false, false, paramInt);
    paramList.clear();
    if (localObject1 != null)
    {
      localObject1 = ((Iterable)localObject1).iterator();
      while (((Iterator)localObject1).hasNext()) {
        paramList.add((ResolveInfo)((Iterator)localObject1).next());
      }
    }
    if ((localObject2 == null) || (((ResolveInfo)localObject2).activityInfo == null)) {
      return null;
    }
    return new ComponentName(((ResolveInfo)localObject2).activityInfo.packageName, ((ResolveInfo)localObject2).activityInfo.name);
  }
  
  public int getInstallLocation()
  {
    return Settings.Global.getInt(this.mContext.getContentResolver(), "default_install_location", 0);
  }
  
  public ParceledListSlice<ApplicationInfo> getInstalledApplications(int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return ParceledListSlice.emptyList();
    }
    int i = updateFlagsForApplication(paramInt1, paramInt2, null);
    ArrayMap localArrayMap;
    if ((i & 0x2000) != 0)
    {
      paramInt1 = 1;
      localArrayMap = this.mPackages;
      if (paramInt1 == 0) {}
    }
    else
    {
      for (;;)
      {
        try
        {
          localArrayList = new ArrayList(this.mSettings.mPackages.size());
          localIterator = this.mSettings.mPackages.values().iterator();
          Object localObject1 = localArrayList;
          if (!localIterator.hasNext()) {
            break label279;
          }
          localObject1 = (PackageSetting)localIterator.next();
          if (((PackageSetting)localObject1).pkg == null) {
            break label162;
          }
          localObject1 = PackageParser.generateApplicationInfo(((PackageSetting)localObject1).pkg, i, ((PackageSetting)localObject1).readUserState(paramInt2), paramInt2);
          if (localObject1 == null) {
            continue;
          }
          localArrayList.add(localObject1);
          continue;
          paramInt1 = 0;
        }
        finally {}
        break;
        label162:
        localObject3 = generateApplicationInfoFromSettingsLPw(((PackageSetting)localObject2).name, i, paramInt2);
      }
    }
    ArrayList localArrayList = new ArrayList(this.mPackages.size());
    Iterator localIterator = this.mPackages.values().iterator();
    for (;;)
    {
      localObject3 = localArrayList;
      if (!localIterator.hasNext()) {
        break;
      }
      localObject3 = (PackageParser.Package)localIterator.next();
      if (((PackageParser.Package)localObject3).mExtras != null)
      {
        localObject3 = PackageParser.generateApplicationInfo((PackageParser.Package)localObject3, i, ((PackageSetting)((PackageParser.Package)localObject3).mExtras).readUserState(paramInt2), paramInt2);
        if (localObject3 != null) {
          localArrayList.add(localObject3);
        }
      }
    }
    label279:
    Object localObject3 = new ParceledListSlice((List)localObject3);
    return (ParceledListSlice<ApplicationInfo>)localObject3;
  }
  
  public ParceledListSlice<PackageInfo> getInstalledPackages(int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return ParceledListSlice.emptyList();
    }
    int i = updateFlagsForPackage(paramInt1, paramInt2, null);
    ArrayMap localArrayMap;
    if ((i & 0x2000) != 0)
    {
      paramInt1 = 1;
      enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, true, false, "get installed packages");
      localArrayMap = this.mPackages;
      if (paramInt1 == 0) {}
    }
    else
    {
      for (;;)
      {
        try
        {
          localArrayList = new ArrayList(this.mSettings.mPackages.size());
          localIterator = this.mSettings.mPackages.values().iterator();
          Object localObject1 = localArrayList;
          if (!localIterator.hasNext()) {
            break label264;
          }
          localObject1 = (PackageSetting)localIterator.next();
          if (((PackageSetting)localObject1).pkg == null) {
            break label167;
          }
          localObject1 = generatePackageInfo((PackageSetting)localObject1, i, paramInt2);
          if (localObject1 == null) {
            continue;
          }
          localArrayList.add(localObject1);
          continue;
          paramInt1 = 0;
        }
        finally {}
        break;
        label167:
        localObject2 = generatePackageInfo(localPackageSetting, i, paramInt2);
      }
    }
    ArrayList localArrayList = new ArrayList(this.mPackages.size());
    Iterator localIterator = this.mPackages.values().iterator();
    for (;;)
    {
      localObject2 = localArrayList;
      if (!localIterator.hasNext()) {
        break;
      }
      localObject2 = generatePackageInfo((PackageSetting)((PackageParser.Package)localIterator.next()).mExtras, i, paramInt2);
      if (localObject2 != null) {
        localArrayList.add(localObject2);
      }
    }
    label264:
    Object localObject2 = new ParceledListSlice((List)localObject2);
    return (ParceledListSlice<PackageInfo>)localObject2;
  }
  
  public String getInstallerPackageName(String paramString)
  {
    synchronized (this.mPackages)
    {
      paramString = this.mSettings.getInstallerPackageNameLPr(paramString);
      return paramString;
    }
  }
  
  public InstrumentationInfo getInstrumentationInfo(ComponentName paramComponentName, int paramInt)
  {
    synchronized (this.mPackages)
    {
      paramComponentName = PackageParser.generateInstrumentationInfo((PackageParser.Instrumentation)this.mInstrumentation.get(paramComponentName), paramInt);
      return paramComponentName;
    }
  }
  
  public byte[] getIntentFilterVerificationBackup(int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call getIntentFilterVerificationBackup()");
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    try
    {
      FastXmlSerializer localFastXmlSerializer = new FastXmlSerializer();
      localFastXmlSerializer.setOutput(localByteArrayOutputStream, StandardCharsets.UTF_8.name());
      localFastXmlSerializer.startDocument(null, Boolean.valueOf(true));
      localFastXmlSerializer.startTag(null, "iv");
      synchronized (this.mPackages)
      {
        this.mSettings.writeAllDomainVerificationsLPr(localFastXmlSerializer, paramInt);
        localFastXmlSerializer.endTag(null, "iv");
        localFastXmlSerializer.endDocument();
        localFastXmlSerializer.flush();
        return localByteArrayOutputStream.toByteArray();
      }
      return null;
    }
    catch (Exception localException)
    {
      if (DEBUG_BACKUP) {
        Slog.e("PackageManager", "Unable to write default apps for backup", localException);
      }
    }
  }
  
  public ParceledListSlice<IntentFilterVerificationInfo> getIntentFilterVerifications(String paramString)
  {
    synchronized (this.mPackages)
    {
      paramString = new ParceledListSlice(this.mSettings.getIntentFilterVerificationsLPr(paramString));
      return paramString;
    }
  }
  
  public int getIntentVerificationStatus(String paramString, int paramInt)
  {
    synchronized (this.mPackages)
    {
      paramInt = this.mSettings.getIntentFilterVerificationStatusLPr(paramString, paramInt);
      return paramInt;
    }
  }
  
  public KeySet getKeySetByAlias(String paramString1, String paramString2)
  {
    if ((paramString1 == null) || (paramString2 == null)) {
      return null;
    }
    synchronized (this.mPackages)
    {
      if ((PackageParser.Package)this.mPackages.get(paramString1) == null)
      {
        Slog.w("PackageManager", "KeySet requested for unknown package: " + paramString1);
        throw new IllegalArgumentException("Unknown package: " + paramString1);
      }
    }
    paramString1 = new KeySet(this.mSettings.mKeySetManagerService.getKeySetByAliasAndPackageNameLPr(paramString1, paramString2));
    return paramString1;
  }
  
  public ResolveInfo getLastChosenActivity(Intent paramIntent, String paramString, int paramInt)
  {
    int i = UserHandle.getCallingUserId();
    if (DEBUG_PREFERRED) {
      Log.v("PackageManager", "Querying last chosen activity for " + paramIntent);
    }
    return findPreferredActivity(paramIntent, paramString, paramInt, queryIntentActivitiesInternal(paramIntent, paramString, paramInt, i), 0, false, false, false, i);
  }
  
  public long getLastUsedTime(String paramString)
  {
    return ((PackageParser.Package)this.mPackages.get(paramString)).getLatestPackageUseTimeInMills();
  }
  
  public int getMoveStatus(int paramInt)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);
    return MoveCallbacks.-get0(this.mMoveCallbacks).get(paramInt);
  }
  
  public String getNameForUid(int paramInt)
  {
    synchronized (this.mPackages)
    {
      Object localObject1 = this.mSettings.getUserIdLPr(UserHandle.getAppId(paramInt));
      if ((localObject1 instanceof SharedUserSetting))
      {
        localObject1 = (SharedUserSetting)localObject1;
        localObject1 = ((SharedUserSetting)localObject1).name + ":" + ((SharedUserSetting)localObject1).userId;
        return (String)localObject1;
      }
      if ((localObject1 instanceof PackageSetting))
      {
        localObject1 = ((PackageSetting)localObject1).name;
        return (String)localObject1;
      }
      return null;
    }
  }
  
  public String getOatFileCompilerFilter(String paramString)
  {
    if (paramString != null)
    {
      paramString = (PackageParser.Package)this.mPackages.get(paramString);
      if (paramString != null) {
        return this.mPackageDexOptimizer.getOatFileCompilerFilter(paramString);
      }
    }
    return null;
  }
  
  public ArraySet<String> getOptimizablePackages()
  {
    ArraySet localArraySet = new ArraySet();
    synchronized (this.mPackages)
    {
      Iterator localIterator = this.mPackages.values().iterator();
      while (localIterator.hasNext())
      {
        PackageParser.Package localPackage = (PackageParser.Package)localIterator.next();
        if (PackageDexOptimizer.canOptimizePackage(localPackage)) {
          localArraySet.add(localPackage.packageName);
        }
      }
    }
    return localArraySet1;
  }
  
  public CompilerStats.PackageStats getOrCreateCompilerPackageStats(PackageParser.Package paramPackage)
  {
    return getOrCreateCompilerPackageStats(paramPackage.packageName);
  }
  
  public CompilerStats.PackageStats getOrCreateCompilerPackageStats(String paramString)
  {
    return this.mCompilerStats.getOrCreatePackageStats(paramString);
  }
  
  public int[] getPackageGids(String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramInt1 = updateFlagsForPackage(paramInt1, paramInt2, paramString);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "getPackageGids");
    synchronized (this.mPackages)
    {
      PackageParser.Package localPackage = (PackageParser.Package)this.mPackages.get(paramString);
      if ((localPackage != null) && (localPackage.isMatch(paramInt1)))
      {
        paramString = ((PackageSetting)localPackage.mExtras).getPermissionsState().computeGids(paramInt2);
        return paramString;
      }
      if ((paramInt1 & 0x2000) != 0)
      {
        paramString = (PackageSetting)this.mSettings.mPackages.get(paramString);
        if ((paramString != null) && (paramString.isMatch(paramInt1)))
        {
          paramString = paramString.getPermissionsState().computeGids(paramInt2);
          return paramString;
        }
      }
      return null;
    }
  }
  
  public PackageInfo getPackageInfo(String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    int i = updateFlagsForPackage(paramInt1, paramInt2, paramString);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "get package info");
    synchronized (this.mPackages)
    {
      paramString = normalizePackageNameLPr(paramString);
      if ((0x200000 & i) != 0) {}
      for (paramInt1 = 1; paramInt1 != 0; paramInt1 = 0)
      {
        localObject = this.mSettings.getDisabledSystemPkgLPr(paramString);
        if (localObject == null) {
          break;
        }
        paramString = generatePackageInfo((PackageSetting)localObject, i, paramInt2);
        return paramString;
      }
      Object localObject = (PackageParser.Package)this.mPackages.get(paramString);
      if ((paramInt1 == 0) || (localObject == null) || (isSystemApp((PackageParser.Package)localObject)))
      {
        if (DEBUG_PACKAGE_INFO) {
          Log.v("PackageManager", "getPackageInfo " + paramString + ": " + localObject);
        }
        if (localObject != null)
        {
          paramString = generatePackageInfo((PackageSetting)((PackageParser.Package)localObject).mExtras, i, paramInt2);
          return paramString;
        }
      }
      else
      {
        return null;
      }
      if ((paramInt1 == 0) && ((i & 0x2000) != 0))
      {
        paramString = generatePackageInfo((PackageSetting)this.mSettings.mPackages.get(paramString), i, paramInt2);
        return paramString;
      }
      return null;
    }
  }
  
  public IPackageInstaller getPackageInstaller()
  {
    return this.mInstallerService;
  }
  
  public void getPackageSizeInfo(String paramString, int paramInt, IPackageStatsObserver paramIPackageStatsObserver)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.GET_PACKAGE_SIZE", null);
    if (paramString == null) {
      throw new IllegalArgumentException("Attempt to get size of null packageName");
    }
    paramString = new PackageStats(paramString, paramInt);
    Message localMessage = this.mHandler.obtainMessage(5);
    localMessage.obj = new MeasureParams(paramString, paramIPackageStatsObserver);
    this.mHandler.sendMessage(localMessage);
  }
  
  public int getPackageUid(String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return -1;
    }
    paramInt1 = updateFlagsForPackage(paramInt1, paramInt2, paramString);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "get package uid");
    synchronized (this.mPackages)
    {
      PackageParser.Package localPackage = (PackageParser.Package)this.mPackages.get(paramString);
      if ((localPackage != null) && (localPackage.isMatch(paramInt1)))
      {
        paramInt1 = UserHandle.getUid(paramInt2, localPackage.applicationInfo.uid);
        return paramInt1;
      }
      if ((paramInt1 & 0x2000) != 0)
      {
        paramString = (PackageSetting)this.mSettings.mPackages.get(paramString);
        if ((paramString != null) && (paramString.isMatch(paramInt1)))
        {
          paramInt1 = UserHandle.getUid(paramInt2, paramString.appId);
          return paramInt1;
        }
      }
      return -1;
    }
  }
  
  Collection<PackageParser.Package> getPackages()
  {
    synchronized (this.mPackages)
    {
      ArrayList localArrayList = new ArrayList(this.mPackages.values());
      return localArrayList;
    }
  }
  
  public String[] getPackagesForUid(int paramInt)
  {
    paramInt = UserHandle.getAppId(paramInt);
    synchronized (this.mPackages)
    {
      Object localObject1 = this.mSettings.getUserIdLPr(paramInt);
      if ((localObject1 instanceof SharedUserSetting))
      {
        localObject1 = (SharedUserSetting)localObject1;
        int i = ((SharedUserSetting)localObject1).packages.size();
        String[] arrayOfString = new String[i];
        paramInt = 0;
        while (paramInt < i)
        {
          arrayOfString[paramInt] = ((PackageSetting)((SharedUserSetting)localObject1).packages.valueAt(paramInt)).name;
          paramInt += 1;
        }
        return arrayOfString;
      }
      if ((localObject1 instanceof PackageSetting))
      {
        localObject1 = ((PackageSetting)localObject1).name;
        return new String[] { localObject1 };
      }
      return null;
    }
  }
  
  public ParceledListSlice<PackageInfo> getPackagesHoldingPermissions(String[] paramArrayOfString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return ParceledListSlice.emptyList();
    }
    int i = updateFlagsForPackage(paramInt1, paramInt2, paramArrayOfString);
    if ((i & 0x2000) != 0) {}
    ArrayList localArrayList;
    boolean[] arrayOfBoolean;
    for (paramInt1 = 1;; paramInt1 = 0) {
      synchronized (this.mPackages)
      {
        localArrayList = new ArrayList();
        arrayOfBoolean = new boolean[paramArrayOfString.length];
        if (paramInt1 == 0) {
          break;
        }
        localIterator = this.mSettings.mPackages.values().iterator();
        if (!localIterator.hasNext()) {
          break label189;
        }
        addPackageHoldingPermissions(localArrayList, (PackageSetting)localIterator.next(), paramArrayOfString, arrayOfBoolean, i, paramInt2);
      }
    }
    Iterator localIterator = this.mPackages.values().iterator();
    while (localIterator.hasNext())
    {
      PackageSetting localPackageSetting = (PackageSetting)((PackageParser.Package)localIterator.next()).mExtras;
      if (localPackageSetting != null) {
        addPackageHoldingPermissions(localArrayList, localPackageSetting, paramArrayOfString, arrayOfBoolean, i, paramInt2);
      }
    }
    label189:
    paramArrayOfString = new ParceledListSlice(localArrayList);
    return paramArrayOfString;
  }
  
  public PackageParser.Package getPakcageInfo(String paramString)
  {
    synchronized (this.mPackages)
    {
      paramString = (PackageParser.Package)this.mPackages.get(paramString);
      return paramString;
    }
  }
  
  public String getPermissionControllerPackageName()
  {
    synchronized (this.mPackages)
    {
      String str = this.mRequiredInstallerPackage;
      return str;
    }
  }
  
  public int getPermissionFlags(String paramString1, String paramString2, int paramInt)
  {
    if (!sUserManager.exists(paramInt)) {
      return 0;
    }
    enforceGrantRevokeRuntimePermissionPermissions("getPermissionFlags");
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, true, false, "getPermissionFlags");
    synchronized (this.mPackages)
    {
      paramString2 = (PackageParser.Package)this.mPackages.get(paramString2);
      if (paramString2 == null) {
        return 0;
      }
      BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(paramString1);
      if (localBasePermission == null) {
        return 0;
      }
      paramString2 = (SettingBase)paramString2.mExtras;
      if (paramString2 == null) {
        return 0;
      }
      paramInt = paramString2.getPermissionsState().getPermissionFlags(paramString1, paramInt);
      return paramInt;
    }
  }
  
  public byte[] getPermissionGrantBackup(int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call getPermissionGrantBackup()");
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    try
    {
      FastXmlSerializer localFastXmlSerializer = new FastXmlSerializer();
      localFastXmlSerializer.setOutput(localByteArrayOutputStream, StandardCharsets.UTF_8.name());
      localFastXmlSerializer.startDocument(null, Boolean.valueOf(true));
      localFastXmlSerializer.startTag(null, "perm-grant-backup");
      synchronized (this.mPackages)
      {
        serializeRuntimePermissionGrantsLPr(localFastXmlSerializer, paramInt);
        localFastXmlSerializer.endTag(null, "perm-grant-backup");
        localFastXmlSerializer.endDocument();
        localFastXmlSerializer.flush();
        return localByteArrayOutputStream.toByteArray();
      }
      return null;
    }
    catch (Exception localException)
    {
      if (DEBUG_BACKUP) {
        Slog.e("PackageManager", "Unable to write default apps for backup", localException);
      }
    }
  }
  
  public PermissionGroupInfo getPermissionGroupInfo(String paramString, int paramInt)
  {
    synchronized (this.mPackages)
    {
      paramString = PackageParser.generatePermissionGroupInfo((PackageParser.PermissionGroup)this.mPermissionGroups.get(paramString), paramInt);
      return paramString;
    }
  }
  
  public PermissionInfo getPermissionInfo(String paramString, int paramInt)
  {
    synchronized (this.mPackages)
    {
      paramString = (BasePermission)this.mSettings.mPermissions.get(paramString);
      if (paramString != null)
      {
        paramString = generatePermissionInfo(paramString, paramInt);
        return paramString;
      }
      return null;
    }
  }
  
  public ParceledListSlice<ApplicationInfo> getPersistentApplications(int paramInt)
  {
    return new ParceledListSlice(getPersistentApplicationsInternal(paramInt));
  }
  
  public int getPreferredActivities(List<IntentFilter> paramList, List<ComponentName> paramList1, String paramString)
  {
    int i = UserHandle.getCallingUserId();
    synchronized (this.mPackages)
    {
      Object localObject = (PreferredIntentResolver)this.mSettings.mPreferredActivities.get(i);
      if (localObject != null)
      {
        localObject = ((PreferredIntentResolver)localObject).filterIterator();
        while (((Iterator)localObject).hasNext())
        {
          PreferredActivity localPreferredActivity = (PreferredActivity)((Iterator)localObject).next();
          if ((paramString == null) || ((localPreferredActivity.mPref.mComponent.getPackageName().equals(paramString)) && (localPreferredActivity.mPref.mAlways)))
          {
            if (paramList != null) {
              paramList.add(new IntentFilter(localPreferredActivity));
            }
            if (paramList1 != null) {
              paramList1.add(localPreferredActivity.mPref.mComponent);
            }
          }
        }
      }
    }
    return 0;
  }
  
  public byte[] getPreferredActivityBackup(int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call getPreferredActivityBackup()");
    }
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    try
    {
      FastXmlSerializer localFastXmlSerializer = new FastXmlSerializer();
      localFastXmlSerializer.setOutput(localByteArrayOutputStream, StandardCharsets.UTF_8.name());
      localFastXmlSerializer.startDocument(null, Boolean.valueOf(true));
      localFastXmlSerializer.startTag(null, "pa");
      synchronized (this.mPackages)
      {
        this.mSettings.writePreferredActivitiesLPr(localFastXmlSerializer, paramInt, true);
        localFastXmlSerializer.endTag(null, "pa");
        localFastXmlSerializer.endDocument();
        localFastXmlSerializer.flush();
        return localByteArrayOutputStream.toByteArray();
      }
      return null;
    }
    catch (Exception localException)
    {
      if (DEBUG_BACKUP) {
        Slog.e("PackageManager", "Unable to write preferred activities for backup", localException);
      }
    }
  }
  
  public List<String> getPreviousCodePaths(String paramString)
  {
    paramString = (PackageSetting)this.mSettings.mPackages.get(paramString);
    ArrayList localArrayList = new ArrayList();
    if ((paramString != null) && (paramString.oldCodePaths != null)) {
      localArrayList.addAll(paramString.oldCodePaths);
    }
    return localArrayList;
  }
  
  public int getPrivateFlagsForUid(int paramInt)
  {
    synchronized (this.mPackages)
    {
      Object localObject1 = this.mSettings.getUserIdLPr(UserHandle.getAppId(paramInt));
      if ((localObject1 instanceof SharedUserSetting))
      {
        paramInt = ((SharedUserSetting)localObject1).pkgPrivateFlags;
        return paramInt;
      }
      if ((localObject1 instanceof PackageSetting))
      {
        paramInt = ((PackageSetting)localObject1).pkgPrivateFlags;
        return paramInt;
      }
      return 0;
    }
  }
  
  public ProviderInfo getProviderInfo(ComponentName paramComponentName, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramInt1 = updateFlagsForComponent(paramInt1, paramInt2, paramComponentName);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "get provider info");
    synchronized (this.mPackages)
    {
      PackageParser.Provider localProvider = (PackageParser.Provider)ProviderIntentResolver.-get0(this.mProviders).get(paramComponentName);
      if (DEBUG_PACKAGE_INFO) {
        Log.v("PackageManager", "getProviderInfo " + paramComponentName + ": " + localProvider);
      }
      if ((localProvider != null) && (this.mSettings.isEnabledAndMatchLPr(localProvider.info, paramInt1, paramInt2)))
      {
        paramComponentName = (PackageSetting)this.mSettings.mPackages.get(paramComponentName.getPackageName());
        if (paramComponentName == null) {
          return null;
        }
        paramComponentName = PackageParser.generateProviderInfo(localProvider, paramInt1, paramComponentName.readUserState(paramInt2), paramInt2);
        return paramComponentName;
      }
      return null;
    }
  }
  
  public ActivityInfo getReceiverInfo(ComponentName paramComponentName, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramInt1 = updateFlagsForComponent(paramInt1, paramInt2, paramComponentName);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "get receiver info");
    synchronized (this.mPackages)
    {
      PackageParser.Activity localActivity = (PackageParser.Activity)ActivityIntentResolver.-get0(this.mReceivers).get(paramComponentName);
      if (DEBUG_PACKAGE_INFO) {
        Log.v("PackageManager", "getReceiverInfo " + paramComponentName + ": " + localActivity);
      }
      if ((localActivity != null) && (this.mSettings.isEnabledAndMatchLPr(localActivity.info, paramInt1, paramInt2)))
      {
        paramComponentName = (PackageSetting)this.mSettings.mPackages.get(paramComponentName.getPackageName());
        if (paramComponentName == null) {
          return null;
        }
        paramComponentName = PackageParser.generateActivityInfo(localActivity, paramInt1, paramComponentName.readUserState(paramInt2), paramInt2);
        return paramComponentName;
      }
      return null;
    }
  }
  
  public ServiceInfo getServiceInfo(ComponentName paramComponentName, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramInt1 = updateFlagsForComponent(paramInt1, paramInt2, paramComponentName);
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "get service info");
    synchronized (this.mPackages)
    {
      PackageParser.Service localService = (PackageParser.Service)ServiceIntentResolver.-get0(this.mServices).get(paramComponentName);
      if (DEBUG_PACKAGE_INFO) {
        Log.v("PackageManager", "getServiceInfo " + paramComponentName + ": " + localService);
      }
      if ((localService != null) && (this.mSettings.isEnabledAndMatchLPr(localService.info, paramInt1, paramInt2)))
      {
        paramComponentName = (PackageSetting)this.mSettings.mPackages.get(paramComponentName.getPackageName());
        if (paramComponentName == null) {
          return null;
        }
        paramComponentName = PackageParser.generateServiceInfo(localService, paramInt1, paramComponentName.readUserState(paramInt2), paramInt2);
        return paramComponentName;
      }
      return null;
    }
  }
  
  public String getServicesSystemSharedLibraryPackageName()
  {
    synchronized (this.mPackages)
    {
      String str = this.mServicesSystemSharedLibraryPackageName;
      return str;
    }
  }
  
  public String getSharedSystemSharedLibraryPackageName()
  {
    synchronized (this.mPackages)
    {
      String str = this.mSharedSystemSharedLibraryPackageName;
      return str;
    }
  }
  
  public KeySet getSigningKeySet(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    PackageParser.Package localPackage;
    synchronized (this.mPackages)
    {
      localPackage = (PackageParser.Package)this.mPackages.get(paramString);
      if (localPackage == null)
      {
        Slog.w("PackageManager", "KeySet requested for unknown package: " + paramString);
        throw new IllegalArgumentException("Unknown package: " + paramString);
      }
    }
    if ((localPackage.applicationInfo.uid != Binder.getCallingUid()) && (1000 != Binder.getCallingUid())) {
      throw new SecurityException("May not access signing KeySet of other apps.");
    }
    paramString = new KeySet(this.mSettings.mKeySetManagerService.getSigningKeySetByPackageNameLPr(paramString));
    return paramString;
  }
  
  public ParceledListSlice<FeatureInfo> getSystemAvailableFeatures()
  {
    synchronized (this.mPackages)
    {
      Object localObject1 = new ArrayList(this.mAvailableFeatures.values());
      FeatureInfo localFeatureInfo = new FeatureInfo();
      localFeatureInfo.reqGlEsVersion = SystemProperties.getInt("ro.opengles.version", 0);
      ((ArrayList)localObject1).add(localFeatureInfo);
      localObject1 = new ParceledListSlice((List)localObject1);
      return (ParceledListSlice<FeatureInfo>)localObject1;
    }
  }
  
  public String[] getSystemSharedLibraryNames()
  {
    synchronized (this.mPackages)
    {
      Set localSet = this.mSharedLibraries.keySet();
      int i = localSet.size();
      if (i > 0)
      {
        String[] arrayOfString = new String[i];
        localSet.toArray(arrayOfString);
        return arrayOfString;
      }
      return null;
    }
  }
  
  public int getUidForSharedUser(String paramString)
  {
    if (paramString == null) {
      return -1;
    }
    synchronized (this.mPackages)
    {
      paramString = this.mSettings.getSharedUserLPw(paramString, 0, 0, false);
      if (paramString == null) {
        return -1;
      }
      int i = paramString.userId;
      return i;
    }
  }
  
  public VerifierDeviceIdentity getVerifierDeviceIdentity()
    throws RemoteException
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can read the verifier device identity");
    synchronized (this.mPackages)
    {
      VerifierDeviceIdentity localVerifierDeviceIdentity = this.mSettings.getVerifierDeviceIdentityLPw();
      return localVerifierDeviceIdentity;
    }
  }
  
  public void grantDefaultPermissionsToEnabledCarrierApps(String[] paramArrayOfString, int paramInt)
  {
    enforceSystemOrPhoneCaller("grantPermissionsToEnabledCarrierApps");
    synchronized (this.mPackages)
    {
      long l = Binder.clearCallingIdentity();
      try
      {
        this.mDefaultPermissionPolicy.grantDefaultPermissionsToEnabledCarrierAppsLPr(paramArrayOfString, paramInt);
        Binder.restoreCallingIdentity(l);
        return;
      }
      finally
      {
        paramArrayOfString = finally;
        Binder.restoreCallingIdentity(l);
        throw paramArrayOfString;
      }
    }
  }
  
  public void grantRuntimePermission(String paramString1, String paramString2, final int paramInt)
  {
    if (!sUserManager.exists(paramInt))
    {
      Log.e("PackageManager", "No such user:" + paramInt);
      return;
    }
    this.mContext.enforceCallingOrSelfPermission("android.permission.GRANT_RUNTIME_PERMISSIONS", "grantRuntimePermission");
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, true, true, "grantRuntimePermission");
    PackageParser.Package localPackage;
    synchronized (this.mPackages)
    {
      localPackage = (PackageParser.Package)this.mPackages.get(paramString1);
      if (localPackage == null) {
        throw new IllegalArgumentException("Unknown package: " + paramString1);
      }
    }
    BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(paramString2);
    if (localBasePermission == null) {
      throw new IllegalArgumentException("Unknown permission: " + paramString2);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(localPackage, localBasePermission);
    if ((Build.PERMISSIONS_REVIEW_REQUIRED) && (localPackage.applicationInfo.targetSdkVersion < 23))
    {
      boolean bool = localBasePermission.isRuntime();
      if (bool) {
        return;
      }
    }
    int i = UserHandle.getUid(paramInt, localPackage.applicationInfo.uid);
    Object localObject = (SettingBase)localPackage.mExtras;
    if (localObject == null) {
      throw new IllegalArgumentException("Unknown package: " + paramString1);
    }
    localObject = ((SettingBase)localObject).getPermissionsState();
    if ((((PermissionsState)localObject).getPermissionFlags(paramString2, paramInt) & 0x10) != 0) {
      throw new SecurityException("Cannot grant system fixed permission " + paramString2 + " for package " + paramString1);
    }
    if (localBasePermission.isDevelopment())
    {
      if (((PermissionsState)localObject).grantInstallPermission(localBasePermission) != -1) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (localPackage.applicationInfo.targetSdkVersion < 23)
    {
      Slog.w("PackageManager", "Cannot grant runtime permission to a legacy app");
      return;
    }
    switch (((PermissionsState)localObject).grantRuntimePermission(localBasePermission, paramInt))
    {
    }
    for (;;)
    {
      this.mOnPermissionChangeListeners.onPermissionsChanged(i);
      this.mSettings.writeRuntimePermissionsForUserLPr(paramInt, false);
      long l;
      if (("android.permission.READ_EXTERNAL_STORAGE".equals(paramString2)) || ("android.permission.WRITE_EXTERNAL_STORAGE".equals(paramString2))) {
        l = Binder.clearCallingIdentity();
      }
      try
      {
        if (sUserManager.isInitialized(paramInt)) {
          ((MountServiceInternal)LocalServices.getService(MountServiceInternal.class)).onExternalStoragePolicyChanged(i, paramString1);
        }
        return;
        return;
        final int j = UserHandle.getAppId(localPackage.applicationInfo.uid);
        this.mHandler.post(new Runnable()
        {
          public void run()
          {
            PackageManagerService.-wrap30(PackageManagerService.this, j, paramInt, "permission grant or revoke changed gids");
          }
        });
      }
      finally
      {
        Binder.restoreCallingIdentity(l);
      }
    }
  }
  
  public void grantSystemAppPermissions(final int paramInt)
  {
    if (Binder.getCallingUid() == 1000) {
      this.mHandler.post(new Runnable()
      {
        public void run()
        {
          PackageManagerService.this.mDefaultPermissionPolicy.grantSystemAppPermissions(paramInt);
        }
      });
    }
  }
  
  public boolean hasSystemFeature(String paramString, int paramInt)
  {
    boolean bool = false;
    synchronized (this.mPackages)
    {
      paramString = (FeatureInfo)this.mAvailableFeatures.get(paramString);
      if (paramString == null) {
        return false;
      }
      int i = paramString.version;
      if (i >= paramInt) {
        bool = true;
      }
      return bool;
    }
  }
  
  public boolean hasSystemUidErrors()
  {
    return this.mHasSystemUidErrors;
  }
  
  public boolean inCompatConfigList(int paramInt, String paramString)
  {
    return this.mOemCompatibilityHelper.isInConfigList(paramInt, paramString);
  }
  
  /* Error */
  public int installExistingPackageAsUser(String paramString, int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   4: ldc_w 8220
    //   7: aconst_null
    //   8: invokevirtual 2329	android/content/Context:enforceCallingOrSelfPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   11: aload_0
    //   12: invokestatic 2303	android/os/Binder:getCallingUid	()I
    //   15: iload_2
    //   16: iconst_1
    //   17: iconst_1
    //   18: new 1320	java/lang/StringBuilder
    //   21: dup
    //   22: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   25: ldc_w 8222
    //   28: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   31: iload_2
    //   32: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   35: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   38: invokevirtual 2309	com/android/server/pm/PackageManagerService:enforceCrossUserPermission	(IIZZLjava/lang/String;)V
    //   41: aload_0
    //   42: iload_2
    //   43: ldc_w 8224
    //   46: invokevirtual 4958	com/android/server/pm/PackageManagerService:isUserRestricted	(ILjava/lang/String;)Z
    //   49: ifeq +6 -> 55
    //   52: bipush -111
    //   54: ireturn
    //   55: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   58: lstore 4
    //   60: iconst_0
    //   61: istore_3
    //   62: aload_0
    //   63: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   66: astore 6
    //   68: aload 6
    //   70: monitorenter
    //   71: aload_0
    //   72: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   75: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   78: aload_1
    //   79: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   82: checkcast 1615	com/android/server/pm/PackageSetting
    //   85: astore 7
    //   87: aload 7
    //   89: ifnonnull +14 -> 103
    //   92: aload 6
    //   94: monitorexit
    //   95: lload 4
    //   97: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   100: bipush -3
    //   102: ireturn
    //   103: aload 7
    //   105: iload_2
    //   106: invokevirtual 2508	com/android/server/pm/PackageSetting:getInstalled	(I)Z
    //   109: ifne +27 -> 136
    //   112: aload 7
    //   114: iconst_1
    //   115: iload_2
    //   116: invokevirtual 3292	com/android/server/pm/PackageSetting:setInstalled	(ZI)V
    //   119: aload 7
    //   121: iconst_0
    //   122: iload_2
    //   123: invokevirtual 8227	com/android/server/pm/PackageSetting:setHidden	(ZI)V
    //   126: aload_0
    //   127: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   130: iload_2
    //   131: invokevirtual 7836	com/android/server/pm/Settings:writePackageRestrictionsLPr	(I)V
    //   134: iconst_1
    //   135: istore_3
    //   136: aload 6
    //   138: monitorexit
    //   139: iload_3
    //   140: ifeq +40 -> 180
    //   143: aload 7
    //   145: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   148: ifnull +24 -> 172
    //   151: aload_0
    //   152: getfield 1126	com/android/server/pm/PackageManagerService:mInstallLock	Ljava/lang/Object;
    //   155: astore 6
    //   157: aload 6
    //   159: monitorenter
    //   160: aload_0
    //   161: aload 7
    //   163: getfield 2187	com/android/server/pm/PackageSetting:pkg	Landroid/content/pm/PackageParser$Package;
    //   166: invokespecial 3421	com/android/server/pm/PackageManagerService:prepareAppDataAfterInstallLIF	(Landroid/content/pm/PackageParser$Package;)V
    //   169: aload 6
    //   171: monitorexit
    //   172: aload_0
    //   173: aload_1
    //   174: aload 7
    //   176: iload_2
    //   177: invokespecial 8229	com/android/server/pm/PackageManagerService:sendPackageAddedForUser	(Ljava/lang/String;Lcom/android/server/pm/PackageSetting;I)V
    //   180: lload 4
    //   182: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   185: iconst_1
    //   186: ireturn
    //   187: astore_1
    //   188: aload 6
    //   190: monitorexit
    //   191: aload_1
    //   192: athrow
    //   193: astore_1
    //   194: lload 4
    //   196: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   199: aload_1
    //   200: athrow
    //   201: astore_1
    //   202: aload 6
    //   204: monitorexit
    //   205: aload_1
    //   206: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	207	0	this	PackageManagerService
    //   0	207	1	paramString	String
    //   0	207	2	paramInt	int
    //   61	79	3	i	int
    //   58	137	4	l	long
    //   85	90	7	localPackageSetting	PackageSetting
    // Exception table:
    //   from	to	target	type
    //   71	87	187	finally
    //   103	134	187	finally
    //   62	71	193	finally
    //   92	95	193	finally
    //   136	139	193	finally
    //   143	160	193	finally
    //   169	172	193	finally
    //   172	180	193	finally
    //   188	193	193	finally
    //   202	207	193	finally
    //   160	169	201	finally
  }
  
  public void installPackageAsUser(String paramString1, IPackageInstallObserver2 paramIPackageInstallObserver2, int paramInt1, String paramString2, int paramInt2)
  {
    SeempLog.record(90);
    this.mContext.enforceCallingOrSelfPermission("android.permission.INSTALL_PACKAGES", null);
    int i = Binder.getCallingUid();
    enforceCrossUserPermission(i, paramInt2, true, true, "installPackageAsUser");
    if ((!isUserRestricted(paramInt2, "no_install_apps")) || (paramIPackageInstallObserver2 != null)) {}
    UserHandle localUserHandle;
    try
    {
      paramIPackageInstallObserver2.onPackageInstalled("", -111, null, null);
      return;
    }
    catch (RemoteException paramString1) {}
    if ((i == 2000) || (i == 0))
    {
      paramInt1 |= 0x20;
      if ((paramInt1 & 0x40) == 0) {
        break label139;
      }
      localUserHandle = UserHandle.ALL;
    }
    for (;;)
    {
      if (((paramInt1 & 0x100) != 0) && (this.mContext.checkCallingOrSelfPermission("android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS") == -1))
      {
        throw new SecurityException("You need the android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag");
        paramInt1 = paramInt1 & 0xFFFFFFDF & 0xFFFFFFBF;
        break;
        label139:
        localUserHandle = new UserHandle(paramInt2);
        continue;
      }
      OriginInfo localOriginInfo = OriginInfo.fromUntrustedFile(new File(paramString1));
      paramString1 = this.mHandler.obtainMessage(5);
      paramIPackageInstallObserver2 = new InstallParams(localOriginInfo, null, paramIPackageInstallObserver2, paramInt1, paramString2, null, new VerificationInfo(null, null, -1, i), localUserHandle, null, null, null);
      paramIPackageInstallObserver2.setTraceMethod("installAsUser").setTraceCookie(System.identityHashCode(paramIPackageInstallObserver2));
      paramString1.obj = paramIPackageInstallObserver2;
      Trace.asyncTraceBegin(262144L, "installAsUser", System.identityHashCode(paramString1.obj));
      Trace.asyncTraceBegin(262144L, "queueInstall", System.identityHashCode(paramString1.obj));
      this.mHandler.sendMessage(paramString1);
      return;
    }
  }
  
  void installStage(String paramString1, File paramFile, String paramString2, IPackageInstallObserver2 paramIPackageInstallObserver2, PackageInstaller.SessionParams paramSessionParams, String paramString3, int paramInt, UserHandle paramUserHandle, Certificate[][] paramArrayOfCertificate)
  {
    if ((DEBUG_EPHEMERAL) && ((paramSessionParams.installFlags & 0x800) != 0)) {
      Slog.d("PackageManager", "Ephemeral install of " + paramString1);
    }
    VerificationInfo localVerificationInfo = new VerificationInfo(paramSessionParams.originatingUri, paramSessionParams.referrerUri, paramSessionParams.originatingUid, paramInt);
    if (paramFile != null) {}
    for (paramString1 = OriginInfo.fromStagedFile(paramFile);; paramString1 = OriginInfo.fromStagedContainer(paramString2))
    {
      paramFile = this.mHandler.obtainMessage(5);
      paramString1 = new InstallParams(paramString1, null, paramIPackageInstallObserver2, paramSessionParams.installFlags, paramString3, paramSessionParams.volumeUuid, localVerificationInfo, paramUserHandle, paramSessionParams.abiOverride, paramSessionParams.grantedRuntimePermissions, paramArrayOfCertificate);
      paramString1.setTraceMethod("installStage").setTraceCookie(System.identityHashCode(paramString1));
      paramFile.obj = paramString1;
      Trace.asyncTraceBegin(262144L, "installStage", System.identityHashCode(paramFile.obj));
      Trace.asyncTraceBegin(262144L, "queueInstall", System.identityHashCode(paramFile.obj));
      this.mHandler.sendMessage(paramFile);
      return;
    }
  }
  
  public boolean isEphemeralApplication(String paramString, int paramInt)
  {
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, true, false, "isEphemeral");
    return false;
  }
  
  public boolean isFirstBoot()
  {
    return this.mFirstBoot;
  }
  
  boolean isHistoricalPackageUsageAvailable()
  {
    return this.mPackageUsage.isHistoricalPackageUsageAvailable();
  }
  
  public boolean isOnlyCoreApps()
  {
    return this.mOnlyCore;
  }
  
  public boolean isOrphaned(String paramString)
  {
    synchronized (this.mPackages)
    {
      boolean bool = this.mSettings.isOrphaned(paramString);
      return bool;
    }
  }
  
  public boolean isPackageAvailable(String paramString, int paramInt)
  {
    if (!sUserManager.exists(paramInt)) {
      return false;
    }
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, false, false, "is package available");
    synchronized (this.mPackages)
    {
      paramString = (PackageParser.Package)this.mPackages.get(paramString);
      if (paramString != null)
      {
        paramString = (PackageSetting)paramString.mExtras;
        if (paramString != null)
        {
          paramString = paramString.readUserState(paramInt);
          if (paramString != null)
          {
            boolean bool = PackageParser.isAvailable(paramString);
            return bool;
          }
        }
      }
      return false;
    }
  }
  
  public boolean isPackageDeviceAdminOnAnyUser(String paramString)
  {
    return isPackageDeviceAdmin(paramString, -1);
  }
  
  public boolean isPackageSignedByKeySet(String paramString, KeySet paramKeySet)
  {
    if ((paramString == null) || (paramKeySet == null)) {
      return false;
    }
    synchronized (this.mPackages)
    {
      if ((PackageParser.Package)this.mPackages.get(paramString) == null)
      {
        Slog.w("PackageManager", "KeySet requested for unknown package: " + paramString);
        throw new IllegalArgumentException("Unknown package: " + paramString);
      }
    }
    paramKeySet = paramKeySet.getToken();
    if ((paramKeySet instanceof KeySetHandle))
    {
      boolean bool = this.mSettings.mKeySetManagerService.packageIsSignedByLPr(paramString, (KeySetHandle)paramKeySet);
      return bool;
    }
    return false;
  }
  
  public boolean isPackageSignedByKeySetExactly(String paramString, KeySet paramKeySet)
  {
    if ((paramString == null) || (paramKeySet == null)) {
      return false;
    }
    synchronized (this.mPackages)
    {
      if ((PackageParser.Package)this.mPackages.get(paramString) == null)
      {
        Slog.w("PackageManager", "KeySet requested for unknown package: " + paramString);
        throw new IllegalArgumentException("Unknown package: " + paramString);
      }
    }
    paramKeySet = paramKeySet.getToken();
    if ((paramKeySet instanceof KeySetHandle))
    {
      boolean bool = this.mSettings.mKeySetManagerService.packageIsSignedByExactlyLPr(paramString, (KeySetHandle)paramKeySet);
      return bool;
    }
    return false;
  }
  
  public boolean isPackageSuspendedForUser(String paramString, int paramInt)
  {
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, true, false, "isPackageSuspendedForUser for user " + paramInt);
    PackageSetting localPackageSetting;
    synchronized (this.mPackages)
    {
      localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
      if (localPackageSetting == null) {
        throw new IllegalArgumentException("Unknown target package: " + paramString);
      }
    }
    boolean bool = localPackageSetting.getSuspended(paramInt);
    return bool;
  }
  
  @Deprecated
  public boolean isPermissionEnforced(String paramString)
  {
    return true;
  }
  
  public boolean isPermissionRevokedByPolicy(String paramString1, String paramString2, int paramInt)
  {
    boolean bool = false;
    if (UserHandle.getCallingUserId() != paramInt) {
      this.mContext.enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "isPermissionRevokedByPolicy for user " + paramInt);
    }
    if (checkPermission(paramString1, paramString2, paramInt) == 0) {
      return false;
    }
    long l = Binder.clearCallingIdentity();
    try
    {
      paramInt = getPermissionFlags(paramString1, paramString2, paramInt);
      if ((paramInt & 0x4) != 0) {
        bool = true;
      }
      return bool;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  public boolean isProtectedBroadcast(String paramString)
  {
    synchronized (this.mPackages)
    {
      boolean bool = this.mProtectedBroadcasts.contains(paramString);
      if (bool) {
        return true;
      }
      if (paramString != null) {
        if ((!paramString.startsWith("android.net.netmon.lingerExpired")) && (!paramString.startsWith("com.android.server.sip.SipWakeupTimer")) && (!paramString.startsWith("com.android.internal.telephony.data-reconnect")))
        {
          bool = paramString.startsWith("android.net.netmon.launchCaptivePortalApp");
          if (!bool) {}
        }
        else
        {
          return true;
        }
      }
      return false;
    }
  }
  
  public boolean isSafeMode()
  {
    return this.mSafeMode;
  }
  
  public boolean isStorageLow()
  {
    long l = Binder.clearCallingIdentity();
    try
    {
      DeviceStorageMonitorInternal localDeviceStorageMonitorInternal = (DeviceStorageMonitorInternal)LocalServices.getService(DeviceStorageMonitorInternal.class);
      if (localDeviceStorageMonitorInternal != null)
      {
        boolean bool = localDeviceStorageMonitorInternal.isMemoryLow();
        return bool;
      }
      return false;
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
  }
  
  public boolean isUidPrivileged(int paramInt)
  {
    paramInt = UserHandle.getAppId(paramInt);
    synchronized (this.mPackages)
    {
      Object localObject1 = this.mSettings.getUserIdLPr(paramInt);
      boolean bool;
      if ((localObject1 instanceof SharedUserSetting))
      {
        localObject1 = ((SharedUserSetting)localObject1).packages.iterator();
        do
        {
          if (!((Iterator)localObject1).hasNext()) {
            break;
          }
          bool = ((PackageSetting)((Iterator)localObject1).next()).isPrivileged();
        } while (!bool);
        return true;
      }
      if ((localObject1 instanceof PackageSetting))
      {
        bool = ((PackageSetting)localObject1).isPrivileged();
        return bool;
      }
      return false;
    }
  }
  
  public boolean isUpgrade()
  {
    return this.mIsUpgrade;
  }
  
  boolean isUserRestricted(int paramInt, String paramString)
  {
    if (sUserManager.getUserRestrictions(paramInt).getBoolean(paramString, false))
    {
      Log.w("PackageManager", "User is restricted: " + paramString);
      return true;
    }
    return false;
  }
  
  public void logAppProcessStartIfNeeded(String paramString1, int paramInt1, String paramString2, String paramString3, int paramInt2)
  {
    if (!SecurityLog.isLoggingEnabled()) {
      return;
    }
    Bundle localBundle = new Bundle();
    localBundle.putLong("startTimestamp", System.currentTimeMillis());
    localBundle.putString("processName", paramString1);
    localBundle.putInt("uid", paramInt1);
    localBundle.putString("seinfo", paramString2);
    localBundle.putString("apkFile", paramString3);
    localBundle.putInt("pid", paramInt2);
    paramString1 = this.mProcessLoggingHandler.obtainMessage(1);
    paramString1.setData(localBundle);
    this.mProcessLoggingHandler.sendMessage(paramString1);
  }
  
  public int movePackage(final String paramString1, final String paramString2)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.MOVE_PACKAGE", null);
    final UserHandle localUserHandle = new UserHandle(UserHandle.getCallingUserId());
    final int i = this.mNextMoveId.getAndIncrement();
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        try
        {
          PackageManagerService.-wrap33(PackageManagerService.this, paramString1, paramString2, i, localUserHandle);
          return;
        }
        catch (PackageManagerException localPackageManagerException)
        {
          Slog.w("PackageManager", "Failed to move " + paramString1, localPackageManagerException);
          PackageManagerService.MoveCallbacks.-wrap1(PackageManagerService.-get9(PackageManagerService.this), i, -6);
        }
      }
    });
    return i;
  }
  
  public int movePrimaryStorage(String paramString)
    throws RemoteException
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.MOVE_PACKAGE", null);
    final int i = this.mNextMoveId.getAndIncrement();
    Object localObject = new Bundle();
    ((Bundle)localObject).putString("android.os.storage.extra.FS_UUID", paramString);
    MoveCallbacks.-wrap0(this.mMoveCallbacks, i, (Bundle)localObject);
    localObject = new IPackageMoveObserver.Stub()
    {
      public void onCreated(int paramAnonymousInt, Bundle paramAnonymousBundle) {}
      
      public void onStatusChanged(int paramAnonymousInt1, int paramAnonymousInt2, long paramAnonymousLong)
      {
        PackageManagerService.MoveCallbacks.-wrap2(PackageManagerService.-get9(PackageManagerService.this), i, paramAnonymousInt2, paramAnonymousLong);
      }
    };
    ((StorageManager)this.mContext.getSystemService(StorageManager.class)).setPrimaryStorageUuid(paramString, (IPackageMoveObserver)localObject);
    return i;
  }
  
  public PackageCleanItem nextPackageToClean(PackageCleanItem paramPackageCleanItem)
  {
    synchronized (this.mPackages)
    {
      boolean bool = isExternalMediaAvailable();
      if (!bool) {
        return null;
      }
      ArrayList localArrayList = this.mSettings.mPackagesToBeCleaned;
      if (paramPackageCleanItem != null) {
        localArrayList.remove(paramPackageCleanItem);
      }
      if (localArrayList.size() > 0)
      {
        paramPackageCleanItem = (PackageCleanItem)localArrayList.get(0);
        return paramPackageCleanItem;
      }
      return null;
    }
  }
  
  void notifyFirstLaunch(final String paramString1, final String paramString2, final int paramInt)
  {
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        int i = 0;
        if (i < PackageManagerService.this.mRunningInstalls.size())
        {
          PackageManagerService.PostInstallData localPostInstallData = (PackageManagerService.PostInstallData)PackageManagerService.this.mRunningInstalls.valueAt(i);
          if (localPostInstallData.res.returnCode != 1) {}
          for (;;)
          {
            i += 1;
            break;
            if (localPostInstallData.res.pkg == null)
            {
              Slog.e("PackageManager", "notifyFirstLaunch # run # pkg is null. error.");
            }
            else if (paramString1.equals(localPostInstallData.res.pkg.applicationInfo.packageName))
            {
              int j = 0;
              while (j < localPostInstallData.res.newUsers.length)
              {
                if (paramInt == localPostInstallData.res.newUsers[j])
                {
                  if (PackageManagerService.DEBUG_BACKUP) {
                    Slog.i("PackageManager", "Package " + paramString1 + " being restored so deferring FIRST_LAUNCH");
                  }
                  return;
                }
                j += 1;
              }
            }
          }
        }
        if (PackageManagerService.DEBUG_BACKUP) {
          Slog.i("PackageManager", "Package " + paramString1 + " sending normal FIRST_LAUNCH");
        }
        PackageManagerService.-wrap40(PackageManagerService.this, paramString1, paramString2, new int[] { paramInt });
      }
    });
  }
  
  public void notifyPackageUse(String paramString, int paramInt)
  {
    synchronized (this.mPackages)
    {
      paramString = (PackageParser.Package)this.mPackages.get(paramString);
      if (paramString == null) {
        return;
      }
      paramString.mLastPackageUsageTimeInMills[paramInt] = System.currentTimeMillis();
      return;
    }
  }
  
  void onNewUserCreated(int paramInt)
  {
    this.mDefaultPermissionPolicy.grantDefaultPermissions(paramInt);
    if (Build.PERMISSIONS_REVIEW_REQUIRED) {
      updatePermissionsLPw(null, null, 5);
    }
    if (OpFeatures.isSupport(new int[] { 12 })) {
      grantSystemAppPermissions(paramInt);
    }
  }
  
  public void onShellCommand(FileDescriptor paramFileDescriptor1, FileDescriptor paramFileDescriptor2, FileDescriptor paramFileDescriptor3, String[] paramArrayOfString, ResultReceiver paramResultReceiver)
  {
    new PackageManagerShellCommand(this).exec(this, paramFileDescriptor1, paramFileDescriptor2, paramFileDescriptor3, paramArrayOfString, paramResultReceiver);
  }
  
  public boolean onTransact(int paramInt1, Parcel paramParcel1, Parcel paramParcel2, int paramInt2)
    throws RemoteException
  {
    try
    {
      boolean bool = super.onTransact(paramInt1, paramParcel1, paramParcel2, paramInt2);
      return bool;
    }
    catch (RuntimeException paramParcel1)
    {
      if ((paramParcel1 instanceof SecurityException)) {
        break label29;
      }
    }
    if ((paramParcel1 instanceof IllegalArgumentException)) {}
    for (;;)
    {
      label29:
      throw paramParcel1;
      Slog.wtf("PackageManager", "Package Manager Crash", paramParcel1);
    }
  }
  
  public boolean performDexOpt(String paramString, boolean paramBoolean1, int paramInt, boolean paramBoolean2)
  {
    return performDexOptTraced(paramString, paramBoolean1, PackageManagerServiceCompilerMapping.getCompilerFilterForReason(paramInt), paramBoolean2) != -1;
  }
  
  public boolean performDexOptIfNeeded(String paramString)
  {
    boolean bool = false;
    if (performDexOptTraced(paramString, false, PackageManagerServiceCompilerMapping.getFullCompilerFilter(), false) != -1) {
      bool = true;
    }
    return bool;
  }
  
  public boolean performDexOptMode(String paramString1, boolean paramBoolean1, String paramString2, boolean paramBoolean2)
  {
    return performDexOptTraced(paramString1, paramBoolean1, paramString2, paramBoolean2) != -1;
  }
  
  public void performFstrimIfNeeded()
  {
    enforceSystemOrRoot("Only the system can request fstrim");
    try
    {
      IMountService localIMountService = PackageHelper.getMountService();
      if (localIMountService != null)
      {
        int j = 0;
        long l1 = Settings.Global.getLong(this.mContext.getContentResolver(), "fstrim_mandatory_interval", 259200000L);
        int i = j;
        if (l1 > 0L)
        {
          long l2 = System.currentTimeMillis() - localIMountService.lastMaintenance();
          i = j;
          if (l2 > l1)
          {
            i = j;
            if (l2 < 31536000000L)
            {
              i = 1;
              Slog.w("PackageManager", "No disk maintenance in " + l2 + "; running immediately");
            }
          }
        }
        if (i != 0) {
          synchronized (this.mPackages)
          {
            boolean bool1 = this.mDexOptDialogShown;
            boolean bool2 = isFirstBoot();
            if ((bool2) || (!bool1)) {}
          }
        }
      }
      else
      {
        try
        {
          ActivityManagerNative.getDefault().showBootMessage(this.mContext.getResources().getString(17040323), true);
          localIMountService.runMaintenance();
          return;
          localObject = finally;
          throw ((Throwable)localObject);
          Slog.e("PackageManager", "Mount service unavailable!");
          return;
        }
        catch (RemoteException localRemoteException2)
        {
          for (;;) {}
        }
      }
      return;
    }
    catch (RemoteException localRemoteException1) {}
  }
  
  int permissionInfoFootprint(PermissionInfo paramPermissionInfo)
  {
    int j = paramPermissionInfo.name.length();
    int i = j;
    if (paramPermissionInfo.nonLocalizedLabel != null) {
      i = j + paramPermissionInfo.nonLocalizedLabel.length();
    }
    j = i;
    if (paramPermissionInfo.nonLocalizedDescription != null) {
      j = i + paramPermissionInfo.nonLocalizedDescription.length();
    }
    return j;
  }
  
  void prepareUserData(int paramInt1, int paramInt2, int paramInt3)
  {
    synchronized (this.mInstallLock)
    {
      Iterator localIterator = ((StorageManager)this.mContext.getSystemService(StorageManager.class)).getWritablePrivateVolumes().iterator();
      if (localIterator.hasNext()) {
        prepareUserDataLI(((VolumeInfo)localIterator.next()).getFsUuid(), paramInt1, paramInt2, paramInt3, true);
      }
    }
  }
  
  public ParceledListSlice<ProviderInfo> queryContentProviders(String paramString, int paramInt1, int paramInt2)
  {
    if (paramString != null) {}
    for (int i = UserHandle.getUserId(paramInt1); !sUserManager.exists(i); i = UserHandle.getCallingUserId()) {
      return ParceledListSlice.emptyList();
    }
    paramInt2 = updateFlagsForComponent(paramInt2, i, paramString);
    synchronized (this.mPackages)
    {
      Iterator localIterator = ProviderIntentResolver.-get0(this.mProviders).values().iterator();
      localObject1 = null;
      try
      {
        if (!localIterator.hasNext()) {
          break label246;
        }
        localObject3 = (PackageParser.Provider)localIterator.next();
        localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(((PackageParser.Provider)localObject3).owner.packageName);
        if ((localPackageSetting == null) || (((PackageParser.Provider)localObject3).info.authority == null) || ((paramString != null) && ((!((PackageParser.Provider)localObject3).info.processName.equals(paramString)) || (!UserHandle.isSameApp(((PackageParser.Provider)localObject3).info.applicationInfo.uid, paramInt1))))) {
          break label243;
        }
        if (!this.mSettings.isEnabledAndMatchLPr(((PackageParser.Provider)localObject3).info, paramInt2, i)) {
          break label293;
        }
        if (localObject1 != null) {
          break label286;
        }
        localObject2 = new ArrayList(3);
      }
      finally
      {
        for (;;)
        {
          Object localObject3;
          PackageSetting localPackageSetting;
          continue;
          Object localObject2 = localObject1;
        }
      }
      localObject3 = PackageParser.generateProviderInfo((PackageParser.Provider)localObject3, paramInt2, localPackageSetting.readUserState(i), i);
      localObject1 = localObject2;
      if (localObject3 != null)
      {
        ((ArrayList)localObject2).add(localObject3);
        localObject1 = localObject2;
      }
      label243:
      for (;;)
      {
        break;
      }
      label246:
      if (localObject1 != null)
      {
        Collections.sort((List)localObject1, mProviderInitOrderSorter);
        return new ParceledListSlice((List)localObject1);
      }
    }
    return ParceledListSlice.emptyList();
  }
  
  public ParceledListSlice<InstrumentationInfo> queryInstrumentation(String paramString, int paramInt)
  {
    return new ParceledListSlice(queryInstrumentationInternal(paramString, paramInt));
  }
  
  public ParceledListSlice<ResolveInfo> queryIntentActivities(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    try
    {
      Trace.traceBegin(262144L, "queryIntentActivities");
      paramIntent = new ParceledListSlice(queryIntentActivitiesInternal(paramIntent, paramString, paramInt1, paramInt2));
      return paramIntent;
    }
    finally
    {
      Trace.traceEnd(262144L);
    }
  }
  
  public ParceledListSlice<ResolveInfo> queryIntentActivityOptions(ComponentName paramComponentName, Intent[] paramArrayOfIntent, String[] paramArrayOfString, Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    return new ParceledListSlice(queryIntentActivityOptionsInternal(paramComponentName, paramArrayOfIntent, paramArrayOfString, paramIntent, paramString, paramInt1, paramInt2));
  }
  
  public ParceledListSlice<ResolveInfo> queryIntentContentProviders(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    return new ParceledListSlice(queryIntentContentProvidersInternal(paramIntent, paramString, paramInt1, paramInt2));
  }
  
  public ParceledListSlice<ResolveInfo> queryIntentReceivers(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    return new ParceledListSlice(queryIntentReceiversInternal(paramIntent, paramString, paramInt1, paramInt2));
  }
  
  public ParceledListSlice<ResolveInfo> queryIntentServices(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    return new ParceledListSlice(queryIntentServicesInternal(paramIntent, paramString, paramInt1, paramInt2));
  }
  
  public ParceledListSlice<PermissionInfo> queryPermissionsByGroup(String paramString, int paramInt)
  {
    ArrayMap localArrayMap = this.mPackages;
    if (paramString != null) {}
    ArrayList localArrayList;
    for (;;)
    {
      BasePermission localBasePermission;
      try
      {
        if (this.mPermissionGroups.containsKey(paramString))
        {
          localArrayList = new ArrayList(10);
          Iterator localIterator = this.mSettings.mPermissions.values().iterator();
          if (!localIterator.hasNext()) {
            break;
          }
          localBasePermission = (BasePermission)localIterator.next();
          if (paramString != null) {
            break label122;
          }
          if ((localBasePermission.perm != null) && (localBasePermission.perm.info.group != null)) {
            continue;
          }
          localArrayList.add(generatePermissionInfo(localBasePermission, paramInt));
          continue;
        }
      }
      finally {}
      return null;
      label122:
      if ((localBasePermission.perm != null) && (paramString.equals(localBasePermission.perm.info.group))) {
        localArrayList.add(PackageParser.generatePermissionInfo(localBasePermission.perm, paramInt));
      }
    }
    paramString = new ParceledListSlice(localArrayList);
    return paramString;
  }
  
  @Deprecated
  public void querySyncProviders(List<String> paramList, List<ProviderInfo> paramList1)
  {
    synchronized (this.mPackages)
    {
      Iterator localIterator = this.mProvidersByAuthority.entrySet().iterator();
      int i = UserHandle.getCallingUserId();
      while (localIterator.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)localIterator.next();
        Object localObject = (PackageParser.Provider)localEntry.getValue();
        PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(((PackageParser.Provider)localObject).owner.packageName);
        if ((localPackageSetting != null) && (((PackageParser.Provider)localObject).syncable) && ((!this.mSafeMode) || ((((PackageParser.Provider)localObject).info.applicationInfo.flags & 0x1) != 0)))
        {
          localObject = PackageParser.generateProviderInfo((PackageParser.Provider)localObject, 0, localPackageSetting.readUserState(i), i);
          if (localObject != null)
          {
            paramList.add((String)localEntry.getKey());
            paramList1.add(localObject);
          }
        }
      }
    }
  }
  
  void reconcileAppsData(int paramInt1, int paramInt2)
  {
    Iterator localIterator = ((StorageManager)this.mContext.getSystemService(StorageManager.class)).getWritablePrivateVolumes().iterator();
    while (localIterator.hasNext())
    {
      String str = ((VolumeInfo)localIterator.next()).getFsUuid();
      synchronized (this.mInstallLock)
      {
        reconcileAppsDataLI(str, paramInt1, paramInt2);
      }
    }
  }
  
  public void registerMoveCallback(IPackageMoveObserver paramIPackageMoveObserver)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);
    this.mMoveCallbacks.register(paramIPackageMoveObserver);
  }
  
  void removeCodePathLI(File paramFile)
  {
    if (paramFile.isDirectory()) {
      try
      {
        this.mInstaller.rmPackageDir(paramFile.getAbsolutePath());
        return;
      }
      catch (InstallerConnection.InstallerException paramFile)
      {
        Slog.w("PackageManager", "Failed to remove code path", paramFile);
        return;
      }
    }
    paramFile.delete();
  }
  
  void removeInstalledPackageLI(PackageParser.Package paramPackage, boolean paramBoolean)
  {
    if ((DEBUG_INSTALL) && (paramBoolean)) {
      Log.d("PackageManager", "Removing package " + paramPackage.applicationInfo.packageName);
    }
    for (;;)
    {
      synchronized (this.mPackages)
      {
        this.mPackages.remove(paramPackage.applicationInfo.packageName);
        cleanPackageDataStructuresLILPw(paramPackage, paramBoolean);
        int i;
        if (paramPackage.childPackages != null)
        {
          i = paramPackage.childPackages.size();
          break label158;
          if (j < i)
          {
            PackageParser.Package localPackage = (PackageParser.Package)paramPackage.childPackages.get(j);
            this.mPackages.remove(localPackage.applicationInfo.packageName);
            cleanPackageDataStructuresLILPw(localPackage, paramBoolean);
            j += 1;
            continue;
          }
        }
        else
        {
          i = 0;
          break label158;
        }
        return;
      }
      label158:
      int j = 0;
    }
  }
  
  public void removeOnPermissionsChangeListener(IOnPermissionsChangeListener paramIOnPermissionsChangeListener)
  {
    synchronized (this.mPackages)
    {
      this.mOnPermissionChangeListeners.removeListenerLocked(paramIOnPermissionsChangeListener);
      return;
    }
  }
  
  void removePackageLI(PackageSetting paramPackageSetting, boolean paramBoolean)
  {
    if ((DEBUG_INSTALL) && (paramBoolean)) {
      Log.d("PackageManager", "Removing package " + paramPackageSetting.name);
    }
    synchronized (this.mPackages)
    {
      this.mPackages.remove(paramPackageSetting.name);
      paramPackageSetting = paramPackageSetting.pkg;
      if (paramPackageSetting != null) {
        cleanPackageDataStructuresLILPw(paramPackageSetting, paramBoolean);
      }
      return;
    }
  }
  
  public void removePermission(String paramString)
  {
    synchronized (this.mPackages)
    {
      checkPermissionTreeLP(paramString);
      BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(paramString);
      if (localBasePermission == null) {
        break label92;
      }
      if (localBasePermission.type != 2) {
        throw new SecurityException("Not allowed to modify non-dynamic permission " + paramString);
      }
    }
    this.mSettings.mPermissions.remove(paramString);
    this.mSettings.writeLPr();
    label92:
  }
  
  public void replacePreferredActivity(IntentFilter paramIntentFilter, int paramInt1, ComponentName[] paramArrayOfComponentName, ComponentName paramComponentName, int paramInt2)
  {
    if (paramIntentFilter.countActions() != 1) {
      throw new IllegalArgumentException("replacePreferredActivity expects filter to have only 1 action.");
    }
    if ((paramIntentFilter.countDataAuthorities() != 0) || (paramIntentFilter.countDataPaths() != 0)) {}
    while ((paramIntentFilter.countDataSchemes() > 1) || (paramIntentFilter.countDataTypes() != 0)) {
      throw new IllegalArgumentException("replacePreferredActivity expects filter to have no data authorities, paths, or types; and at most one scheme.");
    }
    int i = Binder.getCallingUid();
    enforceCrossUserPermission(i, paramInt2, true, false, "replace preferred activity");
    PreferredIntentResolver localPreferredIntentResolver;
    ArrayList localArrayList;
    PreferredActivity localPreferredActivity;
    synchronized (this.mPackages)
    {
      if (this.mContext.checkCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS") != 0)
      {
        if (getUidTargetSdkVersionLockedLPr(i) < 8)
        {
          Slog.w("PackageManager", "Ignoring replacePreferredActivity() from uid " + Binder.getCallingUid());
          return;
        }
        this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
      }
      localPreferredIntentResolver = (PreferredIntentResolver)this.mSettings.mPreferredActivities.get(paramInt2);
      if (localPreferredIntentResolver == null) {
        break label770;
      }
      localArrayList = localPreferredIntentResolver.findFilters(paramIntentFilter);
      if ((localArrayList != null) && (localArrayList.size() == 1))
      {
        localPreferredActivity = (PreferredActivity)localArrayList.get(0);
        if (DEBUG_PREFERRED)
        {
          Slog.i("PackageManager", "Checking replace of preferred:");
          paramIntentFilter.dump(new LogPrinter(4, "PackageManager"), "  ");
          if (!localPreferredActivity.mPref.mAlways) {
            Slog.i("PackageManager", "  -- CUR; not mAlways!");
          }
        }
        else
        {
          if ((!localPreferredActivity.mPref.mAlways) || (!localPreferredActivity.mPref.mComponent.equals(paramComponentName)) || (localPreferredActivity.mPref.mMatch != (0xFFF0000 & paramInt1)) || (!localPreferredActivity.mPref.sameSet(paramArrayOfComponentName))) {
            break label604;
          }
          if (DEBUG_PREFERRED)
          {
            Slog.i("PackageManager", "Replacing with same preferred activity " + localPreferredActivity.mPref.mShortComponent + " for user " + paramInt2 + ":");
            paramIntentFilter.dump(new LogPrinter(4, "PackageManager"), "  ");
          }
          return;
        }
        Slog.i("PackageManager", "  -- CUR: mMatch=" + localPreferredActivity.mPref.mMatch);
        Slog.i("PackageManager", "  -- CUR: mSet=" + Arrays.toString(localPreferredActivity.mPref.mSetComponents));
        Slog.i("PackageManager", "  -- CUR: mComponent=" + localPreferredActivity.mPref.mShortComponent);
        Slog.i("PackageManager", "  -- NEW: mMatch=" + (0xFFF0000 & paramInt1));
        Slog.i("PackageManager", "  -- CUR: mSet=" + Arrays.toString(paramArrayOfComponentName));
        Slog.i("PackageManager", "  -- CUR: mComponent=" + paramComponentName.flattenToShortString());
      }
    }
    label604:
    if (localArrayList != null)
    {
      if (!DEBUG_PREFERRED) {
        break label789;
      }
      Slog.i("PackageManager", localArrayList.size() + " existing preferred matches for:");
      paramIntentFilter.dump(new LogPrinter(4, "PackageManager"), "  ");
    }
    for (;;)
    {
      if (i < localArrayList.size())
      {
        localPreferredActivity = (PreferredActivity)localArrayList.get(i);
        if (DEBUG_PREFERRED)
        {
          Slog.i("PackageManager", "Removing existing preferred activity " + localPreferredActivity.mPref.mComponent + ":");
          localPreferredActivity.dump(new LogPrinter(4, "PackageManager"), "  ");
        }
        localPreferredIntentResolver.removeFilter(localPreferredActivity);
        i += 1;
      }
      else
      {
        label770:
        addPreferredActivityInternal(paramIntentFilter, paramInt1, paramArrayOfComponentName, paramComponentName, true, paramInt2, "Replacing preferred");
        return;
        label789:
        i = 0;
      }
    }
  }
  
  public void resetApplicationPermissions(int paramInt)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
    synchronized (this.mPackages)
    {
      long l = Binder.clearCallingIdentity();
      try
      {
        Slog.i("PackageManager", "resetApplicationPermissions");
        resetUserChangesToRuntimePermissionsAndFlagsLPw(paramInt);
        Binder.restoreCallingIdentity(l);
        return;
      }
      finally
      {
        localObject1 = finally;
        Binder.restoreCallingIdentity(l);
        throw ((Throwable)localObject1);
      }
    }
  }
  
  /* Error */
  public void resetApplicationPreferences(int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   4: ldc_w 2318
    //   7: aconst_null
    //   8: invokevirtual 2329	android/content/Context:enforceCallingOrSelfPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   11: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   14: lstore_2
    //   15: aload_0
    //   16: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   19: astore 4
    //   21: aload 4
    //   23: monitorenter
    //   24: aload_0
    //   25: aconst_null
    //   26: iload_1
    //   27: invokevirtual 2952	com/android/server/pm/PackageManagerService:clearPackagePreferredActivitiesLPw	(Ljava/lang/String;I)Z
    //   30: pop
    //   31: aload_0
    //   32: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   35: aload_0
    //   36: iload_1
    //   37: invokevirtual 2040	com/android/server/pm/Settings:applyDefaultPreferredAppsLPw	(Lcom/android/server/pm/PackageManagerService;I)V
    //   40: aload_0
    //   41: iload_1
    //   42: invokespecial 2043	com/android/server/pm/PackageManagerService:applyFactoryDefaultBrowserLPw	(I)V
    //   45: aload_0
    //   46: iload_1
    //   47: invokespecial 8572	com/android/server/pm/PackageManagerService:clearIntentFilterVerificationsLPw	(I)V
    //   50: aload_0
    //   51: iload_1
    //   52: invokespecial 2046	com/android/server/pm/PackageManagerService:primeDomainVerificationsLPw	(I)V
    //   55: iconst_1
    //   56: newarray <illegal type>
    //   58: dup
    //   59: iconst_0
    //   60: bipush 12
    //   62: iastore
    //   63: invokestatic 1112	android/util/OpFeatures:isSupport	([I)Z
    //   66: ifne +8 -> 74
    //   69: aload_0
    //   70: iload_1
    //   71: invokespecial 8569	com/android/server/pm/PackageManagerService:resetUserChangesToRuntimePermissionsAndFlagsLPw	(I)V
    //   74: aload_0
    //   75: iload_1
    //   76: invokevirtual 2366	com/android/server/pm/PackageManagerService:scheduleWritePackageRestrictionsLocked	(I)V
    //   79: aload 4
    //   81: monitorexit
    //   82: aload_0
    //   83: iload_1
    //   84: invokespecial 8574	com/android/server/pm/PackageManagerService:resetNetworkPolicies	(I)V
    //   87: lload_2
    //   88: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   91: return
    //   92: astore 5
    //   94: aload 4
    //   96: monitorexit
    //   97: aload 5
    //   99: athrow
    //   100: astore 4
    //   102: lload_2
    //   103: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   106: aload 4
    //   108: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	109	0	this	PackageManagerService
    //   0	109	1	paramInt	int
    //   14	89	2	l	long
    //   100	7	4	localObject1	Object
    //   92	6	5	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   24	74	92	finally
    //   74	79	92	finally
    //   15	24	100	finally
    //   79	87	100	finally
    //   94	100	100	finally
  }
  
  public void resetRuntimePermissions()
  {
    int i = 0;
    this.mContext.enforceCallingOrSelfPermission("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");
    int j = Binder.getCallingUid();
    if ((j != 1000) && (j != 0)) {
      this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "resetRuntimePermissions");
    }
    for (;;)
    {
      synchronized (this.mPackages)
      {
        updatePermissionsLPw(null, null, 1);
        int[] arrayOfInt = UserManagerService.getInstance().getUserIds();
        int k = arrayOfInt.length;
        if (i >= k) {
          break label158;
        }
        int m = arrayOfInt[i];
        int n = this.mPackages.size();
        j = 0;
        if (j < n)
        {
          PackageParser.Package localPackage = (PackageParser.Package)this.mPackages.valueAt(j);
          if (!(localPackage.mExtras instanceof PackageSetting)) {
            break label162;
          }
          resetUserChangesToRuntimePermissionsAndFlagsLPw((PackageSetting)localPackage.mExtras, m);
        }
      }
      i += 1;
      continue;
      label158:
      return;
      label162:
      j += 1;
    }
  }
  
  public ProviderInfo resolveContentProvider(String paramString, int paramInt1, int paramInt2)
  {
    Object localObject2 = null;
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramInt1 = updateFlagsForComponent(paramInt1, paramInt2, paramString);
    synchronized (this.mPackages)
    {
      PackageParser.Provider localProvider = (PackageParser.Provider)this.mProvidersByAuthority.get(paramString);
      if (localProvider != null)
      {
        paramString = (PackageSetting)this.mSettings.mPackages.get(localProvider.owner.packageName);
        Object localObject1 = localObject2;
        if (paramString != null)
        {
          localObject1 = localObject2;
          if (this.mSettings.isEnabledAndMatchLPr(localProvider.info, paramInt1, paramInt2)) {
            localObject1 = PackageParser.generateProviderInfo(localProvider, paramInt1, paramString.readUserState(paramInt2), paramInt2);
          }
        }
        return (ProviderInfo)localObject1;
      }
      paramString = null;
    }
  }
  
  public ResolveInfo resolveIntent(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    try
    {
      Trace.traceBegin(262144L, "resolveIntent");
      boolean bool = sUserManager.exists(paramInt2);
      if (!bool) {
        return null;
      }
      paramInt1 = updateFlagsForResolve(paramInt1, paramInt2, paramIntent);
      enforceCrossUserPermission(Binder.getCallingUid(), paramInt2, false, false, "resolve intent");
      Trace.traceBegin(262144L, "queryIntentActivities");
      List localList = queryIntentActivitiesInternal(paramIntent, paramString, paramInt1, paramInt2);
      Trace.traceEnd(262144L);
      paramIntent = chooseBestActivity(paramIntent, paramString, paramInt1, localList, paramInt2);
      return paramIntent;
    }
    finally
    {
      Trace.traceEnd(262144L);
    }
  }
  
  public ResolveInfo resolveService(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
  {
    if (!sUserManager.exists(paramInt2)) {
      return null;
    }
    paramIntent = queryIntentServicesInternal(paramIntent, paramString, updateFlagsForResolve(paramInt1, paramInt2, paramIntent), paramInt2);
    if ((paramIntent != null) && (paramIntent.size() >= 1)) {
      return (ResolveInfo)paramIntent.get(0);
    }
    return null;
  }
  
  public void restoreDefaultApps(byte[] paramArrayOfByte, int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call restoreDefaultApps()");
    }
    try
    {
      XmlPullParser localXmlPullParser = Xml.newPullParser();
      localXmlPullParser.setInput(new ByteArrayInputStream(paramArrayOfByte), StandardCharsets.UTF_8.name());
      restoreFromXml(localXmlPullParser, paramInt, "da", new BlobXmlRestorer()
      {
        public void apply(XmlPullParser paramAnonymousXmlPullParser, int paramAnonymousInt)
          throws XmlPullParserException, IOException
        {
          synchronized (PackageManagerService.this.mPackages)
          {
            PackageManagerService.this.mSettings.readDefaultAppsLPw(paramAnonymousXmlPullParser, paramAnonymousInt);
            return;
          }
        }
      });
      return;
    }
    catch (Exception paramArrayOfByte)
    {
      while (!DEBUG_BACKUP) {}
      Slog.e("PackageManager", "Exception restoring default apps: " + paramArrayOfByte.getMessage());
    }
  }
  
  public void restoreIntentFilterVerification(byte[] paramArrayOfByte, int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call restorePreferredActivities()");
    }
    try
    {
      XmlPullParser localXmlPullParser = Xml.newPullParser();
      localXmlPullParser.setInput(new ByteArrayInputStream(paramArrayOfByte), StandardCharsets.UTF_8.name());
      restoreFromXml(localXmlPullParser, paramInt, "iv", new BlobXmlRestorer()
      {
        public void apply(XmlPullParser paramAnonymousXmlPullParser, int paramAnonymousInt)
          throws XmlPullParserException, IOException
        {
          synchronized (PackageManagerService.this.mPackages)
          {
            PackageManagerService.this.mSettings.readAllDomainVerificationsLPr(paramAnonymousXmlPullParser, paramAnonymousInt);
            PackageManagerService.this.mSettings.writeLPr();
            return;
          }
        }
      });
      return;
    }
    catch (Exception paramArrayOfByte)
    {
      while (!DEBUG_BACKUP) {}
      Slog.e("PackageManager", "Exception restoring preferred activities: " + paramArrayOfByte.getMessage());
    }
  }
  
  public void restorePermissionGrants(byte[] paramArrayOfByte, int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call restorePermissionGrants()");
    }
    try
    {
      XmlPullParser localXmlPullParser = Xml.newPullParser();
      localXmlPullParser.setInput(new ByteArrayInputStream(paramArrayOfByte), StandardCharsets.UTF_8.name());
      restoreFromXml(localXmlPullParser, paramInt, "perm-grant-backup", new BlobXmlRestorer()
      {
        public void apply(XmlPullParser paramAnonymousXmlPullParser, int paramAnonymousInt)
          throws XmlPullParserException, IOException
        {
          synchronized (PackageManagerService.this.mPackages)
          {
            PackageManagerService.-wrap35(PackageManagerService.this, paramAnonymousXmlPullParser, paramAnonymousInt);
            return;
          }
        }
      });
      return;
    }
    catch (Exception paramArrayOfByte)
    {
      while (!DEBUG_BACKUP) {}
      Slog.e("PackageManager", "Exception restoring preferred activities: " + paramArrayOfByte.getMessage());
    }
  }
  
  public void restorePreferredActivities(byte[] paramArrayOfByte, int paramInt)
  {
    if (Binder.getCallingUid() != 1000) {
      throw new SecurityException("Only the system may call restorePreferredActivities()");
    }
    try
    {
      XmlPullParser localXmlPullParser = Xml.newPullParser();
      localXmlPullParser.setInput(new ByteArrayInputStream(paramArrayOfByte), StandardCharsets.UTF_8.name());
      restoreFromXml(localXmlPullParser, paramInt, "pa", new BlobXmlRestorer()
      {
        public void apply(XmlPullParser paramAnonymousXmlPullParser, int paramAnonymousInt)
          throws XmlPullParserException, IOException
        {
          synchronized (PackageManagerService.this.mPackages)
          {
            PackageManagerService.this.mSettings.readPreferredActivitiesLPw(paramAnonymousXmlPullParser, paramAnonymousInt);
            return;
          }
        }
      });
      return;
    }
    catch (Exception paramArrayOfByte)
    {
      while (!DEBUG_BACKUP) {}
      Slog.e("PackageManager", "Exception restoring preferred activities: " + paramArrayOfByte.getMessage());
    }
  }
  
  public void revokeRuntimePermission(String paramString1, String paramString2, int paramInt)
  {
    if (!sUserManager.exists(paramInt))
    {
      Log.e("PackageManager", "No such user:" + paramInt);
      return;
    }
    this.mContext.enforceCallingOrSelfPermission("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt, true, true, "revokeRuntimePermission");
    PackageParser.Package localPackage;
    synchronized (this.mPackages)
    {
      localPackage = (PackageParser.Package)this.mPackages.get(paramString1);
      if (localPackage == null) {
        throw new IllegalArgumentException("Unknown package: " + paramString1);
      }
    }
    BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(paramString2);
    if (localBasePermission == null) {
      throw new IllegalArgumentException("Unknown permission: " + paramString2);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(localPackage, localBasePermission);
    if ((Build.PERMISSIONS_REVIEW_REQUIRED) && (localPackage.applicationInfo.targetSdkVersion < 23))
    {
      boolean bool = localBasePermission.isRuntime();
      if (bool) {
        return;
      }
    }
    Object localObject = (SettingBase)localPackage.mExtras;
    if (localObject == null) {
      throw new IllegalArgumentException("Unknown package: " + paramString1);
    }
    localObject = ((SettingBase)localObject).getPermissionsState();
    if ((((PermissionsState)localObject).getPermissionFlags(paramString2, paramInt) & 0x10) != 0) {
      throw new SecurityException("Cannot revoke system fixed permission " + paramString2 + " for package " + paramString1);
    }
    if (localBasePermission.isDevelopment())
    {
      if (((PermissionsState)localObject).revokeInstallPermission(localBasePermission) != -1) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    int i = ((PermissionsState)localObject).revokeRuntimePermission(localBasePermission, paramInt);
    if (i == -1) {
      return;
    }
    this.mOnPermissionChangeListeners.onPermissionsChanged(localPackage.applicationInfo.uid);
    this.mSettings.writeRuntimePermissionsForUserLPr(paramInt, true);
    i = UserHandle.getAppId(localPackage.applicationInfo.uid);
    killUid(i, paramInt, "permissions revoked");
  }
  
  public void scanAvailableAsecs()
  {
    updateExternalMediaStatusInner(true, false, false);
  }
  
  void schedulePackageCleaning(String paramString, int paramInt, boolean paramBoolean)
  {
    PackageHandler localPackageHandler = this.mHandler;
    if (paramBoolean) {}
    for (int i = 1;; i = 0)
    {
      paramString = localPackageHandler.obtainMessage(7, paramInt, i, paramString);
      if (!this.mSystemReady) {
        break;
      }
      paramString.sendToTarget();
      return;
    }
    if (this.mPostSystemReadyMessages == null) {
      this.mPostSystemReadyMessages = new ArrayList();
    }
    this.mPostSystemReadyMessages.add(paramString);
  }
  
  void scheduleWritePackageListLocked(int paramInt)
  {
    if (!this.mHandler.hasMessages(19))
    {
      Message localMessage = this.mHandler.obtainMessage(19);
      localMessage.arg1 = paramInt;
      this.mHandler.sendMessageDelayed(localMessage, 10000L);
    }
  }
  
  void scheduleWritePackageRestrictionsLocked(int paramInt)
  {
    int i = 0;
    int[] arrayOfInt;
    int j;
    if (paramInt == -1)
    {
      arrayOfInt = sUserManager.getUserIds();
      j = arrayOfInt.length;
      paramInt = i;
    }
    for (;;)
    {
      if (paramInt >= j) {
        return;
      }
      i = arrayOfInt[paramInt];
      if (!sUserManager.exists(i))
      {
        return;
        arrayOfInt = new int[1];
        arrayOfInt[0] = paramInt;
        break;
      }
      this.mDirtyUsers.add(Integer.valueOf(i));
      if (!this.mHandler.hasMessages(14)) {
        this.mHandler.sendEmptyMessageDelayed(14, 10000L);
      }
      paramInt += 1;
    }
  }
  
  void scheduleWritePackageRestrictionsLocked(UserHandle paramUserHandle)
  {
    if (paramUserHandle == null) {}
    for (int i = -1;; i = paramUserHandle.getIdentifier())
    {
      scheduleWritePackageRestrictionsLocked(i);
      return;
    }
  }
  
  void scheduleWriteSettingsLocked()
  {
    if (!this.mHandler.hasMessages(13)) {
      this.mHandler.sendEmptyMessageDelayed(13, 10000L);
    }
  }
  
  final void sendPackageBroadcast(final String paramString1, final String paramString2, final Bundle paramBundle, final int paramInt, final String paramString3, final IIntentReceiver paramIIntentReceiver, final int[] paramArrayOfInt)
  {
    this.mHandler.post(new Runnable()
    {
      public void run()
      {
        try
        {
          IActivityManager localIActivityManager = ActivityManagerNative.getDefault();
          if (localIActivityManager == null) {
            return;
          }
          int[] arrayOfInt;
          int i;
          label33:
          int k;
          Object localObject2;
          Object localObject1;
          if (paramArrayOfInt == null)
          {
            arrayOfInt = localIActivityManager.getRunningUserIds();
            int j = arrayOfInt.length;
            i = 0;
            if (i >= j) {
              return;
            }
            k = arrayOfInt[i];
            localObject2 = paramString1;
            if (paramString2 == null) {
              break label314;
            }
            localObject1 = Uri.fromParts("package", paramString2, null);
            label68:
            localObject1 = new Intent((String)localObject2, (Uri)localObject1);
            if (paramBundle != null) {
              ((Intent)localObject1).putExtras(paramBundle);
            }
            if (paramString3 != null) {
              ((Intent)localObject1).setPackage(paramString3);
            }
            int m = ((Intent)localObject1).getIntExtra("android.intent.extra.UID", -1);
            if ((m > 0) && (UserHandle.getUserId(m) != k)) {
              ((Intent)localObject1).putExtra("android.intent.extra.UID", UserHandle.getUid(k, UserHandle.getAppId(m)));
            }
            ((Intent)localObject1).putExtra("android.intent.extra.user_handle", k);
            ((Intent)localObject1).addFlags(paramInt | 0x4000000);
            if (PackageManagerService.DEBUG_BROADCASTS)
            {
              localObject2 = new RuntimeException("here");
              ((RuntimeException)localObject2).fillInStackTrace();
              Slog.d("PackageManager", "Sending to user " + k + ": " + ((Intent)localObject1).toShortString(false, true, false, false) + " " + ((Intent)localObject1).getExtras(), (Throwable)localObject2);
            }
            localObject2 = paramIIntentReceiver;
            if (paramIIntentReceiver == null) {
              break label320;
            }
          }
          label314:
          label320:
          for (boolean bool = true;; bool = false)
          {
            localIActivityManager.broadcastIntent(null, (Intent)localObject1, null, (IIntentReceiver)localObject2, 0, null, null, null, -1, null, bool, false, k);
            i += 1;
            break label33;
            arrayOfInt = paramArrayOfInt;
            break;
            localObject1 = null;
            break label68;
          }
          return;
        }
        catch (RemoteException localRemoteException) {}
      }
    });
  }
  
  public void setApplicationEnabledSetting(String paramString1, int paramInt1, int paramInt2, int paramInt3, String paramString2)
  {
    if (!sUserManager.exists(paramInt3)) {
      return;
    }
    String str = paramString2;
    if (paramString2 == null) {
      str = Integer.toString(Binder.getCallingUid());
    }
    setEnabledSetting(paramString1, null, paramInt1, paramInt2, paramInt3, str);
  }
  
  public boolean setApplicationHiddenSettingAsUser(String paramString, boolean paramBoolean, int paramInt)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.MANAGE_USERS", null);
    int i = Binder.getCallingUid();
    enforceCrossUserPermission(i, paramInt, true, true, "setApplicationHiddenSetting for user " + paramInt);
    if ((paramBoolean) && (isPackageDeviceAdmin(paramString, paramInt)))
    {
      Slog.w("PackageManager", "Not hiding package " + paramString + ": has active device admin");
      return false;
    }
    long l = Binder.clearCallingIdentity();
    int k = 0;
    int m = 0;
    PackageSetting localPackageSetting;
    try
    {
      int j;
      synchronized (this.mPackages)
      {
        localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
        if (localPackageSetting == null) {
          return false;
        }
        if ("android".equals(paramString))
        {
          Slog.w("PackageManager", "Cannot hide package: android");
          return false;
        }
        if ((!paramBoolean) || (UserHandle.isSameApp(i, localPackageSetting.appId))) {}
        while (!this.mProtectedPackages.isPackageStateProtected(paramInt, paramString))
        {
          i = k;
          j = m;
          if (localPackageSetting.getHidden(paramInt) != paramBoolean)
          {
            localPackageSetting.setHidden(paramBoolean, paramInt);
            this.mSettings.writePackageRestrictionsLPr(paramInt);
            if (!paramBoolean) {
              break;
            }
            j = 1;
            i = k;
          }
          if (i == 0) {
            break label331;
          }
          sendPackageAddedForUser(paramString, localPackageSetting, paramInt);
          return true;
        }
        Slog.w("PackageManager", "Not hiding protected package: " + paramString);
        return false;
        i = 1;
        j = m;
      }
      if (j == 0) {
        break label368;
      }
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    label331:
    killApplication(paramString, UserHandle.getUid(paramInt, localPackageSetting.appId), "hiding pkg");
    sendApplicationHiddenForUser(paramString, localPackageSetting, paramInt);
    Binder.restoreCallingIdentity(l);
    return true;
    label368:
    Binder.restoreCallingIdentity(l);
    return false;
  }
  
  public boolean setBlockUninstallForUser(String paramString, boolean paramBoolean, int paramInt)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.DELETE_PACKAGES", null);
    synchronized (this.mPackages)
    {
      PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
      if (localPackageSetting == null)
      {
        Log.i("PackageManager", "Package doesn't exist in set block uninstall " + paramString);
        return false;
      }
      if (!localPackageSetting.getInstalled(paramInt))
      {
        Log.i("PackageManager", "Package not installed in set block uninstall " + paramString);
        return false;
      }
      localPackageSetting.setBlockUninstall(paramBoolean, paramInt);
      this.mSettings.writePackageRestrictionsLPr(paramInt);
      return true;
    }
  }
  
  public void setComponentEnabledSetting(ComponentName paramComponentName, int paramInt1, int paramInt2, int paramInt3)
  {
    if (!sUserManager.exists(paramInt3)) {
      return;
    }
    setEnabledSetting(paramComponentName.getPackageName(), paramComponentName.getClassName(), paramInt1, paramInt2, paramInt3, null);
  }
  
  public boolean setDefaultBrowserPackageName(String paramString, int paramInt)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
    synchronized (this.mPackages)
    {
      boolean bool2 = this.mSettings.setDefaultBrowserPackageNameLPw(paramString, paramInt);
      boolean bool1 = bool2;
      if (paramString != null)
      {
        bool1 = bool2 | updateIntentVerificationStatus(paramString, 2, paramInt);
        this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultBrowserLPr(paramString, paramInt);
      }
      return bool1;
    }
  }
  
  public boolean setEphemeralApplicationCookie(String paramString, byte[] paramArrayOfByte, int paramInt)
  {
    return true;
  }
  
  public void setGMSEnabledSetting(UserHandle paramUserHandle, int paramInt)
  {
    if (paramUserHandle == null) {
      return;
    }
    int j = paramUserHandle.getIdentifier();
    Iterator localIterator = GMS_PKG_NAMES.iterator();
    String str;
    ArrayList localArrayList;
    if (localIterator.hasNext())
    {
      str = (String)localIterator.next();
      localArrayList = new ArrayList();
      localArrayList.add(str);
    }
    for (;;)
    {
      int i;
      synchronized (this.mPackages)
      {
        PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(str);
        if (localPackageSetting == null) {
          break;
        }
        int m;
        if (j == -1)
        {
          paramUserHandle = sUserManager.getUserIds();
          int k = paramUserHandle.length;
          i = 0;
          if (i >= k) {
            continue;
          }
          m = paramUserHandle[i];
          if (localPackageSetting.getEnabled(m) == paramInt) {
            break label197;
          }
        }
        else
        {
          paramUserHandle = new int[1];
          paramUserHandle[0] = j;
          continue;
        }
        localPackageSetting.setEnabled(paramInt, m, null);
        scheduleWritePackageRestrictionsLocked(m);
        sendPackageChangedBroadcast(str, false, localArrayList, UserHandle.getUid(m, localPackageSetting.appId));
      }
      return;
      label197:
      i += 1;
    }
  }
  
  public void setHomeActivity(ComponentName paramComponentName, int paramInt)
  {
    ArrayList localArrayList = new ArrayList();
    getHomeActivitiesAsUser(localArrayList, paramInt);
    int j = 0;
    int m = localArrayList.size();
    ComponentName[] arrayOfComponentName = new ComponentName[m];
    int i = 0;
    while (i < m)
    {
      Object localObject = ((ResolveInfo)localArrayList.get(i)).activityInfo;
      localObject = new ComponentName(((ActivityInfo)localObject).packageName, ((ActivityInfo)localObject).name);
      arrayOfComponentName[i] = localObject;
      int k = j;
      if (j == 0)
      {
        k = j;
        if (((ComponentName)localObject).equals(paramComponentName)) {
          k = 1;
        }
      }
      i += 1;
      j = k;
    }
    if (j == 0) {
      throw new IllegalArgumentException("Component " + paramComponentName + " cannot be home on user " + paramInt);
    }
    replacePreferredActivity(getHomeFilter(), 1048576, arrayOfComponentName, paramComponentName, paramInt);
  }
  
  public boolean setInstallLocation(int paramInt)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.WRITE_SECURE_SETTINGS", null);
    if (getInstallLocation() == paramInt) {
      return true;
    }
    if ((paramInt == 0) || (paramInt == 1)) {}
    while (paramInt == 2)
    {
      Settings.Global.putInt(this.mContext.getContentResolver(), "default_install_location", paramInt);
      return true;
    }
    return false;
  }
  
  public void setInstallerPackageName(String paramString1, String paramString2)
  {
    int i = Binder.getCallingUid();
    PackageSetting localPackageSetting;
    synchronized (this.mPackages)
    {
      localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString1);
      if (localPackageSetting == null) {
        throw new IllegalArgumentException("Unknown target package: " + paramString1);
      }
    }
    Object localObject;
    if (paramString2 != null)
    {
      localObject = (PackageSetting)this.mSettings.mPackages.get(paramString2);
      paramString1 = (String)localObject;
      if (localObject == null) {
        throw new IllegalArgumentException("Unknown installer package: " + paramString2);
      }
    }
    for (;;)
    {
      localObject = this.mSettings.getUserIdLPr(i);
      if (localObject != null)
      {
        if ((localObject instanceof SharedUserSetting)) {}
        for (localObject = ((SharedUserSetting)localObject).signatures.mSignatures;; localObject = ((PackageSetting)localObject).signatures.mSignatures)
        {
          if ((paramString1 == null) || (compareSignatures((Signature[])localObject, paramString1.signatures.mSignatures) == 0)) {
            break label298;
          }
          throw new SecurityException("Caller does not have same cert as new installer package " + paramString2);
          if (!(localObject instanceof PackageSetting)) {
            break;
          }
        }
        throw new SecurityException("Bad object " + localObject + " for uid " + i);
      }
      throw new SecurityException("Unknown calling UID: " + i);
      label298:
      if (localPackageSetting.installerPackageName != null)
      {
        paramString1 = (PackageSetting)this.mSettings.mPackages.get(localPackageSetting.installerPackageName);
        if ((paramString1 != null) && (compareSignatures((Signature[])localObject, paramString1.signatures.mSignatures) != 0)) {
          throw new SecurityException("Caller does not have same cert as old installer package " + localPackageSetting.installerPackageName);
        }
      }
      localPackageSetting.installerPackageName = paramString2;
      if (paramString2 != null) {
        this.mSettings.mInstallerPackages.add(paramString2);
      }
      scheduleWriteSettingsLocked();
      return;
      paramString1 = null;
    }
  }
  
  public void setLastChosenActivity(Intent paramIntent, String paramString, int paramInt1, IntentFilter paramIntentFilter, int paramInt2, ComponentName paramComponentName)
  {
    int i = UserHandle.getCallingUserId();
    if (DEBUG_PREFERRED)
    {
      Log.v("PackageManager", "setLastChosenActivity intent=" + paramIntent + " resolvedType=" + paramString + " flags=" + paramInt1 + " filter=" + paramIntentFilter + " match=" + paramInt2 + " activity=" + paramComponentName);
      paramIntentFilter.dump(new PrintStreamPrinter(System.out), "    ");
    }
    paramIntent.setComponent(null);
    findPreferredActivity(paramIntent, paramString, paramInt1, queryIntentActivitiesInternal(paramIntent, paramString, paramInt1, i), 0, false, true, false, i);
    addPreferredActivityInternal(paramIntentFilter, paramInt2, null, paramComponentName, false, i, "Setting last chosen");
  }
  
  public void setPackageStoppedState(String paramString, boolean paramBoolean, int paramInt)
  {
    if (!sUserManager.exists(paramInt)) {
      return;
    }
    int i = Binder.getCallingUid();
    boolean bool;
    if (this.mContext.checkCallingOrSelfPermission("android.permission.CHANGE_COMPONENT_ENABLED_STATE") == 0) {
      bool = true;
    }
    for (;;)
    {
      enforceCrossUserPermission(i, paramInt, true, true, "stop package");
      synchronized (this.mPackages)
      {
        if (this.mSettings.setPackageStoppedStateLPw(this, paramString, paramBoolean, bool, i, paramInt)) {
          scheduleWritePackageRestrictionsLocked(paramInt);
        }
        return;
        bool = false;
      }
    }
  }
  
  /* Error */
  public String[] setPackagesSuspendedAsUser(String[] paramArrayOfString, boolean paramBoolean, int paramInt)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   4: ldc_w 7915
    //   7: aconst_null
    //   8: invokevirtual 2329	android/content/Context:enforceCallingOrSelfPermission	(Ljava/lang/String;Ljava/lang/String;)V
    //   11: aload_0
    //   12: invokestatic 2303	android/os/Binder:getCallingUid	()I
    //   15: iload_3
    //   16: iconst_1
    //   17: iconst_1
    //   18: new 1320	java/lang/StringBuilder
    //   21: dup
    //   22: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   25: ldc_w 8738
    //   28: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   31: iload_3
    //   32: invokevirtual 1837	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   35: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   38: invokevirtual 2309	com/android/server/pm/PackageManagerService:enforceCrossUserPermission	(IIZZLjava/lang/String;)V
    //   41: aload_1
    //   42: invokestatic 2625	com/android/internal/util/ArrayUtils:isEmpty	([Ljava/lang/Object;)Z
    //   45: ifeq +5 -> 50
    //   48: aload_1
    //   49: areturn
    //   50: new 1139	java/util/ArrayList
    //   53: dup
    //   54: aload_1
    //   55: arraylength
    //   56: invokespecial 4571	java/util/ArrayList:<init>	(I)V
    //   59: astore 10
    //   61: new 1139	java/util/ArrayList
    //   64: dup
    //   65: aload_1
    //   66: arraylength
    //   67: invokespecial 4571	java/util/ArrayList:<init>	(I)V
    //   70: astore 11
    //   72: invokestatic 3095	android/os/Binder:clearCallingIdentity	()J
    //   75: lstore 7
    //   77: iconst_0
    //   78: istore 4
    //   80: iload 4
    //   82: aload_1
    //   83: arraylength
    //   84: if_icmpge +214 -> 298
    //   87: aload_1
    //   88: iload 4
    //   90: aaload
    //   91: astore 12
    //   93: iconst_0
    //   94: istore 5
    //   96: aload_0
    //   97: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   100: astore 9
    //   102: aload 9
    //   104: monitorenter
    //   105: aload_0
    //   106: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   109: getfield 1613	com/android/server/pm/Settings:mPackages	Landroid/util/ArrayMap;
    //   112: aload 12
    //   114: invokevirtual 1536	android/util/ArrayMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   117: checkcast 1615	com/android/server/pm/PackageSetting
    //   120: astore 13
    //   122: aload 13
    //   124: ifnonnull +59 -> 183
    //   127: ldc_w 391
    //   130: new 1320	java/lang/StringBuilder
    //   133: dup
    //   134: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   137: ldc_w 8740
    //   140: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   143: aload 12
    //   145: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   148: ldc_w 8742
    //   151: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   154: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   157: invokestatic 1252	android/util/Slog:w	(Ljava/lang/String;Ljava/lang/String;)I
    //   160: pop
    //   161: aload 11
    //   163: aload 12
    //   165: invokeinterface 1863 2 0
    //   170: pop
    //   171: aload 9
    //   173: monitorexit
    //   174: iload 4
    //   176: iconst_1
    //   177: iadd
    //   178: istore 4
    //   180: goto -100 -> 80
    //   183: aload 13
    //   185: getfield 2946	com/android/server/pm/PackageSetting:appId	I
    //   188: istore 6
    //   190: aload 13
    //   192: iload_3
    //   193: invokevirtual 8317	com/android/server/pm/PackageSetting:getSuspended	(I)Z
    //   196: iload_2
    //   197: if_icmpeq +65 -> 262
    //   200: aload_0
    //   201: aload 12
    //   203: iload_3
    //   204: invokespecial 8744	com/android/server/pm/PackageManagerService:canSuspendPackageForUserLocked	(Ljava/lang/String;I)Z
    //   207: ifne +27 -> 234
    //   210: aload 11
    //   212: aload 12
    //   214: invokeinterface 1863 2 0
    //   219: pop
    //   220: aload 9
    //   222: monitorexit
    //   223: goto -49 -> 174
    //   226: astore_1
    //   227: lload 7
    //   229: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   232: aload_1
    //   233: athrow
    //   234: aload 13
    //   236: iload_2
    //   237: iload_3
    //   238: invokevirtual 8747	com/android/server/pm/PackageSetting:setSuspended	(ZI)V
    //   241: aload_0
    //   242: getfield 1270	com/android/server/pm/PackageManagerService:mSettings	Lcom/android/server/pm/Settings;
    //   245: iload_3
    //   246: invokevirtual 7836	com/android/server/pm/Settings:writePackageRestrictionsLPr	(I)V
    //   249: iconst_1
    //   250: istore 5
    //   252: aload 10
    //   254: aload 12
    //   256: invokeinterface 1863 2 0
    //   261: pop
    //   262: aload 9
    //   264: monitorexit
    //   265: iload 5
    //   267: ifeq -93 -> 174
    //   270: iload_2
    //   271: ifeq -97 -> 174
    //   274: aload_0
    //   275: aload 12
    //   277: iload_3
    //   278: iload 6
    //   280: invokestatic 2773	android/os/UserHandle:getUid	(II)I
    //   283: ldc_w 8749
    //   286: invokespecial 833	com/android/server/pm/PackageManagerService:killApplication	(Ljava/lang/String;ILjava/lang/String;)V
    //   289: goto -115 -> 174
    //   292: astore_1
    //   293: aload 9
    //   295: monitorexit
    //   296: aload_1
    //   297: athrow
    //   298: lload 7
    //   300: invokestatic 3105	android/os/Binder:restoreCallingIdentity	(J)V
    //   303: aload 10
    //   305: invokeinterface 4013 1 0
    //   310: ifne +29 -> 339
    //   313: aload_0
    //   314: aload 10
    //   316: aload 10
    //   318: invokeinterface 1676 1 0
    //   323: anewarray 1071	java/lang/String
    //   326: invokeinterface 1680 2 0
    //   331: checkcast 1681	[Ljava/lang/String;
    //   334: iload_3
    //   335: iload_2
    //   336: invokespecial 8751	com/android/server/pm/PackageManagerService:sendPackagesSuspendedForUser	([Ljava/lang/String;IZ)V
    //   339: aload 11
    //   341: aload 11
    //   343: invokeinterface 1676 1 0
    //   348: anewarray 1071	java/lang/String
    //   351: invokeinterface 1680 2 0
    //   356: checkcast 1681	[Ljava/lang/String;
    //   359: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	360	0	this	PackageManagerService
    //   0	360	1	paramArrayOfString	String[]
    //   0	360	2	paramBoolean	boolean
    //   0	360	3	paramInt	int
    //   78	101	4	i	int
    //   94	172	5	j	int
    //   188	91	6	k	int
    //   75	224	7	l	long
    //   59	258	10	localArrayList1	ArrayList
    //   70	272	11	localArrayList2	ArrayList
    //   91	185	12	str	String
    //   120	115	13	localPackageSetting	PackageSetting
    // Exception table:
    //   from	to	target	type
    //   80	87	226	finally
    //   96	105	226	finally
    //   171	174	226	finally
    //   220	223	226	finally
    //   262	265	226	finally
    //   274	289	226	finally
    //   293	298	226	finally
    //   105	122	292	finally
    //   127	171	292	finally
    //   183	190	292	finally
    //   190	220	292	finally
    //   234	249	292	finally
    //   252	262	292	finally
  }
  
  public void setPermissionEnforced(String arg1, boolean paramBoolean)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.GRANT_RUNTIME_PERMISSIONS", "setPermissionEnforced");
    long l;
    if ("android.permission.READ_EXTERNAL_STORAGE".equals(???))
    {
      synchronized (this.mPackages)
      {
        if ((this.mSettings.mReadExternalStorageEnforced == null) || (this.mSettings.mReadExternalStorageEnforced.booleanValue() != paramBoolean))
        {
          this.mSettings.mReadExternalStorageEnforced = Boolean.valueOf(paramBoolean);
          this.mSettings.writeLPr();
        }
        ??? = ActivityManagerNative.getDefault();
        if (??? != null) {
          l = Binder.clearCallingIdentity();
        }
      }
      try
      {
        ???.killProcessesBelowForeground("setPermissionEnforcement");
        Binder.restoreCallingIdentity(l);
        return;
      }
      catch (RemoteException ???)
      {
        ??? = ???;
        Binder.restoreCallingIdentity(l);
        return;
      }
      finally
      {
        ??? = finally;
        Binder.restoreCallingIdentity(l);
        throw ???;
      }
      localObject = finally;
      throw ((Throwable)localObject);
    }
    throw new IllegalArgumentException("No selective enforcement for " + ???);
  }
  
  public boolean setRequiredForSystemUser(String paramString, boolean paramBoolean)
  {
    int i = Binder.getCallingUid();
    if ((i != 1000) && (i != 0)) {
      throw new SecurityException("setRequiredForSystemUser can only be run by the system or root");
    }
    synchronized (this.mPackages)
    {
      PackageSetting localPackageSetting = (PackageSetting)this.mSettings.mPackages.get(paramString);
      if (localPackageSetting == null)
      {
        Log.w("PackageManager", "Package doesn't exist: " + paramString);
        return false;
      }
      if (paramBoolean)
      {
        localPackageSetting.pkgPrivateFlags |= 0x400;
        this.mSettings.writeLPr();
        return true;
      }
      localPackageSetting.pkgPrivateFlags &= 0xFBFF;
    }
  }
  
  public boolean shouldShowRequestPermissionRationale(String paramString1, String paramString2, int paramInt)
  {
    boolean bool = false;
    if (UserHandle.getCallingUserId() != paramInt) {
      this.mContext.enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "canShowRequestPermissionRationale for user " + paramInt);
    }
    int i = getPackageUid(paramString2, 268435456, paramInt);
    if (UserHandle.getAppId(getCallingUid()) != UserHandle.getAppId(i)) {
      return false;
    }
    if (checkPermission(paramString1, paramString2, paramInt) == 0) {
      return false;
    }
    long l = Binder.clearCallingIdentity();
    try
    {
      paramInt = getPermissionFlags(paramString1, paramString2, paramInt);
      Binder.restoreCallingIdentity(l);
      if ((paramInt & 0x16) != 0) {
        return false;
      }
    }
    finally
    {
      Binder.restoreCallingIdentity(l);
    }
    if ((paramInt & 0x1) != 0) {
      bool = true;
    }
    return bool;
  }
  
  public void shutdown()
  {
    if (this.mHandler != null) {
      this.mHandler.sendEmptyMessage(14);
    }
    this.mPackageUsage.writeNow(this.mPackages);
    this.mCompilerStats.writeNow();
  }
  
  void startCleaningPackages()
  {
    if (!isExternalMediaAvailable()) {
      return;
    }
    IActivityManager localIActivityManager;
    synchronized (this.mPackages)
    {
      boolean bool = this.mSettings.mPackagesToBeCleaned.isEmpty();
      if (bool) {
        return;
      }
      ??? = new Intent("android.content.pm.CLEAN_EXTERNAL_STORAGE");
      ((Intent)???).setComponent(DEFAULT_CONTAINER_COMPONENT);
      localIActivityManager = ActivityManagerNative.getDefault();
      if (localIActivityManager == null) {}
    }
    try
    {
      localIActivityManager.startService(null, (Intent)???, null, this.mContext.getOpPackageName(), 0);
      return;
    }
    catch (RemoteException localRemoteException) {}
    localObject2 = finally;
    throw ((Throwable)localObject2);
  }
  
  public void systemReady()
  {
    this.mSystemReady = true;
    CarrierAppUtils.disableCarrierAppsUntilPrivileged(this.mContext.getOpPackageName(), this, this.mContext.getContentResolver(), 0);
    boolean bool;
    if (Settings.Global.getInt(this.mContext.getContentResolver(), "compatibility_mode", 1) == 1)
    {
      bool = true;
      PackageParser.setCompatibilityModeEnabled(bool);
      if (DEBUG_SETTINGS) {
        Log.d("PackageManager", "compatibility mode:" + bool);
      }
      int[] arrayOfInt1 = EMPTY_INT_ARRAY;
    }
    for (;;)
    {
      Object localObject2;
      int i;
      Object localObject3;
      Object localObject4;
      synchronized (this.mPackages)
      {
        if (this.mIsAlarmBoot) {
          break label330;
        }
        localObject2 = new ArrayList();
        i = 0;
        if (i >= this.mSettings.mPreferredActivities.size()) {
          break label330;
        }
        localObject3 = (PreferredIntentResolver)this.mSettings.mPreferredActivities.valueAt(i);
        ((ArrayList)localObject2).clear();
        localObject4 = ((PreferredIntentResolver)localObject3).filterSet().iterator();
        if (!((Iterator)localObject4).hasNext()) {
          break label231;
        }
        PreferredActivity localPreferredActivity = (PreferredActivity)((Iterator)localObject4).next();
        if (ActivityIntentResolver.-get0(this.mActivities).get(localPreferredActivity.mPref.mComponent) != null) {
          continue;
        }
        ((ArrayList)localObject2).add(localPreferredActivity);
      }
      bool = false;
      break;
      label231:
      if (((ArrayList)localObject2).size() > 0)
      {
        int j = 0;
        while (j < ((ArrayList)localObject2).size())
        {
          localObject4 = (PreferredActivity)((ArrayList)localObject2).get(j);
          Slog.w("PackageManager", "Removing dangling preferred activity: " + ((PreferredActivity)localObject4).mPref.mComponent);
          ((PreferredIntentResolver)localObject3).removeFilter((IntentFilter)localObject4);
          j += 1;
        }
        this.mSettings.writePackageRestrictionsLPr(this.mSettings.mPreferredActivities.keyAt(i));
        break label699;
        label330:
        localObject3 = UserManagerService.getInstance().getUserIds();
        i = 0;
        j = localObject3.length;
        int k;
        Object localObject1;
        while (i < j)
        {
          k = localObject3[i];
          localObject2 = arrayOfInt2;
          if (!this.mSettings.areDefaultRuntimePermissionsGrantedLPr(k)) {
            localObject2 = ArrayUtils.appendInt(arrayOfInt2, k);
          }
          i += 1;
          localObject1 = localObject2;
        }
        sUserManager.systemReady();
        ((MountServiceInternal)LocalServices.getService(MountServiceInternal.class)).addExternalStoragePolicy(new MountServiceInternal.ExternalStorageMountPolicy()
        {
          public int getMountMode(int paramAnonymousInt, String paramAnonymousString)
          {
            if (Process.isIsolated(paramAnonymousInt)) {
              return 0;
            }
            if (PackageManagerService.this.checkUidPermission("android.permission.WRITE_MEDIA_STORAGE", paramAnonymousInt) == 0) {
              return 1;
            }
            if (PackageManagerService.this.checkUidPermission("android.permission.READ_EXTERNAL_STORAGE", paramAnonymousInt) == -1) {
              return 1;
            }
            if (PackageManagerService.this.checkUidPermission("android.permission.WRITE_EXTERNAL_STORAGE", paramAnonymousInt) == -1) {
              return 2;
            }
            return 3;
          }
          
          public boolean hasExternalStorage(int paramAnonymousInt, String paramAnonymousString)
          {
            return true;
          }
        });
        i = 0;
        j = localObject1.length;
        while (i < j)
        {
          k = localObject1[i];
          this.mDefaultPermissionPolicy.grantDefaultPermissions(k);
          if (OpFeatures.isSupport(new int[] { 12 })) {
            grantSystemAppPermissions(k);
          }
          i += 1;
        }
        if (localObject1 == EMPTY_INT_ARRAY) {
          this.mDefaultPermissionPolicy.scheduleReadDefaultPermissionExceptions();
        }
        if (this.mPostSystemReadyMessages != null)
        {
          localObject1 = this.mPostSystemReadyMessages.iterator();
          while (((Iterator)localObject1).hasNext()) {
            ((Message)((Iterator)localObject1).next()).sendToTarget();
          }
          this.mPostSystemReadyMessages = null;
        }
        ((StorageManager)this.mContext.getSystemService(StorageManager.class)).registerListener(this.mStorageListener);
        this.mInstallerService.systemReady();
        this.mPackageDexOptimizer.systemReady();
        this.mDozeWhitelistConfigObserver = new ConfigObserver(this.mContext, this.mHandler, new DozeWhitelistConfigUpdater(), PACKAGEMANAGERMENT_CONFIG_NAME);
        this.mDozeWhitelistConfigObserver.register();
        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(20), 5000L);
        if ((OpFeatures.isSupport(new int[] { 12 })) && (this.mIsUpgrade))
        {
          localObject1 = UserManagerService.getInstance().getUserIds();
          i = 0;
          j = localObject1.length;
          while (i < j)
          {
            grantSystemAppPermissions(localObject1[i]);
            i += 1;
          }
        }
        this.mOemCompatibilityHelper.initCompatOnlineConfig();
        reconcileUsers(StorageManager.UUID_PRIVATE_INTERNAL);
        reconcileApps(StorageManager.UUID_PRIVATE_INTERNAL);
        return;
      }
      label699:
      i += 1;
    }
  }
  
  public void unregisterMoveCallback(IPackageMoveObserver paramIPackageMoveObserver)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);
    this.mMoveCallbacks.unregister(paramIPackageMoveObserver);
  }
  
  public void updateExternalMediaStatus(final boolean paramBoolean1, final boolean paramBoolean2)
  {
    int i = 0;
    int j = Binder.getCallingUid();
    if ((j != 0) && (j != 1000)) {
      throw new SecurityException("Media status can only be updated by the system");
    }
    for (;;)
    {
      synchronized (this.mPackages)
      {
        StringBuilder localStringBuilder = new StringBuilder().append("Updating external media status from ");
        Object localObject1;
        if (this.mMediaMounted)
        {
          localObject1 = "mounted";
          localStringBuilder = localStringBuilder.append((String)localObject1).append(" to ");
          if (!paramBoolean1) {
            break label196;
          }
          localObject1 = "mounted";
          Log.i("PackageManager", (String)localObject1);
          if (paramBoolean1 == this.mMediaMounted)
          {
            localObject1 = this.mHandler;
            if (paramBoolean2) {
              i = 1;
            }
            localObject1 = ((PackageHandler)localObject1).obtainMessage(12, i, -1);
            this.mHandler.sendMessage((Message)localObject1);
          }
        }
        else
        {
          localObject1 = "unmounted";
          continue;
        }
        this.mMediaMounted = paramBoolean1;
        this.mHandler.post(new Runnable()
        {
          public void run()
          {
            PackageManagerService.-wrap46(PackageManagerService.this, paramBoolean1, paramBoolean2, true);
          }
        });
        return;
      }
      label196:
      String str = "unmounted";
    }
  }
  
  int updateFlagsForResolve(int paramInt1, int paramInt2, Object paramObject)
  {
    int i = paramInt1;
    if (this.mSafeMode) {
      i = paramInt1 | 0x100000;
    }
    return updateFlagsForComponent(i, paramInt2, paramObject);
  }
  
  public boolean updateIntentVerificationStatus(String paramString, int paramInt1, int paramInt2)
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.SET_PREFERRED_APPLICATIONS", null);
    synchronized (this.mPackages)
    {
      boolean bool = this.mSettings.updateIntentFilterVerificationStatusLPw(paramString, paramInt1, paramInt2);
      if (bool) {
        scheduleWritePackageRestrictionsLocked(paramInt2);
      }
      return bool;
    }
  }
  
  /* Error */
  public void updatePackagesIfNeeded()
  {
    // Byte code:
    //   0: ldc_w 8860
    //   3: invokestatic 7115	com/android/server/pm/PackageManagerService:enforceSystemOrRoot	(Ljava/lang/String;)V
    //   6: aload_0
    //   7: invokevirtual 2066	com/android/server/pm/PackageManagerService:isUpgrade	()Z
    //   10: istore_3
    //   11: aload_0
    //   12: invokevirtual 1760	com/android/server/pm/PackageManagerService:isFirstBoot	()Z
    //   15: ifne +178 -> 193
    //   18: aload_0
    //   19: getfield 1771	com/android/server/pm/PackageManagerService:mIsPreNUpgrade	Z
    //   22: istore_2
    //   23: invokestatic 2071	dalvik/system/VMRuntime:didPruneDalvikCache	()Z
    //   26: istore 4
    //   28: iload_3
    //   29: ifne +7 -> 36
    //   32: iload_2
    //   33: ifeq +165 -> 198
    //   36: iload_3
    //   37: ifeq +17 -> 54
    //   40: ldc_w 391
    //   43: ldc_w 8862
    //   46: invokestatic 3756	android/util/Log:i	(Ljava/lang/String;Ljava/lang/String;)I
    //   49: pop
    //   50: aload_0
    //   51: invokespecial 8864	com/android/server/pm/PackageManagerService:purgeOverlay	()V
    //   54: aload_0
    //   55: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   58: astore 7
    //   60: aload 7
    //   62: monitorenter
    //   63: aload_0
    //   64: getfield 1131	com/android/server/pm/PackageManagerService:mPackages	Landroid/util/ArrayMap;
    //   67: invokevirtual 1689	android/util/ArrayMap:values	()Ljava/util/Collection;
    //   70: aload_0
    //   71: invokestatic 8868	com/android/server/pm/PackageManagerServiceUtils:getPackagesForDexopt	(Ljava/util/Collection;Lcom/android/server/pm/PackageManagerService;)Ljava/util/List;
    //   74: astore 8
    //   76: aload 7
    //   78: monitorexit
    //   79: invokestatic 2196	java/lang/System:nanoTime	()J
    //   82: lstore 5
    //   84: aload_0
    //   85: getfield 1771	com/android/server/pm/PackageManagerService:mIsPreNUpgrade	Z
    //   88: istore_3
    //   89: iload_2
    //   90: ifeq +155 -> 245
    //   93: iconst_0
    //   94: istore_1
    //   95: aload_0
    //   96: aload 8
    //   98: iload_3
    //   99: iload_1
    //   100: invokestatic 1697	com/android/server/pm/PackageManagerServiceCompilerMapping:getCompilerFilterForReason	(I)Ljava/lang/String;
    //   103: invokespecial 2203	com/android/server/pm/PackageManagerService:performDexOptUpgrade	(Ljava/util/List;ZLjava/lang/String;)[I
    //   106: astore 7
    //   108: getstatic 2209	java/util/concurrent/TimeUnit:NANOSECONDS	Ljava/util/concurrent/TimeUnit;
    //   111: invokestatic 2196	java/lang/System:nanoTime	()J
    //   114: lload 5
    //   116: lsub
    //   117: invokevirtual 2213	java/util/concurrent/TimeUnit:toSeconds	(J)J
    //   120: l2i
    //   121: istore_1
    //   122: aload_0
    //   123: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   126: ldc_w 8870
    //   129: aload 7
    //   131: iconst_0
    //   132: iaload
    //   133: invokestatic 2221	com/android/internal/logging/MetricsLogger:histogram	(Landroid/content/Context;Ljava/lang/String;I)V
    //   136: aload_0
    //   137: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   140: ldc_w 8872
    //   143: aload 7
    //   145: iconst_1
    //   146: iaload
    //   147: invokestatic 2221	com/android/internal/logging/MetricsLogger:histogram	(Landroid/content/Context;Ljava/lang/String;I)V
    //   150: aload_0
    //   151: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   154: ldc_w 8874
    //   157: aload 7
    //   159: iconst_2
    //   160: iaload
    //   161: invokestatic 2221	com/android/internal/logging/MetricsLogger:histogram	(Landroid/content/Context;Ljava/lang/String;I)V
    //   164: aload_0
    //   165: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   168: ldc_w 8876
    //   171: aload_0
    //   172: invokevirtual 8878	com/android/server/pm/PackageManagerService:getOptimizablePackages	()Landroid/util/ArraySet;
    //   175: invokevirtual 3712	android/util/ArraySet:size	()I
    //   178: invokestatic 2221	com/android/internal/logging/MetricsLogger:histogram	(Landroid/content/Context;Ljava/lang/String;I)V
    //   181: aload_0
    //   182: getfield 1254	com/android/server/pm/PackageManagerService:mContext	Landroid/content/Context;
    //   185: ldc_w 8880
    //   188: iload_1
    //   189: invokestatic 2221	com/android/internal/logging/MetricsLogger:histogram	(Landroid/content/Context;Ljava/lang/String;I)V
    //   192: return
    //   193: iconst_1
    //   194: istore_2
    //   195: goto -172 -> 23
    //   198: iload 4
    //   200: ifne -164 -> 36
    //   203: return
    //   204: astore 7
    //   206: ldc_w 391
    //   209: new 1320	java/lang/StringBuilder
    //   212: dup
    //   213: invokespecial 1321	java/lang/StringBuilder:<init>	()V
    //   216: ldc_w 8882
    //   219: invokevirtual 1327	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   222: aload 7
    //   224: invokevirtual 1931	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   227: invokevirtual 1330	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   230: invokestatic 4263	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   233: pop
    //   234: goto -180 -> 54
    //   237: astore 8
    //   239: aload 7
    //   241: monitorexit
    //   242: aload 8
    //   244: athrow
    //   245: iconst_1
    //   246: istore_1
    //   247: goto -152 -> 95
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	250	0	this	PackageManagerService
    //   94	153	1	i	int
    //   22	173	2	bool1	boolean
    //   10	89	3	bool2	boolean
    //   26	173	4	bool3	boolean
    //   82	33	5	l	long
    //   204	36	7	localException	Exception
    //   74	23	8	localList	List
    //   237	6	8	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   50	54	204	java/lang/Exception
    //   63	76	237	finally
  }
  
  public void updatePermissionFlags(String paramString1, String paramString2, int paramInt1, int paramInt2, int paramInt3)
  {
    if (!sUserManager.exists(paramInt3)) {
      return;
    }
    enforceGrantRevokeRuntimePermissionPermissions("updatePermissionFlags");
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt3, true, true, "updatePermissionFlags");
    int j = paramInt1;
    int i = paramInt2;
    if (getCallingUid() != 1000)
    {
      j = paramInt1 & 0xFFFFFFEF & 0xFFFFFFDF;
      i = paramInt2 & 0xFFFFFFEF & 0xFFFFFFDF & 0xFFFFFFBF;
    }
    synchronized (this.mPackages)
    {
      localObject = (PackageParser.Package)this.mPackages.get(paramString2);
      if (localObject == null) {
        throw new IllegalArgumentException("Unknown package: " + paramString2);
      }
    }
    BasePermission localBasePermission = (BasePermission)this.mSettings.mPermissions.get(paramString1);
    if (localBasePermission == null) {
      throw new IllegalArgumentException("Unknown permission: " + paramString1);
    }
    Object localObject = (SettingBase)((PackageParser.Package)localObject).mExtras;
    if (localObject == null) {
      throw new IllegalArgumentException("Unknown package: " + paramString2);
    }
    paramString2 = ((SettingBase)localObject).getPermissionsState();
    if (paramString2.getRuntimePermissionState(paramString1, paramInt3) != null)
    {
      paramInt1 = 1;
      if (paramString2.updatePermissionFlags(localBasePermission, paramInt3, j, i))
      {
        if (paramString2.getInstallPermissionState(paramString1) == null) {
          break label278;
        }
        scheduleWriteSettingsLocked();
      }
    }
    for (;;)
    {
      return;
      paramInt1 = 0;
      break;
      label278:
      if ((paramString2.getRuntimePermissionState(paramString1, paramInt3) != null) || (paramInt1 != 0)) {
        this.mSettings.writeRuntimePermissionsForUserLPr(paramInt3, false);
      }
    }
  }
  
  public void updatePermissionFlagsForAllApps(int paramInt1, int paramInt2, int paramInt3)
  {
    if (!sUserManager.exists(paramInt3)) {
      return;
    }
    enforceGrantRevokeRuntimePermissionPermissions("updatePermissionFlagsForAllApps");
    enforceCrossUserPermission(Binder.getCallingUid(), paramInt3, true, true, "updatePermissionFlagsForAllApps");
    int j = paramInt1;
    int i = paramInt2;
    if (getCallingUid() != 1000)
    {
      j = paramInt1 & 0xFFFFFFEF;
      i = paramInt2 & 0xFFFFFFEF;
    }
    ArrayMap localArrayMap = this.mPackages;
    paramInt2 = 0;
    for (;;)
    {
      try
      {
        int k = this.mPackages.size();
        paramInt1 = 0;
        if (paramInt1 < k)
        {
          SettingBase localSettingBase = (SettingBase)((PackageParser.Package)this.mPackages.valueAt(paramInt1)).mExtras;
          if (localSettingBase != null) {
            paramInt2 |= localSettingBase.getPermissionsState().updatePermissionFlagsForAllPermissions(paramInt3, j, i);
          }
        }
        else
        {
          if (paramInt2 != 0) {
            this.mSettings.writeRuntimePermissionsForUserLPr(paramInt3, false);
          }
          return;
        }
      }
      finally {}
      paramInt1 += 1;
    }
  }
  
  public void verifyIntentFilter(int paramInt1, int paramInt2, List<String> paramList)
    throws RemoteException
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.INTENT_FILTER_VERIFICATION_AGENT", "Only intentfilter verification agents can verify applications");
    Message localMessage = this.mHandler.obtainMessage(18);
    paramList = new IntentFilterVerificationResponse(Binder.getCallingUid(), paramInt2, paramList);
    localMessage.arg1 = paramInt1;
    localMessage.obj = paramList;
    this.mHandler.sendMessage(localMessage);
  }
  
  public void verifyPendingInstall(int paramInt1, int paramInt2)
    throws RemoteException
  {
    this.mContext.enforceCallingOrSelfPermission("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can verify applications");
    Message localMessage = this.mHandler.obtainMessage(15);
    PackageVerificationResponse localPackageVerificationResponse = new PackageVerificationResponse(paramInt2, Binder.getCallingUid());
    localMessage.arg1 = paramInt1;
    localMessage.obj = localPackageVerificationResponse;
    this.mHandler.sendMessage(localMessage);
  }
  
  final class ActivityIntentResolver
    extends IntentResolver<PackageParser.ActivityIntentInfo, ResolveInfo>
  {
    private final ArrayMap<ComponentName, PackageParser.Activity> mActivities = new ArrayMap();
    private int mFlags;
    
    ActivityIntentResolver() {}
    
    private void adjustPriority(List<PackageParser.Activity> paramList, PackageParser.ActivityIntentInfo paramActivityIntentInfo)
    {
      if (paramActivityIntentInfo.getPriority() <= 0) {
        return;
      }
      Object localObject = paramActivityIntentInfo.activity.info;
      ApplicationInfo localApplicationInfo = ((ActivityInfo)localObject).applicationInfo;
      if ((localApplicationInfo.privateFlags & 0x8) != 0) {}
      for (int i = 1; i == 0; i = 0)
      {
        Slog.w("PackageManager", "Non-privileged app; cap priority to 0; package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
        paramActivityIntentInfo.setPriority(0);
        return;
      }
      if (paramList == null)
      {
        if (isProtectedAction(paramActivityIntentInfo))
        {
          if (PackageManagerService.-get5(PackageManagerService.this))
          {
            PackageManagerService.-get12(PackageManagerService.this).add(paramActivityIntentInfo);
            if (PackageManagerService.DEBUG_FILTERS) {
              Slog.i("PackageManager", "Protected action; save for later; package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
            }
            return;
          }
          if ((PackageManagerService.DEBUG_FILTERS) && (PackageManagerService.this.mSetupWizardPackage == null)) {
            Slog.i("PackageManager", "No setup wizard; All protected intents capped to priority 0");
          }
          if (paramActivityIntentInfo.activity.info.packageName.equals(PackageManagerService.this.mSetupWizardPackage))
          {
            if (PackageManagerService.DEBUG_FILTERS) {
              Slog.i("PackageManager", "Found setup wizard; allow priority " + paramActivityIntentInfo.getPriority() + ";" + " package: " + paramActivityIntentInfo.activity.info.packageName + " activity: " + paramActivityIntentInfo.activity.className + " priority: " + paramActivityIntentInfo.getPriority());
            }
            return;
          }
          Slog.w("PackageManager", "Protected action; cap priority to 0; package: " + paramActivityIntentInfo.activity.info.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
          paramActivityIntentInfo.setPriority(0);
          return;
        }
        return;
      }
      paramList = findMatchingActivity(paramList, (ActivityInfo)localObject);
      if (paramList == null)
      {
        if (PackageManagerService.DEBUG_FILTERS) {
          Slog.i("PackageManager", "New activity; cap priority to 0; package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
        }
        paramActivityIntentInfo.setPriority(0);
        return;
      }
      paramList = new ArrayList(paramList.intents);
      findFilters(paramActivityIntentInfo);
      localObject = paramActivityIntentInfo.actionsIterator();
      if (localObject != null)
      {
        getIntentListSubset(paramList, new ActionIterGenerator(), (Iterator)localObject);
        if (paramList.size() == 0)
        {
          if (PackageManagerService.DEBUG_FILTERS) {
            Slog.i("PackageManager", "Mismatched action; cap priority to 0; package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
          }
          paramActivityIntentInfo.setPriority(0);
          return;
        }
      }
      localObject = paramActivityIntentInfo.categoriesIterator();
      if (localObject != null)
      {
        getIntentListSubset(paramList, new CategoriesIterGenerator(), (Iterator)localObject);
        if (paramList.size() == 0)
        {
          if (PackageManagerService.DEBUG_FILTERS) {
            Slog.i("PackageManager", "Mismatched category; cap priority to 0; package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
          }
          paramActivityIntentInfo.setPriority(0);
          return;
        }
      }
      localObject = paramActivityIntentInfo.schemesIterator();
      if (localObject != null)
      {
        getIntentListSubset(paramList, new SchemesIterGenerator(), (Iterator)localObject);
        if (paramList.size() == 0)
        {
          if (PackageManagerService.DEBUG_FILTERS) {
            Slog.i("PackageManager", "Mismatched scheme; cap priority to 0; package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
          }
          paramActivityIntentInfo.setPriority(0);
          return;
        }
      }
      localObject = paramActivityIntentInfo.authoritiesIterator();
      if (localObject != null)
      {
        getIntentListSubset(paramList, new AuthoritiesIterGenerator(), (Iterator)localObject);
        if (paramList.size() == 0)
        {
          if (PackageManagerService.DEBUG_FILTERS) {
            Slog.i("PackageManager", "Mismatched authority; cap priority to 0; package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
          }
          paramActivityIntentInfo.setPriority(0);
          return;
        }
      }
      int j = 0;
      i = paramList.size() - 1;
      while (i >= 0)
      {
        j = Math.max(j, ((PackageParser.ActivityIntentInfo)paramList.get(i)).getPriority());
        i -= 1;
      }
      if (paramActivityIntentInfo.getPriority() > j)
      {
        if (PackageManagerService.DEBUG_FILTERS) {
          Slog.i("PackageManager", "Found matching filter(s); cap priority to " + j + ";" + " package: " + localApplicationInfo.packageName + " activity: " + paramActivityIntentInfo.activity.className + " origPrio: " + paramActivityIntentInfo.getPriority());
        }
        paramActivityIntentInfo.setPriority(j);
        return;
      }
    }
    
    private PackageParser.Activity findMatchingActivity(List<PackageParser.Activity> paramList, ActivityInfo paramActivityInfo)
    {
      paramList = paramList.iterator();
      while (paramList.hasNext())
      {
        PackageParser.Activity localActivity = (PackageParser.Activity)paramList.next();
        if (localActivity.info.name.equals(paramActivityInfo.name)) {
          return localActivity;
        }
        if (localActivity.info.name.equals(paramActivityInfo.targetActivity)) {
          return localActivity;
        }
        if (localActivity.info.targetActivity != null)
        {
          if (localActivity.info.targetActivity.equals(paramActivityInfo.name)) {
            return localActivity;
          }
          if (localActivity.info.targetActivity.equals(paramActivityInfo.targetActivity)) {
            return localActivity;
          }
        }
      }
      return null;
    }
    
    private <T> void getIntentListSubset(List<PackageParser.ActivityIntentInfo> paramList, IterGenerator<T> paramIterGenerator, Iterator<T> paramIterator)
    {
      if ((!paramIterator.hasNext()) || (paramList.size() == 0)) {
        return;
      }
      Object localObject1 = paramIterator.next();
      Iterator localIterator = paramList.iterator();
      while (localIterator.hasNext())
      {
        Object localObject2 = (PackageParser.ActivityIntentInfo)localIterator.next();
        int j = 0;
        localObject2 = paramIterGenerator.generate((PackageParser.ActivityIntentInfo)localObject2);
        Object localObject3;
        do
        {
          i = j;
          if (localObject2 == null) {
            break;
          }
          i = j;
          if (!((Iterator)localObject2).hasNext()) {
            break;
          }
          localObject3 = ((Iterator)localObject2).next();
        } while ((localObject3 == null) || (!localObject3.equals(localObject1)));
        int i = 1;
        if (i == 0) {
          localIterator.remove();
        }
      }
    }
    
    private boolean isProtectedAction(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
    {
      paramActivityIntentInfo = paramActivityIntentInfo.actionsIterator();
      while ((paramActivityIntentInfo != null) && (paramActivityIntentInfo.hasNext()))
      {
        String str = (String)paramActivityIntentInfo.next();
        if (PackageManagerService.-get2().contains(str)) {
          return true;
        }
      }
      return false;
    }
    
    public final void addActivity(PackageParser.Activity paramActivity, String paramString)
    {
      this.mActivities.put(paramActivity.getComponentName(), paramActivity);
      Object localObject2;
      int i;
      if (PackageManagerService.DEBUG_SHOW_INFO)
      {
        localObject2 = new StringBuilder().append("  ").append(paramString).append(" ");
        if (paramActivity.info.nonLocalizedLabel != null)
        {
          localObject1 = paramActivity.info.nonLocalizedLabel;
          Log.v("PackageManager", localObject1 + ":");
        }
      }
      else
      {
        if (PackageManagerService.DEBUG_SHOW_INFO) {
          Log.v("PackageManager", "    Class=" + paramActivity.info.name);
        }
        int j = paramActivity.intents.size();
        i = 0;
        label134:
        if (i >= j) {
          return;
        }
        localObject2 = (PackageParser.ActivityIntentInfo)paramActivity.intents.get(i);
        if ("activity".equals(paramString))
        {
          localObject1 = PackageManagerService.this.mSettings.getDisabledSystemPkgLPr(((PackageParser.ActivityIntentInfo)localObject2).activity.info.packageName);
          if ((localObject1 == null) || (((PackageSetting)localObject1).pkg == null)) {
            break label315;
          }
        }
      }
      label315:
      for (Object localObject1 = ((PackageSetting)localObject1).pkg.activities;; localObject1 = null)
      {
        adjustPriority((List)localObject1, (PackageParser.ActivityIntentInfo)localObject2);
        if (PackageManagerService.DEBUG_SHOW_INFO)
        {
          Log.v("PackageManager", "    IntentFilter:");
          ((PackageParser.ActivityIntentInfo)localObject2).dump(new LogPrinter(2, "PackageManager"), "      ");
        }
        if (!((PackageParser.ActivityIntentInfo)localObject2).debugCheck()) {
          Log.w("PackageManager", "==> For Activity " + paramActivity.info.name);
        }
        addFilter((IntentFilter)localObject2);
        i += 1;
        break label134;
        localObject1 = paramActivity.info.name;
        break;
      }
    }
    
    protected boolean allowFilterResult(PackageParser.ActivityIntentInfo paramActivityIntentInfo, List<ResolveInfo> paramList)
    {
      paramActivityIntentInfo = paramActivityIntentInfo.activity.info;
      int i = paramList.size() - 1;
      while (i >= 0)
      {
        ActivityInfo localActivityInfo = ((ResolveInfo)paramList.get(i)).activityInfo;
        if ((localActivityInfo.name == paramActivityIntentInfo.name) && (localActivityInfo.packageName == paramActivityIntentInfo.packageName)) {
          return false;
        }
        i -= 1;
      }
      return true;
    }
    
    protected void dumpFilter(PrintWriter paramPrintWriter, String paramString, PackageParser.ActivityIntentInfo paramActivityIntentInfo)
    {
      paramPrintWriter.print(paramString);
      paramPrintWriter.print(Integer.toHexString(System.identityHashCode(paramActivityIntentInfo.activity)));
      paramPrintWriter.print(' ');
      paramActivityIntentInfo.activity.printComponentShortName(paramPrintWriter);
      paramPrintWriter.print(" filter ");
      paramPrintWriter.println(Integer.toHexString(System.identityHashCode(paramActivityIntentInfo)));
    }
    
    protected void dumpFilterLabel(PrintWriter paramPrintWriter, String paramString, Object paramObject, int paramInt)
    {
      paramObject = (PackageParser.Activity)paramObject;
      paramPrintWriter.print(paramString);
      paramPrintWriter.print(Integer.toHexString(System.identityHashCode(paramObject)));
      paramPrintWriter.print(' ');
      ((PackageParser.Activity)paramObject).printComponentShortName(paramPrintWriter);
      if (paramInt > 1)
      {
        paramPrintWriter.print(" (");
        paramPrintWriter.print(paramInt);
        paramPrintWriter.print(" filters)");
      }
      paramPrintWriter.println();
    }
    
    protected Object filterToLabel(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
    {
      return paramActivityIntentInfo.activity;
    }
    
    protected boolean isFilterStopped(PackageParser.ActivityIntentInfo paramActivityIntentInfo, int paramInt)
    {
      boolean bool = false;
      if (!PackageManagerService.sUserManager.exists(paramInt)) {
        return true;
      }
      paramActivityIntentInfo = paramActivityIntentInfo.activity.owner;
      if (paramActivityIntentInfo != null)
      {
        paramActivityIntentInfo = (PackageSetting)paramActivityIntentInfo.mExtras;
        if (paramActivityIntentInfo != null)
        {
          if ((paramActivityIntentInfo.pkgFlags & 0x1) == 0) {
            bool = paramActivityIntentInfo.getStopped(paramInt);
          }
          return bool;
        }
      }
      return false;
    }
    
    protected boolean isPackageForFilter(String paramString, PackageParser.ActivityIntentInfo paramActivityIntentInfo)
    {
      return paramString.equals(paramActivityIntentInfo.activity.owner.packageName);
    }
    
    protected PackageParser.ActivityIntentInfo[] newArray(int paramInt)
    {
      return new PackageParser.ActivityIntentInfo[paramInt];
    }
    
    protected ResolveInfo newResult(PackageParser.ActivityIntentInfo paramActivityIntentInfo, int paramInt1, int paramInt2)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      if (!PackageManagerService.this.mSettings.isEnabledAndMatchLPr(paramActivityIntentInfo.activity.info, this.mFlags, paramInt2)) {
        return null;
      }
      PackageParser.Activity localActivity = paramActivityIntentInfo.activity;
      Object localObject = (PackageSetting)localActivity.owner.mExtras;
      if (localObject == null) {
        return null;
      }
      localObject = PackageParser.generateActivityInfo(localActivity, this.mFlags, ((PackageSetting)localObject).readUserState(paramInt2), paramInt2);
      if (localObject == null) {
        return null;
      }
      ResolveInfo localResolveInfo = new ResolveInfo();
      localResolveInfo.activityInfo = ((ActivityInfo)localObject);
      if ((this.mFlags & 0x40) != 0) {
        localResolveInfo.filter = paramActivityIntentInfo;
      }
      if (paramActivityIntentInfo != null) {
        localResolveInfo.handleAllWebDataURI = paramActivityIntentInfo.handleAllWebDataURI();
      }
      localResolveInfo.priority = paramActivityIntentInfo.getPriority();
      localResolveInfo.preferredOrder = localActivity.owner.mPreferredOrder;
      localResolveInfo.match = paramInt1;
      localResolveInfo.isDefault = paramActivityIntentInfo.hasDefault;
      localResolveInfo.labelRes = paramActivityIntentInfo.labelRes;
      localResolveInfo.nonLocalizedLabel = paramActivityIntentInfo.nonLocalizedLabel;
      if (PackageManagerService.-wrap8(PackageManagerService.this, paramInt2)) {
        localResolveInfo.noResourceId = true;
      }
      for (;;)
      {
        localResolveInfo.iconResourceId = paramActivityIntentInfo.icon;
        localResolveInfo.system = localResolveInfo.activityInfo.applicationInfo.isSystemApp();
        return localResolveInfo;
        localResolveInfo.icon = paramActivityIntentInfo.icon;
      }
    }
    
    public List<ResolveInfo> queryIntent(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
    {
      boolean bool = false;
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      this.mFlags = paramInt1;
      if ((0x10000 & paramInt1) != 0) {
        bool = true;
      }
      return super.queryIntent(paramIntent, paramString, bool, paramInt2);
    }
    
    public List<ResolveInfo> queryIntent(Intent paramIntent, String paramString, boolean paramBoolean, int paramInt)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt)) {
        return null;
      }
      if (paramBoolean) {}
      for (int i = 65536;; i = 0)
      {
        this.mFlags = i;
        return super.queryIntent(paramIntent, paramString, paramBoolean, paramInt);
      }
    }
    
    public List<ResolveInfo> queryIntentForPackage(Intent paramIntent, String paramString, int paramInt1, ArrayList<PackageParser.Activity> paramArrayList, int paramInt2)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      if (paramArrayList == null) {
        return null;
      }
      this.mFlags = paramInt1;
      if ((0x10000 & paramInt1) != 0) {}
      ArrayList localArrayList1;
      for (boolean bool = true;; bool = false)
      {
        int i = paramArrayList.size();
        localArrayList1 = new ArrayList(i);
        paramInt1 = 0;
        while (paramInt1 < i)
        {
          ArrayList localArrayList2 = ((PackageParser.Activity)paramArrayList.get(paramInt1)).intents;
          if ((localArrayList2 != null) && (localArrayList2.size() > 0))
          {
            PackageParser.ActivityIntentInfo[] arrayOfActivityIntentInfo = new PackageParser.ActivityIntentInfo[localArrayList2.size()];
            localArrayList2.toArray(arrayOfActivityIntentInfo);
            localArrayList1.add(arrayOfActivityIntentInfo);
          }
          paramInt1 += 1;
        }
      }
      return super.queryIntentFromList(paramIntent, paramString, bool, localArrayList1, paramInt2);
    }
    
    public final void removeActivity(PackageParser.Activity paramActivity, String paramString)
    {
      this.mActivities.remove(paramActivity.getComponentName());
      StringBuilder localStringBuilder;
      if (PackageManagerService.DEBUG_SHOW_INFO)
      {
        localStringBuilder = new StringBuilder().append("  ").append(paramString).append(" ");
        if (paramActivity.info.nonLocalizedLabel == null) {
          break label187;
        }
      }
      label187:
      for (paramString = paramActivity.info.nonLocalizedLabel;; paramString = paramActivity.info.name)
      {
        Log.v("PackageManager", paramString + ":");
        Log.v("PackageManager", "    Class=" + paramActivity.info.name);
        int j = paramActivity.intents.size();
        int i = 0;
        while (i < j)
        {
          paramString = (PackageParser.ActivityIntentInfo)paramActivity.intents.get(i);
          if (PackageManagerService.DEBUG_SHOW_INFO)
          {
            Log.v("PackageManager", "    IntentFilter:");
            paramString.dump(new LogPrinter(2, "PackageManager"), "      ");
          }
          removeFilter(paramString);
          i += 1;
        }
      }
    }
    
    protected void sortResults(List<ResolveInfo> paramList)
    {
      Collections.sort(paramList, PackageManagerService.-get13());
    }
    
    public class ActionIterGenerator
      extends PackageManagerService.ActivityIntentResolver.IterGenerator<String>
    {
      public ActionIterGenerator()
      {
        super();
      }
      
      public Iterator<String> generate(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
      {
        return paramActivityIntentInfo.actionsIterator();
      }
    }
    
    public class AuthoritiesIterGenerator
      extends PackageManagerService.ActivityIntentResolver.IterGenerator<IntentFilter.AuthorityEntry>
    {
      public AuthoritiesIterGenerator()
      {
        super();
      }
      
      public Iterator<IntentFilter.AuthorityEntry> generate(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
      {
        return paramActivityIntentInfo.authoritiesIterator();
      }
    }
    
    public class CategoriesIterGenerator
      extends PackageManagerService.ActivityIntentResolver.IterGenerator<String>
    {
      public CategoriesIterGenerator()
      {
        super();
      }
      
      public Iterator<String> generate(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
      {
        return paramActivityIntentInfo.categoriesIterator();
      }
    }
    
    public class IterGenerator<E>
    {
      public IterGenerator() {}
      
      public Iterator<E> generate(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
      {
        return null;
      }
    }
    
    public class SchemesIterGenerator
      extends PackageManagerService.ActivityIntentResolver.IterGenerator<String>
    {
      public SchemesIterGenerator()
      {
        super();
      }
      
      public Iterator<String> generate(PackageParser.ActivityIntentInfo paramActivityIntentInfo)
      {
        return paramActivityIntentInfo.schemesIterator();
      }
    }
  }
  
  class AsecInstallArgs
    extends PackageManagerService.InstallArgs
  {
    static final String PUBLIC_RES_FILE_NAME = "res.zip";
    static final String RES_FILE_NAME = "pkg.apk";
    String cid;
    String packagePath;
    String resourcePath;
    
    AsecInstallArgs(PackageManagerService.InstallParams paramInstallParams)
    {
      super(paramInstallParams.move, paramInstallParams.observer, paramInstallParams.installFlags, paramInstallParams.installerPackageName, paramInstallParams.volumeUuid, paramInstallParams.getUser(), null, paramInstallParams.packageAbiOverride, paramInstallParams.grantedRuntimePermissions, paramInstallParams.traceMethod, paramInstallParams.traceCookie, paramInstallParams.certificates);
    }
    
    AsecInstallArgs(String paramString, String[] paramArrayOfString, boolean paramBoolean) {}
    
    AsecInstallArgs(String paramString, String[] paramArrayOfString, boolean paramBoolean1, boolean paramBoolean2) {}
    
    private void cleanUp()
    {
      PackageHelper.destroySdDir(this.cid);
    }
    
    private void cleanUpResourcesLI(List<String> paramList)
    {
      cleanUp();
      PackageManagerService.-wrap38(PackageManagerService.this, paramList, this.instructionSets);
    }
    
    private List<String> getAllCodePaths()
    {
      Object localObject = new File(getCodePath());
      if ((localObject != null) && (((File)localObject).exists())) {
        try
        {
          localObject = PackageParser.parsePackageLite((File)localObject, 0).getAllCodePaths();
          return (List<String>)localObject;
        }
        catch (PackageParser.PackageParserException localPackageParserException) {}
      }
      return Collections.EMPTY_LIST;
    }
    
    private void setMountPath(String paramString)
    {
      paramString = new File(paramString);
      File localFile = new File(paramString, "pkg.apk");
      if (localFile.exists())
      {
        this.packagePath = localFile.getAbsolutePath();
        if (isFwdLocked())
        {
          this.resourcePath = new File(paramString, "res.zip").getAbsolutePath();
          return;
        }
        this.resourcePath = this.packagePath;
        return;
      }
      this.packagePath = paramString.getAbsolutePath();
      this.resourcePath = this.packagePath;
    }
    
    void cleanUpResourcesLI()
    {
      cleanUpResourcesLI(getAllCodePaths());
    }
    
    int copyApk(IMediaContainerService paramIMediaContainerService, boolean paramBoolean)
      throws RemoteException
    {
      if ((this.origin.staged) && (this.origin.cid != null))
      {
        if (PackageManagerService.DEBUG_INSTALL) {
          Slog.d("PackageManager", this.origin.cid + " already staged; skipping copy");
        }
        this.cid = this.origin.cid;
        setMountPath(PackageHelper.getSdDir(this.cid));
        return 1;
      }
      if (paramBoolean) {
        createCopyFile();
      }
      for (;;)
      {
        paramIMediaContainerService = paramIMediaContainerService.copyPackageToContainer(this.origin.file.getAbsolutePath(), this.cid, PackageManagerService.getEncryptKey(), isExternalAsec(), isFwdLocked(), PackageManagerService.-wrap14(this.abiOverride, null));
        if (paramIMediaContainerService == null) {
          break;
        }
        setMountPath(paramIMediaContainerService);
        return 1;
        PackageHelper.destroySdDir(this.cid);
      }
      return -18;
    }
    
    void createCopyFile()
    {
      this.cid = PackageManagerService.this.mInstallerService.allocateExternalStageCidLegacy();
    }
    
    int doPostCopy(int paramInt)
    {
      if ((!isFwdLocked()) || ((paramInt >= 10000) && (PackageHelper.fixSdPermissions(this.cid, UserHandle.getSharedAppGid(paramInt), "pkg.apk")))) {
        return 1;
      }
      Slog.e("PackageManager", "Failed to finalize " + this.cid);
      PackageHelper.destroySdDir(this.cid);
      return -18;
    }
    
    boolean doPostDeleteLI(boolean paramBoolean)
    {
      List localList = getAllCodePaths();
      boolean bool2 = PackageHelper.isContainerMounted(this.cid);
      boolean bool1 = bool2;
      if (bool2)
      {
        bool1 = bool2;
        if (PackageHelper.unMountSdDir(this.cid)) {
          bool1 = false;
        }
      }
      if ((!bool1) && (paramBoolean)) {
        cleanUpResourcesLI(localList);
      }
      return !bool1;
    }
    
    int doPostInstall(int paramInt1, int paramInt2)
    {
      if (paramInt1 != 1)
      {
        cleanUp();
        return paramInt1;
      }
      int i;
      if (isFwdLocked()) {
        i = UserHandle.getSharedAppGid(paramInt2);
      }
      for (String str = "pkg.apk";; str = null)
      {
        if ((paramInt2 < 10000) || (!PackageHelper.fixSdPermissions(this.cid, i, str))) {
          break label81;
        }
        if (PackageHelper.isContainerMounted(this.cid)) {
          break;
        }
        PackageHelper.mountSdDir(this.cid, PackageManagerService.getEncryptKey(), Process.myUid());
        return paramInt1;
        i = -1;
      }
      label81:
      Slog.e("PackageManager", "Failed to finalize " + this.cid);
      PackageHelper.destroySdDir(this.cid);
      return -18;
    }
    
    int doPreCopy()
    {
      if ((isFwdLocked()) && (!PackageHelper.fixSdPermissions(this.cid, PackageManagerService.this.getPackageUid("com.android.defcontainer", 1048576, 0), "pkg.apk"))) {
        return -18;
      }
      return 1;
    }
    
    int doPreInstall(int paramInt)
    {
      if (paramInt != 1) {
        PackageHelper.destroySdDir(this.cid);
      }
      while (PackageHelper.isContainerMounted(this.cid)) {
        return paramInt;
      }
      String str = PackageHelper.mountSdDir(this.cid, PackageManagerService.getEncryptKey(), 1000);
      if (str != null)
      {
        setMountPath(str);
        return paramInt;
      }
      return -18;
    }
    
    boolean doRename(int paramInt, PackageParser.Package paramPackage, String paramString)
    {
      Object localObject = PackageManagerService.-wrap15(paramString, paramPackage.packageName, "/pkg.apk");
      if ((PackageHelper.isContainerMounted(this.cid)) && (!PackageHelper.unMountSdDir(this.cid)))
      {
        Slog.i("PackageManager", "Failed to unmount " + this.cid + " before renaming");
        return false;
      }
      if (!PackageHelper.renameSdDir(this.cid, (String)localObject))
      {
        Slog.e("PackageManager", "Failed to rename " + this.cid + " to " + (String)localObject + " which might be stale. Will try to clean up.");
        if (!PackageHelper.destroySdDir((String)localObject))
        {
          Slog.e("PackageManager", "Very strange. Cannot clean up stale container " + (String)localObject);
          return false;
        }
        if (!PackageHelper.renameSdDir(this.cid, (String)localObject))
        {
          Slog.e("PackageManager", "Failed to rename " + this.cid + " to " + (String)localObject + " inspite of cleaning it up.");
          return false;
        }
      }
      if (!PackageHelper.isContainerMounted((String)localObject)) {
        Slog.w("PackageManager", "Mounting container " + (String)localObject);
      }
      for (paramString = PackageHelper.mountSdDir((String)localObject, PackageManagerService.getEncryptKey(), 1000); paramString == null; paramString = PackageHelper.getSdDir((String)localObject))
      {
        Slog.w("PackageManager", "Failed to get cache path for  " + (String)localObject);
        return false;
      }
      Log.i("PackageManager", "Succesfully renamed " + this.cid + " to " + (String)localObject + " at new path: " + paramString);
      this.cid = ((String)localObject);
      localObject = new File(this.packagePath);
      setMountPath(paramString);
      paramString = new File(this.packagePath);
      paramPackage.setCodePath(paramString.getAbsolutePath());
      paramPackage.setBaseCodePath(FileUtils.rewriteAfterRename((File)localObject, paramString, paramPackage.baseCodePath));
      paramPackage.setSplitCodePaths(FileUtils.rewriteAfterRename((File)localObject, paramString, paramPackage.splitCodePaths));
      paramPackage.setApplicationVolumeUuid(paramPackage.volumeUuid);
      paramPackage.setApplicationInfoCodePath(paramPackage.codePath);
      paramPackage.setApplicationInfoBaseCodePath(paramPackage.baseCodePath);
      paramPackage.setApplicationInfoSplitCodePaths(paramPackage.splitCodePaths);
      paramPackage.setApplicationInfoResourcePath(paramPackage.codePath);
      paramPackage.setApplicationInfoBaseResourcePath(paramPackage.baseCodePath);
      paramPackage.setApplicationInfoSplitResourcePaths(paramPackage.splitCodePaths);
      return true;
    }
    
    String getCodePath()
    {
      return this.packagePath;
    }
    
    String getPackageName()
    {
      return PackageManagerService.getAsecPackageName(this.cid);
    }
    
    String getResourcePath()
    {
      return this.resourcePath;
    }
  }
  
  private static abstract interface BlobXmlRestorer
  {
    public abstract void apply(XmlPullParser paramXmlPullParser, int paramInt)
      throws IOException, XmlPullParserException;
  }
  
  private final class ClearStorageConnection
    implements ServiceConnection
  {
    IMediaContainerService mContainerService;
    
    private ClearStorageConnection() {}
    
    public void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
    {
      try
      {
        this.mContainerService = IMediaContainerService.Stub.asInterface(paramIBinder);
        notifyAll();
        return;
      }
      finally
      {
        paramComponentName = finally;
        throw paramComponentName;
      }
    }
    
    public void onServiceDisconnected(ComponentName paramComponentName) {}
  }
  
  private static class CrossProfileDomainInfo
  {
    int bestDomainVerificationStatus;
    ResolveInfo resolveInfo;
  }
  
  class DefaultContainerConnection
    implements ServiceConnection
  {
    DefaultContainerConnection() {}
    
    public void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
    {
      paramComponentName = IMediaContainerService.Stub.asInterface(paramIBinder);
      PackageManagerService.this.mHandler.sendMessage(PackageManagerService.this.mHandler.obtainMessage(3, paramComponentName));
    }
    
    public void onServiceDisconnected(ComponentName paramComponentName) {}
  }
  
  class DozeWhitelistConfigUpdater
    implements ConfigObserver.ConfigUpdater
  {
    DozeWhitelistConfigUpdater() {}
    
    public void updateConfig(JSONArray paramJSONArray)
    {
      PackageManagerService.-wrap39(PackageManagerService.this, paramJSONArray);
    }
  }
  
  static class DumpState
  {
    public static final int DUMP_ACTIVITY_RESOLVERS = 4;
    public static final int DUMP_COMPILER_STATS = 2097152;
    public static final int DUMP_CONTENT_RESOLVERS = 32;
    public static final int DUMP_DEXOPT = 1048576;
    public static final int DUMP_DOMAIN_PREFERRED = 262144;
    public static final int DUMP_FEATURES = 2;
    public static final int DUMP_FROZEN = 524288;
    public static final int DUMP_INSTALLS = 65536;
    public static final int DUMP_INTENT_FILTER_VERIFIERS = 131072;
    public static final int DUMP_KEYSETS = 16384;
    public static final int DUMP_LIBS = 1;
    public static final int DUMP_MESSAGES = 512;
    public static final int DUMP_PACKAGES = 128;
    public static final int DUMP_PERMISSIONS = 64;
    public static final int DUMP_PREFERRED = 4096;
    public static final int DUMP_PREFERRED_XML = 8192;
    public static final int DUMP_PROVIDERS = 1024;
    public static final int DUMP_RECEIVER_RESOLVERS = 16;
    public static final int DUMP_SERVICE_RESOLVERS = 8;
    public static final int DUMP_SHARED_USERS = 256;
    public static final int DUMP_VERIFIERS = 2048;
    public static final int DUMP_VERSION = 32768;
    public static final int OPTION_SHOW_FILTERS = 1;
    private int mOptions;
    private SharedUserSetting mSharedUser;
    private boolean mTitlePrinted;
    private int mTypes;
    
    public SharedUserSetting getSharedUser()
    {
      return this.mSharedUser;
    }
    
    public boolean getTitlePrinted()
    {
      return this.mTitlePrinted;
    }
    
    public boolean isDumping(int paramInt)
    {
      if ((this.mTypes == 0) && (paramInt != 8192)) {
        return true;
      }
      return (this.mTypes & paramInt) != 0;
    }
    
    public boolean isOptionEnabled(int paramInt)
    {
      boolean bool = false;
      if ((this.mOptions & paramInt) != 0) {
        bool = true;
      }
      return bool;
    }
    
    public boolean onTitlePrinted()
    {
      boolean bool = this.mTitlePrinted;
      this.mTitlePrinted = true;
      return bool;
    }
    
    public void setDump(int paramInt)
    {
      this.mTypes |= paramInt;
    }
    
    public void setOptionEnabled(int paramInt)
    {
      this.mOptions |= paramInt;
    }
    
    public void setSharedUser(SharedUserSetting paramSharedUserSetting)
    {
      this.mSharedUser = paramSharedUserSetting;
    }
    
    public void setTitlePrinted(boolean paramBoolean)
    {
      this.mTitlePrinted = paramBoolean;
    }
  }
  
  private static final class EphemeralIntentResolver
    extends IntentResolver<EphemeralResolveInfo.EphemeralResolveIntentInfo, EphemeralResolveInfo>
  {
    final ArrayMap<String, Pair<Integer, EphemeralResolveInfo>> mOrderResult = new ArrayMap();
    
    protected void filterResults(List<EphemeralResolveInfo> paramList)
    {
      if (this.mOrderResult.size() == 0) {
        return;
      }
      int j = paramList.size();
      int i = 0;
      EphemeralResolveInfo localEphemeralResolveInfo;
      Object localObject;
      if (i < j)
      {
        localEphemeralResolveInfo = (EphemeralResolveInfo)paramList.get(i);
        localObject = localEphemeralResolveInfo.getPackageName();
        localObject = (Pair)this.mOrderResult.get(localObject);
        if (localObject != null) {}
      }
      for (;;)
      {
        i += 1;
        break;
        if (((Pair)localObject).second == localEphemeralResolveInfo)
        {
          this.mOrderResult.remove(localObject);
          if (this.mOrderResult.size() != 0) {}
        }
        else
        {
          paramList.remove(i);
          j -= 1;
          i -= 1;
        }
      }
    }
    
    protected boolean isPackageForFilter(String paramString, EphemeralResolveInfo.EphemeralResolveIntentInfo paramEphemeralResolveIntentInfo)
    {
      return true;
    }
    
    protected EphemeralResolveInfo.EphemeralResolveIntentInfo[] newArray(int paramInt)
    {
      return new EphemeralResolveInfo.EphemeralResolveIntentInfo[paramInt];
    }
    
    protected EphemeralResolveInfo newResult(EphemeralResolveInfo.EphemeralResolveIntentInfo paramEphemeralResolveIntentInfo, int paramInt1, int paramInt2)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      String str = paramEphemeralResolveIntentInfo.getEphemeralResolveInfo().getPackageName();
      Integer localInteger = Integer.valueOf(paramEphemeralResolveIntentInfo.getOrder());
      Pair localPair = (Pair)this.mOrderResult.get(str);
      if ((localPair != null) && (((Integer)localPair.first).intValue() >= localInteger.intValue())) {
        return null;
      }
      paramEphemeralResolveIntentInfo = paramEphemeralResolveIntentInfo.getEphemeralResolveInfo();
      if (localInteger.intValue() > 0) {
        this.mOrderResult.put(str, new Pair(localInteger, paramEphemeralResolveIntentInfo));
      }
      return paramEphemeralResolveIntentInfo;
    }
  }
  
  class FileInstallArgs
    extends PackageManagerService.InstallArgs
  {
    private File codeFile;
    private File resourceFile;
    
    FileInstallArgs(PackageManagerService.InstallParams paramInstallParams)
    {
      super(paramInstallParams.move, paramInstallParams.observer, paramInstallParams.installFlags, paramInstallParams.installerPackageName, paramInstallParams.volumeUuid, paramInstallParams.getUser(), null, paramInstallParams.packageAbiOverride, paramInstallParams.grantedRuntimePermissions, paramInstallParams.traceMethod, paramInstallParams.traceCookie, paramInstallParams.certificates);
      if (isFwdLocked()) {
        throw new IllegalArgumentException("Forward locking only supported in ASEC");
      }
    }
    
    FileInstallArgs(String paramString1, String paramString2, String[] paramArrayOfString)
    {
      super(null, null, 0, null, null, null, paramArrayOfString, null, null, null, 0, null);
      if (paramString1 != null)
      {
        this$1 = new File(paramString1);
        this.codeFile = PackageManagerService.this;
        if (paramString2 == null) {
          break label67;
        }
      }
      label67:
      for (this$1 = new File(paramString2);; this$1 = null)
      {
        this.resourceFile = PackageManagerService.this;
        return;
        this$1 = null;
        break;
      }
    }
    
    private boolean cleanUp()
    {
      if ((this.codeFile != null) && (this.codeFile.exists()))
      {
        if ((PackageManagerService.-get14(PackageManagerService.this)) && (this.codeFile.toString().startsWith("/system/reserve"))) {
          return true;
        }
      }
      else {
        return false;
      }
      PackageManagerService.this.removeCodePathLI(this.codeFile);
      if ((this.resourceFile == null) || (FileUtils.contains(this.codeFile, this.resourceFile))) {
        return true;
      }
      this.resourceFile.delete();
      return true;
    }
    
    private int doCopyApk(IMediaContainerService paramIMediaContainerService, boolean paramBoolean)
      throws RemoteException
    {
      PackageInfoLite localPackageInfoLite = paramIMediaContainerService.getMinimalPackageInfo(this.origin.file.getAbsolutePath(), 0, null);
      if (this.origin.staged)
      {
        if (PackageManagerService.DEBUG_INSTALL) {
          Slog.d("PackageManager", this.origin.file + " already staged; skipping copy");
        }
        this.codeFile = this.origin.file;
        this.resourceFile = this.origin.file;
        if (PackageManagerService.this.inCompatConfigList(70, localPackageInfoLite.packageName))
        {
          doCopyApkTheme(paramIMediaContainerService, 1);
          return doCheckOpSdk(localPackageInfoLite, 1);
        }
        return 1;
      }
      try
      {
        if ((this.installFlags & 0x800) != 0) {}
        for (paramBoolean = true;; paramBoolean = false)
        {
          localObject1 = PackageManagerService.this.mInstallerService.allocateStageDirLegacy(this.volumeUuid, paramBoolean);
          this.codeFile = ((File)localObject1);
          this.resourceFile = ((File)localObject1);
          localObject1 = new IParcelFileDescriptorFactory.Stub()
          {
            public ParcelFileDescriptor open(String paramAnonymousString, int paramAnonymousInt)
              throws RemoteException
            {
              if (!FileUtils.isValidExtFilename(paramAnonymousString)) {
                throw new IllegalArgumentException("Invalid filename: " + paramAnonymousString);
              }
              try
              {
                paramAnonymousString = new File(PackageManagerService.FileInstallArgs.-get0(PackageManagerService.FileInstallArgs.this), paramAnonymousString);
                FileDescriptor localFileDescriptor = Os.open(paramAnonymousString.getAbsolutePath(), OsConstants.O_RDWR | OsConstants.O_CREAT, 420);
                Os.chmod(paramAnonymousString.getAbsolutePath(), 420);
                paramAnonymousString = new ParcelFileDescriptor(localFileDescriptor);
                return paramAnonymousString;
              }
              catch (ErrnoException paramAnonymousString)
              {
                throw new RemoteException("Failed to open: " + paramAnonymousString.getMessage());
              }
            }
          };
          i = paramIMediaContainerService.copyPackage(this.origin.file.getAbsolutePath(), (IParcelFileDescriptorFactory)localObject1);
          if (i == 1) {
            break;
          }
          Slog.e("PackageManager", "Failed to copy package");
          return i;
        }
        localFile = new File(this.codeFile, "lib");
      }
      catch (IOException paramIMediaContainerService)
      {
        Slog.w("PackageManager", "Failed to create copy file: " + paramIMediaContainerService);
        return -4;
      }
      File localFile;
      localObject2 = null;
      localObject1 = null;
      try
      {
        NativeLibraryHelper.Handle localHandle = NativeLibraryHelper.Handle.create(this.codeFile);
        localObject1 = localHandle;
        localObject2 = localHandle;
        i = NativeLibraryHelper.copyNativeBinariesWithOverride(localHandle, localFile, this.abiOverride);
        IoUtils.closeQuietly(localHandle);
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          int j;
          localObject2 = localObject1;
          Slog.e("PackageManager", "Copying native libraries failed", localIOException);
          i = -110;
          IoUtils.closeQuietly((AutoCloseable)localObject1);
        }
      }
      finally
      {
        IoUtils.closeQuietly((AutoCloseable)localObject2);
      }
      j = i;
      if (PackageManagerService.this.inCompatConfigList(70, localPackageInfoLite.packageName))
      {
        doCopyApkTheme(paramIMediaContainerService, i);
        j = doCheckOpSdk(localPackageInfoLite, i);
      }
      return j;
    }
    
    void cleanUpResourcesLI()
    {
      List localList3 = Collections.EMPTY_LIST;
      List localList2 = localList3;
      if (this.codeFile != null)
      {
        localList2 = localList3;
        if (this.codeFile.exists()) {
          localList1 = localList3;
        }
      }
      try
      {
        PackageParser.PackageLite localPackageLite = PackageParser.parsePackageLite(this.codeFile, 0);
        localList1 = localList3;
        localList3 = localPackageLite.getAllCodePaths();
        localList2 = localList3;
        localList1 = localList3;
        if (PackageManagerService.-get14(PackageManagerService.this))
        {
          localList2 = localList3;
          localList1 = localList3;
          if (this.codeFile.toString().startsWith("/system/reserve"))
          {
            localList1 = localList3;
            OemPackageManagerHelper.putDeletedAppNameinList(localPackageLite.packageName);
            localList1 = localList3;
            OemPackageManagerHelper.writeDeletedReserveAppsToXML();
            localList2 = localList3;
          }
        }
      }
      catch (PackageParser.PackageParserException localPackageParserException)
      {
        for (;;)
        {
          Object localObject = localList1;
        }
      }
      cleanUp();
      PackageManagerService.-wrap38(PackageManagerService.this, localList2, this.instructionSets);
    }
    
    int copyApk(IMediaContainerService paramIMediaContainerService, boolean paramBoolean)
      throws RemoteException
    {
      Trace.traceBegin(262144L, "copyApk");
      try
      {
        int i = doCopyApk(paramIMediaContainerService, paramBoolean);
        return i;
      }
      finally
      {
        Trace.traceEnd(262144L);
      }
    }
    
    int doCheckOpSdk(PackageInfoLite paramPackageInfoLite, int paramInt)
      throws RemoteException
    {
      int i = paramInt;
      if (!"".equals(paramPackageInfoLite.oplibDependencyStr))
      {
        i = paramInt;
        if (!UpgradeCenterUtils.isRequiredOpApiCompatibleWithRom(paramPackageInfoLite.oplibDependencyStr))
        {
          i = -12;
          Slog.w("PackageManager", "Fail to install, required OnePlus SDK : " + paramPackageInfoLite.oplibDependencyStr);
          Toast.makeText(PackageManagerService.this.mContext, PackageManagerService.this.mContext.getResources().getString(84541485), 1).show();
        }
      }
      return i;
    }
    
    int doCopyApkTheme(IMediaContainerService paramIMediaContainerService, int paramInt)
      throws RemoteException
    {
      IParcelFileDescriptorFactory.Stub local2 = new IParcelFileDescriptorFactory.Stub()
      {
        public ParcelFileDescriptor open(String paramAnonymousString, int paramAnonymousInt)
          throws RemoteException
        {
          try
          {
            paramAnonymousString = new File(PackageManagerService.FileInstallArgs.-get0(PackageManagerService.FileInstallArgs.this), paramAnonymousString);
            Slog.v("PackageManager", "creating theme package: " + paramAnonymousString.getAbsolutePath());
            Object localObject = paramAnonymousString.getParentFile();
            if (!((File)localObject).exists()) {
              ((File)localObject).mkdirs();
            }
            localObject = Os.open(paramAnonymousString.getAbsolutePath(), OsConstants.O_RDWR | OsConstants.O_CREAT, 420);
            Os.chmod(paramAnonymousString.getAbsolutePath(), 420);
            paramAnonymousString = new ParcelFileDescriptor((FileDescriptor)localObject);
            return paramAnonymousString;
          }
          catch (ErrnoException paramAnonymousString)
          {
            throw new RemoteException("Failed to open: " + paramAnonymousString.getMessage());
          }
        }
      };
      try
      {
        int i = paramIMediaContainerService.copyPackageThemes(this.origin.file.getAbsolutePath(), local2);
        paramInt = i;
      }
      catch (Exception paramIMediaContainerService)
      {
        for (;;)
        {
          Slog.w("PackageManager", "Exception happened while copying themes from APK: ", paramIMediaContainerService.fillInStackTrace());
        }
      }
      if (paramInt != 1) {
        Slog.w("PackageManager", "Failed to copy package themes: " + paramInt);
      }
      return paramInt;
    }
    
    boolean doPostDeleteLI(boolean paramBoolean)
    {
      cleanUpResourcesLI();
      return true;
    }
    
    int doPostInstall(int paramInt1, int paramInt2)
    {
      if (paramInt1 != 1) {
        cleanUp();
      }
      return paramInt1;
    }
    
    int doPreInstall(int paramInt)
    {
      if (paramInt != 1) {
        cleanUp();
      }
      return paramInt;
    }
    
    boolean doRename(int paramInt, PackageParser.Package paramPackage, String paramString)
    {
      if (paramInt != 1)
      {
        cleanUp();
        return false;
      }
      File localFile = this.codeFile.getParentFile();
      paramString = this.codeFile;
      localFile = PackageManagerService.-wrap13(PackageManagerService.this, localFile, paramPackage.packageName);
      if (PackageManagerService.DEBUG_INSTALL) {
        Slog.d("PackageManager", "Renaming " + paramString + " to " + localFile);
      }
      try
      {
        Os.rename(paramString.getAbsolutePath(), localFile.getAbsolutePath());
        if (!SELinux.restoreconRecursive(localFile))
        {
          Slog.w("PackageManager", "Failed to restorecon");
          return false;
        }
      }
      catch (ErrnoException paramPackage)
      {
        Slog.w("PackageManager", "Failed to rename", paramPackage);
        return false;
      }
      this.codeFile = localFile;
      this.resourceFile = localFile;
      paramPackage.setCodePath(localFile.getAbsolutePath());
      paramPackage.setBaseCodePath(FileUtils.rewriteAfterRename(paramString, localFile, paramPackage.baseCodePath));
      paramPackage.setSplitCodePaths(FileUtils.rewriteAfterRename(paramString, localFile, paramPackage.splitCodePaths));
      paramPackage.setApplicationVolumeUuid(paramPackage.volumeUuid);
      paramPackage.setApplicationInfoCodePath(paramPackage.codePath);
      paramPackage.setApplicationInfoBaseCodePath(paramPackage.baseCodePath);
      paramPackage.setApplicationInfoSplitCodePaths(paramPackage.splitCodePaths);
      paramPackage.setApplicationInfoResourcePath(paramPackage.codePath);
      paramPackage.setApplicationInfoBaseResourcePath(paramPackage.baseCodePath);
      paramPackage.setApplicationInfoSplitResourcePaths(paramPackage.splitCodePaths);
      return true;
    }
    
    String getCodePath()
    {
      String str = null;
      if (this.codeFile != null) {
        str = this.codeFile.getAbsolutePath();
      }
      return str;
    }
    
    String getResourcePath()
    {
      String str = null;
      if (this.resourceFile != null) {
        str = this.resourceFile.getAbsolutePath();
      }
      return str;
    }
  }
  
  private abstract class HandlerParams
  {
    private static final int MAX_RETRIES = 4;
    private int mRetries = 0;
    private final UserHandle mUser;
    int traceCookie;
    String traceMethod;
    
    HandlerParams(UserHandle paramUserHandle)
    {
      this.mUser = paramUserHandle;
    }
    
    UserHandle getUser()
    {
      return this.mUser;
    }
    
    abstract void handleReturnCode();
    
    abstract void handleServiceError();
    
    abstract void handleStartCopy()
      throws RemoteException;
    
    final void serviceError()
    {
      if (PackageManagerService.DEBUG_INSTALL) {
        Slog.i("PackageManager", "serviceError");
      }
      handleServiceError();
      handleReturnCode();
    }
    
    HandlerParams setTraceCookie(int paramInt)
    {
      this.traceCookie = paramInt;
      return this;
    }
    
    HandlerParams setTraceMethod(String paramString)
    {
      this.traceMethod = paramString;
      return this;
    }
    
    final boolean startCopy()
    {
      try
      {
        if (PackageManagerService.DEBUG_INSTALL) {
          Slog.i("PackageManager", "startCopy " + this.mUser + ": " + this);
        }
        int i = this.mRetries + 1;
        this.mRetries = i;
        if (i > 4)
        {
          Slog.w("PackageManager", "Failed to invoke remote methods on default container service. Giving up");
          PackageManagerService.this.mHandler.sendEmptyMessage(11);
          handleServiceError();
          return false;
        }
        handleStartCopy();
        bool = true;
      }
      catch (RemoteException localRemoteException)
      {
        for (;;)
        {
          if (PackageManagerService.DEBUG_INSTALL) {
            Slog.i("PackageManager", "Posting install MCS_RECONNECT");
          }
          PackageManagerService.this.mHandler.sendEmptyMessage(10);
          boolean bool = false;
        }
      }
      handleReturnCode();
      return bool;
    }
  }
  
  private static class IFVerificationParams
  {
    PackageParser.Package pkg;
    boolean replacing;
    int userId;
    int verifierUid;
    
    public IFVerificationParams(PackageParser.Package paramPackage, boolean paramBoolean, int paramInt1, int paramInt2)
    {
      this.pkg = paramPackage;
      this.replacing = paramBoolean;
      this.userId = paramInt1;
      this.replacing = paramBoolean;
      this.verifierUid = paramInt2;
    }
  }
  
  static abstract class InstallArgs
  {
    String abiOverride;
    final Certificate[][] certificates;
    final int installFlags;
    final String[] installGrantPermissions;
    final String installerPackageName;
    String[] instructionSets;
    final PackageManagerService.MoveInfo move;
    final IPackageInstallObserver2 observer;
    final PackageManagerService.OriginInfo origin;
    final int traceCookie;
    final String traceMethod;
    final UserHandle user;
    final String volumeUuid;
    
    InstallArgs(PackageManagerService.OriginInfo paramOriginInfo, PackageManagerService.MoveInfo paramMoveInfo, IPackageInstallObserver2 paramIPackageInstallObserver2, int paramInt1, String paramString1, String paramString2, UserHandle paramUserHandle, String[] paramArrayOfString1, String paramString3, String[] paramArrayOfString2, String paramString4, int paramInt2, Certificate[][] paramArrayOfCertificate)
    {
      this.origin = paramOriginInfo;
      this.move = paramMoveInfo;
      this.installFlags = paramInt1;
      this.observer = paramIPackageInstallObserver2;
      this.installerPackageName = paramString1;
      this.volumeUuid = paramString2;
      this.user = paramUserHandle;
      this.instructionSets = paramArrayOfString1;
      this.abiOverride = paramString3;
      this.installGrantPermissions = paramArrayOfString2;
      this.traceMethod = paramString4;
      this.traceCookie = paramInt2;
      this.certificates = paramArrayOfCertificate;
    }
    
    abstract void cleanUpResourcesLI();
    
    abstract int copyApk(IMediaContainerService paramIMediaContainerService, boolean paramBoolean)
      throws RemoteException;
    
    int doPostCopy(int paramInt)
    {
      return 1;
    }
    
    abstract boolean doPostDeleteLI(boolean paramBoolean);
    
    abstract int doPostInstall(int paramInt1, int paramInt2);
    
    int doPreCopy()
    {
      return 1;
    }
    
    abstract int doPreInstall(int paramInt);
    
    abstract boolean doRename(int paramInt, PackageParser.Package paramPackage, String paramString);
    
    abstract String getCodePath();
    
    abstract String getResourcePath();
    
    UserHandle getUser()
    {
      return this.user;
    }
    
    protected boolean isEphemeral()
    {
      boolean bool = false;
      if ((this.installFlags & 0x800) != 0) {
        bool = true;
      }
      return bool;
    }
    
    protected boolean isExternalAsec()
    {
      boolean bool = false;
      if ((this.installFlags & 0x8) != 0) {
        bool = true;
      }
      return bool;
    }
    
    protected boolean isFwdLocked()
    {
      boolean bool = false;
      if ((this.installFlags & 0x1) != 0) {
        bool = true;
      }
      return bool;
    }
  }
  
  class InstallParams
    extends PackageManagerService.HandlerParams
  {
    final Certificate[][] certificates;
    final String[] grantedRuntimePermissions;
    int installFlags;
    final String installerPackageName;
    private PackageManagerService.InstallArgs mArgs;
    private int mRet;
    final PackageManagerService.MoveInfo move;
    final IPackageInstallObserver2 observer;
    final PackageManagerService.OriginInfo origin;
    final String packageAbiOverride;
    final PackageManagerService.VerificationInfo verificationInfo;
    final String volumeUuid;
    
    InstallParams(PackageManagerService.OriginInfo paramOriginInfo, PackageManagerService.MoveInfo paramMoveInfo, IPackageInstallObserver2 paramIPackageInstallObserver2, int paramInt, String paramString1, String paramString2, PackageManagerService.VerificationInfo paramVerificationInfo, UserHandle paramUserHandle, String paramString3, String[] paramArrayOfString, Certificate[][] paramArrayOfCertificate)
    {
      super(paramUserHandle);
      this.origin = paramOriginInfo;
      this.move = paramMoveInfo;
      this.observer = paramIPackageInstallObserver2;
      this.installFlags = paramInt;
      this.installerPackageName = paramString1;
      this.volumeUuid = paramString2;
      this.verificationInfo = paramVerificationInfo;
      this.packageAbiOverride = paramString3;
      this.grantedRuntimePermissions = paramArrayOfString;
      this.certificates = paramArrayOfCertificate;
    }
    
    private int installLocationPolicy(PackageInfoLite paramPackageInfoLite)
    {
      int j = 0;
      Object localObject = paramPackageInfoLite.packageName;
      int n = paramPackageInfoLite.installLocation;
      int k;
      if ((this.installFlags & 0x8) != 0) {
        k = 1;
      }
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageParser.Package localPackage3 = (PackageParser.Package)PackageManagerService.this.mPackages.get(localObject);
        PackageParser.Package localPackage1 = localPackage3;
        PackageParser.Package localPackage2 = localPackage1;
        if (localPackage3 == null)
        {
          localObject = (PackageSetting)PackageManagerService.this.mSettings.mPackages.get(localObject);
          localPackage2 = localPackage1;
          if (localObject != null) {
            localPackage2 = ((PackageSetting)localObject).pkg;
          }
        }
        int m;
        label124:
        int i;
        label139:
        boolean bool;
        if (localPackage2 != null)
        {
          if ((this.installFlags & 0x80) == 0) {
            break label218;
          }
          m = 1;
          if ((localPackage2.applicationInfo.flags & 0x2) == 0) {
            break label224;
          }
          i = 1;
          if (m != 0)
          {
            bool = Build.IS_DEBUGGABLE;
            if (bool) {
              break label229;
            }
          }
        }
        label218:
        label224:
        label229:
        for (j = i;; j = 1)
        {
          if (j == 0) {}
          try
          {
            PackageManagerService.-wrap21(localPackage2, paramPackageInfoLite);
            if (localPackage3 == null) {
              break label301;
            }
            if ((this.installFlags & 0x2) == 0) {
              break label333;
            }
            if ((localPackage3.applicationInfo.flags & 0x1) == 0) {
              break label274;
            }
            if (k == 0) {
              break label269;
            }
            Slog.w("PackageManager", "Cannot install update to system app on sdcard");
            return -3;
          }
          catch (PackageManagerException paramPackageInfoLite)
          {
            Slog.w("PackageManager", "Downgrade detected: " + paramPackageInfoLite.getMessage());
            return -7;
          }
          k = 0;
          break;
          m = 0;
          break label124;
          i = 0;
          break label139;
        }
        label269:
        return 1;
        label274:
        if (k != 0) {
          return 2;
        }
        if (n == 1) {
          return 1;
        }
        if (n == 2)
        {
          label301:
          if (k != 0) {
            return 2;
          }
        }
        else
        {
          bool = PackageManagerService.-wrap6(localPackage3);
          if (bool) {
            return 2;
          }
          return 1;
          label333:
          return -4;
        }
      }
      return paramPackageInfoLite.recommendedInstallLocation;
    }
    
    void handleReturnCode()
    {
      if (this.mArgs != null) {
        PackageManagerService.-wrap34(PackageManagerService.this, this.mArgs, this.mRet);
      }
    }
    
    void handleServiceError()
    {
      this.mArgs = PackageManagerService.-wrap9(PackageManagerService.this, this);
      this.mRet = -110;
    }
    
    public void handleStartCopy()
      throws RemoteException
    {
      final int n = 1;
      label57:
      int m;
      label70:
      int i;
      label83:
      Object localObject1;
      long l1;
      int j;
      label111:
      label133:
      Object localObject4;
      Object localObject3;
      Object localObject2;
      label216:
      label228:
      Object localObject5;
      int i1;
      if (this.origin.staged)
      {
        if (this.origin.file != null)
        {
          this.installFlags |= 0x10;
          this.installFlags &= 0xFFFFFFF7;
        }
      }
      else
      {
        if ((this.installFlags & 0x8) == 0) {
          break label897;
        }
        k = 1;
        if ((this.installFlags & 0x10) == 0) {
          break label902;
        }
        m = 1;
        if ((this.installFlags & 0x800) == 0) {
          break label908;
        }
        i = 1;
        localObject1 = null;
        l1 = OemPackageManagerHelper.getDataFreeSpace();
        if ((m == 0) || (k == 0)) {
          break label913;
        }
        Slog.w("PackageManager", "Conflicting flags specified for installing on both internal and external");
        j = -19;
        i = j;
        if (j == 1)
        {
          i = ((PackageInfoLite)localObject1).recommendedInstallLocation;
          if (i != -3) {
            break label1222;
          }
          i = -19;
        }
        localObject4 = PackageManagerService.-wrap9(PackageManagerService.this, this);
        ((PackageManagerService.InstallArgs)localObject4).abiOverride = PackageManagerService.-get10(PackageManagerService.this).abiOverride(((PackageManagerService.InstallArgs)localObject4).abiOverride, ((PackageInfoLite)localObject1).packageName);
        this.mArgs = ((PackageManagerService.InstallArgs)localObject4);
        k = i;
        if (i == 1)
        {
          localObject3 = getUser();
          localObject2 = localObject3;
          if (localObject3 == UserHandle.ALL) {
            localObject2 = UserHandle.SYSTEM;
          }
          if (PackageManagerService.this.mRequiredVerifierPackage != null) {
            break label1423;
          }
          j = -1;
          if (PackageManagerService.this.mOptionalVerifierPackage != null) {
            break label1448;
          }
          k = -1;
          if ((this.origin.existing) || ((j == -1) && (k == -1)) || (!PackageManagerService.-wrap7(PackageManagerService.this, ((UserHandle)localObject2).getIdentifier(), this.installFlags))) {
            break label1541;
          }
          localObject3 = new Intent("android.intent.action.PACKAGE_NEEDS_VERIFICATION");
          ((Intent)localObject3).addFlags(268435456);
          ((Intent)localObject3).setDataAndType(Uri.fromFile(new File(this.origin.resolvedPath)), "application/vnd.android.package-archive");
          ((Intent)localObject3).addFlags(1);
          List localList = PackageManagerService.-wrap17(PackageManagerService.this, (Intent)localObject3, "application/vnd.android.package-archive", 0, ((UserHandle)localObject2).getIdentifier());
          if (PackageManagerService.DEBUG_VERIFY) {
            Slog.d("PackageManager", "Found " + localList.size() + " verifiers for intent " + ((Intent)localObject3).toString() + " with " + ((PackageInfoLite)localObject1).verifiers.length + " optional verifiers");
          }
          localObject5 = PackageManagerService.this;
          n = PackageManagerService.-get11((PackageManagerService)localObject5);
          PackageManagerService.-set2((PackageManagerService)localObject5, n + 1);
          ((Intent)localObject3).putExtra("android.content.pm.extra.VERIFICATION_ID", n);
          ((Intent)localObject3).putExtra("android.content.pm.extra.VERIFICATION_INSTALLER_PACKAGE", this.installerPackageName);
          ((Intent)localObject3).putExtra("android.content.pm.extra.VERIFICATION_INSTALL_FLAGS", this.installFlags);
          ((Intent)localObject3).putExtra("android.content.pm.extra.VERIFICATION_PACKAGE_NAME", ((PackageInfoLite)localObject1).packageName);
          ((Intent)localObject3).putExtra("android.content.pm.extra.VERIFICATION_VERSION_CODE", ((PackageInfoLite)localObject1).versionCode);
          if (this.verificationInfo != null)
          {
            if (this.verificationInfo.originatingUri != null) {
              ((Intent)localObject3).putExtra("android.intent.extra.ORIGINATING_URI", this.verificationInfo.originatingUri);
            }
            if (this.verificationInfo.referrer != null) {
              ((Intent)localObject3).putExtra("android.intent.extra.REFERRER", this.verificationInfo.referrer);
            }
            if (this.verificationInfo.originatingUid >= 0) {
              ((Intent)localObject3).putExtra("android.intent.extra.ORIGINATING_UID", this.verificationInfo.originatingUid);
            }
            if (this.verificationInfo.installerUid >= 0) {
              ((Intent)localObject3).putExtra("android.content.pm.extra.VERIFICATION_INSTALLER_UID", this.verificationInfo.installerUid);
            }
          }
          localObject4 = new PackageVerificationState(j, (PackageManagerService.InstallArgs)localObject4);
          PackageManagerService.this.mPendingVerification.append(n, localObject4);
          localObject1 = PackageManagerService.-wrap16(PackageManagerService.this, (PackageInfoLite)localObject1, localList, (PackageVerificationState)localObject4);
          j = i;
          if (localObject1 != null)
          {
            i1 = ((List)localObject1).size();
            if (i1 != 0) {
              break label1473;
            }
            Slog.i("PackageManager", "Additional verifiers required, but none installed.");
            j = -22;
          }
          if (PackageManagerService.this.mOptionalVerifierPackage != null)
          {
            localObject1 = new Intent((Intent)localObject3);
            ((Intent)localObject1).setComponent(PackageManagerService.-wrap0(PackageManagerService.this, PackageManagerService.this.mOptionalVerifierPackage, localList));
            ((PackageVerificationState)localObject4).addOptionalVerifier(k);
            PackageManagerService.this.mContext.sendBroadcastAsUser((Intent)localObject1, (UserHandle)localObject2, "android.permission.PACKAGE_VERIFICATION_AGENT");
          }
          localObject1 = PackageManagerService.-wrap0(PackageManagerService.this, PackageManagerService.this.mRequiredVerifierPackage, localList);
          k = j;
          if (j == 1)
          {
            k = j;
            if (PackageManagerService.this.mRequiredVerifierPackage != null)
            {
              Trace.asyncTraceBegin(262144L, "verification", n);
              ((Intent)localObject3).setComponent((ComponentName)localObject1);
              PackageManagerService.this.mContext.sendOrderedBroadcastAsUser((Intent)localObject3, (UserHandle)localObject2, "android.permission.PACKAGE_VERIFICATION_AGENT", new BroadcastReceiver()
              {
                public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
                {
                  paramAnonymousContext = PackageManagerService.this.mHandler.obtainMessage(16);
                  paramAnonymousContext.arg1 = n;
                  PackageManagerService.this.mHandler.sendMessageDelayed(paramAnonymousContext, PackageManagerService.-wrap19(PackageManagerService.this));
                }
              }, null, 0, null, null);
              this.mArgs = null;
            }
          }
        }
      }
      label897:
      label902:
      label908:
      label913:
      label1222:
      label1423:
      label1448:
      label1473:
      label1541:
      for (int k = j;; k = ((PackageManagerService.InstallArgs)localObject4).copyApk(PackageManagerService.-get3(PackageManagerService.this), true))
      {
        this.mRet = k;
        return;
        if (this.origin.cid != null)
        {
          this.installFlags |= 0x8;
          this.installFlags &= 0xFFFFFFEF;
          break;
        }
        throw new IllegalStateException("Invalid stage location");
        k = 0;
        break label57;
        m = 0;
        break label70;
        i = 0;
        break label83;
        if ((k != 0) && (i != 0))
        {
          Slog.w("PackageManager", "Conflicting flags specified for installing ephemeral on external");
          j = -19;
          break label111;
        }
        if (l1 <= 83886080L)
        {
          Slog.w("PackageManager", "the the free space of internal partition is " + l1);
          j = -4;
          break label111;
        }
        localObject2 = PackageManagerService.-get3(PackageManagerService.this).getMinimalPackageInfo(this.origin.resolvedPath, this.installFlags, this.packageAbiOverride);
        if ((PackageManagerService.-get0()) && (i != 0)) {
          Slog.v("PackageManager", "pkgLite for install: " + localObject2);
        }
        localObject1 = localObject2;
        j = n;
        if (this.origin.staged) {
          break label111;
        }
        localObject1 = localObject2;
        j = n;
        if (((PackageInfoLite)localObject2).recommendedInstallLocation != -1) {
          break label111;
        }
        l1 = StorageManager.from(PackageManagerService.this.mContext).getStorageLowBytes(Environment.getDataDirectory());
        long l2 = PackageManagerService.-get3(PackageManagerService.this).calculateInstalledSize(this.origin.resolvedPath, isForwardLocked(), this.packageAbiOverride);
        try
        {
          PackageManagerService.this.mInstaller.freeCache(null, l2 + l1);
          localObject1 = PackageManagerService.-get3(PackageManagerService.this).getMinimalPackageInfo(this.origin.resolvedPath, this.installFlags, this.packageAbiOverride);
          localObject2 = localObject1;
        }
        catch (InstallerConnection.InstallerException localInstallerException)
        {
          for (;;)
          {
            Slog.w("PackageManager", "Failed to free cache", localInstallerException);
          }
        }
        localObject1 = localObject2;
        j = n;
        if (((PackageInfoLite)localObject2).recommendedInstallLocation != -6) {
          break label111;
        }
        ((PackageInfoLite)localObject2).recommendedInstallLocation = -1;
        localObject1 = localObject2;
        j = n;
        break label111;
        if (i == -4)
        {
          i = -1;
          break label133;
        }
        if (i == -1)
        {
          i = -4;
          break label133;
        }
        if (i == -2)
        {
          i = -2;
          break label133;
        }
        if (i == -6)
        {
          i = -3;
          break label133;
        }
        if (i == -5)
        {
          i = -20;
          break label133;
        }
        n = installLocationPolicy(localInstallerException);
        if (n == -7)
        {
          i = -25;
          break label133;
        }
        i = j;
        if (k != 0) {
          break label133;
        }
        i = j;
        if (m != 0) {
          break label133;
        }
        if (n == 2)
        {
          this.installFlags |= 0x8;
          this.installFlags &= 0xFFFFFFEF;
          i = j;
          break label133;
        }
        if (n == 3)
        {
          if (PackageManagerService.-get0()) {
            Slog.v("PackageManager", "...setting INSTALL_EPHEMERAL install flag");
          }
          this.installFlags |= 0x800;
          this.installFlags &= 0xFFFFFFE7;
          i = j;
          break label133;
        }
        this.installFlags |= 0x10;
        this.installFlags &= 0xFFFFFFF7;
        i = j;
        break label133;
        j = PackageManagerService.this.getPackageUid(PackageManagerService.this.mRequiredVerifierPackage, 268435456, ((UserHandle)localObject2).getIdentifier());
        break label216;
        k = PackageManagerService.this.getPackageUid(PackageManagerService.this.mOptionalVerifierPackage, 268435456, ((UserHandle)localObject2).getIdentifier());
        break label228;
        m = 0;
        for (;;)
        {
          j = i;
          if (m >= i1) {
            break;
          }
          localObject5 = (ComponentName)localInstallerException.get(m);
          Intent localIntent = new Intent((Intent)localObject3);
          localIntent.setComponent((ComponentName)localObject5);
          PackageManagerService.this.mContext.sendBroadcastAsUser(localIntent, (UserHandle)localObject2);
          m += 1;
        }
      }
    }
    
    public boolean isForwardLocked()
    {
      boolean bool = false;
      if ((this.installFlags & 0x1) != 0) {
        bool = true;
      }
      return bool;
    }
    
    public String toString()
    {
      return "InstallParams{" + Integer.toHexString(System.identityHashCode(this)) + " file=" + this.origin.file + " cid=" + this.origin.cid + "}";
    }
  }
  
  private static abstract interface IntentFilterVerifier<T extends IntentFilter>
  {
    public abstract boolean addOneIntentFilterVerification(int paramInt1, int paramInt2, int paramInt3, T paramT, String paramString);
    
    public abstract void receiveVerificationResponse(int paramInt);
    
    public abstract void startVerifications(int paramInt);
  }
  
  private class IntentVerifierProxy
    implements PackageManagerService.IntentFilterVerifier<PackageParser.ActivityIntentInfo>
  {
    private Context mContext;
    private ArrayList<Integer> mCurrentIntentFilterVerifications = new ArrayList();
    private ComponentName mIntentFilterVerifierComponent;
    
    public IntentVerifierProxy(Context paramContext, ComponentName paramComponentName)
    {
      this.mContext = paramContext;
      this.mIntentFilterVerifierComponent = paramComponentName;
    }
    
    private IntentFilterVerificationState createDomainVerificationState(int paramInt1, int paramInt2, int paramInt3, String arg4)
    {
      IntentFilterVerificationState localIntentFilterVerificationState = new IntentFilterVerificationState(paramInt1, paramInt2, ???);
      localIntentFilterVerificationState.setPendingState();
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mIntentFilterVerificationStates.append(paramInt3, localIntentFilterVerificationState);
        this.mCurrentIntentFilterVerifications.add(Integer.valueOf(paramInt3));
        return localIntentFilterVerificationState;
      }
    }
    
    private String getDefaultScheme()
    {
      return "https";
    }
    
    private void sendVerificationRequest(int paramInt1, int paramInt2, IntentFilterVerificationState paramIntentFilterVerificationState)
    {
      Intent localIntent = new Intent("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION");
      localIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_ID", paramInt2);
      localIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_URI_SCHEME", getDefaultScheme());
      localIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_HOSTS", paramIntentFilterVerificationState.getHostsString());
      localIntent.putExtra("android.content.pm.extra.INTENT_FILTER_VERIFICATION_PACKAGE_NAME", paramIntentFilterVerificationState.getPackageName());
      localIntent.setComponent(this.mIntentFilterVerifierComponent);
      localIntent.addFlags(268435456);
      paramIntentFilterVerificationState = new UserHandle(paramInt1);
      this.mContext.sendBroadcastAsUser(localIntent, paramIntentFilterVerificationState);
      if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
        Slog.d("PackageManager", "Sending IntentFilter verification broadcast");
      }
    }
    
    public boolean addOneIntentFilterVerification(int paramInt1, int paramInt2, int paramInt3, PackageParser.ActivityIntentInfo paramActivityIntentInfo, String paramString)
    {
      if (!PackageManagerService.-wrap4(paramActivityIntentInfo)) {
        return false;
      }
      IntentFilterVerificationState localIntentFilterVerificationState2 = (IntentFilterVerificationState)PackageManagerService.this.mIntentFilterVerificationStates.get(paramInt3);
      IntentFilterVerificationState localIntentFilterVerificationState1 = localIntentFilterVerificationState2;
      if (localIntentFilterVerificationState2 == null) {
        localIntentFilterVerificationState1 = createDomainVerificationState(paramInt1, paramInt2, paramInt3, paramString);
      }
      if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
        Slog.d("PackageManager", "Adding verification filter for " + paramString + ": " + paramActivityIntentInfo);
      }
      localIntentFilterVerificationState1.addFilter(paramActivityIntentInfo);
      return true;
    }
    
    public void receiveVerificationResponse(int paramInt)
    {
      IntentFilterVerificationState localIntentFilterVerificationState = (IntentFilterVerificationState)PackageManagerService.this.mIntentFilterVerificationStates.get(paramInt);
      boolean bool = localIntentFilterVerificationState.isVerified();
      Object localObject3 = localIntentFilterVerificationState.getFilters();
      int j = ((ArrayList)localObject3).size();
      if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
        Slog.i("PackageManager", "Received verification response " + paramInt + " for " + j + " filters, verified=" + bool);
      }
      int i = 0;
      while (i < j)
      {
        ??? = (PackageParser.ActivityIntentInfo)((ArrayList)localObject3).get(i);
        ((PackageParser.ActivityIntentInfo)???).setVerified(bool);
        if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
          Slog.d("PackageManager", "IntentFilter " + ((PackageParser.ActivityIntentInfo)???).toString() + " verified with result:" + bool + " and hosts:" + localIntentFilterVerificationState.getHostsString());
        }
        i += 1;
      }
      PackageManagerService.this.mIntentFilterVerificationStates.remove(paramInt);
      localObject3 = localIntentFilterVerificationState.getPackageName();
      IntentFilterVerificationInfo localIntentFilterVerificationInfo;
      synchronized (PackageManagerService.this.mPackages)
      {
        localIntentFilterVerificationInfo = PackageManagerService.this.mSettings.getIntentFilterVerificationLPr((String)localObject3);
        if (localIntentFilterVerificationInfo == null)
        {
          Slog.w("PackageManager", "IntentFilterVerificationInfo not found for verificationId:" + paramInt + " packageName:" + (String)localObject3);
          return;
        }
      }
      if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
        Slog.d("PackageManager", "Updating IntentFilterVerificationInfo for package " + (String)localObject3 + " verificationId:" + paramInt);
      }
      ??? = PackageManagerService.this.mPackages;
      if (bool) {}
      for (;;)
      {
        try
        {
          localIntentFilterVerificationInfo.setStatus(2);
          PackageManagerService.this.scheduleWriteSettingsLocked();
          j = ((IntentFilterVerificationState)localObject1).getUserId();
          int k;
          if (j != -1)
          {
            k = PackageManagerService.this.mSettings.getIntentFilterVerificationStatusLPr((String)localObject3, j);
            i = 0;
            paramInt = 0;
          }
          switch (k)
          {
          case 0: 
            if (paramInt != 0)
            {
              PackageManagerService.this.mSettings.updateIntentFilterVerificationStatusLPw((String)localObject3, i, j);
              PackageManagerService.this.scheduleWritePackageRestrictionsLocked(j);
            }
            return;
          }
        }
        finally {}
        localIntentFilterVerificationInfo.setStatus(1);
        continue;
        if (bool) {}
        for (i = 2;; i = 1)
        {
          paramInt = 1;
          break;
        }
        if (bool)
        {
          i = 2;
          paramInt = 1;
        }
      }
    }
    
    public void startVerifications(int paramInt)
    {
      int k = this.mCurrentIntentFilterVerifications.size();
      int i = 0;
      for (;;)
      {
        int m;
        IntentFilterVerificationState localIntentFilterVerificationState;
        String str;
        Object localObject3;
        if (i < k)
        {
          m = ((Integer)this.mCurrentIntentFilterVerifications.get(i)).intValue();
          localIntentFilterVerificationState = (IntentFilterVerificationState)PackageManagerService.this.mIntentFilterVerificationStates.get(m);
          str = localIntentFilterVerificationState.getPackageName();
          ??? = localIntentFilterVerificationState.getFilters();
          int n = ((ArrayList)???).size();
          localObject3 = new ArraySet();
          int j = 0;
          while (j < n)
          {
            ((ArraySet)localObject3).addAll(((PackageParser.ActivityIntentInfo)((ArrayList)???).get(j)).getHostsList());
            j += 1;
          }
          localObject3 = new ArrayList((Collection)localObject3);
        }
        synchronized (PackageManagerService.this.mPackages)
        {
          if (PackageManagerService.this.mSettings.createIntentFilterVerificationIfNeededLPw(str, (ArrayList)localObject3) != null) {
            PackageManagerService.this.scheduleWriteSettingsLocked();
          }
          sendVerificationRequest(paramInt, m, localIntentFilterVerificationState);
          i += 1;
        }
      }
    }
  }
  
  class MeasureParams
    extends PackageManagerService.HandlerParams
  {
    private final IPackageStatsObserver mObserver;
    private final PackageStats mStats;
    private boolean mSuccess;
    private int mUid;
    
    public MeasureParams(PackageStats paramPackageStats, IPackageStatsObserver paramIPackageStatsObserver)
    {
      super(new UserHandle(paramPackageStats.userHandle));
      this.mObserver = paramIPackageStatsObserver;
      this.mStats = paramPackageStats;
      this.mUid = Binder.getCallingUid();
    }
    
    void handleReturnCode()
    {
      if (this.mObserver != null) {}
      try
      {
        if (OnePlusProcessManager.isSupportFrozenApp()) {
          OnePlusProcessManager.resumeProcessByUID_out(this.mUid, "handleReturnCode");
        }
        this.mObserver.onGetStatsCompleted(this.mStats, this.mSuccess);
        return;
      }
      catch (RemoteException localRemoteException)
      {
        Slog.i("PackageManager", "Observer no longer exists.");
      }
    }
    
    void handleServiceError()
    {
      Slog.e("PackageManager", "Could not measure application " + this.mStats.packageName + " external storage");
    }
    
    void handleStartCopy()
      throws RemoteException
    {
      for (;;)
      {
        synchronized (PackageManagerService.this.mInstallLock)
        {
          this.mSuccess = PackageManagerService.-wrap3(PackageManagerService.this, this.mStats.packageName, this.mStats.userHandle, this.mStats);
          if (this.mSuccess) {
            i = 0;
          }
          try
          {
            ??? = Environment.getExternalStorageState();
            if ("mounted".equals(???)) {
              break label235;
            }
            boolean bool = "mounted_ro".equals(???);
            i = bool;
          }
          catch (Exception localException)
          {
            PackageStats localPackageStats;
            continue;
          }
          if (i != 0)
          {
            ??? = new Environment.UserEnvironment(this.mStats.userHandle);
            this.mStats.externalCacheSize = PackageManagerService.-wrap18(PackageManagerService.-get3(PackageManagerService.this), ((Environment.UserEnvironment)???).buildExternalStorageAppCacheDirs(this.mStats.packageName));
            this.mStats.externalDataSize = PackageManagerService.-wrap18(PackageManagerService.-get3(PackageManagerService.this), ((Environment.UserEnvironment)???).buildExternalStorageAppDataDirs(this.mStats.packageName));
            localPackageStats = this.mStats;
            localPackageStats.externalDataSize -= this.mStats.externalCacheSize;
            this.mStats.externalMediaSize = PackageManagerService.-wrap18(PackageManagerService.-get3(PackageManagerService.this), ((Environment.UserEnvironment)???).buildExternalStorageAppMediaDirs(this.mStats.packageName));
            this.mStats.externalObbSize = PackageManagerService.-wrap18(PackageManagerService.-get3(PackageManagerService.this), ((Environment.UserEnvironment)???).buildExternalStorageAppObbDirs(this.mStats.packageName));
          }
          return;
        }
        label235:
        int i = 1;
      }
    }
    
    public String toString()
    {
      return "MeasureParams{" + Integer.toHexString(System.identityHashCode(this)) + " " + this.mStats.packageName + "}";
    }
  }
  
  private static class MoveCallbacks
    extends Handler
  {
    private static final int MSG_CREATED = 1;
    private static final int MSG_STATUS_CHANGED = 2;
    private final RemoteCallbackList<IPackageMoveObserver> mCallbacks = new RemoteCallbackList();
    private final SparseIntArray mLastStatus = new SparseIntArray();
    
    public MoveCallbacks(Looper paramLooper)
    {
      super();
    }
    
    private void invokeCallback(IPackageMoveObserver paramIPackageMoveObserver, int paramInt, SomeArgs paramSomeArgs)
      throws RemoteException
    {
      switch (paramInt)
      {
      default: 
        return;
      case 1: 
        paramIPackageMoveObserver.onCreated(paramSomeArgs.argi1, (Bundle)paramSomeArgs.arg2);
        return;
      }
      paramIPackageMoveObserver.onStatusChanged(paramSomeArgs.argi1, paramSomeArgs.argi2, ((Long)paramSomeArgs.arg3).longValue());
    }
    
    private void notifyCreated(int paramInt, Bundle paramBundle)
    {
      Slog.v("PackageManager", "Move " + paramInt + " created " + paramBundle.toString());
      SomeArgs localSomeArgs = SomeArgs.obtain();
      localSomeArgs.argi1 = paramInt;
      localSomeArgs.arg2 = paramBundle;
      obtainMessage(1, localSomeArgs).sendToTarget();
    }
    
    private void notifyStatusChanged(int paramInt1, int paramInt2)
    {
      notifyStatusChanged(paramInt1, paramInt2, -1L);
    }
    
    private void notifyStatusChanged(int paramInt1, int paramInt2, long paramLong)
    {
      Slog.v("PackageManager", "Move " + paramInt1 + " status " + paramInt2);
      ??? = SomeArgs.obtain();
      ((SomeArgs)???).argi1 = paramInt1;
      ((SomeArgs)???).argi2 = paramInt2;
      ((SomeArgs)???).arg3 = Long.valueOf(paramLong);
      obtainMessage(2, ???).sendToTarget();
      synchronized (this.mLastStatus)
      {
        this.mLastStatus.put(paramInt1, paramInt2);
        return;
      }
    }
    
    public void handleMessage(Message paramMessage)
    {
      SomeArgs localSomeArgs = (SomeArgs)paramMessage.obj;
      int j = this.mCallbacks.beginBroadcast();
      int i = 0;
      for (;;)
      {
        IPackageMoveObserver localIPackageMoveObserver;
        if (i < j) {
          localIPackageMoveObserver = (IPackageMoveObserver)this.mCallbacks.getBroadcastItem(i);
        }
        try
        {
          invokeCallback(localIPackageMoveObserver, paramMessage.what, localSomeArgs);
          i += 1;
          continue;
          this.mCallbacks.finishBroadcast();
          localSomeArgs.recycle();
          return;
        }
        catch (RemoteException localRemoteException)
        {
          for (;;) {}
        }
      }
    }
    
    public void register(IPackageMoveObserver paramIPackageMoveObserver)
    {
      this.mCallbacks.register(paramIPackageMoveObserver);
    }
    
    public void unregister(IPackageMoveObserver paramIPackageMoveObserver)
    {
      this.mCallbacks.unregister(paramIPackageMoveObserver);
    }
  }
  
  static class MoveInfo
  {
    final int appId;
    final String dataAppName;
    final String fromUuid;
    final int moveId;
    final String packageName;
    final String seinfo;
    final int targetSdkVersion;
    final String toUuid;
    
    public MoveInfo(int paramInt1, String paramString1, String paramString2, String paramString3, String paramString4, int paramInt2, String paramString5, int paramInt3)
    {
      this.moveId = paramInt1;
      this.fromUuid = paramString1;
      this.toUuid = paramString2;
      this.packageName = paramString3;
      this.dataAppName = paramString4;
      this.appId = paramInt2;
      this.seinfo = paramString5;
      this.targetSdkVersion = paramInt3;
    }
  }
  
  class MoveInstallArgs
    extends PackageManagerService.InstallArgs
  {
    private File codeFile;
    private File resourceFile;
    
    MoveInstallArgs(PackageManagerService.InstallParams paramInstallParams)
    {
      super(paramInstallParams.move, paramInstallParams.observer, paramInstallParams.installFlags, paramInstallParams.installerPackageName, paramInstallParams.volumeUuid, paramInstallParams.getUser(), null, paramInstallParams.packageAbiOverride, paramInstallParams.grantedRuntimePermissions, paramInstallParams.traceMethod, paramInstallParams.traceCookie, paramInstallParams.certificates);
    }
    
    private boolean cleanUp(String paramString)
    {
      File localFile = new File(Environment.getDataAppDirectory(paramString), this.move.dataAppName);
      Slog.d("PackageManager", "Cleaning up " + this.move.packageName + " on " + paramString);
      int[] arrayOfInt = PackageManagerService.sUserManager.getUserIds();
      synchronized (PackageManagerService.this.mInstallLock)
      {
        int j = arrayOfInt.length;
        int i = 0;
        for (;;)
        {
          if (i < j)
          {
            int k = arrayOfInt[i];
            try
            {
              PackageManagerService.this.mInstaller.destroyAppData(paramString, this.move.packageName, k, 3, 0L);
              i += 1;
            }
            catch (InstallerConnection.InstallerException localInstallerException)
            {
              for (;;)
              {
                Slog.w("PackageManager", String.valueOf(localInstallerException));
              }
            }
          }
        }
      }
      PackageManagerService.this.removeCodePathLI(localFile);
      return true;
    }
    
    void cleanUpResourcesLI()
    {
      throw new UnsupportedOperationException();
    }
    
    int copyApk(IMediaContainerService arg1, boolean paramBoolean)
    {
      if (PackageManagerService.DEBUG_INSTALL) {
        Slog.d("PackageManager", "Moving " + this.move.packageName + " from " + this.move.fromUuid + " to " + this.move.toUuid);
      }
      synchronized (PackageManagerService.this.mInstaller)
      {
        try
        {
          PackageManagerService.this.mInstaller.moveCompleteApp(this.move.fromUuid, this.move.toUuid, this.move.packageName, this.move.dataAppName, this.move.appId, this.move.seinfo, this.move.targetSdkVersion);
          this.codeFile = new File(Environment.getDataAppDirectory(this.move.toUuid), this.move.dataAppName);
          this.resourceFile = this.codeFile;
          if (PackageManagerService.DEBUG_INSTALL) {
            Slog.d("PackageManager", "codeFile after move is " + this.codeFile);
          }
          return 1;
        }
        catch (InstallerConnection.InstallerException localInstallerException)
        {
          Slog.w("PackageManager", "Failed to move app", localInstallerException);
          return -110;
        }
      }
    }
    
    boolean doPostDeleteLI(boolean paramBoolean)
    {
      throw new UnsupportedOperationException();
    }
    
    int doPostInstall(int paramInt1, int paramInt2)
    {
      if (paramInt1 == 1)
      {
        cleanUp(this.move.fromUuid);
        return paramInt1;
      }
      cleanUp(this.move.toUuid);
      return paramInt1;
    }
    
    int doPreInstall(int paramInt)
    {
      if (paramInt != 1) {
        cleanUp(this.move.toUuid);
      }
      return paramInt;
    }
    
    boolean doRename(int paramInt, PackageParser.Package paramPackage, String paramString)
    {
      if (paramInt != 1)
      {
        cleanUp(this.move.toUuid);
        return false;
      }
      paramPackage.setApplicationVolumeUuid(paramPackage.volumeUuid);
      paramPackage.setApplicationInfoCodePath(paramPackage.codePath);
      paramPackage.setApplicationInfoBaseCodePath(paramPackage.baseCodePath);
      paramPackage.setApplicationInfoSplitCodePaths(paramPackage.splitCodePaths);
      paramPackage.setApplicationInfoResourcePath(paramPackage.codePath);
      paramPackage.setApplicationInfoBaseResourcePath(paramPackage.baseCodePath);
      paramPackage.setApplicationInfoSplitResourcePaths(paramPackage.splitCodePaths);
      return true;
    }
    
    String getCodePath()
    {
      String str = null;
      if (this.codeFile != null) {
        str = this.codeFile.getAbsolutePath();
      }
      return str;
    }
    
    String getResourcePath()
    {
      String str = null;
      if (this.resourceFile != null) {
        str = this.resourceFile.getAbsolutePath();
      }
      return str;
    }
  }
  
  private static final class OnPermissionChangeListeners
    extends Handler
  {
    private static final int MSG_ON_PERMISSIONS_CHANGED = 1;
    private final RemoteCallbackList<IOnPermissionsChangeListener> mPermissionListeners = new RemoteCallbackList();
    
    public OnPermissionChangeListeners(Looper paramLooper)
    {
      super();
    }
    
    private void handleOnPermissionsChanged(int paramInt)
    {
      int j = this.mPermissionListeners.beginBroadcast();
      int i = 0;
      while (i < j) {
        try
        {
          IOnPermissionsChangeListener localIOnPermissionsChangeListener = (IOnPermissionsChangeListener)this.mPermissionListeners.getBroadcastItem(i);
          try
          {
            localIOnPermissionsChangeListener.onPermissionsChanged(paramInt);
            i += 1;
          }
          catch (RemoteException localRemoteException)
          {
            for (;;)
            {
              Log.e("PackageManager", "Permission listener is dead", localRemoteException);
            }
          }
        }
        finally
        {
          this.mPermissionListeners.finishBroadcast();
        }
      }
    }
    
    public void addListenerLocked(IOnPermissionsChangeListener paramIOnPermissionsChangeListener)
    {
      this.mPermissionListeners.register(paramIOnPermissionsChangeListener);
    }
    
    public void handleMessage(Message paramMessage)
    {
      switch (paramMessage.what)
      {
      default: 
        return;
      }
      handleOnPermissionsChanged(paramMessage.arg1);
    }
    
    public void onPermissionsChanged(int paramInt)
    {
      if (this.mPermissionListeners.getRegisteredCallbackCount() > 0) {
        obtainMessage(1, paramInt, 0).sendToTarget();
      }
    }
    
    public void removeListenerLocked(IOnPermissionsChangeListener paramIOnPermissionsChangeListener)
    {
      this.mPermissionListeners.unregister(paramIOnPermissionsChangeListener);
    }
  }
  
  static class OriginInfo
  {
    final String cid;
    final boolean existing;
    final File file;
    final File resolvedFile;
    final String resolvedPath;
    final boolean staged;
    
    private OriginInfo(File paramFile, String paramString, boolean paramBoolean1, boolean paramBoolean2)
    {
      this.file = paramFile;
      this.cid = paramString;
      this.staged = paramBoolean1;
      this.existing = paramBoolean2;
      if (paramString != null)
      {
        this.resolvedPath = PackageHelper.getSdDir(paramString);
        this.resolvedFile = new File(this.resolvedPath);
        return;
      }
      if (paramFile != null)
      {
        this.resolvedPath = paramFile.getAbsolutePath();
        this.resolvedFile = paramFile;
        return;
      }
      this.resolvedPath = null;
      this.resolvedFile = null;
    }
    
    static OriginInfo fromExistingFile(File paramFile)
    {
      return new OriginInfo(paramFile, null, false, true);
    }
    
    static OriginInfo fromNothing()
    {
      return new OriginInfo(null, null, false, false);
    }
    
    static OriginInfo fromStagedContainer(String paramString)
    {
      return new OriginInfo(null, paramString, true, false);
    }
    
    static OriginInfo fromStagedFile(File paramFile)
    {
      return new OriginInfo(paramFile, null, true, false);
    }
    
    static OriginInfo fromUntrustedFile(File paramFile)
    {
      return new OriginInfo(paramFile, null, false, false);
    }
  }
  
  private class PackageFreezer
    implements AutoCloseable
  {
    private final PackageFreezer[] mChildren;
    private final CloseGuard mCloseGuard = CloseGuard.get();
    private final AtomicBoolean mClosed = new AtomicBoolean();
    private final String mPackageName;
    private final boolean mWeFroze;
    
    public PackageFreezer()
    {
      this.mPackageName = null;
      this.mChildren = null;
      this.mWeFroze = false;
      this.mCloseGuard.open("close");
    }
    
    public PackageFreezer(String paramString1, int paramInt, String paramString2)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        this.mPackageName = paramString1;
        this.mWeFroze = PackageManagerService.this.mFrozenPackages.add(this.mPackageName);
        PackageSetting localPackageSetting = (PackageSetting)PackageManagerService.this.mSettings.mPackages.get(this.mPackageName);
        if (localPackageSetting != null) {
          PackageManagerService.-wrap28(PackageManagerService.this, localPackageSetting.name, localPackageSetting.appId, paramInt, paramString2);
        }
        paramString1 = (PackageParser.Package)PackageManagerService.this.mPackages.get(paramString1);
        int j;
        int i;
        if ((paramString1 != null) && (paramString1.childPackages != null))
        {
          j = paramString1.childPackages.size();
          this.mChildren = new PackageFreezer[j];
          i = 0;
        }
        while (i < j)
        {
          this.mChildren[i] = new PackageFreezer(PackageManagerService.this, ((PackageParser.Package)paramString1.childPackages.get(i)).packageName, paramInt, paramString2);
          i += 1;
          continue;
          this.mChildren = null;
        }
        this.mCloseGuard.open("close");
        return;
      }
    }
    
    public void close()
    {
      int i = 0;
      this.mCloseGuard.close();
      if (this.mClosed.compareAndSet(false, true)) {}
      synchronized (PackageManagerService.this.mPackages)
      {
        if (this.mWeFroze) {
          PackageManagerService.this.mFrozenPackages.remove(this.mPackageName);
        }
        if (this.mChildren != null)
        {
          PackageFreezer[] arrayOfPackageFreezer = this.mChildren;
          int j = arrayOfPackageFreezer.length;
          while (i < j)
          {
            arrayOfPackageFreezer[i].close();
            i += 1;
          }
        }
        return;
      }
    }
    
    protected void finalize()
      throws Throwable
    {
      try
      {
        this.mCloseGuard.warnIfOpen();
        close();
        return;
      }
      finally
      {
        super.finalize();
      }
    }
  }
  
  class PackageHandler
    extends Handler
  {
    private boolean mBound = false;
    final ArrayList<PackageManagerService.HandlerParams> mPendingInstalls = new ArrayList();
    
    PackageHandler(Looper paramLooper)
    {
      super();
    }
    
    private boolean connectToService()
    {
      Intent localIntent = new Intent().setComponent(PackageManagerService.DEFAULT_CONTAINER_COMPONENT);
      Process.setThreadPriority(0);
      if (PackageManagerService.this.mContext.bindServiceAsUser(localIntent, PackageManagerService.-get4(PackageManagerService.this), 1, UserHandle.SYSTEM))
      {
        Process.setThreadPriority(10);
        this.mBound = true;
        return true;
      }
      Process.setThreadPriority(10);
      return false;
    }
    
    private void disconnectService()
    {
      PackageManagerService.-set0(PackageManagerService.this, null);
      this.mBound = false;
      Process.setThreadPriority(0);
      PackageManagerService.this.mContext.unbindService(PackageManagerService.-get4(PackageManagerService.this));
      Process.setThreadPriority(10);
    }
    
    void doHandleMessage(Message arg1)
    {
      int i;
      label556:
      Object localObject1;
      Object localObject7;
      Object localObject9;
      int j;
      label890:
      Object localObject10;
      Object localObject11;
      int k;
      String str;
      switch (???.what)
      {
      case 2: 
      case 4: 
      case 8: 
      default: 
      case 5: 
      case 3: 
      case 10: 
      case 6: 
        do
        {
          do
          {
            do
            {
              do
              {
                do
                {
                  do
                  {
                    return;
                    ??? = (PackageManagerService.HandlerParams)???.obj;
                    i = this.mPendingInstalls.size();
                    if (PackageManagerService.DEBUG_INSTALL) {
                      Slog.i("PackageManager", "init_copy idx=" + i + ": " + ???);
                    }
                    if (!this.mBound)
                    {
                      Trace.asyncTraceBegin(262144L, "bindingMCS", System.identityHashCode(PackageManagerService.this.mHandler));
                      if (!connectToService())
                      {
                        Slog.e("PackageManager", "Failed to bind to media container service");
                        ???.serviceError();
                        Trace.asyncTraceEnd(262144L, "bindingMCS", System.identityHashCode(PackageManagerService.this.mHandler));
                        if (???.traceMethod != null) {
                          Trace.asyncTraceEnd(262144L, ???.traceMethod, ???.traceCookie);
                        }
                        return;
                      }
                      this.mPendingInstalls.add(i, ???);
                      return;
                    }
                    this.mPendingInstalls.add(i, ???);
                  } while (i != 0);
                  PackageManagerService.this.mHandler.sendEmptyMessage(3);
                  return;
                  if (PackageManagerService.DEBUG_INSTALL) {
                    Slog.i("PackageManager", "mcs_bound");
                  }
                  if (???.obj != null)
                  {
                    PackageManagerService.-set0(PackageManagerService.this, (IMediaContainerService)???.obj);
                    Trace.asyncTraceEnd(262144L, "bindingMCS", System.identityHashCode(PackageManagerService.this.mHandler));
                  }
                  if (PackageManagerService.-get3(PackageManagerService.this) == null)
                  {
                    if (!this.mBound)
                    {
                      Slog.e("PackageManager", "Cannot bind to media container service");
                      ??? = this.mPendingInstalls.iterator();
                      if (???.hasNext())
                      {
                        ??? = (PackageManagerService.HandlerParams)???.next();
                        ???.serviceError();
                        Trace.asyncTraceEnd(262144L, "queueInstall", System.identityHashCode(???));
                        if (???.traceMethod != null) {
                          Trace.asyncTraceEnd(262144L, ???.traceMethod, ???.traceCookie);
                        }
                        return;
                      }
                      this.mPendingInstalls.clear();
                      return;
                    }
                    Slog.w("PackageManager", "Waiting to connect to media container service");
                    return;
                  }
                  if (this.mPendingInstalls.size() <= 0) {
                    break;
                  }
                  ??? = (PackageManagerService.HandlerParams)this.mPendingInstalls.get(0);
                } while (??? == null);
                Trace.asyncTraceEnd(262144L, "queueInstall", System.identityHashCode(???));
                Trace.traceBegin(262144L, "startCopy");
                if (???.startCopy())
                {
                  if (this.mPendingInstalls.size() > 0) {
                    this.mPendingInstalls.remove(0);
                  }
                  if (this.mPendingInstalls.size() != 0) {
                    break label556;
                  }
                  if (this.mBound)
                  {
                    removeMessages(6);
                    sendMessageDelayed(obtainMessage(6), 10000L);
                  }
                }
                for (;;)
                {
                  Trace.traceEnd(262144L);
                  return;
                  PackageManagerService.this.mHandler.sendEmptyMessage(3);
                }
                Slog.w("PackageManager", "Empty queue");
                return;
                if (PackageManagerService.DEBUG_INSTALL) {
                  Slog.i("PackageManager", "mcs_reconnect");
                }
              } while (this.mPendingInstalls.size() <= 0);
              if (this.mBound) {
                disconnectService();
              }
            } while (connectToService());
            Slog.e("PackageManager", "Failed to bind to media container service");
            ??? = this.mPendingInstalls.iterator();
            while (???.hasNext())
            {
              localObject1 = (PackageManagerService.HandlerParams)???.next();
              ((PackageManagerService.HandlerParams)localObject1).serviceError();
              Trace.asyncTraceEnd(262144L, "queueInstall", System.identityHashCode(localObject1));
            }
            this.mPendingInstalls.clear();
            return;
            if (PackageManagerService.DEBUG_INSTALL) {
              Slog.i("PackageManager", "mcs_unbind");
            }
            if ((this.mPendingInstalls.size() != 0) || (PackageManagerService.this.mPendingVerification.size() != 0)) {
              break;
            }
          } while (!this.mBound);
          if (PackageManagerService.DEBUG_INSTALL) {
            Slog.i("PackageManager", "calling disconnectService()");
          }
          disconnectService();
          return;
        } while (this.mPendingInstalls.size() <= 0);
        PackageManagerService.this.mHandler.sendEmptyMessage(3);
        return;
      case 11: 
        if (PackageManagerService.DEBUG_INSTALL) {
          Slog.i("PackageManager", "mcs_giveup too many retries");
        }
        Trace.asyncTraceEnd(262144L, "queueInstall", System.identityHashCode((PackageManagerService.HandlerParams)this.mPendingInstalls.remove(0)));
        return;
      case 1: 
        Process.setThreadPriority(0);
        synchronized (PackageManagerService.this.mPackages)
        {
          localObject1 = PackageManagerService.this.mPendingBroadcasts;
          if (localObject1 == null) {
            return;
          }
          int m = PackageManagerService.this.mPendingBroadcasts.size();
          if (m <= 0) {
            return;
          }
          localObject1 = new String[m];
          localObject7 = new ArrayList[m];
          localObject9 = new int[m];
          j = 0;
          i = 0;
          if (i < PackageManagerService.this.mPendingBroadcasts.userIdCount())
          {
            int n = PackageManagerService.this.mPendingBroadcasts.userIdAt(i);
            localObject10 = PackageManagerService.this.mPendingBroadcasts.packagesForUserId(n).entrySet().iterator();
            if ((!((Iterator)localObject10).hasNext()) || (j >= m)) {
              break label2909;
            }
            localObject11 = (Map.Entry)((Iterator)localObject10).next();
            localObject1[j] = ((String)((Map.Entry)localObject11).getKey());
            localObject7[j] = ((ArrayList)((Map.Entry)localObject11).getValue());
            localObject11 = (PackageSetting)PackageManagerService.this.mSettings.mPackages.get(((Map.Entry)localObject11).getKey());
            if (localObject11 == null) {
              break label2903;
            }
            k = UserHandle.getUid(n, ((PackageSetting)localObject11).appId);
            break;
          }
          PackageManagerService.this.mPendingBroadcasts.clear();
          i = 0;
          if (i < j)
          {
            PackageManagerService.-wrap42(PackageManagerService.this, localObject1[i], true, localObject7[i], localObject9[i]);
            i += 1;
          }
        }
        Process.setThreadPriority(10);
        return;
      case 7: 
        Process.setThreadPriority(0);
        str = (String)???.obj;
        i = ???.arg1;
        if (???.arg2 == 0) {}
        break;
      }
      for (boolean bool1 = true;; bool1 = false)
      {
        ??? = PackageManagerService.this.mPackages;
        if (i == -1) {}
        try
        {
          localObject7 = PackageManagerService.sUserManager.getUserIds();
          i = 0;
          j = localObject7.length;
          while (i < j)
          {
            k = localObject7[i];
            PackageManagerService.this.mSettings.addPackageToCleanLPw(new PackageCleanItem(k, str, bool1));
            i += 1;
            continue;
            PackageManagerService.this.mSettings.addPackageToCleanLPw(new PackageCleanItem(i, str, bool1));
          }
          Process.setThreadPriority(10);
          PackageManagerService.this.startCleaningPackages();
          return;
        }
        finally {}
        if (PackageManagerService.DEBUG_INSTALL) {
          Log.v("PackageManager", "Handling post-install for " + ???.arg1);
        }
        localObject7 = (PackageManagerService.PostInstallData)PackageManagerService.this.mRunningInstalls.get(???.arg1);
        PackageManagerService.InstallArgs localInstallArgs;
        boolean bool2;
        label1353:
        boolean bool3;
        if (???.arg2 != 0)
        {
          bool1 = true;
          PackageManagerService.this.mRunningInstalls.delete(???.arg1);
          if (localObject7 == null) {
            break label1733;
          }
          localInstallArgs = ((PackageManagerService.PostInstallData)localObject7).args;
          localObject7 = ((PackageManagerService.PostInstallData)localObject7).res;
          if ((localInstallArgs.installFlags & 0x100) == 0) {
            break label1479;
          }
          bool2 = true;
          if ((localInstallArgs.installFlags & 0x1000) != 0) {
            break label1485;
          }
          bool3 = true;
          label1368:
          localObject9 = localInstallArgs.installGrantPermissions;
          PackageManagerService.-wrap26(PackageManagerService.this, (PackageManagerService.PackageInstalledInfo)localObject7, bool2, bool3, (String[])localObject9, bool1, localInstallArgs.installerPackageName, localInstallArgs.observer);
          if (((PackageManagerService.PackageInstalledInfo)localObject7).addedChildPackages == null) {
            break label1491;
          }
        }
        label1479:
        label1485:
        label1491:
        for (i = ((PackageManagerService.PackageInstalledInfo)localObject7).addedChildPackages.size();; i = 0)
        {
          j = 0;
          while (j < i)
          {
            localObject10 = (PackageManagerService.PackageInstalledInfo)((PackageManagerService.PackageInstalledInfo)localObject7).addedChildPackages.valueAt(j);
            PackageManagerService.-wrap26(PackageManagerService.this, (PackageManagerService.PackageInstalledInfo)localObject10, bool2, bool3, (String[])localObject9, false, localInstallArgs.installerPackageName, localInstallArgs.observer);
            j += 1;
          }
          bool1 = false;
          break;
          bool2 = false;
          break label1353;
          bool3 = false;
          break label1368;
        }
        try
        {
          localObject9 = ((PackageManagerService.PackageInstalledInfo)localObject7).pkg.applicationInfo.packageName;
          if (OpFeatures.isSupport(new int[] { 12 }))
          {
            bool1 = ((String)localObject9).startsWith("com.cttl");
            if (!bool1) {
              break label1576;
            }
          }
        }
        catch (Exception localException)
        {
          for (;;)
          {
            Slog.i("PackageManager", "error while grant permission");
            localException.printStackTrace();
            continue;
            PackageManagerService.-wrap25(PackageManagerService.this, localException.pkg, localException.newUsers, (String[])((ArrayList)localObject9).toArray(new String[0]));
          }
        }
        if (localInstallArgs.traceMethod != null) {
          Trace.asyncTraceEnd(262144L, localInstallArgs.traceMethod, localInstallArgs.traceCookie);
        }
        for (;;)
        {
          Trace.asyncTraceEnd(262144L, "postInstall", ???.arg1);
          return;
          label1576:
          if ((((PackageManagerService.PackageInstalledInfo)localObject7).pkg.applicationInfo.targetSdkVersion <= 22) || (((PackageManagerService.PackageInstalledInfo)localObject7).pkg.requestedPermissions == null) || (((PackageManagerService.PackageInstalledInfo)localObject7).pkg.requestedPermissions.size() <= 0)) {
            break;
          }
          localObject9 = new ArrayList();
          localObject10 = ((PackageManagerService.PackageInstalledInfo)localObject7).pkg.requestedPermissions.iterator();
          while (((Iterator)localObject10).hasNext())
          {
            localObject11 = (String)((Iterator)localObject10).next();
            if (Permission.isCTADefaultGrantedForSDK23((String)localObject11)) {
              ((ArrayList)localObject9).add(localObject11);
            }
          }
          label1733:
          Slog.e("PackageManager", "Bogus post-install token " + ???.arg1);
        }
        if (???.arg1 == 1)
        {
          i = 1;
          label1775:
          if (???.arg2 != 1) {
            break label1847;
          }
        }
        label1847:
        for (j = 1;; j = 0)
        {
          if (j != 0) {
            Runtime.getRuntime().gc();
          }
          if (???.obj != null)
          {
            ??? = (Set)???.obj;
            PackageManagerService.-wrap43(PackageManagerService.this, ???);
          }
          if (i == 0) {
            break;
          }
          try
          {
            PackageHelper.getMountService().finishMediaUpdate();
            return;
          }
          catch (RemoteException ???)
          {
            Log.e("PackageManager", "MountService not running?");
            return;
          }
          i = 0;
          break label1775;
        }
        Process.setThreadPriority(0);
        synchronized (PackageManagerService.this.mPackages)
        {
          removeMessages(13);
          removeMessages(14);
          PackageManagerService.this.mSettings.writeLPr();
          PackageManagerService.-get6(PackageManagerService.this).clear();
          Process.setThreadPriority(10);
          return;
        }
        Process.setThreadPriority(0);
        synchronized (PackageManagerService.this.mPackages)
        {
          removeMessages(14);
          Iterator localIterator = PackageManagerService.-get6(PackageManagerService.this).iterator();
          if (localIterator.hasNext())
          {
            i = ((Integer)localIterator.next()).intValue();
            PackageManagerService.this.mSettings.writePackageRestrictionsLPr(i);
          }
        }
        PackageManagerService.-get6(PackageManagerService.this).clear();
        Process.setThreadPriority(10);
        return;
        Process.setThreadPriority(0);
        synchronized (PackageManagerService.this.mPackages)
        {
          removeMessages(19);
          PackageManagerService.this.mSettings.writePackageListLPr(???.arg1);
          Process.setThreadPriority(10);
          return;
        }
        k = ???.arg1;
        ??? = (PackageVerificationState)PackageManagerService.this.mPendingVerification.get(k);
        if ((??? == null) || (((PackageVerificationState)???).timeoutExtended())) {
          break;
        }
        ??? = ((PackageVerificationState)???).getInstallArgs();
        Object localObject8 = Uri.fromFile(???.origin.resolvedFile);
        Slog.i("PackageManager", "Verification timed out for " + localObject8);
        PackageManagerService.this.mPendingVerification.remove(k);
        i = -22;
        if (PackageManagerService.-wrap12(PackageManagerService.this) == 1)
        {
          Slog.i("PackageManager", "Continuing with installation of " + localObject8);
          ((PackageVerificationState)???).setVerifierResponse(Binder.getCallingUid(), 2);
          PackageManagerService.-wrap20(PackageManagerService.this, k, (Uri)localObject8, 1, ((PackageVerificationState)???).getInstallArgs().getUser());
        }
        for (;;)
        {
          try
          {
            j = ???.copyApk(PackageManagerService.-get3(PackageManagerService.this), true);
            i = j;
          }
          catch (RemoteException localRemoteException1)
          {
            Slog.e("PackageManager", "Could not contact the ContainerService");
            continue;
          }
          Trace.asyncTraceEnd(262144L, "verification", k);
          PackageManagerService.-wrap34(PackageManagerService.this, ???, i);
          PackageManagerService.this.mHandler.sendEmptyMessage(6);
          return;
          PackageManagerService.-wrap20(PackageManagerService.this, k, (Uri)localObject8, -1, localRemoteException1.getInstallArgs().getUser());
        }
        k = ???.arg1;
        PackageVerificationState localPackageVerificationState = (PackageVerificationState)PackageManagerService.this.mPendingVerification.get(k);
        if (localPackageVerificationState == null)
        {
          Slog.w("PackageManager", "Invalid verification token " + k + " received");
          return;
        }
        localObject8 = (PackageVerificationResponse)???.obj;
        localPackageVerificationState.setVerifierResponse(((PackageVerificationResponse)localObject8).callerUid, ((PackageVerificationResponse)localObject8).code);
        if (!localPackageVerificationState.isVerificationComplete()) {
          break;
        }
        PackageManagerService.this.mPendingVerification.remove(k);
        ??? = localPackageVerificationState.getInstallArgs();
        localObject9 = Uri.fromFile(???.origin.resolvedFile);
        if (localPackageVerificationState.isInstallAllowed())
        {
          i = -110;
          PackageManagerService.-wrap20(PackageManagerService.this, k, (Uri)localObject9, ((PackageVerificationResponse)localObject8).code, localPackageVerificationState.getInstallArgs().getUser());
        }
        for (;;)
        {
          try
          {
            j = ???.copyApk(PackageManagerService.-get3(PackageManagerService.this), true);
            i = j;
          }
          catch (RemoteException localRemoteException2)
          {
            Slog.e("PackageManager", "Could not contact the ContainerService");
            continue;
          }
          Trace.asyncTraceEnd(262144L, "verification", k);
          PackageManagerService.-wrap34(PackageManagerService.this, ???, i);
          PackageManagerService.this.mHandler.sendEmptyMessage(6);
          return;
          i = -22;
        }
        ??? = (PackageManagerService.IFVerificationParams)???.obj;
        PackageManagerService.-wrap47(PackageManagerService.this, ???.userId, ???.verifierUid, ???.replacing, ???.pkg);
        return;
        i = ???.arg1;
        IntentFilterVerificationState localIntentFilterVerificationState = (IntentFilterVerificationState)PackageManagerService.this.mIntentFilterVerificationStates.get(i);
        if (localIntentFilterVerificationState == null)
        {
          Slog.w("PackageManager", "Invalid IntentFilter verification token " + i + " received");
          return;
        }
        j = localIntentFilterVerificationState.getUserId();
        if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
          Slog.d("PackageManager", "Processing IntentFilter verification with token:" + i + " and userId:" + j);
        }
        ??? = (IntentFilterVerificationResponse)???.obj;
        localIntentFilterVerificationState.setVerifierResponse(???.callerUid, ???.code);
        if (PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
          Slog.d("PackageManager", "IntentFilter verification with token:" + i + " and userId:" + j + " is settings verifier response with response code:" + ???.code);
        }
        if ((???.code == -1) && (PackageManagerService.DEBUG_DOMAIN_VERIFICATION)) {
          Slog.d("PackageManager", "Domains failing verification: " + ???.getFailedDomainsString());
        }
        if (localIntentFilterVerificationState.isVerificationComplete())
        {
          PackageManagerService.-get7(PackageManagerService.this).receiveVerificationResponse(i);
          return;
        }
        if (!PackageManagerService.DEBUG_DOMAIN_VERIFICATION) {
          break;
        }
        Slog.d("PackageManager", "IntentFilter verification with token:" + i + " was not said to be complete");
        return;
        ??? = new ConfigGrabber(PackageManagerService.this.mContext, PackageManagerService.-get1());
        PackageManagerService.-wrap39(PackageManagerService.this, ???.grabConfig());
        return;
        for (;;)
        {
          localObject9[j] = k;
          j += 1;
          break;
          label2903:
          k = -1;
        }
        label2909:
        i += 1;
        break label890;
      }
    }
    
    public void handleMessage(Message paramMessage)
    {
      try
      {
        doHandleMessage(paramMessage);
        return;
      }
      finally
      {
        Process.setThreadPriority(10);
      }
    }
  }
  
  static class PackageInstalledInfo
  {
    ArrayMap<String, PackageInstalledInfo> addedChildPackages;
    String name;
    int[] newUsers;
    String origPackage;
    String origPermission;
    int[] origUsers;
    PackageParser.Package pkg;
    PackageManagerService.PackageRemovedInfo removedInfo;
    int returnCode;
    String returnMsg;
    int uid;
    
    private void setReturnMessage(String paramString)
    {
      this.returnMsg = paramString;
      if (this.addedChildPackages != null) {}
      for (int i = this.addedChildPackages.size();; i = 0)
      {
        int j = 0;
        while (j < i)
        {
          ((PackageInstalledInfo)this.addedChildPackages.valueAt(j)).returnMsg = paramString;
          j += 1;
        }
      }
    }
    
    public void setError(int paramInt, String paramString)
    {
      setReturnCode(paramInt);
      setReturnMessage(paramString);
      Slog.w("PackageManager", paramString);
    }
    
    public void setError(String paramString, PackageParser.PackageParserException paramPackageParserException)
    {
      setReturnCode(paramPackageParserException.error);
      setReturnMessage(ExceptionUtils.getCompleteMessage(paramString, paramPackageParserException));
      Slog.w("PackageManager", paramString, paramPackageParserException);
    }
    
    public void setError(String paramString, PackageManagerException paramPackageManagerException)
    {
      this.returnCode = paramPackageManagerException.error;
      setReturnMessage(ExceptionUtils.getCompleteMessage(paramString, paramPackageManagerException));
      Slog.w("PackageManager", paramString, paramPackageManagerException);
    }
    
    public void setReturnCode(int paramInt)
    {
      this.returnCode = paramInt;
      if (this.addedChildPackages != null) {}
      for (int i = this.addedChildPackages.size();; i = 0)
      {
        int j = 0;
        while (j < i)
        {
          ((PackageInstalledInfo)this.addedChildPackages.valueAt(j)).returnCode = paramInt;
          j += 1;
        }
      }
    }
  }
  
  private class PackageManagerInternalImpl
    extends PackageManagerInternal
  {
    private PackageManagerInternalImpl() {}
    
    public ApplicationInfo getApplicationInfo(String paramString, int paramInt)
    {
      return PackageManagerService.this.getApplicationInfo(paramString, 0, paramInt);
    }
    
    public ComponentName getHomeActivitiesAsUser(List<ResolveInfo> paramList, int paramInt)
    {
      return PackageManagerService.this.getHomeActivitiesAsUser(paramList, paramInt);
    }
    
    public void grantDefaultPermissionsToDefaultDialerApp(String paramString, int paramInt)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mSettings.setDefaultDialerPackageNameLPw(paramString, paramInt);
        PackageManagerService.this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultDialerAppLPr(paramString, paramInt);
        return;
      }
    }
    
    public void grantDefaultPermissionsToDefaultSimCallManager(String paramString, int paramInt)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSimCallManagerLPr(paramString, paramInt);
        return;
      }
    }
    
    public void grantDefaultPermissionsToDefaultSmsApp(String paramString, int paramInt)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSmsAppLPr(paramString, paramInt);
        return;
      }
    }
    
    public boolean isPackageDataProtected(int paramInt, String paramString)
    {
      return PackageManagerService.this.mProtectedPackages.isPackageDataProtected(paramInt, paramString);
    }
    
    public boolean isPermissionsReviewRequired(String paramString, int paramInt)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        boolean bool = Build.PERMISSIONS_REVIEW_REQUIRED;
        if (!bool) {
          return false;
        }
        paramString = (PackageSetting)PackageManagerService.this.mSettings.mPackages.get(paramString);
        if (paramString == null) {
          return false;
        }
        int i = paramString.pkg.applicationInfo.targetSdkVersion;
        if (i >= 23) {
          return false;
        }
        bool = paramString.getPermissionsState().isPermissionReviewRequired(paramInt);
        return bool;
      }
    }
    
    public void setDeviceAndProfileOwnerPackages(int paramInt, String paramString, SparseArray<String> paramSparseArray)
    {
      PackageManagerService.this.mProtectedPackages.setDeviceAndProfileOwnerPackages(paramInt, paramString, paramSparseArray);
    }
    
    public void setDialerAppPackagesProvider(PackageManagerInternal.PackagesProvider paramPackagesProvider)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.setDialerAppPackagesProviderLPw(paramPackagesProvider);
        return;
      }
    }
    
    public void setKeepUninstalledPackages(List<String> paramList)
    {
      Preconditions.checkNotNull(paramList);
      ArrayList localArrayList = null;
      int i;
      label191:
      label194:
      for (;;)
      {
        int j;
        synchronized (PackageManagerService.this.mPackages)
        {
          if (PackageManagerService.-get8(PackageManagerService.this) != null)
          {
            j = PackageManagerService.-get8(PackageManagerService.this).size();
            i = 0;
            localArrayList = null;
            if (i >= j) {}
          }
          try
          {
            str = (String)PackageManagerService.-get8(PackageManagerService.this).get(i);
            if ((paramList != null) && (paramList.contains(str))) {
              break label194;
            }
            if (localArrayList != null) {
              break label191;
            }
            localArrayList = new ArrayList();
          }
          finally
          {
            String str;
            continue;
            continue;
            i += 1;
          }
          localArrayList.add(str);
        }
        PackageManagerService.-set1(PackageManagerService.this, new ArrayList(paramList));
        if (localArrayList != null)
        {
          j = localArrayList.size();
          i = 0;
          while (i < j)
          {
            PackageManagerService.-wrap24(PackageManagerService.this, (String)localArrayList.get(i));
            i += 1;
          }
        }
        return;
      }
    }
    
    public void setLocationPackagesProvider(PackageManagerInternal.PackagesProvider paramPackagesProvider)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.setLocationPackagesProviderLPw(paramPackagesProvider);
        return;
      }
    }
    
    public void setSimCallManagerPackagesProvider(PackageManagerInternal.PackagesProvider paramPackagesProvider)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.setSimCallManagerPackagesProviderLPw(paramPackagesProvider);
        return;
      }
    }
    
    public void setSmsAppPackagesProvider(PackageManagerInternal.PackagesProvider paramPackagesProvider)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.setSmsAppPackagesProviderLPw(paramPackagesProvider);
        return;
      }
    }
    
    public void setSyncAdapterPackagesprovider(PackageManagerInternal.SyncAdapterPackagesProvider paramSyncAdapterPackagesProvider)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.setSyncAdapterPackagesProviderLPw(paramSyncAdapterPackagesProvider);
        return;
      }
    }
    
    public void setVoiceInteractionPackagesProvider(PackageManagerInternal.PackagesProvider paramPackagesProvider)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        PackageManagerService.this.mDefaultPermissionPolicy.setVoiceInteractionPackagesProviderLPw(paramPackagesProvider);
        return;
      }
    }
    
    public boolean wasPackageEverLaunched(String paramString, int paramInt)
    {
      synchronized (PackageManagerService.this.mPackages)
      {
        boolean bool = PackageManagerService.this.mSettings.wasPackageEverLaunchedLPr(paramString, paramInt);
        return bool;
      }
    }
  }
  
  class PackageRemovedInfo
  {
    ArrayMap<String, PackageManagerService.PackageInstalledInfo> appearedChildPackages;
    PackageManagerService.InstallArgs args = null;
    boolean dataRemoved;
    boolean isRemovedPackageSystemUpdate = false;
    boolean isUpdate;
    int[] origUsers;
    int removedAppId = -1;
    ArrayMap<String, PackageRemovedInfo> removedChildPackages;
    boolean removedForAllUsers;
    String removedPackage;
    int[] removedUsers = null;
    int uid = -1;
    
    PackageRemovedInfo() {}
    
    private void sendPackageRemovedBroadcastInternal(boolean paramBoolean)
    {
      Bundle localBundle = new Bundle(2);
      int i;
      if (this.removedAppId >= 0)
      {
        i = this.removedAppId;
        localBundle.putInt("android.intent.extra.UID", i);
        localBundle.putBoolean("android.intent.extra.DATA_REMOVED", this.dataRemoved);
        if (!paramBoolean) {
          break label158;
        }
        paramBoolean = false;
        label44:
        localBundle.putBoolean("android.intent.extra.DONT_KILL_APP", paramBoolean);
        if ((this.isUpdate) || (this.isRemovedPackageSystemUpdate)) {
          localBundle.putBoolean("android.intent.extra.REPLACING", true);
        }
        localBundle.putBoolean("android.intent.extra.REMOVED_FOR_ALL_USERS", this.removedForAllUsers);
        if (this.removedPackage != null)
        {
          PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_REMOVED", this.removedPackage, localBundle, 0, null, null, this.removedUsers);
          if ((this.dataRemoved) && (!this.isRemovedPackageSystemUpdate)) {
            break label163;
          }
        }
      }
      for (;;)
      {
        if (this.removedAppId >= 0) {
          PackageManagerService.this.sendPackageBroadcast("android.intent.action.UID_REMOVED", null, localBundle, 0, null, null, this.removedUsers);
        }
        return;
        i = this.uid;
        break;
        label158:
        paramBoolean = true;
        break label44;
        label163:
        PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_FULLY_REMOVED", this.removedPackage, localBundle, 0, null, null, this.removedUsers);
      }
    }
    
    private void sendSystemPackageUpdatedBroadcastsInternal()
    {
      Bundle localBundle = new Bundle(2);
      if (this.removedAppId >= 0) {}
      for (int i = this.removedAppId;; i = this.uid)
      {
        localBundle.putInt("android.intent.extra.UID", i);
        localBundle.putBoolean("android.intent.extra.REPLACING", true);
        PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_ADDED", this.removedPackage, localBundle, 0, null, null, null);
        PackageManagerService.this.sendPackageBroadcast("android.intent.action.PACKAGE_REPLACED", this.removedPackage, localBundle, 0, null, null, null);
        PackageManagerService.this.sendPackageBroadcast("android.intent.action.MY_PACKAGE_REPLACED", null, null, 0, this.removedPackage, null, null);
        return;
      }
    }
    
    void sendPackageRemovedBroadcasts(boolean paramBoolean)
    {
      sendPackageRemovedBroadcastInternal(paramBoolean);
      if (this.removedChildPackages != null) {}
      for (int i = this.removedChildPackages.size();; i = 0)
      {
        int j = 0;
        while (j < i)
        {
          ((PackageRemovedInfo)this.removedChildPackages.valueAt(j)).sendPackageRemovedBroadcastInternal(paramBoolean);
          j += 1;
        }
      }
    }
    
    void sendSystemPackageAppearedBroadcasts()
    {
      int i;
      int j;
      if (this.appearedChildPackages != null)
      {
        i = this.appearedChildPackages.size();
        j = 0;
      }
      for (;;)
      {
        if (j >= i) {
          return;
        }
        PackageManagerService.PackageInstalledInfo localPackageInstalledInfo = (PackageManagerService.PackageInstalledInfo)this.appearedChildPackages.valueAt(j);
        int[] arrayOfInt = localPackageInstalledInfo.newUsers;
        int k = 0;
        int m = arrayOfInt.length;
        for (;;)
        {
          if (k < m)
          {
            int n = arrayOfInt[k];
            PackageManagerService.-wrap41(PackageManagerService.this, localPackageInstalledInfo.name, true, UserHandle.getAppId(localPackageInstalledInfo.uid), n);
            k += 1;
            continue;
            i = 0;
            break;
          }
        }
        j += 1;
      }
    }
    
    void sendSystemPackageUpdatedBroadcasts()
    {
      if (this.isRemovedPackageSystemUpdate)
      {
        sendSystemPackageUpdatedBroadcastsInternal();
        if (this.removedChildPackages != null) {}
        for (int i = this.removedChildPackages.size();; i = 0)
        {
          int j = 0;
          while (j < i)
          {
            PackageRemovedInfo localPackageRemovedInfo = (PackageRemovedInfo)this.removedChildPackages.valueAt(j);
            if (localPackageRemovedInfo.isRemovedPackageSystemUpdate) {
              localPackageRemovedInfo.sendSystemPackageUpdatedBroadcastsInternal();
            }
            j += 1;
          }
        }
      }
    }
  }
  
  static class PendingPackageBroadcasts
  {
    final SparseArray<ArrayMap<String, ArrayList<String>>> mUidMap = new SparseArray(2);
    
    private ArrayMap<String, ArrayList<String>> getOrAllocate(int paramInt)
    {
      ArrayMap localArrayMap2 = (ArrayMap)this.mUidMap.get(paramInt);
      ArrayMap localArrayMap1 = localArrayMap2;
      if (localArrayMap2 == null)
      {
        localArrayMap1 = new ArrayMap();
        this.mUidMap.put(paramInt, localArrayMap1);
      }
      return localArrayMap1;
    }
    
    public void clear()
    {
      this.mUidMap.clear();
    }
    
    public ArrayList<String> get(int paramInt, String paramString)
    {
      return (ArrayList)getOrAllocate(paramInt).get(paramString);
    }
    
    public ArrayMap<String, ArrayList<String>> packagesForUserId(int paramInt)
    {
      return (ArrayMap)this.mUidMap.get(paramInt);
    }
    
    public void put(int paramInt, String paramString, ArrayList<String> paramArrayList)
    {
      getOrAllocate(paramInt).put(paramString, paramArrayList);
    }
    
    public void remove(int paramInt)
    {
      this.mUidMap.remove(paramInt);
    }
    
    public void remove(int paramInt, String paramString)
    {
      ArrayMap localArrayMap = (ArrayMap)this.mUidMap.get(paramInt);
      if (localArrayMap != null) {
        localArrayMap.remove(paramString);
      }
    }
    
    public int size()
    {
      int j = 0;
      int i = 0;
      while (i < this.mUidMap.size())
      {
        j += ((ArrayMap)this.mUidMap.valueAt(i)).size();
        i += 1;
      }
      return j;
    }
    
    public int userIdAt(int paramInt)
    {
      return this.mUidMap.keyAt(paramInt);
    }
    
    public int userIdCount()
    {
      return this.mUidMap.size();
    }
  }
  
  static class PostInstallData
  {
    public PackageManagerService.InstallArgs args;
    public PackageManagerService.PackageInstalledInfo res;
    
    PostInstallData(PackageManagerService.InstallArgs paramInstallArgs, PackageManagerService.PackageInstalledInfo paramPackageInstalledInfo)
    {
      this.args = paramInstallArgs;
      this.res = paramPackageInstalledInfo;
    }
  }
  
  private final class ProviderIntentResolver
    extends IntentResolver<PackageParser.ProviderIntentInfo, ResolveInfo>
  {
    private int mFlags;
    private final ArrayMap<ComponentName, PackageParser.Provider> mProviders = new ArrayMap();
    
    private ProviderIntentResolver() {}
    
    public final void addProvider(PackageParser.Provider paramProvider)
    {
      if (this.mProviders.containsKey(paramProvider.getComponentName()))
      {
        Slog.w("PackageManager", "Provider " + paramProvider.getComponentName() + " already defined; ignoring");
        return;
      }
      this.mProviders.put(paramProvider.getComponentName(), paramProvider);
      StringBuilder localStringBuilder;
      if (PackageManagerService.DEBUG_SHOW_INFO)
      {
        localStringBuilder = new StringBuilder().append("  ");
        if (paramProvider.info.nonLocalizedLabel == null) {
          break label263;
        }
      }
      label263:
      for (Object localObject = paramProvider.info.nonLocalizedLabel;; localObject = paramProvider.info.name)
      {
        Log.v("PackageManager", localObject + ":");
        Log.v("PackageManager", "    Class=" + paramProvider.info.name);
        int j = paramProvider.intents.size();
        int i = 0;
        while (i < j)
        {
          localObject = (PackageParser.ProviderIntentInfo)paramProvider.intents.get(i);
          if (PackageManagerService.DEBUG_SHOW_INFO)
          {
            Log.v("PackageManager", "    IntentFilter:");
            ((PackageParser.ProviderIntentInfo)localObject).dump(new LogPrinter(2, "PackageManager"), "      ");
          }
          if (!((PackageParser.ProviderIntentInfo)localObject).debugCheck()) {
            Log.w("PackageManager", "==> For Provider " + paramProvider.info.name);
          }
          addFilter((IntentFilter)localObject);
          i += 1;
        }
      }
    }
    
    protected boolean allowFilterResult(PackageParser.ProviderIntentInfo paramProviderIntentInfo, List<ResolveInfo> paramList)
    {
      paramProviderIntentInfo = paramProviderIntentInfo.provider.info;
      int i = paramList.size() - 1;
      while (i >= 0)
      {
        ProviderInfo localProviderInfo = ((ResolveInfo)paramList.get(i)).providerInfo;
        if ((localProviderInfo.name == paramProviderIntentInfo.name) && (localProviderInfo.packageName == paramProviderIntentInfo.packageName)) {
          return false;
        }
        i -= 1;
      }
      return true;
    }
    
    protected void dumpFilter(PrintWriter paramPrintWriter, String paramString, PackageParser.ProviderIntentInfo paramProviderIntentInfo)
    {
      paramPrintWriter.print(paramString);
      paramPrintWriter.print(Integer.toHexString(System.identityHashCode(paramProviderIntentInfo.provider)));
      paramPrintWriter.print(' ');
      paramProviderIntentInfo.provider.printComponentShortName(paramPrintWriter);
      paramPrintWriter.print(" filter ");
      paramPrintWriter.println(Integer.toHexString(System.identityHashCode(paramProviderIntentInfo)));
    }
    
    protected void dumpFilterLabel(PrintWriter paramPrintWriter, String paramString, Object paramObject, int paramInt)
    {
      paramObject = (PackageParser.Provider)paramObject;
      paramPrintWriter.print(paramString);
      paramPrintWriter.print(Integer.toHexString(System.identityHashCode(paramObject)));
      paramPrintWriter.print(' ');
      ((PackageParser.Provider)paramObject).printComponentShortName(paramPrintWriter);
      if (paramInt > 1)
      {
        paramPrintWriter.print(" (");
        paramPrintWriter.print(paramInt);
        paramPrintWriter.print(" filters)");
      }
      paramPrintWriter.println();
    }
    
    protected Object filterToLabel(PackageParser.ProviderIntentInfo paramProviderIntentInfo)
    {
      return paramProviderIntentInfo.provider;
    }
    
    protected boolean isFilterStopped(PackageParser.ProviderIntentInfo paramProviderIntentInfo, int paramInt)
    {
      boolean bool = false;
      if (!PackageManagerService.sUserManager.exists(paramInt)) {
        return true;
      }
      paramProviderIntentInfo = paramProviderIntentInfo.provider.owner;
      if (paramProviderIntentInfo != null)
      {
        paramProviderIntentInfo = (PackageSetting)paramProviderIntentInfo.mExtras;
        if (paramProviderIntentInfo != null)
        {
          if ((paramProviderIntentInfo.pkgFlags & 0x1) == 0) {
            bool = paramProviderIntentInfo.getStopped(paramInt);
          }
          return bool;
        }
      }
      return false;
    }
    
    protected boolean isPackageForFilter(String paramString, PackageParser.ProviderIntentInfo paramProviderIntentInfo)
    {
      return paramString.equals(paramProviderIntentInfo.provider.owner.packageName);
    }
    
    protected PackageParser.ProviderIntentInfo[] newArray(int paramInt)
    {
      return new PackageParser.ProviderIntentInfo[paramInt];
    }
    
    protected ResolveInfo newResult(PackageParser.ProviderIntentInfo paramProviderIntentInfo, int paramInt1, int paramInt2)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      if (!PackageManagerService.this.mSettings.isEnabledAndMatchLPr(paramProviderIntentInfo.provider.info, this.mFlags, paramInt2)) {
        return null;
      }
      PackageParser.Provider localProvider = paramProviderIntentInfo.provider;
      Object localObject = (PackageSetting)localProvider.owner.mExtras;
      if (localObject == null) {
        return null;
      }
      localObject = PackageParser.generateProviderInfo(localProvider, this.mFlags, ((PackageSetting)localObject).readUserState(paramInt2), paramInt2);
      if (localObject == null) {
        return null;
      }
      ResolveInfo localResolveInfo = new ResolveInfo();
      localResolveInfo.providerInfo = ((ProviderInfo)localObject);
      if ((this.mFlags & 0x40) != 0) {
        localResolveInfo.filter = paramProviderIntentInfo;
      }
      localResolveInfo.priority = paramProviderIntentInfo.getPriority();
      localResolveInfo.preferredOrder = localProvider.owner.mPreferredOrder;
      localResolveInfo.match = paramInt1;
      localResolveInfo.isDefault = paramProviderIntentInfo.hasDefault;
      localResolveInfo.labelRes = paramProviderIntentInfo.labelRes;
      localResolveInfo.nonLocalizedLabel = paramProviderIntentInfo.nonLocalizedLabel;
      localResolveInfo.icon = paramProviderIntentInfo.icon;
      localResolveInfo.system = localResolveInfo.providerInfo.applicationInfo.isSystemApp();
      return localResolveInfo;
    }
    
    public List<ResolveInfo> queryIntent(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
    {
      boolean bool = false;
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      this.mFlags = paramInt1;
      if ((0x10000 & paramInt1) != 0) {
        bool = true;
      }
      return super.queryIntent(paramIntent, paramString, bool, paramInt2);
    }
    
    public List<ResolveInfo> queryIntent(Intent paramIntent, String paramString, boolean paramBoolean, int paramInt)
    {
      if (paramBoolean) {}
      for (int i = 65536;; i = 0)
      {
        this.mFlags = i;
        return super.queryIntent(paramIntent, paramString, paramBoolean, paramInt);
      }
    }
    
    public List<ResolveInfo> queryIntentForPackage(Intent paramIntent, String paramString, int paramInt1, ArrayList<PackageParser.Provider> paramArrayList, int paramInt2)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      if (paramArrayList == null) {
        return null;
      }
      this.mFlags = paramInt1;
      if ((0x10000 & paramInt1) != 0) {}
      ArrayList localArrayList1;
      for (boolean bool = true;; bool = false)
      {
        int i = paramArrayList.size();
        localArrayList1 = new ArrayList(i);
        paramInt1 = 0;
        while (paramInt1 < i)
        {
          ArrayList localArrayList2 = ((PackageParser.Provider)paramArrayList.get(paramInt1)).intents;
          if ((localArrayList2 != null) && (localArrayList2.size() > 0))
          {
            PackageParser.ProviderIntentInfo[] arrayOfProviderIntentInfo = new PackageParser.ProviderIntentInfo[localArrayList2.size()];
            localArrayList2.toArray(arrayOfProviderIntentInfo);
            localArrayList1.add(arrayOfProviderIntentInfo);
          }
          paramInt1 += 1;
        }
      }
      return super.queryIntentFromList(paramIntent, paramString, bool, localArrayList1, paramInt2);
    }
    
    public final void removeProvider(PackageParser.Provider paramProvider)
    {
      this.mProviders.remove(paramProvider.getComponentName());
      StringBuilder localStringBuilder;
      if (PackageManagerService.DEBUG_SHOW_INFO)
      {
        localStringBuilder = new StringBuilder().append("  ");
        if (paramProvider.info.nonLocalizedLabel == null) {
          break label175;
        }
      }
      label175:
      for (Object localObject = paramProvider.info.nonLocalizedLabel;; localObject = paramProvider.info.name)
      {
        Log.v("PackageManager", localObject + ":");
        Log.v("PackageManager", "    Class=" + paramProvider.info.name);
        int j = paramProvider.intents.size();
        int i = 0;
        while (i < j)
        {
          localObject = (PackageParser.ProviderIntentInfo)paramProvider.intents.get(i);
          if (PackageManagerService.DEBUG_SHOW_INFO)
          {
            Log.v("PackageManager", "    IntentFilter:");
            ((PackageParser.ProviderIntentInfo)localObject).dump(new LogPrinter(2, "PackageManager"), "      ");
          }
          removeFilter((IntentFilter)localObject);
          i += 1;
        }
      }
    }
    
    protected void sortResults(List<ResolveInfo> paramList)
    {
      Collections.sort(paramList, PackageManagerService.-get13());
    }
  }
  
  private final class ServiceIntentResolver
    extends IntentResolver<PackageParser.ServiceIntentInfo, ResolveInfo>
  {
    private int mFlags;
    private final ArrayMap<ComponentName, PackageParser.Service> mServices = new ArrayMap();
    
    private ServiceIntentResolver() {}
    
    public final void addService(PackageParser.Service paramService)
    {
      this.mServices.put(paramService.getComponentName(), paramService);
      StringBuilder localStringBuilder;
      if (PackageManagerService.DEBUG_SHOW_INFO)
      {
        localStringBuilder = new StringBuilder().append("  ");
        if (paramService.info.nonLocalizedLabel == null) {
          break label215;
        }
      }
      label215:
      for (Object localObject = paramService.info.nonLocalizedLabel;; localObject = paramService.info.name)
      {
        Log.v("PackageManager", localObject + ":");
        Log.v("PackageManager", "    Class=" + paramService.info.name);
        int j = paramService.intents.size();
        int i = 0;
        while (i < j)
        {
          localObject = (PackageParser.ServiceIntentInfo)paramService.intents.get(i);
          if (PackageManagerService.DEBUG_SHOW_INFO)
          {
            Log.v("PackageManager", "    IntentFilter:");
            ((PackageParser.ServiceIntentInfo)localObject).dump(new LogPrinter(2, "PackageManager"), "      ");
          }
          if (!((PackageParser.ServiceIntentInfo)localObject).debugCheck()) {
            Log.w("PackageManager", "==> For Service " + paramService.info.name);
          }
          addFilter((IntentFilter)localObject);
          i += 1;
        }
      }
    }
    
    protected boolean allowFilterResult(PackageParser.ServiceIntentInfo paramServiceIntentInfo, List<ResolveInfo> paramList)
    {
      paramServiceIntentInfo = paramServiceIntentInfo.service.info;
      int i = paramList.size() - 1;
      while (i >= 0)
      {
        ServiceInfo localServiceInfo = ((ResolveInfo)paramList.get(i)).serviceInfo;
        if ((localServiceInfo.name == paramServiceIntentInfo.name) && (localServiceInfo.packageName == paramServiceIntentInfo.packageName)) {
          return false;
        }
        i -= 1;
      }
      return true;
    }
    
    protected void dumpFilter(PrintWriter paramPrintWriter, String paramString, PackageParser.ServiceIntentInfo paramServiceIntentInfo)
    {
      paramPrintWriter.print(paramString);
      paramPrintWriter.print(Integer.toHexString(System.identityHashCode(paramServiceIntentInfo.service)));
      paramPrintWriter.print(' ');
      paramServiceIntentInfo.service.printComponentShortName(paramPrintWriter);
      paramPrintWriter.print(" filter ");
      paramPrintWriter.println(Integer.toHexString(System.identityHashCode(paramServiceIntentInfo)));
    }
    
    protected void dumpFilterLabel(PrintWriter paramPrintWriter, String paramString, Object paramObject, int paramInt)
    {
      paramObject = (PackageParser.Service)paramObject;
      paramPrintWriter.print(paramString);
      paramPrintWriter.print(Integer.toHexString(System.identityHashCode(paramObject)));
      paramPrintWriter.print(' ');
      ((PackageParser.Service)paramObject).printComponentShortName(paramPrintWriter);
      if (paramInt > 1)
      {
        paramPrintWriter.print(" (");
        paramPrintWriter.print(paramInt);
        paramPrintWriter.print(" filters)");
      }
      paramPrintWriter.println();
    }
    
    protected Object filterToLabel(PackageParser.ServiceIntentInfo paramServiceIntentInfo)
    {
      return paramServiceIntentInfo.service;
    }
    
    protected boolean isFilterStopped(PackageParser.ServiceIntentInfo paramServiceIntentInfo, int paramInt)
    {
      boolean bool = false;
      if (!PackageManagerService.sUserManager.exists(paramInt)) {
        return true;
      }
      paramServiceIntentInfo = paramServiceIntentInfo.service.owner;
      if (paramServiceIntentInfo != null)
      {
        paramServiceIntentInfo = (PackageSetting)paramServiceIntentInfo.mExtras;
        if (paramServiceIntentInfo != null)
        {
          if ((paramServiceIntentInfo.pkgFlags & 0x1) == 0) {
            bool = paramServiceIntentInfo.getStopped(paramInt);
          }
          return bool;
        }
      }
      return false;
    }
    
    protected boolean isPackageForFilter(String paramString, PackageParser.ServiceIntentInfo paramServiceIntentInfo)
    {
      return paramString.equals(paramServiceIntentInfo.service.owner.packageName);
    }
    
    protected PackageParser.ServiceIntentInfo[] newArray(int paramInt)
    {
      return new PackageParser.ServiceIntentInfo[paramInt];
    }
    
    protected ResolveInfo newResult(PackageParser.ServiceIntentInfo paramServiceIntentInfo, int paramInt1, int paramInt2)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      if (!PackageManagerService.this.mSettings.isEnabledAndMatchLPr(paramServiceIntentInfo.service.info, this.mFlags, paramInt2)) {
        return null;
      }
      PackageParser.Service localService = paramServiceIntentInfo.service;
      Object localObject = (PackageSetting)localService.owner.mExtras;
      if (localObject == null) {
        return null;
      }
      localObject = PackageParser.generateServiceInfo(localService, this.mFlags, ((PackageSetting)localObject).readUserState(paramInt2), paramInt2);
      if (localObject == null) {
        return null;
      }
      ResolveInfo localResolveInfo = new ResolveInfo();
      localResolveInfo.serviceInfo = ((ServiceInfo)localObject);
      if ((this.mFlags & 0x40) != 0) {
        localResolveInfo.filter = paramServiceIntentInfo;
      }
      localResolveInfo.priority = paramServiceIntentInfo.getPriority();
      localResolveInfo.preferredOrder = localService.owner.mPreferredOrder;
      localResolveInfo.match = paramInt1;
      localResolveInfo.isDefault = paramServiceIntentInfo.hasDefault;
      localResolveInfo.labelRes = paramServiceIntentInfo.labelRes;
      localResolveInfo.nonLocalizedLabel = paramServiceIntentInfo.nonLocalizedLabel;
      localResolveInfo.icon = paramServiceIntentInfo.icon;
      localResolveInfo.system = localResolveInfo.serviceInfo.applicationInfo.isSystemApp();
      return localResolveInfo;
    }
    
    public List<ResolveInfo> queryIntent(Intent paramIntent, String paramString, int paramInt1, int paramInt2)
    {
      boolean bool = false;
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      this.mFlags = paramInt1;
      if ((0x10000 & paramInt1) != 0) {
        bool = true;
      }
      return super.queryIntent(paramIntent, paramString, bool, paramInt2);
    }
    
    public List<ResolveInfo> queryIntent(Intent paramIntent, String paramString, boolean paramBoolean, int paramInt)
    {
      if (paramBoolean) {}
      for (int i = 65536;; i = 0)
      {
        this.mFlags = i;
        return super.queryIntent(paramIntent, paramString, paramBoolean, paramInt);
      }
    }
    
    public List<ResolveInfo> queryIntentForPackage(Intent paramIntent, String paramString, int paramInt1, ArrayList<PackageParser.Service> paramArrayList, int paramInt2)
    {
      if (!PackageManagerService.sUserManager.exists(paramInt2)) {
        return null;
      }
      if (paramArrayList == null) {
        return null;
      }
      this.mFlags = paramInt1;
      if ((0x10000 & paramInt1) != 0) {}
      ArrayList localArrayList1;
      for (boolean bool = true;; bool = false)
      {
        int i = paramArrayList.size();
        localArrayList1 = new ArrayList(i);
        paramInt1 = 0;
        while (paramInt1 < i)
        {
          ArrayList localArrayList2 = ((PackageParser.Service)paramArrayList.get(paramInt1)).intents;
          if ((localArrayList2 != null) && (localArrayList2.size() > 0))
          {
            PackageParser.ServiceIntentInfo[] arrayOfServiceIntentInfo = new PackageParser.ServiceIntentInfo[localArrayList2.size()];
            localArrayList2.toArray(arrayOfServiceIntentInfo);
            localArrayList1.add(arrayOfServiceIntentInfo);
          }
          paramInt1 += 1;
        }
      }
      return super.queryIntentFromList(paramIntent, paramString, bool, localArrayList1, paramInt2);
    }
    
    public final void removeService(PackageParser.Service paramService)
    {
      this.mServices.remove(paramService.getComponentName());
      StringBuilder localStringBuilder;
      if (PackageManagerService.DEBUG_SHOW_INFO)
      {
        localStringBuilder = new StringBuilder().append("  ");
        if (paramService.info.nonLocalizedLabel == null) {
          break label175;
        }
      }
      label175:
      for (Object localObject = paramService.info.nonLocalizedLabel;; localObject = paramService.info.name)
      {
        Log.v("PackageManager", localObject + ":");
        Log.v("PackageManager", "    Class=" + paramService.info.name);
        int j = paramService.intents.size();
        int i = 0;
        while (i < j)
        {
          localObject = (PackageParser.ServiceIntentInfo)paramService.intents.get(i);
          if (PackageManagerService.DEBUG_SHOW_INFO)
          {
            Log.v("PackageManager", "    IntentFilter:");
            ((PackageParser.ServiceIntentInfo)localObject).dump(new LogPrinter(2, "PackageManager"), "      ");
          }
          removeFilter((IntentFilter)localObject);
          i += 1;
        }
      }
    }
    
    protected void sortResults(List<ResolveInfo> paramList)
    {
      Collections.sort(paramList, PackageManagerService.-get13());
    }
  }
  
  public static final class SharedLibraryEntry
  {
    public final String apk;
    public final String path;
    
    SharedLibraryEntry(String paramString1, String paramString2)
    {
      this.path = paramString1;
      this.apk = paramString2;
    }
  }
  
  static class VerificationInfo
  {
    public static final int NO_UID = -1;
    final int installerUid;
    final int originatingUid;
    final Uri originatingUri;
    final Uri referrer;
    
    VerificationInfo(Uri paramUri1, Uri paramUri2, int paramInt1, int paramInt2)
    {
      this.originatingUri = paramUri1;
      this.referrer = paramUri2;
      this.originatingUid = paramInt1;
      this.installerUid = paramInt2;
    }
  }
}


/* Location:              /Users/joshua/Desktop/system_framework/classes-dex2jar.jar!/com/android/server/pm/PackageManagerService.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */